{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules\\hexo-theme-next\\source\\css\\noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\css\\main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\images\\logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\chat\\chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\chat\\tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\math\\mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\math\\katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\search\\algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\search\\local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\statistics\\firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\statistics\\lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"source\\img\\vim_key_img.png","path":"img/vim_key_img.png","modified":0,"renderable":0},{"_id":"source\\img\\ips-led.png","path":"img/ips-led.png","modified":0,"renderable":0},{"_id":"source\\img\\色域.png","path":"img/色域.png","modified":0,"renderable":0},{"_id":"source\\img\\色域2.png","path":"img/色域2.png","modified":0,"renderable":0},{"_id":"source\\img\\2NF示例表.png","path":"img/2NF示例表.png","modified":0,"renderable":0},{"_id":"source\\img\\3NF.png","path":"img/3NF.png","modified":0,"renderable":0},{"_id":"source\\img\\java.sql.Driver.png","path":"img/java.sql.Driver.png","modified":0,"renderable":0},{"_id":"source\\img\\2NF.png","path":"img/2NF.png","modified":0,"renderable":0},{"_id":"source\\img\\java并发.png","path":"img/java并发.png","modified":0,"renderable":0},{"_id":"source\\img\\java_io.png","path":"img/java_io.png","modified":0,"renderable":0},{"_id":"source\\img\\修剪二叉搜索树2.png","path":"img/修剪二叉搜索树2.png","modified":0,"renderable":0},{"_id":"source\\img\\修剪二叉搜索树1.png","path":"img/修剪二叉搜索树1.png","modified":0,"renderable":0},{"_id":"source\\img\\反射.png","path":"img/反射.png","modified":0,"renderable":0},{"_id":"source\\img\\jdbc.png","path":"img/jdbc.png","modified":0,"renderable":0},{"_id":"source\\img\\数据库连接示意.png","path":"img/数据库连接示意.png","modified":0,"renderable":0},{"_id":"source\\img\\最大子数组和.png","path":"img/最大子数组和.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-后台权限系统的设计以及主流的五种权限模型详解.png","path":"img/权限管理-后台权限系统的设计以及主流的五种权限模型详解.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-RBAC-0.png","path":"img/权限管理-RBAC-0.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-RBAC.png","path":"img/权限管理-RBAC.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-RBAC-1.png","path":"img/权限管理-RBAC-1.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-RBAC-2.png","path":"img/权限管理-RBAC-2.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-用户管理.png","path":"img/权限管理-用户管理.png","modified":0,"renderable":0},{"_id":"source\\img\\权限管理-权限管理.png","path":"img/权限管理-权限管理.png","modified":0,"renderable":0}],"Cache":[{"_id":"source\\_posts\\deploy测试.md","hash":"ff7beee680b8abaeacf7e08c070e96e146266bdf","modified":1718557151816},{"_id":"source\\_posts\\test.md","hash":"23d1eefe4e5d7b54b9c07a3991575836cb0af8ec","modified":1750094348903},{"_id":"source\\_posts\\test2.md","hash":"4cb279a13ed9f71151b2a3641d32ff067f2b7994","modified":1718116940560},{"_id":"source\\_posts\\hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1717351741042},{"_id":"node_modules\\hexo-theme-next\\_vendors.yml","hash":"82dc85404bb716360c136059f8b4ead67f46549c","modified":1717427522267},{"_id":"node_modules\\hexo-theme-next\\package.json","hash":"655accf88e80dfdd525042da1d65114b47dcb52a","modified":1717427522103},{"_id":"node_modules\\hexo-theme-next\\_config.yml","hash":"8cfc97916efdc7cb9acfbe3a653e943a97e54de0","modified":1717427522266},{"_id":"node_modules\\hexo-theme-next\\docs\\AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1717427522105},{"_id":"node_modules\\hexo-theme-next\\LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1717427522108},{"_id":"node_modules\\hexo-theme-next\\README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1717427522112},{"_id":"node_modules\\hexo-theme-next\\languages\\ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1717427522268},{"_id":"node_modules\\hexo-theme-next\\languages\\README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1717427522111},{"_id":"node_modules\\hexo-theme-next\\docs\\LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1717427522264},{"_id":"node_modules\\hexo-theme-next\\docs\\AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1717427522106},{"_id":"node_modules\\hexo-theme-next\\languages\\bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1717427522269},{"_id":"node_modules\\hexo-theme-next\\languages\\en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1717427522270},{"_id":"node_modules\\hexo-theme-next\\languages\\de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1717427522269},{"_id":"node_modules\\hexo-theme-next\\languages\\eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1717427522271},{"_id":"node_modules\\hexo-theme-next\\languages\\es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1717427522273},{"_id":"node_modules\\hexo-theme-next\\languages\\fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1717427522274},{"_id":"node_modules\\hexo-theme-next\\languages\\fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1717427522275},{"_id":"node_modules\\hexo-theme-next\\languages\\id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1717427522276},{"_id":"node_modules\\hexo-theme-next\\languages\\it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1717427522277},{"_id":"node_modules\\hexo-theme-next\\languages\\ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1717427522278},{"_id":"node_modules\\hexo-theme-next\\languages\\ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1717427522279},{"_id":"node_modules\\hexo-theme-next\\languages\\nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1717427522280},{"_id":"node_modules\\hexo-theme-next\\languages\\ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1717427522283},{"_id":"node_modules\\hexo-theme-next\\languages\\pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1717427522281},{"_id":"node_modules\\hexo-theme-next\\languages\\si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1717427522284},{"_id":"node_modules\\hexo-theme-next\\languages\\pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1717427522282},{"_id":"node_modules\\hexo-theme-next\\languages\\th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1717427522285},{"_id":"node_modules\\hexo-theme-next\\languages\\tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1717427522286},{"_id":"node_modules\\hexo-theme-next\\languages\\tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1717427522287},{"_id":"node_modules\\hexo-theme-next\\languages\\uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1717427522288},{"_id":"node_modules\\hexo-theme-next\\languages\\vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1717427522289},{"_id":"node_modules\\hexo-theme-next\\languages\\zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1717427522290},{"_id":"node_modules\\hexo-theme-next\\layout\\_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1717427522113},{"_id":"node_modules\\hexo-theme-next\\languages\\zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1717427522291},{"_id":"node_modules\\hexo-theme-next\\layout\\archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1717427522119},{"_id":"node_modules\\hexo-theme-next\\languages\\zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1717427522292},{"_id":"node_modules\\hexo-theme-next\\layout\\index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1717427522146},{"_id":"node_modules\\hexo-theme-next\\layout\\category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1717427522126},{"_id":"node_modules\\hexo-theme-next\\layout\\page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1717427522159},{"_id":"node_modules\\hexo-theme-next\\layout\\post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1717427522169},{"_id":"node_modules\\hexo-theme-next\\layout\\tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1717427522173},{"_id":"node_modules\\hexo-theme-next\\docs\\zh-CN\\CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1717427522107},{"_id":"node_modules\\hexo-theme-next\\layout\\_macro\\post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1717427522162},{"_id":"node_modules\\hexo-theme-next\\layout\\_macro\\post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1717427522168},{"_id":"node_modules\\hexo-theme-next\\docs\\zh-CN\\CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1717427522108},{"_id":"node_modules\\hexo-theme-next\\docs\\ru\\README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1717427522110},{"_id":"node_modules\\hexo-theme-next\\layout\\_macro\\sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1717427522171},{"_id":"node_modules\\hexo-theme-next\\docs\\zh-CN\\README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1717427522110},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1717427522149},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1717427522130},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1717427522134},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1717427522160},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1717427522178},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1717427522114},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1717427522158},{"_id":"node_modules\\hexo-theme-next\\layout\\_scripts\\index.njk","hash":"7ed1fa981bf4765af092d7b178acbdeeb95d5b20","modified":1717427522141},{"_id":"node_modules\\hexo-theme-next\\layout\\_scripts\\vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1717427522177},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1717427522132},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1717427522066},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1717427522052},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1717427522076},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1717427522080},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1717427522143},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1717427522057},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1717427522092},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1717427522060},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\next-config.js","hash":"ce6bd4054653a4066b19869819a17b568eeee915","modified":1717427522085},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1717427522083},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1717427522085},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1717427522087},{"_id":"node_modules\\hexo-theme-next\\scripts\\helpers\\next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1717427522087},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1717427522040},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1717427522039},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1717427522041},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1717427522067},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\group-pictures.js","hash":"8d205b7ffdaa9a89bb8f75410507ee1bab230f55","modified":1717427522063},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1717427522072},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1717427522073},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1717427522078},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1717427522088},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1717427522090},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1717427522096},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1717427522101},{"_id":"node_modules\\hexo-theme-next\\scripts\\tags\\wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1717427522102},{"_id":"node_modules\\hexo-theme-next\\source\\css\\noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1717427522236},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1717427522170},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1717427522182},{"_id":"node_modules\\hexo-theme-next\\source\\images\\avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1717427522029},{"_id":"node_modules\\hexo-theme-next\\source\\css\\main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1717427522230},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1717427522192},{"_id":"node_modules\\hexo-theme-next\\source\\images\\apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1717427522179},{"_id":"node_modules\\hexo-theme-next\\source\\images\\favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1717427522180},{"_id":"node_modules\\hexo-theme-next\\source\\images\\favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1717427522180},{"_id":"node_modules\\hexo-theme-next\\source\\images\\logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1717427522264},{"_id":"node_modules\\hexo-theme-next\\source\\images\\logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1717427522263},{"_id":"node_modules\\hexo-theme-next\\source\\js\\comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1717427522047},{"_id":"node_modules\\hexo-theme-next\\source\\js\\bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1717427522038},{"_id":"node_modules\\hexo-theme-next\\source\\js\\motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1717427522081},{"_id":"node_modules\\hexo-theme-next\\source\\js\\config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1717427522050},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\head\\head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1717427522137},{"_id":"node_modules\\hexo-theme-next\\source\\js\\pjax.js","hash":"adc751f9b63b7a6b4d381506d35a1b3ff4de891f","modified":1717427522091},{"_id":"node_modules\\hexo-theme-next\\source\\js\\sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1717427522095},{"_id":"node_modules\\hexo-theme-next\\source\\js\\next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1717427522084},{"_id":"node_modules\\hexo-theme-next\\source\\js\\comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1717427522046},{"_id":"node_modules\\hexo-theme-next\\source\\js\\schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1717427522094},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\head\\head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1717427522138},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\header\\index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1717427522139},{"_id":"node_modules\\hexo-theme-next\\source\\js\\utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1717427522099},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\header\\brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1717427522122},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\header\\sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1717427522173},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\page\\categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1717427522125},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\page\\breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1717427522123},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\page\\page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1717427522159},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\page\\schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1717427522170},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\page\\tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1717427522174},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\search\\index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1717427522140},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\search\\algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1717427522116},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\header\\menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1717427522155},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\header\\menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1717427522156},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\search\\localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1717427522152},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\sidebar\\site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1717427522172},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1717427522163},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1717427522164},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1717427522166},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1717427522167},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1717427522165},{"_id":"node_modules\\hexo-theme-next\\layout\\_partials\\post\\post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1717427522167},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1717427522128},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1717427522136},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1717427522120},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1717427522142},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1717427522136},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1717427522154},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1717427522161},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1717427522175},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\chat\\chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1717427522128},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\analytics\\microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1717427522157},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1717427522131},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1717427522126},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\chat\\tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1717427522175},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1717427522130},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1717427522135},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1717427522151},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1717427522147},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\math\\index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1717427522144},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\math\\mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1717427522153},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\comments\\utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1717427522176},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\math\\katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1717427522148},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\search\\algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1717427522118},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\statistics\\index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1717427522145},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\search\\localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1717427522152},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\statistics\\busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1717427522124},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\statistics\\firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1717427522133},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1717427522049},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\highlight.js","hash":"8300553bf2a1c4bfaec76f2da56465016e9d8058","modified":1717427522064},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1717427522067},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1717427522082},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1717427522097},{"_id":"node_modules\\hexo-theme-next\\scripts\\events\\lib\\vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1717427522101},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1717427522043},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1717427522048},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1717427522051},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1717427522053},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1717427522055},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1717427522060},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\statistics\\lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1717427522150},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1717427522074},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\tags\\mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1717427522157},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1717427522069},{"_id":"node_modules\\hexo-theme-next\\scripts\\filters\\comment\\utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1717427522099},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\tags\\wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1717427522177},{"_id":"node_modules\\hexo-theme-next\\layout\\_third-party\\tags\\pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1717427522161},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_variables\\Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1717427522212},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_variables\\Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1717427522234},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_variables\\Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1717427522233},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_variables\\Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1717427522239},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1717427522089},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1717427522032},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1717427522093},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_variables\\base.styl","hash":"8b4100f316e9924f2410802615107130588d721e","modified":1717427522201},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1717427522198},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1717427522215},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1717427522247},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1717427522057},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1717427522221},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1717427522234},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1717427522206},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1717427522200},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1717427522207},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1717427522237},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1717427522235},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1717427522224},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\toggles.styl","hash":"37be10c413438060fc76ed31ae74d4300c38c5eb","modified":1717427522260},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1717427522258},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Mist\\_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1717427522183},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Mist\\_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1717427522189},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1717427522185},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Gemini\\index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1717427522226},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1717427522190},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Mist\\_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1717427522187},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1717427522195},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Mist\\_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1717427522192},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1717427522187},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1717427522193},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Mist\\index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1717427522227},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1717427522186},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1717427522188},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Muse\\index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1717427522228},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1717427522228},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_sidebar.styl","hash":"7ba406f560e3a6646b9254bb670fda696889e1e6","modified":1717427522194},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_menu.styl","hash":"d537c748914ad395319f9cfc91cd5ba96db57e8c","modified":1717427522190},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_schemes\\Pisces\\_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1717427522196},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1717427522036},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1717427522063},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1717427522062},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\analytics\\matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1717427522078},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\chat\\chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1717427522046},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1717427522055},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1717427522044},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\chat\\tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1717427522096},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1717427522061},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1717427522070},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1717427522054},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\math\\mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1717427522077},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1717427522075},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\math\\katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1717427522071},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\comments\\utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1717427522100},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\statistics\\firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1717427522059},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\search\\algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1717427522034},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\search\\local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1717427522075},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\statistics\\lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1717427522072},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1717427522091},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\pages\\breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1717427522206},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1717427522102},{"_id":"node_modules\\hexo-theme-next\\source\\js\\third-party\\tags\\mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1717427522079},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\pages\\categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1717427522207},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\pages\\tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1717427522259},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\pages\\index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1717427522216},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\footer\\index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1717427522219},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1717427522213},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1717427522210},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1717427522218},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1717427522231},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1717427522261},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\pages\\schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1717427522249},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1717427522217},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\third-party\\search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1717427522249},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1717427522240},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1717427522241},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1717427522245},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1717427522243},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1717427522239},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1717427522246},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1717427522244},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1717427522246},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\components\\post\\post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1717427522242},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1717427522232},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1717427522204},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1717427522220},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\highlight\\copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1717427522209},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\highlight\\fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1717427522211},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1717427522256},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\highlight\\index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1717427522224},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1717427522256},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1717427522250},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1717427522248},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1717427522252},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\index.styl","hash":"7c203ec68c0f54429caf35803dbac85b18540278","modified":1717427522223},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1717427522251},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\header\\github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1717427522214},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1717427522251},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1717427522255},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1717427522253},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1717427522254},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1717427522203},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1717427522214},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\outline\\sidebar\\site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1717427522257},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1717427522225},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1717427522229},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1717427522232},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1717427522238},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1717427522230},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1717427522236},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1717427522259},{"_id":"node_modules\\hexo-theme-next\\source\\css\\_common\\scaffolding\\tags\\wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1717427522262},{"_id":"public/2024/06/17/deploy测试/index.html","hash":"19dc1407c0849a590e8415a57ca02ad5bfcd03b1","modified":1718568466202},{"_id":"public/2024/06/11/test2/index.html","hash":"8e5c9e644fa0f871c30821e59afe3ffe577da13f","modified":1718568466202},{"_id":"public/archives/index.html","hash":"551d246ce842b1569f183a2e46a018671e99bcaf","modified":1753553410227},{"_id":"public/2024/06/03/test/index.html","hash":"692a35e61122282f8d6f2d15d04ee2c2c4fb274c","modified":1718568466202},{"_id":"public/2024/06/03/hello-world/index.html","hash":"89c8d801caf7aac54a8fc4080186ce788edcc226","modified":1718568590045},{"_id":"public/archives/2024/index.html","hash":"3e6bcb40a8655173be7234ce594a210a696302cf","modified":1753553410227},{"_id":"public/archives/2024/06/index.html","hash":"8985da91ffa678ae4633c8d85352c1ae2e168b7c","modified":1753553410227},{"_id":"public/index.html","hash":"c5f12e810821aaa042544ea8df102da1841fa1e0","modified":1754421448712},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1718557181358},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1718557181358},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1718557181358},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1718557181358},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1718557181358},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1718557181358},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1718557181358},{"_id":"public/css/main.css","hash":"9dc32d9badecd8c8f4bdcb596a3b711a5ccb36cb","modified":1718557181358},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1718557181358},{"_id":"public/js/motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1718557181358},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1718557181358},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1718557181358},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1718557181358},{"_id":"public/js/pjax.js","hash":"adc751f9b63b7a6b4d381506d35a1b3ff4de891f","modified":1718557181358},{"_id":"public/js/sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1718557181358},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1718557181358},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1718557181358},{"_id":"public/js/utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1718557181358},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1718557181358},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1718557181358},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1718557181358},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1718557181358},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1718557181358},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1718557181358},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1718557181358},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1718557181358},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1718557181358},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1718557181358},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1718557181358},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1718557181358},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1718557181358},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1718557181358},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1718557181358},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1718557181358},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1718557181358},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1718557181358},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1718557181358},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1718557181358},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1718557181358},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1718557181358},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1718557181358},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1718557181358},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1718557181358},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1718557181358},{"_id":"source\\_posts\\新测试.md","hash":"692b8e8d372e4498dfb857192c3ee7f140b0ca72","modified":1718568281021},{"_id":"public/2024/06/17/新测试/index.html","hash":"8f0e4d4752d278b480a3282db214497ae974dad2","modified":1718568466202},{"_id":"source\\_posts\\新测试2.md","hash":"b3aec50a858b738924250e6d253846e3b2d6688b","modified":1718568457418},{"_id":"public/2024/06/17/新测试2/index.html","hash":"8302c63562c1ce7830809c423a4bd3b922873e27","modified":1718568466202},{"_id":"source\\_posts\\sub\\hello-world.md","hash":"09578d9ecaa6c574ad881e8c1feed78fca2d7118","modified":1718640883218},{"_id":"source\\_posts\\远程登录.md","hash":"08c27db388c6ccc8b04e916540104b510b274373","modified":1718641441442},{"_id":"source\\_posts\\Linux\\vim快捷键.md","hash":"f95e0a3fef55c11c32abaab1f3105d8b2cbe5088","modified":1718642312693},{"_id":"source\\_posts\\Linux\\远程登录.md","hash":"08c27db388c6ccc8b04e916540104b510b274373","modified":1718641441442},{"_id":"source\\img\\vim_key_img.png","hash":"a7ed3edd8099d368dba0cdcf58e00e4e66b4aa5d","modified":1718641515822},{"_id":"public/2024/06/18/Linux/远程登录/index.html","hash":"3ca04553f5166f67ed6b5822691e0a7c5ba18f02","modified":1720103201733},{"_id":"public/2024/06/18/Linux/vim快捷键/index.html","hash":"9354f8593c4940b845b363a2b76b10e6957c171a","modified":1720103201733},{"_id":"public/2024/06/03/sub/hello-world/index.html","hash":"59bd5da3bf946371635c757cd8b606b6b9ae4118","modified":1718641923600},{"_id":"public/categories/Linux/index.html","hash":"a3b263d699a330d15905e7451e23b0c161f3a254","modified":1753553410227},{"_id":"public/tags/Linux/index.html","hash":"ce1cad5f5304c370999651a750f8425b65246952","modified":1753553410227},{"_id":"public/tags/命令/index.html","hash":"3e7cc80289c21bb975acb21738571b48a6e6901f","modified":1753553410227},{"_id":"public/tags/vim/index.html","hash":"38c969f3002dbcd06054c4c58d413f5c8894d880","modified":1753553410227},{"_id":"public/img/vim_key_img.png","hash":"a7ed3edd8099d368dba0cdcf58e00e4e66b4aa5d","modified":1718641923600},{"_id":"source\\_posts\\Linux\\Debian-VNC-安装.md","hash":"a5d3f1628f815e01f2d57e1212505117578c4d24","modified":1718644095240},{"_id":"source\\_posts\\Linux\\apt-yum-rpm.md","hash":"ce06518a8f7120f6a4cd62ea44c134ee11dbe284","modified":1718644788966},{"_id":"source\\_posts\\Linux\\centos镜像源.md","hash":"841d81be27f9c893eab944800bd5792960f29cab","modified":1718643756104},{"_id":"source\\_posts\\Linux\\ssh.md","hash":"2b54921b432d3a751c7a6159ea092ae8382bd0c1","modified":1718643334543},{"_id":"source\\_posts\\Linux\\设置sudo权限.md","hash":"9e45a91a69e739f8a80326a830d0d5f14d601bf6","modified":1718643078843},{"_id":"public/2024/06/18/Linux/apt-yum-rpm/index.html","hash":"8469c7c3390f90483e7ebc763c8153d94bd74b5e","modified":1720103201733},{"_id":"public/2024/06/18/Linux/Debian-VNC-安装/index.html","hash":"3b7631c574251587a1f4684b5fcd43dc3ac337f2","modified":1720103201733},{"_id":"public/2024/06/18/Linux/ssh/index.html","hash":"6094236f41f21a950166b8faa49ad1e414d3a9ac","modified":1720103201733},{"_id":"public/2024/06/18/Linux/centos镜像源/index.html","hash":"ae9c9c6ee0da9fe75809cb3c8b966d6a7862c1bf","modified":1720103201733},{"_id":"public/2024/06/18/Linux/设置sudo权限/index.html","hash":"baa02d032412aaf67a9108df852a279c20dbf0a3","modified":1720103201733},{"_id":"public/tags/sudo/index.html","hash":"bf160a7a5e736569b1b959a19a7797751c403589","modified":1753553410227},{"_id":"public/tags/镜像源/index.html","hash":"d519778d27f8826459fdd82dfe56d3a35e52de39","modified":1753553410227},{"_id":"public/tags/apt/index.html","hash":"63b8ac4f2baa20be7c189ba42c69636eec896128","modified":1753553410227},{"_id":"public/tags/ssh/index.html","hash":"fec02c263727179fe0cadad8b9b9bca16988edbf","modified":1753553410227},{"_id":"public/tags/vnc/index.html","hash":"ae4ab659d112d54234fa557bb047c8967963eb4a","modified":1753553410227},{"_id":"public/tags/rpm/index.html","hash":"c3e53089cd8ab0d94bccdd5c234f7ecfa7f2b3b0","modified":1753553410227},{"_id":"public/tags/yum/index.html","hash":"74884175e6d27d68a5c3b8c6244f2999318b660a","modified":1753553410227},{"_id":"source\\_posts\\jellyfin.md","hash":"797c336ed248970c4b2c37a6f9b754d19f61ea2b","modified":1718815766742},{"_id":"source\\_posts\\软路由.md","hash":"6921eb485c4f943917e5387765af3b4311acacc2","modified":1718815489269},{"_id":"source\\_posts\\python\\tqdm进度条.md","hash":"4e65dc81f965c0bc33fb9554c68a21a6a51ba9e8","modified":1718813145526},{"_id":"source\\_posts\\沙堆\\frp.md","hash":"59e7d603fff33a93a828ac4521160fdf9f0a7eec","modified":1718814200898},{"_id":"source\\_posts\\沙堆\\搭梯子.md","hash":"50ca40b9e20ec9cc77fb21c0803c0196047d70ec","modified":1718815240304},{"_id":"source\\_posts\\电影\\牧马人.md","hash":"845f02d3ba66ccaa7c24a4bf0e9be514f057aefa","modified":1718814033085},{"_id":"source\\_posts\\沙堆\\装机.md","hash":"00c13acefb08cf2f313fc8971031037a98f17b5e","modified":1718814269014},{"_id":"source\\_posts\\电影\\心灵奇旅-Soul.md","hash":"5f18a8e3bdf6265b9c54f01fd7209fa3feb46274","modified":1718813990170},{"_id":"source\\_posts\\电影\\阿凡达.md","hash":"c6fa2bf2174fe2047c42d977909ceeef593b00d9","modified":1718814063940},{"_id":"source\\_posts\\游玩\\景点.md","hash":"6c33523039d2621e386ff85582eb7f0b470f08b9","modified":1718813740931},{"_id":"source\\_posts\\游玩\\美食.md","hash":"cd768400cf54e77a3a9073f466cb568292711b80","modified":1718813372421},{"_id":"public/2024/06/20/jellyfin/index.html","hash":"1460c9eb03135818fd2e2cde0429bafb6d135a49","modified":1718815772317},{"_id":"public/2024/06/20/软路由/index.html","hash":"773734a80f2198d3e5a8a30564b8bf41580f8521","modified":1718815772317},{"_id":"public/2024/06/20/沙堆/装机/index.html","hash":"d133e9da76282b10dce86e300cfd7f380d282846","modified":1720103201733},{"_id":"public/2024/06/20/沙堆/搭梯子/index.html","hash":"9cb0f3b23b5dda9bb1116b81b00db183b70b86e3","modified":1720103201733},{"_id":"public/2024/06/20/沙堆/frp/index.html","hash":"d6d5987f91fafdbd79d62106238fc3a42635536c","modified":1720103201733},{"_id":"public/2024/06/20/电影/阿凡达/index.html","hash":"bc45b04b2fb6ef1552e733cbfa70bd3c25ab656a","modified":1720103201733},{"_id":"public/2024/06/20/电影/牧马人/index.html","hash":"cb49ae90f61bb89c6c7cf047d67bfee25af47717","modified":1720103201733},{"_id":"public/2024/06/20/电影/心灵奇旅-Soul/index.html","hash":"8dbcceeaa3c690f50a6f0d30c74bedfe2f57b1c9","modified":1720103201733},{"_id":"public/2024/06/20/游玩/景点/index.html","hash":"a4aceb459ee5142a664264d94ecdf72d22598f4e","modified":1720103201733},{"_id":"public/2024/06/20/游玩/美食/index.html","hash":"dff7c07a331beec65bc380985deeb577ac0e225a","modified":1720103201733},{"_id":"public/2024/06/20/python/tqdm进度条/index.html","hash":"345b14bf8a3ba9c2a6354036eb3c523591ce2de5","modified":1720103201733},{"_id":"public/categories/软路由/index.html","hash":"dd5a9916e34c83ce2aa79b155883b9d6ea7c6b55","modified":1753553410227},{"_id":"public/categories/python/index.html","hash":"fe492ea12d139c07bcc01d864488f856765ec5c8","modified":1753553410227},{"_id":"public/categories/电影/index.html","hash":"2fdfe81bd417cf8ba684c98e545c898d1830d94d","modified":1753553410227},{"_id":"public/categories/游玩/index.html","hash":"127bc552ddda5ab8c5307629bf5157ad780ed5a8","modified":1753553410227},{"_id":"public/archives/page/2/index.html","hash":"499404e7590fd9485c2cbbde57fb42f017a278cd","modified":1753553410227},{"_id":"public/archives/2024/page/2/index.html","hash":"4bf81df68b680d3bfb31f4214d27aa4c52cf0316","modified":1753553410227},{"_id":"public/archives/2024/06/page/2/index.html","hash":"42829dab6cb48f3325db3520b53adac73e65617c","modified":1753553410227},{"_id":"public/page/2/index.html","hash":"7d8fd184e9eb509268de3f8a8c5c7a7f15936d82","modified":1753553410227},{"_id":"public/tags/软路由/index.html","hash":"13d3611baa021bfcc858b5560e4c595a4cfc83c3","modified":1753553410227},{"_id":"public/tags/家庭影院/index.html","hash":"dd7f09b499d463523dc986535931c017e051b56d","modified":1753553410227},{"_id":"public/tags/python/index.html","hash":"a069bb9cd69afa93ab5d61801dc4eb453f64d5e3","modified":1753553410227},{"_id":"public/tags/内网穿透/index.html","hash":"8ada8d757f57669418bcc4123fa55cbc2fe81994","modified":1753553410227},{"_id":"public/tags/frp/index.html","hash":"9600e1a5f4e2798e0cc459240938dee2f74b0d81","modified":1753553410227},{"_id":"public/tags/进度条/index.html","hash":"e1b70bd05bda8b375c8b8b889d4e4e4ecc5b3a20","modified":1753553410227},{"_id":"public/tags/梯子/index.html","hash":"7b9c5726ff0d4ca3dec8563d00b06b3ec550d58d","modified":1753553410227},{"_id":"public/tags/动漫/index.html","hash":"52839f1dd3e78c70ba242a2bce196639f1283616","modified":1753553410227},{"_id":"public/tags/装机/index.html","hash":"4eb5197a87db92155fcbe6906ed51351673af429","modified":1753553410227},{"_id":"public/tags/游玩/index.html","hash":"5b0d82765610a2b21a9c4ccfc01f26fbe4c7dc5f","modified":1753553410227},{"_id":"public/tags/景点/index.html","hash":"292ca6c4b3f41ad6f6741dde61a399beed247e16","modified":1753553410227},{"_id":"public/tags/美食/index.html","hash":"a36d9c8011ecb3df6ac94a90d4e3c80345466d87","modified":1753553410227},{"_id":"source\\_posts\\显示器.md","hash":"da1d08ea9c957ae7759b56fb526d6d640e838f57","modified":1718820185669},{"_id":"source\\_posts\\笔记本电脑.md","hash":"28886c7d278d0a916eed17249507131753f36050","modified":1718819703181},{"_id":"source\\_posts\\pve\\pve.md","hash":"93e8e52409c60ad5c1c3adc3865fcc1f0368395c","modified":1718816923583},{"_id":"source\\_posts\\pve\\显示温度，去除订阅.md","hash":"b77cfc692baea9ea86575afba3d0fd7fa27e607b","modified":1731182023072},{"_id":"source\\_posts\\pve\\设备直通.md","hash":"e1d7ac817560299e3f09be1f4da0e1d9a162d80c","modified":1727449196690},{"_id":"source\\_posts\\web前端\\Bootstrap.md","hash":"90c2554046292c4a1e861accfc179e192c5d4536","modified":1718819609121},{"_id":"source\\_posts\\web前端\\CSS.md","hash":"55646416d1f1684686ca2e5102f14898a2b61855","modified":1718819609130},{"_id":"source\\_posts\\web前端\\HTML.md","hash":"65a0af08ae65fc5307b4d9ff63fa230208e300b9","modified":1718819609125},{"_id":"source\\_posts\\web前端\\JavaScript.md","hash":"bd97023bbaf95d9e973e8d913fc5561eddeb192d","modified":1718819609136},{"_id":"source\\_posts\\web前端\\xml.md","hash":"e9087659706e2c4a4ffb1222ed70ed65aa25a5c0","modified":1718819430774},{"_id":"source\\_posts\\沙堆\\面试问题关注点.md","hash":"1ac64539a2efdf7c82319f01fb37f484ccce59ae","modified":1718817071933},{"_id":"source\\_posts\\沙堆\\windows.md","hash":"12cf29d9a76d57b96f5f5f9235130eb49d057be5","modified":1718819644468},{"_id":"source\\_posts\\软路由\\istore安装.md","hash":"95dd299859f66de5f152cccf0689b54b34160a40","modified":1718816820737},{"_id":"source\\_posts\\软路由\\jellyfin.md","hash":"797c336ed248970c4b2c37a6f9b754d19f61ea2b","modified":1718815766742},{"_id":"source\\_posts\\软路由\\trueNas.md","hash":"66d6c01117de203b51bff61bf1566e907d7182cd","modified":1718815963421},{"_id":"source\\_posts\\软路由\\openclash.md","hash":"54b22c276ac59297d0fb7960d3604322f52877bd","modified":1718817007281},{"_id":"source\\_posts\\软路由\\软路由.md","hash":"6921eb485c4f943917e5387765af3b4311acacc2","modified":1718815489269},{"_id":"source\\_posts\\软路由\\网易云解锁.md","hash":"2f3545b8b08d9ac6b7236f60fded1518c5d6fc05","modified":1718815906080},{"_id":"source\\img\\ips-led.png","hash":"16d99ac0ab8269690d23376d31b4eab4311d9a0c","modified":1718819817713},{"_id":"source\\img\\色域2.png","hash":"5908faedc2736dbf83b4e16af8c003b89bee26cc","modified":1718820109991},{"_id":"source\\img\\色域.png","hash":"f6773c547b210a6a02dad0c62e7e302a3b3ee9cb","modified":1718819949603},{"_id":"public/2024/06/20/显示器/index.html","hash":"bcb56edcc54d19cf21b2a22d0c8d3b4e8ff2337b","modified":1718820189208},{"_id":"public/2024/06/20/笔记本电脑/index.html","hash":"9e9cce51e8d6690e0ccf25ec0127f873fd0d77d2","modified":1718820145196},{"_id":"public/2024/06/20/沙堆/windows/index.html","hash":"6ee0896d8c1a543bb9d234f3c4115cd0da6ba2fc","modified":1720103201733},{"_id":"public/2024/06/20/web前端/HTML/index.html","hash":"008d9d051e6aa6de0957c9f2566af71e12e55d11","modified":1720103201733},{"_id":"public/2024/06/20/web前端/JavaScript/index.html","hash":"c0bbf8ae5e52705b583067670a66c4208c605206","modified":1720103201733},{"_id":"public/2024/06/20/web前端/CSS/index.html","hash":"eb2575de4d8a0385036209bb982b5ab784d1bb8b","modified":1720103201733},{"_id":"public/2024/06/20/沙堆/面试问题关注点/index.html","hash":"d19ff6ffabc6dab62e32d5635850337ea7ba6377","modified":1720103201733},{"_id":"public/2024/06/20/web前端/Bootstrap/index.html","hash":"e5bb8c559fcfe9915d2610660e09da98c699ed47","modified":1720103201733},{"_id":"public/2024/06/20/软路由/openclash/index.html","hash":"71e924e3f44aec8da59d0253db7957fe0c56d2cf","modified":1720103201733},{"_id":"public/2024/06/20/web前端/xml/index.html","hash":"543f324b586963819c9b1157f138ced1b085684f","modified":1720103201733},{"_id":"public/2024/06/20/软路由/istore安装/index.html","hash":"9aa6cebf9078284b84ebeb35f6ca6e10a05ccbc6","modified":1720103201733},{"_id":"public/2024/06/20/pve/pve/index.html","hash":"9ecd9de89b292de14ddb515aa724725c88ef16a4","modified":1720103201733},{"_id":"public/2024/06/20/软路由/trueNas/index.html","hash":"b6326deb010b89b61092008445a0aa9035639126","modified":1720103201733},{"_id":"public/2024/06/20/pve/显示温度，去除订阅/index.html","hash":"ffe27084edaf2debde56ef4ee24406df013528c6","modified":1720103201733},{"_id":"public/2024/06/20/pve/设备直通/index.html","hash":"d31f76e046b46eaa76c615e627da570adf5cd488","modified":1720103201733},{"_id":"public/2024/06/20/软路由/网易云解锁/index.html","hash":"07e755421a536da4d0a1900b32ddf1e4a72b9896","modified":1720103201733},{"_id":"public/2024/06/20/软路由/jellyfin/index.html","hash":"ea297c1c0cdaebb8b7b885c35523c3c6d37de6fc","modified":1720103201733},{"_id":"public/2024/06/20/软路由/软路由/index.html","hash":"b82526a9f621218f193595cc9b7deaaf548710b3","modified":1720103201733},{"_id":"public/archives/page/3/index.html","hash":"09fec2a05dc1855fef0d7c5e4f63ed282bc0b841","modified":1753553410227},{"_id":"public/archives/page/4/index.html","hash":"3412ce3ce7ab8839abb2ce8530b84a1a03942499","modified":1753553410227},{"_id":"public/archives/2024/page/3/index.html","hash":"a29a724ebfca14c5c3b25e0be6f67b25d56afe23","modified":1753553410227},{"_id":"public/archives/2024/page/4/index.html","hash":"e502f99505752ef21b8302d1e0e1a0b6f377af3b","modified":1753553410227},{"_id":"public/archives/2024/06/page/3/index.html","hash":"7ad9954caa358fcbb14b2d7a3df0c165cb48044e","modified":1753553410227},{"_id":"public/archives/2024/06/page/4/index.html","hash":"b82a31ec1a00ff4337900c1cf2957758df41851e","modified":1753553410227},{"_id":"public/page/3/index.html","hash":"015197015423df7c17f2a56d7f6fbfa4264bf3b9","modified":1753553410227},{"_id":"public/page/4/index.html","hash":"b663798104e083fc7de5f473687b59d2b551a71d","modified":1753553410227},{"_id":"public/categories/pve/index.html","hash":"e8840899133ef0e7edb8ad2403859daaa8ecb261","modified":1753553410227},{"_id":"public/categories/web-前端/index.html","hash":"bc80eb941d7a08a3dcd806e2f75a2c03921bf1c8","modified":1753553410227},{"_id":"public/tags/pve/index.html","hash":"745e68ff9e68541c6c1eac83a63fc813c53332b9","modified":1753553410227},{"_id":"public/tags/官方手册/index.html","hash":"3f9e1f894a420357c5e01aad7753568a3ad2f7fe","modified":1753553410227},{"_id":"public/tags/破解/index.html","hash":"32fd7681bfdfc96095bf99653b9dd5bb1926c87c","modified":1753553410227},{"_id":"public/tags/NAS/index.html","hash":"8d129af4dff832f0f1731d90c5d2a4e1a8ed249a","modified":1753553410227},{"_id":"public/tags/istore/index.html","hash":"4944aed2e2e2e17ca604ea9b4269387cd3fa0159","modified":1753553410227},{"_id":"public/tags/clash/index.html","hash":"f229f7309e21ed5a96d1b7c4623a9c23da643757","modified":1753553410227},{"_id":"public/img/ips-led.png","hash":"16d99ac0ab8269690d23376d31b4eab4311d9a0c","modified":1718820145196},{"_id":"public/img/色域2.png","hash":"5908faedc2736dbf83b4e16af8c003b89bee26cc","modified":1718820145196},{"_id":"public/img/色域.png","hash":"f6773c547b210a6a02dad0c62e7e302a3b3ee9cb","modified":1718820145196},{"_id":"source\\_posts\\商品知识\\笔记本电脑.md","hash":"3072657613dedfb0b8cd93f19f96daf08c115fc3","modified":1718820321547},{"_id":"source\\_posts\\商品知识\\显示器.md","hash":"f19adeba233cf37dd55ce9d006265ab610e352b0","modified":1718820321542},{"_id":"public/2024/06/20/商品知识/显示器/index.html","hash":"2e00a37533bbd7bc155b891c74311a54f6de05de","modified":1720103201733},{"_id":"public/2024/06/20/商品知识/笔记本电脑/index.html","hash":"9eab24a8db02aea0dedff030a0be9e22a20e20c4","modified":1720103201733},{"_id":"public/categories/商品知识/index.html","hash":"96c99450b582c519f94384ca2555509c212b7e42","modified":1753553410227},{"_id":"source\\img\\java.sql.Driver.png","hash":"c6cbf95ce0094b77b36b36f8a8a8aeb73e9237ba","modified":1719932778388},{"_id":"source\\img\\修剪二叉搜索树2.png","hash":"e6a3cc1b40fee5627034bc3347370a1b90d43b76","modified":1720102129825},{"_id":"source\\img\\修剪二叉搜索树1.png","hash":"13595f4814969028edf98f9e843dc0fde8a71e10","modified":1720102111283},{"_id":"source\\_posts\\java\\java.md","hash":"29a72fefcd2bbcc7cf2882dfba3f7e030b119e80","modified":1719930426717},{"_id":"source\\_posts\\java\\Junit测试.md","hash":"312b423617f1d690c7e105e87d248c274bf9228e","modified":1719933348879},{"_id":"source\\_posts\\java\\JDBC-Java-Database-Connectify.md","hash":"2bdeda075155284a38f1e60d104c47720dad586d","modified":1719932840124},{"_id":"source\\_posts\\java\\桥接方法.md","hash":"87e94f9bc3f2feb35ec85ba92f50fc1c6e534599","modified":1719933139484},{"_id":"source\\_posts\\java\\序列化.md","hash":"df27c3edd4511bf89a704b7f2ef7c9956518f2fb","modified":1719930203708},{"_id":"source\\_posts\\java\\反射.md","hash":"8e68e860e1f2f4c3810ea4b351b287d9ee0d5699","modified":1719933049434},{"_id":"source\\_posts\\java\\注解Annotation.md","hash":"020ae822cdea96b2368758f0e535e68b64d42c93","modified":1719932940538},{"_id":"source\\_posts\\数据库\\命名规范.md","hash":"8ff3a0b9b6e0ee0123ed8a828fb706f96e4b3132","modified":1719928554156},{"_id":"source\\_posts\\java\\数据库连接池.md","hash":"f3d49a64f9c5c033eb4b96aacfd54136b6c05e73","modified":1719932907094},{"_id":"source\\_posts\\数据库\\SQL.md","hash":"d4a277bf3e2363de4f17ce8a6627be26bc2cb236","modified":1719929371080},{"_id":"source\\_posts\\算法\\修剪二叉搜索树.md","hash":"abc653b8514bc1b4a051738f4dfbe6ecd28efc4c","modified":1720103001102},{"_id":"source\\_posts\\数据库\\MySQL问题记录.md","hash":"b2035eb85fbd4fe5e67e49312dc7297b55391b1e","modified":1719929481254},{"_id":"source\\_posts\\数据库\\数据库设计模式.md","hash":"7bf708f5a22f9bf359316088981f5e08537d4bed","modified":1719929081119},{"_id":"source\\_posts\\数据库\\Navicat快捷键.md","hash":"5daa54cbc9bc3bcfeb5b8f09f5274e1e2b7310f1","modified":1719929159911},{"_id":"source\\_posts\\算法\\题目\\树相关问题.md","hash":"fddc391218ec5d5e7e3c097b694b9ceb1fb14288","modified":1720103135983},{"_id":"source\\_posts\\沙堆\\租房注意.md","hash":"8daf4269ca1f2093a6e3b0992fa6f99816767aac","modified":1719929547481},{"_id":"source\\_posts\\java\\web服务器\\Servlet.md","hash":"b4b5b62a8eee13a09f8c5551d6f8dc8e96d8cb8a","modified":1719932524539},{"_id":"source\\_posts\\java\\web服务器\\HTTP.md","hash":"5378e2be07b07240ea7640039319b5ffdfc7d036","modified":1719932376724},{"_id":"source\\img\\2NF示例表.png","hash":"5d97923bbf4f494c4a250d57185fcdb3a5672b82","modified":1719928654867},{"_id":"source\\img\\jdbc.png","hash":"661250c8a344fc7435aef0f0f7fbf7951f723883","modified":1719932740730},{"_id":"source\\img\\java并发.png","hash":"a9651cf63bed17d49ef0642220abe02961257e64","modified":1719930254828},{"_id":"source\\img\\数据库连接示意.png","hash":"45733cda61d2e8bbf284d4385a838e80752b03f6","modified":1719929308603},{"_id":"source\\_posts\\java\\Spring-JDBC.md","hash":"b2e7773a89ebd737de912976e6fa542100bc3f55","modified":1719932840119},{"_id":"source\\img\\3NF.png","hash":"17943a03be3572876d852b67cef15261ea8ee608","modified":1719928883327},{"_id":"source\\img\\反射.png","hash":"1367b88b06ac026e3ec924a3fb94b9026e2a73d6","modified":1719932995507},{"_id":"source\\img\\2NF.png","hash":"964bbf17dcb17bd656549785d05db6c012a68ce7","modified":1719928800528},{"_id":"source\\img\\java_io.png","hash":"47b30a600535eb46e086698d88dcdd52a92f657f","modified":1719930389915},{"_id":"public/2024/07/04/算法/题目/树相关问题/index.html","hash":"f6afece336c8e1d3b68dfa464b6659e106c2a954","modified":1720103201733},{"_id":"public/2024/07/04/算法/修剪二叉搜索树/index.html","hash":"b4094e1268c2eb4cbf681cb982cf761ef07613b7","modified":1720103201733},{"_id":"public/2024/07/02/java/Junit测试/index.html","hash":"646b92e8c84f5e7eaf63769eb8d57aa9f423a16b","modified":1720103325850},{"_id":"public/2024/07/02/java/桥接方法/index.html","hash":"d58434cfff3d0db0c2691a59f93bfd11cebaa92e","modified":1720103201733},{"_id":"public/2024/07/02/java/注解Annotation/index.html","hash":"ad174854cb7463a165bef96cf50ed526290c62b9","modified":1720103201733},{"_id":"public/2024/07/02/java/数据库连接池/index.html","hash":"9c08de1e7e4c3d35767abde9e66ec3dc51409047","modified":1720103201733},{"_id":"public/2024/07/02/java/反射/index.html","hash":"bd3b1dcaa4a5f2d1df691ac2ff9f943fdcd97521","modified":1720103201733},{"_id":"public/2024/07/02/java/JDBC-Java-Database-Connectify/index.html","hash":"afa910b13027758489f2d8e264cc0617e20d808d","modified":1720103201733},{"_id":"public/2024/07/02/java/Spring-JDBC/index.html","hash":"e8ff4c3ca26942b262f5b3f94d5b2c9efcebf2df","modified":1720103201733},{"_id":"public/2024/07/02/java/web服务器/Servlet/index.html","hash":"a65eb1a7c483ea7ff88e4609a93f351855681590","modified":1720103201733},{"_id":"public/2024/07/02/java/web服务器/HTTP/index.html","hash":"0d8f327afba5395f98279fcc922300cae32dc70f","modified":1720103201733},{"_id":"public/2024/07/02/java/java/index.html","hash":"cec60b4ebbc8724e61eba75b034e3181e9a0fed1","modified":1720103201733},{"_id":"public/2024/07/02/java/序列化/index.html","hash":"b735c35406a1c6b79f518b49025f83b652d79995","modified":1720103201733},{"_id":"public/2024/07/02/沙堆/租房注意/index.html","hash":"8392aa5217cabd680c6b8a093b14cbdc68f49445","modified":1720103201733},{"_id":"public/2024/07/02/数据库/MySQL问题记录/index.html","hash":"0f94c56115c581220ef19d8777b2231f8696909e","modified":1720103201733},{"_id":"public/2024/07/02/数据库/SQL/index.html","hash":"62cf216305210269ead12f2083833eeb00e96aaa","modified":1720103201733},{"_id":"public/2024/07/02/数据库/Navicat快捷键/index.html","hash":"734459f2ad1c02ea3ceb3666a47e065045bb1204","modified":1720103201733},{"_id":"public/2024/07/02/数据库/数据库设计模式/index.html","hash":"f6cb9565bfebb6a97f803be090ccc76ea0e12ee4","modified":1720103201733},{"_id":"public/2024/07/02/数据库/命名规范/index.html","hash":"b5d38ed105e8e4a1279798e5dfaacedf4372ba37","modified":1720103201733},{"_id":"public/archives/page/5/index.html","hash":"fcf22428a63c373eac05138bab2021cc9d167bf8","modified":1753553410227},{"_id":"public/archives/page/6/index.html","hash":"ab9a0b68830f7b2a702e8c6ce62a1a9d6036f850","modified":1753553410227},{"_id":"public/archives/2024/page/6/index.html","hash":"6acbdf53f5f87058ff6b007981169baa75a9e02f","modified":1753553410227},{"_id":"public/archives/2024/page/5/index.html","hash":"e373a849142b0562ae4a2da1911b306b4a8f2c58","modified":1753553410227},{"_id":"public/archives/2024/07/index.html","hash":"5e83684df273b6c5559ea29b267656dbe4a165aa","modified":1753553410227},{"_id":"public/archives/2024/07/page/2/index.html","hash":"427da38ec285ee52b6e019292152e73e042c691a","modified":1753553410227},{"_id":"public/categories/java/index.html","hash":"bd7de602b8a8a2b618eae997aedcb98027409095","modified":1753553410227},{"_id":"public/categories/数据库/index.html","hash":"cdfd5a8679f5312839fea8f66ab3f4d2bb9d8c69","modified":1753553410227},{"_id":"public/categories/java/page/2/index.html","hash":"fd0bd5e687db69bdf720ef87f5b0f35ab0adb0b3","modified":1753553410227},{"_id":"public/categories/算法/index.html","hash":"688efde06bf305b2413eb7dfb9d07fc2386e37d6","modified":1753553410227},{"_id":"public/categories/java/web服务器/index.html","hash":"e9814c0e9cc001ef24b9c70b10d183eeed07c031","modified":1753553410227},{"_id":"public/page/5/index.html","hash":"1ac5bcfc3cd350e3490f90b5be760a25cb58cdad","modified":1753553410227},{"_id":"public/page/6/index.html","hash":"d17982bc3293f23db7a25611d6808b25b70cc4fe","modified":1753553410227},{"_id":"public/tags/java/index.html","hash":"04fc41845affbeacc6aa47468c61421e616001bf","modified":1753553410227},{"_id":"public/tags/序列化/index.html","hash":"0bc6a85a2fdbd1d152145e008fee5463585785c4","modified":1753553410227},{"_id":"public/tags/连接池/index.html","hash":"f8556ca768cb1db15628f6b720bab016a28b1fe8","modified":1753553410227},{"_id":"public/tags/java/page/2/index.html","hash":"ad039958abbdde6ad500270d9f9648adbc6deaae","modified":1753553410227},{"_id":"public/tags/数据库/index.html","hash":"9ed12118e6ad34c38a63b145dbad76f037a5fc03","modified":1753553410227},{"_id":"public/tags/范式/index.html","hash":"9935a1304825934afbb464b235a2ced9b4f1e0ac","modified":1753553410227},{"_id":"public/tags/设计模式/index.html","hash":"040f7694d720a6e5cae3c8be813d8c1e4c705a5d","modified":1753553410227},{"_id":"public/tags/SQL/index.html","hash":"24444e1a313a4411880cff860035c6ed969fdc93","modified":1753553410227},{"_id":"public/tags/MySQL/index.html","hash":"4c377c55b9b48850a97bb11ab8760ebcee535dd8","modified":1753553410227},{"_id":"public/tags/数据库客户端/index.html","hash":"36f0d9a3291fe2df203da62db8fa3a2c718ec665","modified":1753553410227},{"_id":"public/tags/http/index.html","hash":"6e1e48e84a543d5bdcea82a44005f0c04bcb45b0","modified":1753553410227},{"_id":"public/tags/二叉树/index.html","hash":"3798d8a09f4c1b1fb602de7f9c2c454978a33325","modified":1753553410227},{"_id":"public/tags/租房/index.html","hash":"ad6ea38f7d5a5aebd54a4ade2e7de74a1d99f64d","modified":1753553410227},{"_id":"public/tags/算法/index.html","hash":"4aabc15ff316d8c7477c045941300499413a5f25","modified":1753553410227},{"_id":"public/tags/servlet/index.html","hash":"9557ebaa30a2845245bc6e8aa14d2fe0bfaa2048","modified":1753553410227},{"_id":"public/tags/树/index.html","hash":"67e3e6e67b4c8c02c478979603ebeb651f1a8e8e","modified":1753553410227},{"_id":"public/img/java.sql.Driver.png","hash":"c6cbf95ce0094b77b36b36f8a8a8aeb73e9237ba","modified":1720103201733},{"_id":"public/img/修剪二叉搜索树2.png","hash":"e6a3cc1b40fee5627034bc3347370a1b90d43b76","modified":1720103201733},{"_id":"public/img/修剪二叉搜索树1.png","hash":"13595f4814969028edf98f9e843dc0fde8a71e10","modified":1720103201733},{"_id":"public/img/2NF示例表.png","hash":"5d97923bbf4f494c4a250d57185fcdb3a5672b82","modified":1720103201733},{"_id":"public/img/java并发.png","hash":"a9651cf63bed17d49ef0642220abe02961257e64","modified":1720103201733},{"_id":"public/img/数据库连接示意.png","hash":"45733cda61d2e8bbf284d4385a838e80752b03f6","modified":1720103201733},{"_id":"public/img/jdbc.png","hash":"661250c8a344fc7435aef0f0f7fbf7951f723883","modified":1720103201733},{"_id":"public/img/3NF.png","hash":"17943a03be3572876d852b67cef15261ea8ee608","modified":1720103201733},{"_id":"public/img/反射.png","hash":"1367b88b06ac026e3ec924a3fb94b9026e2a73d6","modified":1720103201733},{"_id":"public/img/2NF.png","hash":"964bbf17dcb17bd656549785d05db6c012a68ce7","modified":1720103201733},{"_id":"public/img/java_io.png","hash":"47b30a600535eb46e086698d88dcdd52a92f657f","modified":1720103201733},{"_id":"source\\_posts\\算法\\树相关问题.md","hash":"41bbf2c3b7cf32d23c9a2c6432a75dca2c1b10c4","modified":1720103581716},{"_id":"source\\_posts\\算法\\题目\\修剪二叉搜索树.md","hash":"cd8c364dad3afcd63e2c4c4ade156e41b9f18f09","modified":1720104037207},{"_id":"public/2024/07/04/算法/树相关问题/index.html","hash":"2839c93d6dfc9ff17dd230e0e4c3139e7cc61687","modified":1720103584543},{"_id":"public/2024/07/04/算法/题目/修剪二叉搜索树/index.html","hash":"3f37748de7ac825a55a9bb3a2690b034a2187a36","modified":1720103325850},{"_id":"public/算法/树相关问题/index.html","hash":"2de4f0cf8fa8286709e70fbff33cad392de55f1b","modified":1753553410227},{"_id":"public/算法/题目/修剪二叉搜索树/index.html","hash":"7e793671976480dbe148a4056a045b3c4f5ab495","modified":1753553410227},{"_id":"public/java/Junit测试/index.html","hash":"8e8c0fa7dfbd6e53bd7e963b5699496e48cd727a","modified":1753553410227},{"_id":"public/java/桥接方法/index.html","hash":"96f7361b2d26cd9a2e5cfc2fd8f151b474118bac","modified":1753553410227},{"_id":"public/java/注解Annotation/index.html","hash":"500d847c29ff38baeebd00f0a66768d40e2f05ae","modified":1753553410227},{"_id":"public/java/反射/index.html","hash":"c4dfaf82f9fac590d4e6fcecc0733aa1cdf7c11a","modified":1753553410227},{"_id":"public/java/数据库连接池/index.html","hash":"16e6f2253efbc03412a0ff3e2dc453587ed7fe7f","modified":1753553410227},{"_id":"public/java/JDBC-Java-Database-Connectify/index.html","hash":"d24c3147221ea14c883851d9ed8e17210c4229a3","modified":1753553410227},{"_id":"public/java/Spring-JDBC/index.html","hash":"f842607ca58f5726d6116fb37bc2892c77286a06","modified":1753553410227},{"_id":"public/java/web服务器/Servlet/index.html","hash":"89a3bb1e81dde444f214417ab2c8c08b12707037","modified":1753553410227},{"_id":"public/java/web服务器/HTTP/index.html","hash":"a15db24f0e0b76b212e01f08914cdf27aa295d37","modified":1753553410227},{"_id":"public/java/java/index.html","hash":"984a235cbc1d7f0e97005ce416f5f2b3a62b2465","modified":1753553410227},{"_id":"public/java/序列化/index.html","hash":"8df1d38f39c0495061e1a0e742d8def81018e4cf","modified":1753553410227},{"_id":"public/沙堆/租房注意/index.html","hash":"e75475e1f418f979f6aa5697d1a4286a4e7699a6","modified":1753553410227},{"_id":"public/数据库/MySQL问题记录/index.html","hash":"2a4f7e996ff0615fc154d618a61c90fbe8803345","modified":1753553410227},{"_id":"public/数据库/SQL/index.html","hash":"7c26938313bf8d668fe8cbf5231615d53889894c","modified":1753553410227},{"_id":"public/数据库/Navicat快捷键/index.html","hash":"8a9d64ced57c9aa8bfdb042c448c1efdb3ec2b4d","modified":1753553410227},{"_id":"public/数据库/数据库设计模式/index.html","hash":"49a3b4c01339e59a1f4de63433cf48b5e23d34b6","modified":1753553410227},{"_id":"public/数据库/命名规范/index.html","hash":"bf4f1be509195bbe6869a2f594bbba81b749d1bb","modified":1753553410227},{"_id":"public/商品知识/显示器/index.html","hash":"f6eabc504227b1222fadbf5de585aae95091a4a6","modified":1753553410227},{"_id":"public/商品知识/笔记本电脑/index.html","hash":"9c09a382eff6f09aa0531b4b4155cfd945174540","modified":1753553410227},{"_id":"public/沙堆/windows/index.html","hash":"4dc653b55a30ca4558aa43a21f82fb980c22a016","modified":1753553410227},{"_id":"public/web前端/HTML/index.html","hash":"0728a796cb7ea8ecaf63e2ddd65b36bf823fcce4","modified":1753553410227},{"_id":"public/web前端/CSS/index.html","hash":"f42e9043bb59002b631db59455cb7233dbc2bc98","modified":1753553410227},{"_id":"public/web前端/JavaScript/index.html","hash":"b7df3b171c3799149ae520788978af262d968844","modified":1753553410227},{"_id":"public/web前端/Bootstrap/index.html","hash":"d0420f1ff605aff97f045c7495ee6815f1d1fd49","modified":1753553410227},{"_id":"public/web前端/xml/index.html","hash":"e5485080629966ea1b8757be633902608ba60a84","modified":1753553410227},{"_id":"public/沙堆/面试问题关注点/index.html","hash":"3666b530bb02979bda5b7695567d8c28bb0c7731","modified":1753553410227},{"_id":"public/软路由/openclash/index.html","hash":"ece334883d9f0f52876b35c4de685b543bd0f829","modified":1753553410227},{"_id":"public/pve/pve/index.html","hash":"5fca0df01f5b262c5ea8ef056bc6c4f021564505","modified":1726059240582},{"_id":"public/软路由/istore安装/index.html","hash":"25b40fc3c5c769a7548d0166eb7e1550b92a835a","modified":1753553410227},{"_id":"public/pve/设备直通/index.html","hash":"6e271106bddd5201edf8490dcafc0155d817e480","modified":1753553410227},{"_id":"public/pve/显示温度，去除订阅/index.html","hash":"bf176774014b49b1bd3faabe55386928e2e620f9","modified":1753553410227},{"_id":"public/软路由/trueNas/index.html","hash":"0b2b90b0defc68d56753eb9397fa39df50967b38","modified":1753553410227},{"_id":"public/软路由/网易云解锁/index.html","hash":"cdb753551226eb0480d2104a03a20949448052d9","modified":1753553410227},{"_id":"public/软路由/jellyfin/index.html","hash":"b13d3ee851e5244f4fb81151da157c57f773f111","modified":1753553410227},{"_id":"public/软路由/软路由/index.html","hash":"333eda7fb7795e2410a347f7c7903a7ee5849a6e","modified":1753553410227},{"_id":"public/沙堆/搭梯子/index.html","hash":"3e06727c7c91c0e8b3668ee3d2e9bd31026d0588","modified":1753553410227},{"_id":"public/沙堆/装机/index.html","hash":"99e00c932910736948018ae47ba95ca742cd8ea9","modified":1753553410227},{"_id":"public/沙堆/frp/index.html","hash":"ad8a304275101e50f76efb9519b625208118e27c","modified":1753553410227},{"_id":"public/电影/阿凡达/index.html","hash":"43c37fd74018e8bc3d26f5aeb9f0d1806807dc05","modified":1753553410227},{"_id":"public/电影/牧马人/index.html","hash":"e4d5edb6713155f30957d04ba669e83f630e499a","modified":1753553410227},{"_id":"public/电影/心灵奇旅-Soul/index.html","hash":"8b5573e0d66959b9e1c23dcc20d2fa04f1a4e3ab","modified":1753553410227},{"_id":"public/游玩/景点/index.html","hash":"a8f6e998e517a2bfcd92e6d96bca1a80609c1982","modified":1753553410227},{"_id":"public/游玩/美食/index.html","hash":"30245b8c5b4bed32fd3d29b57fb7b70a4a0797a6","modified":1753553410227},{"_id":"public/python/tqdm进度条/index.html","hash":"2613f0104e706878855bcf0307076807df8d9342","modified":1753553410227},{"_id":"public/Linux/apt-yum-rpm/index.html","hash":"d4e85b6c928b9b454e205de77731db8b6754b2aa","modified":1753553410227},{"_id":"public/Linux/Debian-VNC-安装/index.html","hash":"962f687e2c8485aea07fa1d24323ddf1fc467d5f","modified":1753553410227},{"_id":"public/Linux/centos镜像源/index.html","hash":"3e6cfbf7fe941aa5740d227cf5e3d876608642f4","modified":1753553410227},{"_id":"public/Linux/ssh/index.html","hash":"8aa970f424269190136bcb1c69db32136a3b0ad8","modified":1753553410227},{"_id":"public/Linux/设置sudo权限/index.html","hash":"693be6e3a6c6e3d09a079c5ea71f654b60c3e8f7","modified":1753553410227},{"_id":"public/Linux/vim快捷键/index.html","hash":"a03abbd716745bc1265ffde58911796fa272b993","modified":1753553410227},{"_id":"public/Linux/远程登录/index.html","hash":"5c513a56e41788b1234315caf464b3c0b806baeb","modified":1753553410227},{"_id":"source\\_posts\\最大子数组和.md","hash":"1d5f3cf6efbf286256ff5368a73323ebd2ef9730","modified":1720105180824},{"_id":"source\\img\\最大子数组和.png","hash":"e2a2f3b950b185aace6bc96a0413e89728d46580","modified":1720105018626},{"_id":"source\\_posts\\沙堆\\所思所梦.md","hash":"4862e8d4d0aa0028951649d72e6755b045337808","modified":1734278686348},{"_id":"source\\_posts\\算法\\二分法.md","hash":"5d30ee3283615ca13a5d32267102ff3ea6d29534","modified":1720104037201},{"_id":"public/最大子数组和/index.html","hash":"27153bf1d9d6b31c3e38efa4842e569c5f6973a0","modified":1720112750962},{"_id":"public/沙堆/所思所梦/index.html","hash":"57c22b1808678b3240965e8a5e8a9c7737ee5715","modified":1753553410227},{"_id":"public/算法/二分法/index.html","hash":"dc28e0cfe5f9bb1daa27537ab69da450c38e68d6","modified":1753553410227},{"_id":"public/archives/2024/07/page/3/index.html","hash":"ea11a8bc7d1491b26b3a57ef42d1897e64790327","modified":1753553410227},{"_id":"public/categories/算法/题目/index.html","hash":"e3e42779aa620e2212975b4aa729ff03edad234e","modified":1753553410227},{"_id":"public/tags/文学/index.html","hash":"1bf08a7a95f1fd6d37586a447a36f4c28dbbbaaa","modified":1753553410227},{"_id":"public/tags/思考/index.html","hash":"aabe227096f64c5debf144406e8ba57006bde6ac","modified":1753553410227},{"_id":"public/tags/哲学/index.html","hash":"15cd5858f980be7db1eae07bd92ad0be3e1fdaba","modified":1753553410227},{"_id":"public/tags/二分法/index.html","hash":"6243c4e69395c85d4e7e48b2d087914e9f24eab0","modified":1753553410227},{"_id":"public/img/最大子数组和.png","hash":"e2a2f3b950b185aace6bc96a0413e89728d46580","modified":1720105195610},{"_id":"source\\_posts\\好子集的数目.md","hash":"5d2b6c91fe8728f5c0fffe9a244402c3e64f5fc1","modified":1720105251371},{"_id":"public/好子集的数目/index.html","hash":"19aff8b11a96b2197618b3abac6ba07f244d1f7a","modified":1720112750962},{"_id":"source\\tags\\index.md","hash":"3a6a15b260a6ab1c59a77397c469ef8bd0b8eb10","modified":1720109988241},{"_id":"public/tags/index.html","hash":"4848fff9957fd9b4ee4e369d76683565f9e0b981","modified":1753553410227},{"_id":"source\\categories\\index.md","hash":"862b6f08ee0838ba2d0e5197352640d86265d505","modified":1720110022630},{"_id":"public/categories/index.html","hash":"84d9c30021ce07fa7b1cb0bebe5fe04359197960","modified":1753553410227},{"_id":"source\\_posts\\电影\\抓娃娃.md","hash":"258927b9ba7735d13783fb027900c01a402f3549","modified":1721398829022},{"_id":"source\\_posts\\探索队列.md","hash":"e0e2b7bbbc27e0a320202397dedc2293bbe0c18b","modified":1722676105465},{"_id":"source\\_posts\\算法\\题目\\最大子数组和.md","hash":"1d5f3cf6efbf286256ff5368a73323ebd2ef9730","modified":1720105180824},{"_id":"source\\_posts\\算法\\题目\\好子集的数目.md","hash":"5d2b6c91fe8728f5c0fffe9a244402c3e64f5fc1","modified":1720105251371},{"_id":"public/探索队列/index.html","hash":"d796f8b7a47c19bdd72f011a0a5f1f290df50f5a","modified":1726059240582},{"_id":"public/电影/抓娃娃/index.html","hash":"fc9a024e97e751d48d8937bbbaabb645b85ceefd","modified":1753553410227},{"_id":"public/算法/题目/最大子数组和/index.html","hash":"48476125ba66d178ef5f0c0e69951edaed31dba4","modified":1753553410227},{"_id":"public/算法/题目/好子集的数目/index.html","hash":"12ccae74de43632e80bde53b953a9fbe9afb0c64","modified":1753553410227},{"_id":"public/archives/2024/08/index.html","hash":"188733bfa96232a17d127df8c6eda3f236e3308f","modified":1753553410227},{"_id":"public/tags/电影/index.html","hash":"0fa697bf9e79b7a7c28f1e3e37438e3da9c96239","modified":1753553410227},{"_id":"public/tags/喜剧/index.html","hash":"f89b0c904e2c9c5f094ea10ca373bb31437825d8","modified":1753553410227},{"_id":"source\\.hide\\record.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1733325486648},{"_id":"source\\.hide\\pass.md","hash":"87b136e263b31ab0913f53727af8747202111ec7","modified":1729093729101},{"_id":"source\\_posts\\Linux\\linux开机启动项.md","hash":"a5757f5ddf3fb3e3f8bf19c61bd738840b41b9d2","modified":1728410681975},{"_id":"source\\_posts\\nginx.md","hash":"274f5e30fa2dc10239102635ff8694f4b5153cdb","modified":1733324562131},{"_id":"source\\_posts\\PVE版Homeassistant的ip和网关设置.md","hash":"61b5e73cb57fcf4a8e77623ce022b745aec15e28","modified":1733324904407},{"_id":"source\\_posts\\Linux\\iptables-持久化-docker-ipv6外网访问.md","hash":"d8e01d267174c350bebadd1c98888fcb41f56237","modified":1733325296075},{"_id":"source\\_posts\\Linux\\网络唤醒.md","hash":"0d44353c3b63f6e2e92e30fdc0bc7a5137167f64","modified":1729877835109},{"_id":"source\\_posts\\Linux\\linux网速测试.md","hash":"a089610bdfda11655b73abf9e3c71814010b1225","modified":1729615264052},{"_id":"source\\_posts\\Linux\\iptables.md","hash":"cef12fdbb452905ee54050f6922e44c0a4990964","modified":1732202589014},{"_id":"source\\_posts\\pve\\lxc容器挂载设备.md","hash":"eb053f2ba7f2e198ab72b367a8c81731e8612168","modified":1726150195330},{"_id":"source\\_posts\\Linux\\温度、风扇控制.md","hash":"d56ebb0c90ccaee4e9afa6f14d9df9f3e285816c","modified":1728503956910},{"_id":"source\\_posts\\pve\\istore安装.md","hash":"e5d59c707cbf4bf790d890c3c6681abe62099199","modified":1728496071744},{"_id":"source\\_posts\\pve\\cluster-not-ready-no-quorum-500.md","hash":"796e04a3f33aed7aa5aca32ad5529b844a825bda","modified":1729606750671},{"_id":"source\\_posts\\沙堆\\家庭监控.md","hash":"7c616198361bffa6ba54fa47ab15a9715acf40fb","modified":1726160898492},{"_id":"source\\_posts\\沙堆\\nginx.md","hash":"fef53f1fcb1e557877e2344e806cf0b625b76ad2","modified":1753550309095},{"_id":"source\\_posts\\pve\\显示温度脚本.md","hash":"0e2dccc2b3656f37e1b3724c2da4638a0673b939","modified":1728315161872},{"_id":"source\\_posts\\pve\\pve虚拟机在线检测、重启.md","hash":"9cb08277c41c42bb9b5ed4a07a543fa95581cc10","modified":1739282943543},{"_id":"source\\_posts\\pve\\pve安装错误.md","hash":"a1de11158012148400373b9606998741183cca4b","modified":1728485159517},{"_id":"source\\_posts\\沙堆\\破解.md","hash":"d110dca70636b76fbe8b253da49e6f3d9d4b21e5","modified":1728572941295},{"_id":"source\\_posts\\沙堆\\探索队列.md","hash":"5111cde24aecf89a85e54d9fc18985f88b31ba9c","modified":1733324619122},{"_id":"source\\_posts\\沙堆\\网络基础.md","hash":"81933ea9076e7731d9c0d213eaf764192d9160f4","modified":1750082895839},{"_id":"source\\_posts\\沙堆\\HN8546X6不需超管权限关闭IPV6防火墙.md","hash":"a3e638000905e8cc05bf9967fe78df8a391fdb8e","modified":1730619967101},{"_id":"source\\_posts\\沙堆\\自动代理.md","hash":"96d7578e76869b30f1d2b43a2b017400b07efcaa","modified":1728585303519},{"_id":"public/Linux/iptables-持久化-docker-ipv6外网访问/index.html","hash":"402bc31a84ebafd1d49ab72f3d5353f624fdf622","modified":1753553410227},{"_id":"public/PVE版Homeassistant的ip和网关设置/index.html","hash":"da7c8102d48677354c2b463ac502e95b241e37d5","modified":1750094590479},{"_id":"public/pve/pve虚拟机在线检测、重启/index.html","hash":"71558629cd9037f33b1a44524d4b576ce1864fc5","modified":1753553410227},{"_id":"public/Linux/iptables/index.html","hash":"643c5a02c4d0a1c57f7b29fd8b1a8425ed2b489c","modified":1753553410227},{"_id":"public/nginx/index.html","hash":"16c2b122f3fda89a4997db722e97a853a2e70635","modified":1750094590479},{"_id":"public/沙堆/nginx/index.html","hash":"d3a6961e0f1b999fc239f5b0237024661a4048e7","modified":1753553410227},{"_id":"public/Linux/网络唤醒/index.html","hash":"afc8792ddd846247372620dc092925c9e52fe787","modified":1753553410227},{"_id":"public/沙堆/自动代理/index.html","hash":"b1310fcf211fcd63c70b1bdd1f69e01924991fb4","modified":1753553410227},{"_id":"public/沙堆/HN8546X6不需超管权限关闭IPV6防火墙/index.html","hash":"af0c26488f95124f658c3215c7ed070918185d82","modified":1753553410227},{"_id":"public/pve/istore安装/index.html","hash":"11f6a6c4b9e4a29b67ca5b482490b080f23ea405","modified":1753553410227},{"_id":"public/Linux/linux网速测试/index.html","hash":"10017c037884e6d64cdb59411218d269e30d5df6","modified":1753553410227},{"_id":"public/pve/cluster-not-ready-no-quorum-500/index.html","hash":"4456e37e6cff294f1da55d12a94f70a94ca2d321","modified":1753553410227},{"_id":"public/沙堆/破解/index.html","hash":"906b80c1da58e02b12a61f616e213e541e142912","modified":1753553410227},{"_id":"public/pve/显示温度脚本/index.html","hash":"7d9145c459bce59d5623ee3ff914f6f75ca6eb7c","modified":1753553410227},{"_id":"public/Linux/linux开机启动项/index.html","hash":"2d8c8fec1c967c3cc51bf7446037225872e3de17","modified":1753553410227},{"_id":"public/沙堆/网络基础/index.html","hash":"8bfd0a8342dac1f6aae187bbfe87fc048a63103b","modified":1753553410227},{"_id":"public/沙堆/家庭监控/index.html","hash":"28cf44abb6ce174b68805a46c7320ab5a6b0b9d1","modified":1753553410227},{"_id":"public/Linux/温度、风扇控制/index.html","hash":"7e04fb151b9e6e30fb22d9d769817f95f861f715","modified":1753553410227},{"_id":"public/沙堆/探索队列/index.html","hash":"246b2b98e1abdab8717fbdd71119ea77fdabb761","modified":1753553410227},{"_id":"public/pve/lxc容器挂载设备/index.html","hash":"311f7315a6713baae28a63c2ad83ac0ad38d2d0e","modified":1753553410227},{"_id":"public/pve/pve安装错误/index.html","hash":"0b885d9aee595e8792a8377ddb09fc723b2a9e49","modified":1753553410227},{"_id":"public/archives/page/7/index.html","hash":"d5b696844ac1370e67c330acd03fb91d16c98266","modified":1753553410227},{"_id":"public/archives/page/8/index.html","hash":"3abfd57664b6bf696ee54333966cb0384e69bb3e","modified":1753553410227},{"_id":"public/archives/2024/page/7/index.html","hash":"26a989232b52749f3e20299dedd387f407d72777","modified":1753553410227},{"_id":"public/archives/2024/page/8/index.html","hash":"428455d2183880e1bf0a187986f3f547692f08ad","modified":1753553410227},{"_id":"public/archives/2024/09/index.html","hash":"897ee9e7013ed611d5a3b6174fcd350e7e2059ab","modified":1753553410227},{"_id":"public/archives/2024/10/index.html","hash":"1bc7ddf4732549afd43a8b5fe69073cdce694d9e","modified":1753553410227},{"_id":"public/archives/2024/12/index.html","hash":"c5111d3481e344806d264297b08867416a29a931","modified":1753553410227},{"_id":"public/archives/2024/11/index.html","hash":"3e347cafe0bc4465a45b29960247c01bcce20341","modified":1753553410227},{"_id":"public/categories/Linux/page/2/index.html","hash":"8f6d9e43032124e97773ec2e46e4e5eff14f07a8","modified":1753553410227},{"_id":"public/categories/home-assistant/index.html","hash":"4fceb308a8c35538ba0cabded1705b9d6b144993","modified":1753553410227},{"_id":"public/categories/沙堆/index.html","hash":"6ec8175ba8bbbe2e341a6e215de8310abb207c85","modified":1753553410227},{"_id":"public/categories/linux/index.html","hash":"bce2d7dddf0e78436ed09c91ab8e1ef31bf1a030","modified":1753553410227},{"_id":"public/tags/nginx/index.html","hash":"6a4295764ff8ee2be37701d015253e2b886bad6d","modified":1753553410227},{"_id":"public/tags/home-assistant/index.html","hash":"aec24159e268aa4d53bd8bb8f147bc69eafbe7d8","modified":1753553410227},{"_id":"public/tags/启动项/index.html","hash":"48c18ed0d58584f9846106aa80ecf4e645e5bf6c","modified":1753553410227},{"_id":"public/tags/iptables/index.html","hash":"115d26630145b234382af9a23435161d7be18677","modified":1753553410227},{"_id":"public/tags/ipv6/index.html","hash":"0f0f00da9bc3612850dee7f73288227f39907a8d","modified":1753553410227},{"_id":"public/tags/docker/index.html","hash":"4472469aa68283e8477837ddab08201f0784edd0","modified":1753553410227},{"_id":"public/tags/网络/index.html","hash":"2666d42aedda1967552297662aa1d127a1aa2105","modified":1753553410227},{"_id":"public/tags/NAT/index.html","hash":"6b931d7656d5924aef34a54486e57fd4bbb52b11","modified":1753553410227},{"_id":"public/tags/噪音控制/index.html","hash":"38f064e55c3e1712043a52ea0792b602ad013058","modified":1753553410227},{"_id":"public/tags/温度控制/index.html","hash":"4360d0153a0f1bd16e23b7359e1be5168f7081b8","modified":1753553410227},{"_id":"public/tags/fancontrol/index.html","hash":"5475e42f4aaf8681453efb2f8a3e45eeb0a78aba","modified":1753553410227},{"_id":"public/tags/网络唤醒/index.html","hash":"c51ba873d48c6f78c53fc4f868399d9ca9e4c634","modified":1753553410227},{"_id":"public/tags/wol/index.html","hash":"16d864076ab8f05d568bea6d38f1f4c2542ec8c3","modified":1753553410227},{"_id":"public/tags/debian/index.html","hash":"30a6d74b6f47e2413ec99a6e72413e4b88aa3ce4","modified":1753553410227},{"_id":"public/tags/lxc/index.html","hash":"b604009518b0d86e7904ac04416193d55b6d3dd7","modified":1753553410227},{"_id":"public/tags/监控/index.html","hash":"5fc6f8a012ed283965c2173b2a5dbce8a4d8a8ba","modified":1753553410227},{"_id":"public/tags/网桥/index.html","hash":"109082681207039aeeed53884484414acf445655","modified":1753553410227},{"_id":"public/tags/虚拟平台/index.html","hash":"542be10deacb19134413442c636705b535010bda","modified":1753553410227},{"_id":"public/tags/代理/index.html","hash":"69483fa00b1d6f0d35e7b757e208ac10c1b00e30","modified":1753553410227},{"_id":"public/tags/WPAD/index.html","hash":"71520f852c08f0db3ac4e2c860b4356640db15ca","modified":1753553410227},{"_id":"public/tags/PAC/index.html","hash":"c87c39038cac945481b661bad65cb8fee6633852","modified":1753553410227},{"_id":"public/page/7/index.html","hash":"9f25a316d54748ba3472c00dc2767e847e7422d0","modified":1753553410227},{"_id":"public/page/8/index.html","hash":"532d7f8426224b918e462cec407bf1d9fb1f63a7","modified":1753553410227},{"_id":"public/test/index.html","hash":"c838b29aa8a5b1a6d6d96623cecd8ba84d71e49c","modified":1750094525782},{"_id":"public/archives/2025/index.html","hash":"8825fb74d1f2177b12c983a75001a5f5448755f3","modified":1753553410227},{"_id":"public/archives/2025/06/index.html","hash":"76ecc4444751fca2aa76aa738040758d0b18c348","modified":1750094525782},{"_id":"source\\_posts\\权限管理.md","hash":"cce6b720e39f61522068e0ce2e8da6addc7c138d","modified":1753549590218},{"_id":"source\\_posts\\img\\java.sql.Driver.png","hash":"c6cbf95ce0094b77b36b36f8a8a8aeb73e9237ba","modified":1719932778388},{"_id":"source\\_posts\\img\\修剪二叉搜索树1.png","hash":"13595f4814969028edf98f9e843dc0fde8a71e10","modified":1720102111283},{"_id":"source\\_posts\\img\\修剪二叉搜索树2.png","hash":"e6a3cc1b40fee5627034bc3347370a1b90d43b76","modified":1720102129825},{"_id":"source\\_posts\\img\\最大子数组和.png","hash":"e2a2f3b950b185aace6bc96a0413e89728d46580","modified":1720105018626},{"_id":"source\\_posts\\img\\2NF示例表.png","hash":"5d97923bbf4f494c4a250d57185fcdb3a5672b82","modified":1719928654867},{"_id":"source\\_posts\\img\\ips-led.png","hash":"16d99ac0ab8269690d23376d31b4eab4311d9a0c","modified":1718819817713},{"_id":"source\\_posts\\img\\java并发.png","hash":"a9651cf63bed17d49ef0642220abe02961257e64","modified":1719930254828},{"_id":"source\\_posts\\img\\jdbc.png","hash":"661250c8a344fc7435aef0f0f7fbf7951f723883","modified":1719932740730},{"_id":"source\\_posts\\img\\vim_key_img.png","hash":"a7ed3edd8099d368dba0cdcf58e00e4e66b4aa5d","modified":1718641515822},{"_id":"source\\_posts\\img\\数据库连接示意.png","hash":"45733cda61d2e8bbf284d4385a838e80752b03f6","modified":1719929308603},{"_id":"source\\_posts\\img\\3NF.png","hash":"17943a03be3572876d852b67cef15261ea8ee608","modified":1719928883327},{"_id":"source\\_posts\\img\\权限管理-后台权限系统的设计以及主流的五种权限模型详解.png","hash":"9872354ac7102da675107ef778481e5056af5d4b","modified":1753549303787},{"_id":"source\\_posts\\img\\色域2.png","hash":"5908faedc2736dbf83b4e16af8c003b89bee26cc","modified":1718820109991},{"_id":"source\\_posts\\img\\反射.png","hash":"1367b88b06ac026e3ec924a3fb94b9026e2a73d6","modified":1719932995507},{"_id":"source\\_posts\\img\\色域.png","hash":"f6773c547b210a6a02dad0c62e7e302a3b3ee9cb","modified":1718819949603},{"_id":"source\\_posts\\img\\2NF.png","hash":"964bbf17dcb17bd656549785d05db6c012a68ce7","modified":1719928800528},{"_id":"source\\_posts\\img\\java_io.png","hash":"47b30a600535eb46e086698d88dcdd52a92f657f","modified":1719930389915},{"_id":"source\\img\\权限管理-后台权限系统的设计以及主流的五种权限模型详解.png","hash":"9872354ac7102da675107ef778481e5056af5d4b","modified":1753549303787},{"_id":"source\\_posts\\【投票】项目开发日记.md","hash":"461854d3f9211a0e8101a1d46a6ed7fa47f92752","modified":1754421407951},{"_id":"source\\_posts\\沙堆\\PVE版Homeassistant的ip和网关设置.md","hash":"61b5e73cb57fcf4a8e77623ce022b745aec15e28","modified":1733324904407},{"_id":"source\\_posts\\沙堆\\权限管理.md","hash":"b1f5896f5ca3eb03738f39a8f24f188ddd2eba4f","modified":1753550079450},{"_id":"source\\img\\权限管理-RBAC-2.png","hash":"1da7ea5acd391f2ceb16b21b507994a7f79e25e4","modified":1753549815331},{"_id":"source\\img\\权限管理-RBAC-1.png","hash":"6e44569d75ea0d10f4d06c7afc0dc7ce6a353e6d","modified":1753549792912},{"_id":"source\\img\\权限管理-RBAC.png","hash":"000740aa484f4d3fd8fead6d1f9cd2367ca3e2d2","modified":1753549680955},{"_id":"source\\img\\权限管理-用户管理.png","hash":"ed2a1f59cef548cff6b8a54f0f254e90ae5a9fb9","modified":1753549864779},{"_id":"source\\img\\权限管理-RBAC-0.png","hash":"967fab44ced54964ebf24db2e0a127008c1af8ff","modified":1753549758468},{"_id":"source\\img\\权限管理-权限管理.png","hash":"d4ed5ff53ea247e509fd02b83aa6f4b6170996e2","modified":1753549945342},{"_id":"public/【投票】项目开发日记/index.html","hash":"f6103338f27e988f8e102031f91baf08d4244dc3","modified":1754421448712},{"_id":"public/沙堆/权限管理/index.html","hash":"6d537f3201e4d4698b1bc26c1ebbd4f06c15e679","modified":1753553410227},{"_id":"public/沙堆/PVE版Homeassistant的ip和网关设置/index.html","hash":"1ca084d823036ac7fc022fb948e1a694f77dc3e0","modified":1753553410227},{"_id":"public/archives/2025/07/index.html","hash":"8ef5e2d76875626410eb22c1f9a2c281c046985d","modified":1753553410227},{"_id":"public/tags/权限管理/index.html","hash":"7eabdf9778318e563a0115516fc7d8e81fe6a954","modified":1753553410227},{"_id":"public/img/权限管理-RBAC.png","hash":"000740aa484f4d3fd8fead6d1f9cd2367ca3e2d2","modified":1753553410227},{"_id":"public/img/权限管理-RBAC-1.png","hash":"6e44569d75ea0d10f4d06c7afc0dc7ce6a353e6d","modified":1753553410227},{"_id":"public/img/权限管理-RBAC-2.png","hash":"1da7ea5acd391f2ceb16b21b507994a7f79e25e4","modified":1753553410227},{"_id":"public/img/权限管理-后台权限系统的设计以及主流的五种权限模型详解.png","hash":"9872354ac7102da675107ef778481e5056af5d4b","modified":1753553410227},{"_id":"public/img/权限管理-用户管理.png","hash":"ed2a1f59cef548cff6b8a54f0f254e90ae5a9fb9","modified":1753553410227},{"_id":"public/img/权限管理-RBAC-0.png","hash":"967fab44ced54964ebf24db2e0a127008c1af8ff","modified":1753553410227},{"_id":"public/img/权限管理-权限管理.png","hash":"d4ed5ff53ea247e509fd02b83aa6f4b6170996e2","modified":1753553410227}],"Category":[{"name":"Linux","_id":"clxj6qtqz00010guy16ow3ztn"},{"name":"软路由","_id":"clxm2j6hz0002g4uyd6ph51x6"},{"name":"python","_id":"clxm2j6i8000ag4uydluo5dcw"},{"name":"电影","_id":"clxm2j6ib000ig4uyev4gdov2"},{"name":"游玩","_id":"clxm2j6ie000rg4uye6ewa7l5"},{"name":"pve","_id":"clxm54wnn00037guyf5th28ay"},{"name":"web 前端","_id":"clxm54wnw000e7guy699h3qdm"},{"name":"商品知识","_id":"clxm59gjv000164uygl0c7ily"},{"name":"java","_id":"cly7d19uw00020ouy9q0j84sc"},{"name":"数据库","_id":"cly7d19vg000u0ouy30grgosk"},{"name":"web服务器","parent":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vn001i0ouyfu141uc6"},{"name":"算法","_id":"cly7d19vo001q0ouy47dn6czf"},{"name":"题目","parent":"cly7d19vo001q0ouy47dn6czf","_id":"cly7e80ar0004jwuy94d496ag"},{"name":"home assistant","_id":"cmbz8wgqf0004o8tz9bl898ps"},{"name":"linux","_id":"cmbz8wgqn000ho8tz8xss9ph2"},{"name":"沙堆","_id":"cmbz8wgqx001ho8tz8qsc57jy"}],"Data":[],"Page":[{"title":"categories","date":"2024-07-04T16:20:02.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-07-05 00:20:02\ntype: categories\nlayout: categories   #注意此行不添加则点击不会显示分类结果\n---\n","updated":"2024-07-04T16:20:22.630Z","path":"categories/index.html","comments":1,"_id":"cly7h3ivg0000zguyalb2834x","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-07-04T16:19:05.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-07-05 00:19:05\ntype: tags\nlayout: tags   #注意此行不添加则点击不会显示标签\n---\n","updated":"2024-07-04T16:19:48.241Z","path":"tags/index.html","comments":1,"_id":"cly7h3ivi0001zguyceckd29u","content":"","excerpt":"","more":""}],"Post":[{"title":"vim快捷键","date":"2024-06-17T16:26:14.000Z","_content":"\n![vim-key.png](./img/vim_key_img.png)\n","source":"_posts/Linux/vim快捷键.md","raw":"---\ntitle: vim快捷键\ndate: 2024-06-18 00:26:14\ncategories:\n  - Linux\ntags:\n  - Linux\n  - 命令\n  - vim\n---\n\n![vim-key.png](./img/vim_key_img.png)\n","slug":"Linux/vim快捷键","published":1,"updated":"2024-06-17T16:38:32.693Z","_id":"clxj6uztj0000vwuy6qf5hvux","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"/hexo-blog/./img/vim_key_img.png\" alt=\"vim-key.png\"></p>\n","excerpt":"","more":"<p><img src=\"/hexo-blog/./img/vim_key_img.png\" alt=\"vim-key.png\"></p>\n"},{"title":"远程登录","date":"2024-06-17T16:21:25.000Z","_content":"\nssh如何利用RSA公钥进行远程登录验证1、本地机器生成密钥\n\n```\nssh-keygen -t rsa\n```\n\n生成基于ssh协议第二版密钥，如果还是用rsa1，该升级了。\n\n2、复制生成的id_rsa.pub公钥文件到远程服务器，简单的用：\n\n```\nscp id_rsa.pub bsduser@192.168.1.188:mykey.pub\n```\n\n3、密码登陆远程服务器：\n\n```\nssh 192.168.1.188 -l bsduser\n```\n\n这里注意不是cp，而是cat；不是\">\"，而是\">>\"的操作：\n\n```\ncat mykey.pub >> $HOME/.ssh/authorized_keys\n```\n\n4、重启sshd\n\n```\n/etc/rc.d/sshd restart\n```\n\n5、此时进行登录测试：\n\n```\n# 顺便一说，这个格式与git、scp等等都是一样的\nssh user@ip\n```","source":"_posts/Linux/远程登录.md","raw":"---\ntitle: 远程登录\ndate: 2024-06-18 00:21:25\ncategories:\n  - Linux\ntags:\n  - Linux\n  - 命令\n---\n\nssh如何利用RSA公钥进行远程登录验证1、本地机器生成密钥\n\n```\nssh-keygen -t rsa\n```\n\n生成基于ssh协议第二版密钥，如果还是用rsa1，该升级了。\n\n2、复制生成的id_rsa.pub公钥文件到远程服务器，简单的用：\n\n```\nscp id_rsa.pub bsduser@192.168.1.188:mykey.pub\n```\n\n3、密码登陆远程服务器：\n\n```\nssh 192.168.1.188 -l bsduser\n```\n\n这里注意不是cp，而是cat；不是\">\"，而是\">>\"的操作：\n\n```\ncat mykey.pub >> $HOME/.ssh/authorized_keys\n```\n\n4、重启sshd\n\n```\n/etc/rc.d/sshd restart\n```\n\n5、此时进行登录测试：\n\n```\n# 顺便一说，这个格式与git、scp等等都是一样的\nssh user@ip\n```","slug":"Linux/远程登录","published":1,"updated":"2024-06-17T16:24:01.442Z","comments":1,"layout":"post","photos":[],"_id":"clxj6uzty0001vwuy7bfw5eob","content":"<p>ssh如何利用RSA公钥进行远程登录验证1、本地机器生成密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>生成基于ssh协议第二版密钥，如果还是用rsa1，该升级了。</p>\n<p>2、复制生成的id_rsa.pub公钥文件到远程服务器，简单的用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp id_rsa.pub bsduser@192.168.1.188:mykey.pub</span><br></pre></td></tr></table></figure>\n\n<p>3、密码登陆远程服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 192.168.1.188 -l bsduser</span><br></pre></td></tr></table></figure>\n\n<p>这里注意不是cp，而是cat；不是”&gt;”，而是”&gt;&gt;”的操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat mykey.pub &gt;&gt; $HOME/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>4、重启sshd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.d/sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>5、此时进行登录测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 顺便一说，这个格式与git、scp等等都是一样的</span><br><span class=\"line\">ssh user@ip</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>ssh如何利用RSA公钥进行远程登录验证1、本地机器生成密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>生成基于ssh协议第二版密钥，如果还是用rsa1，该升级了。</p>\n<p>2、复制生成的id_rsa.pub公钥文件到远程服务器，简单的用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp id_rsa.pub bsduser@192.168.1.188:mykey.pub</span><br></pre></td></tr></table></figure>\n\n<p>3、密码登陆远程服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 192.168.1.188 -l bsduser</span><br></pre></td></tr></table></figure>\n\n<p>这里注意不是cp，而是cat；不是”&gt;”，而是”&gt;&gt;”的操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat mykey.pub &gt;&gt; $HOME/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>4、重启sshd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.d/sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>5、此时进行登录测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 顺便一说，这个格式与git、scp等等都是一样的</span><br><span class=\"line\">ssh user@ip</span><br></pre></td></tr></table></figure>"},{"title":"ssh","date":"2024-06-17T16:52:35.000Z","_content":"\n# ssh相关包\n作者：Sage涩橘 https://www.bilibili.com/read/cv12542259 出处：bilibili\n```\nopenssh.x86_64                        7.4p1-21.el7                     @anaconda\nopenssh-clients.x86_64                7.4p1-21.el7                     @anaconda\nopenssh-server.x86_64                 7.4p1-21.el7                     @anaconda\n```\n第三个为ssh服务相关\n\n启动服务相关配置\n```dsconfig\nPort 22\n#AddressFamily any\nListenAddress 0.0.0.0 #取消掉前面的注释\nListenAddress ::   #取消掉前面的注释\n\n# Authentication:\n#LoginGraceTime 2m\nPermitRootLogin yes  #取消掉前面的注释\n#StrictModes yes\n#MaxAuthTries 6\n#MaxSessions 10\n\n# To disable tunneled clear text passwords, change to no here!\nPasswordAuthentication yes  #取消掉前面的注释\n#PermitEmptyPasswords no\n```","source":"_posts/Linux/ssh.md","raw":"---\ntitle: ssh\ndate: 2024-06-18 00:52:35\ncategories:\n  - Linux\ntags:\n  - Linux\n  - ssh\n---\n\n# ssh相关包\n作者：Sage涩橘 https://www.bilibili.com/read/cv12542259 出处：bilibili\n```\nopenssh.x86_64                        7.4p1-21.el7                     @anaconda\nopenssh-clients.x86_64                7.4p1-21.el7                     @anaconda\nopenssh-server.x86_64                 7.4p1-21.el7                     @anaconda\n```\n第三个为ssh服务相关\n\n启动服务相关配置\n```dsconfig\nPort 22\n#AddressFamily any\nListenAddress 0.0.0.0 #取消掉前面的注释\nListenAddress ::   #取消掉前面的注释\n\n# Authentication:\n#LoginGraceTime 2m\nPermitRootLogin yes  #取消掉前面的注释\n#StrictModes yes\n#MaxAuthTries 6\n#MaxSessions 10\n\n# To disable tunneled clear text passwords, change to no here!\nPasswordAuthentication yes  #取消掉前面的注释\n#PermitEmptyPasswords no\n```","slug":"Linux/ssh","published":1,"updated":"2024-06-17T16:55:34.543Z","_id":"clxj7to36000abkuyetca7tbq","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"ssh相关包\"><a href=\"#ssh相关包\" class=\"headerlink\" title=\"ssh相关包\"></a>ssh相关包</h1><p>作者：Sage涩橘 <a href=\"https://www.bilibili.com/read/cv12542259\">https://www.bilibili.com/read/cv12542259</a> 出处：bilibili</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssh.x86_64                        7.4p1-21.el7                     @anaconda</span><br><span class=\"line\">openssh-clients.x86_64                7.4p1-21.el7                     @anaconda</span><br><span class=\"line\">openssh-server.x86_64                 7.4p1-21.el7                     @anaconda</span><br></pre></td></tr></table></figure>\n<p>第三个为ssh服务相关</p>\n<p>启动服务相关配置</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Port</span> <span class=\"string\">22</span></span><br><span class=\"line\"><span class=\"comment\">#AddressFamily any</span></span><br><span class=\"line\"><span class=\"string\">ListenAddress</span> <span class=\"string\">0</span>.<span class=\"string\">0</span>.<span class=\"string\">0</span>.<span class=\"string\">0</span> <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"string\">ListenAddress</span> ::   <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication:</span></span><br><span class=\"line\"><span class=\"comment\">#LoginGraceTime 2m</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"string\">yes</span>  <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"comment\">#StrictModes yes</span></span><br><span class=\"line\"><span class=\"comment\">#MaxAuthTries 6</span></span><br><span class=\"line\"><span class=\"comment\">#MaxSessions 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># To disable tunneled clear text passwords, change to no here!</span></span><br><span class=\"line\"><span class=\"string\">PasswordAuthentication</span> <span class=\"string\">yes</span>  <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"comment\">#PermitEmptyPasswords no</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"ssh相关包\"><a href=\"#ssh相关包\" class=\"headerlink\" title=\"ssh相关包\"></a>ssh相关包</h1><p>作者：Sage涩橘 <a href=\"https://www.bilibili.com/read/cv12542259\">https://www.bilibili.com/read/cv12542259</a> 出处：bilibili</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssh.x86_64                        7.4p1-21.el7                     @anaconda</span><br><span class=\"line\">openssh-clients.x86_64                7.4p1-21.el7                     @anaconda</span><br><span class=\"line\">openssh-server.x86_64                 7.4p1-21.el7                     @anaconda</span><br></pre></td></tr></table></figure>\n<p>第三个为ssh服务相关</p>\n<p>启动服务相关配置</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Port</span> <span class=\"string\">22</span></span><br><span class=\"line\"><span class=\"comment\">#AddressFamily any</span></span><br><span class=\"line\"><span class=\"string\">ListenAddress</span> <span class=\"string\">0</span>.<span class=\"string\">0</span>.<span class=\"string\">0</span>.<span class=\"string\">0</span> <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"string\">ListenAddress</span> ::   <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authentication:</span></span><br><span class=\"line\"><span class=\"comment\">#LoginGraceTime 2m</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"string\">yes</span>  <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"comment\">#StrictModes yes</span></span><br><span class=\"line\"><span class=\"comment\">#MaxAuthTries 6</span></span><br><span class=\"line\"><span class=\"comment\">#MaxSessions 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># To disable tunneled clear text passwords, change to no here!</span></span><br><span class=\"line\"><span class=\"string\">PasswordAuthentication</span> <span class=\"string\">yes</span>  <span class=\"comment\">#取消掉前面的注释</span></span><br><span class=\"line\"><span class=\"comment\">#PermitEmptyPasswords no</span></span><br></pre></td></tr></table></figure>"},{"title":"设置sudo权限","date":"2024-06-17T16:47:13.000Z","_content":"[Ubuntu](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\")下普通用户用sudo执行命令时报\"xxx is not in the sudoers file.This incident will be reported\"错误，解决方法就是在/etc/sudoers文件里给该用户添加权限。如下：\n\n1.切换到root用户下\n\n2./etc/sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:\n\n```bash\nchmod u+w /etc/sudoers\n```\n\n3.编辑sudoers文件\n\n```bash\nvi /etc/sudoers\n```\n\n找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)\n\nps:这里说下你可以sudoers添加下面四行中任意一条\n\n> 第一行:允许用户youuser执行sudo命令(需要输入密码).  \n> 第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).  \n> 第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.  \n> 第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n\n```\nyouuser            ALL=(ALL)                ALL\n%youuser          ALL=(ALL)                ALL\nyouuser            ALL=(ALL)                NOPASSWD: ALL\n%youuser          ALL=(ALL)                NOPASSWD: ALL\n```\n\n4.撤销sudoers文件写权限,命令:\n\n```bash\nchmod u-w /etc/sudoers\n```\n\n更多Ubuntu相关信息见[Ubuntu](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\") 专题页面 [http://www.linuxidc.com/topicnews.aspx?tid=2](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\")\n\n**本文永久更新链接地址**：[http://www.linuxidc.com/Linux/2016-07/133066.htm](https://www.linuxidc.com/Linux/2016-07/133066.htm)","source":"_posts/Linux/设置sudo权限.md","raw":"---\ntitle: 设置sudo权限\ndate: 2024-06-18 00:47:13\ncategories:\n  - Linux\ntags:\n  - Linux\n  - sudo\n---\n[Ubuntu](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\")下普通用户用sudo执行命令时报\"xxx is not in the sudoers file.This incident will be reported\"错误，解决方法就是在/etc/sudoers文件里给该用户添加权限。如下：\n\n1.切换到root用户下\n\n2./etc/sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:\n\n```bash\nchmod u+w /etc/sudoers\n```\n\n3.编辑sudoers文件\n\n```bash\nvi /etc/sudoers\n```\n\n找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)\n\nps:这里说下你可以sudoers添加下面四行中任意一条\n\n> 第一行:允许用户youuser执行sudo命令(需要输入密码).  \n> 第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).  \n> 第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.  \n> 第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n\n```\nyouuser            ALL=(ALL)                ALL\n%youuser          ALL=(ALL)                ALL\nyouuser            ALL=(ALL)                NOPASSWD: ALL\n%youuser          ALL=(ALL)                NOPASSWD: ALL\n```\n\n4.撤销sudoers文件写权限,命令:\n\n```bash\nchmod u-w /etc/sudoers\n```\n\n更多Ubuntu相关信息见[Ubuntu](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\") 专题页面 [http://www.linuxidc.com/topicnews.aspx?tid=2](https://www.linuxidc.com/topicnews.aspx?tid=2 \"Ubuntu\")\n\n**本文永久更新链接地址**：[http://www.linuxidc.com/Linux/2016-07/133066.htm](https://www.linuxidc.com/Linux/2016-07/133066.htm)","slug":"Linux/设置sudo权限","published":1,"updated":"2024-06-17T16:51:18.843Z","_id":"clxj7to37000ebkuy4uaqdv37","comments":1,"layout":"post","photos":[],"content":"<p><a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">Ubuntu</a>下普通用户用sudo执行命令时报”xxx is not in the sudoers file.This incident will be reported”错误，解决方法就是在&#x2F;etc&#x2F;sudoers文件里给该用户添加权限。如下：</p>\n<p>1.切换到root用户下</p>\n<p>2.&#x2F;etc&#x2F;sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> u+w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>3.编辑sudoers文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>找到这行 root ALL&#x3D;(ALL) ALL,在他下面添加xxx ALL&#x3D;(ALL) ALL (这里的xxx是你的用户名)</p>\n<p>ps:这里说下你可以sudoers添加下面四行中任意一条</p>\n<blockquote>\n<p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youuser            ALL=(ALL)                ALL</span><br><span class=\"line\">%youuser          ALL=(ALL)                ALL</span><br><span class=\"line\">youuser            ALL=(ALL)                NOPASSWD: ALL</span><br><span class=\"line\">%youuser          ALL=(ALL)                NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>4.撤销sudoers文件写权限,命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> u-w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>更多Ubuntu相关信息见<a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">Ubuntu</a> 专题页面 <a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">http://www.linuxidc.com/topicnews.aspx?tid=2</a></p>\n<p><strong>本文永久更新链接地址</strong>：<a href=\"https://www.linuxidc.com/Linux/2016-07/133066.htm\">http://www.linuxidc.com/Linux/2016-07/133066.htm</a></p>\n","excerpt":"","more":"<p><a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">Ubuntu</a>下普通用户用sudo执行命令时报”xxx is not in the sudoers file.This incident will be reported”错误，解决方法就是在&#x2F;etc&#x2F;sudoers文件里给该用户添加权限。如下：</p>\n<p>1.切换到root用户下</p>\n<p>2.&#x2F;etc&#x2F;sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> u+w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>3.编辑sudoers文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>找到这行 root ALL&#x3D;(ALL) ALL,在他下面添加xxx ALL&#x3D;(ALL) ALL (这里的xxx是你的用户名)</p>\n<p>ps:这里说下你可以sudoers添加下面四行中任意一条</p>\n<blockquote>\n<p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youuser            ALL=(ALL)                ALL</span><br><span class=\"line\">%youuser          ALL=(ALL)                ALL</span><br><span class=\"line\">youuser            ALL=(ALL)                NOPASSWD: ALL</span><br><span class=\"line\">%youuser          ALL=(ALL)                NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>4.撤销sudoers文件写权限,命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> u-w /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>更多Ubuntu相关信息见<a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">Ubuntu</a> 专题页面 <a href=\"https://www.linuxidc.com/topicnews.aspx?tid=2\" title=\"Ubuntu\">http://www.linuxidc.com/topicnews.aspx?tid=2</a></p>\n<p><strong>本文永久更新链接地址</strong>：<a href=\"https://www.linuxidc.com/Linux/2016-07/133066.htm\">http://www.linuxidc.com/Linux/2016-07/133066.htm</a></p>\n"},{"title":"centos镜像源","date":"2024-06-17T16:56:03.000Z","_content":"作者： LandWind  \n出处：https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html\n# 源配置  \n`yum`配置文件路径 `/etc/yum.repos.d/centos.repo`  \n备份源配置 `mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup`\n阿里源配置\n更新缓存 `yum makecache && yum update`\n\n配置文件  \n```dsconfig\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n \n[base]\nname=CentOS-$releasever - Base - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n#additional packages that may be useful\n#[extras]\n#name=CentOS-$releasever - Extras - mirrors.aliyun.com\n#failovermethod=priority\n#baseurl=https://mirrors.aliyun.com/centos-stream/$stream/extras/$basearch/os/\n#        http://mirrors.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/\n#        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/\n#gpgcheck=1\n#gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n[PowerTools]\nname=CentOS-$releasever - PowerTools - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n\n[AppStream]\nname=CentOS-$releasever - AppStream - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n```","source":"_posts/Linux/centos镜像源.md","raw":"---\ntitle: centos镜像源\ndate: 2024-06-18 00:56:03\ncategories:\n  - Linux\ntags:\n  - Linux\n  - 镜像源\n---\n作者： LandWind  \n出处：https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html\n# 源配置  \n`yum`配置文件路径 `/etc/yum.repos.d/centos.repo`  \n备份源配置 `mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup`\n阿里源配置\n更新缓存 `yum makecache && yum update`\n\n配置文件  \n```dsconfig\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n \n[base]\nname=CentOS-$releasever - Base - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n#additional packages that may be useful\n#[extras]\n#name=CentOS-$releasever - Extras - mirrors.aliyun.com\n#failovermethod=priority\n#baseurl=https://mirrors.aliyun.com/centos-stream/$stream/extras/$basearch/os/\n#        http://mirrors.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/\n#        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/\n#gpgcheck=1\n#gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n[PowerTools]\nname=CentOS-$releasever - PowerTools - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n\n[AppStream]\nname=CentOS-$releasever - AppStream - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n```","slug":"Linux/centos镜像源","published":1,"updated":"2024-06-17T17:02:36.104Z","_id":"clxj8ca34000tbkuy2lkmasvi","comments":1,"layout":"post","photos":[],"content":"<p>作者： LandWind<br>出处：<a href=\"https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html\">https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html</a></p>\n<h1 id=\"源配置\"><a href=\"#源配置\" class=\"headerlink\" title=\"源配置\"></a>源配置</h1><p><code>yum</code>配置文件路径 <code>/etc/yum.repos.d/centos.repo</code><br>备份源配置 <code>mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup</code><br>阿里源配置<br>更新缓存 <code>yum makecache &amp;&amp; yum update</code></p>\n<p>配置文件  </p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class=\"line\"><span class=\"comment\"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class=\"line\"><span class=\"comment\"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class=\"line\"><span class=\"comment\"># unless you are manually picking other mirrors.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class=\"line\"><span class=\"comment\"># remarked out baseurl= line instead.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[<span class=\"string\">base</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">Base</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#additional packages that may be useful</span></span><br><span class=\"line\"><span class=\"comment\">#[extras]</span></span><br><span class=\"line\"><span class=\"comment\">#name=CentOS-$releasever - Extras - mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=https://mirrors.aliyun.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#        http://mirrors.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#gpgcheck=1</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#additional packages that extend functionality of existing packages</span></span><br><span class=\"line\">[<span class=\"string\">centosplus</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">Plus</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[<span class=\"string\">PowerTools</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">PowerTools</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">AppStream</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">AppStream</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>作者： LandWind<br>出处：<a href=\"https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html\">https://www.cnblogs.com/LandWind/p/centos-stream-9-repo-set-aliyun.html</a></p>\n<h1 id=\"源配置\"><a href=\"#源配置\" class=\"headerlink\" title=\"源配置\"></a>源配置</h1><p><code>yum</code>配置文件路径 <code>/etc/yum.repos.d/centos.repo</code><br>备份源配置 <code>mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup</code><br>阿里源配置<br>更新缓存 <code>yum makecache &amp;&amp; yum update</code></p>\n<p>配置文件  </p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS-Base.repo</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class=\"line\"><span class=\"comment\"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class=\"line\"><span class=\"comment\"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class=\"line\"><span class=\"comment\"># unless you are manually picking other mirrors.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class=\"line\"><span class=\"comment\"># remarked out baseurl= line instead.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[<span class=\"string\">base</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">Base</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">BaseOS</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#additional packages that may be useful</span></span><br><span class=\"line\"><span class=\"comment\">#[extras]</span></span><br><span class=\"line\"><span class=\"comment\">#name=CentOS-$releasever - Extras - mirrors.aliyun.com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=https://mirrors.aliyun.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#        http://mirrors.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/extras/$basearch/os/</span></span><br><span class=\"line\"><span class=\"comment\">#gpgcheck=1</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#additional packages that extend functionality of existing packages</span></span><br><span class=\"line\">[<span class=\"string\">centosplus</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">Plus</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">centosplus</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[<span class=\"string\">PowerTools</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">PowerTools</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">PowerTools</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">AppStream</span>]</span><br><span class=\"line\"><span class=\"string\">name</span>=<span class=\"string\">CentOS</span>-$<span class=\"string\">releasever</span> - <span class=\"string\">AppStream</span> - <span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=priority</span></span><br><span class=\"line\"><span class=\"string\">baseurl</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\">        <span class=\"string\">http</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">cloud</span>.<span class=\"string\">aliyuncs</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/$<span class=\"string\">stream</span>/<span class=\"string\">AppStream</span>/$<span class=\"string\">basearch</span>/<span class=\"string\">os</span>/</span><br><span class=\"line\"><span class=\"string\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey</span>=<span class=\"string\">https</span>://<span class=\"string\">mirrors</span>.<span class=\"string\">aliyun</span>.<span class=\"string\">com</span>/<span class=\"string\">centos-stream</span>/<span class=\"string\">RPM-GPG-KEY-CentOS-Official</span></span><br></pre></td></tr></table></figure>"},{"title":"Debian VNC 安装","date":"2024-06-17T17:03:19.000Z","_content":"## 步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\n\nBy default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest [Xfce](https://xfce.org/) desktop environment and the TightVNC package available in the official Debian repository.\n\n默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的[Xfce](https://xfce.org/)桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。\n\nOn your server, update your list of packages:\n\n在您的服务器上，更新软件包列表：\n\n```shell\n# sudo apt更新\nsudo apt update\n```\n\nNow install the Xfce desktop environment on your server:\n\n现在，在您的服务器上安装Xfce桌面环境：\n\n```shell\n# sudo apt安装xfce4 xfce4-goodies\nsudo apt install xfce4 xfce4-goodies\n```\n\nDuring the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press `Enter`. The installation will continue.\n\n在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按`Enter` 。 安装将继续。\n\nOnce the installation completes, install the TightVNC server:\n\n安装完成后，安装TightVNC服务器：\n\n```shell\n# sudo apt安装tightvncserver\nsudo apt install tightvncserver\n```\n\nTo complete the VNC server’s initial configuration after installation, use the `vncserver` command to set up a secure password and create the initial configuration files:\n\n要在安装后完成VNC服务器的初始配置，请使用`vncserver`命令设置安全密码并创建初始配置文件：\n\n```shell\n# vncserver\nvncserver\n```\n\n\nYou’ll be prompted to enter and verify a password to access your machine remotely:\n\n系统将提示您输入并验证密码以远程访问您的计算机：\n\n```vbnet\n    Output\n   You will require a password to access your desktops.\n\nPassword:\nVerify:\n```\n\nThe password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.\n\n密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。\n\nOnce you verify the password, you’ll have the option to create a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.\n\n验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。\n\nThe process then creates the necessary default configuration files and connection information for the server:\n\n然后，该过程为服务器创建必要的默认配置文件和连接信息：\n\n```shell\n\n\n    Output\n   Would you like to enter a view-only password (y/n)? n\nxauth:  file /home/sammy/.Xauthority does not exist\n\nNew 'X' desktop is your_hostname:1\n\nCreating default startup script /home/sammy/.vnc/xstartup\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\n```\n\nNow let’s configure the VNC server.\n\n现在，让我们配置VNC服务器。\n\n## 步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\n\nThe VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.\n\nVNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。\n\nThese commands are located in a configuration file called `xstartup` in the `.vnc` folder under your home directory. The startup script was created when you ran the `vncserver` command in the previous step, but we’ll create our own to launch the Xfce desktop.\n\n这些命令位于主目录下`.vnc`文件夹中名为`xstartup`的配置文件中。 在上一步中运行`vncserver`命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。\n\nWhen VNC is first set up, it launches a default server instance on port `5901`. This port is called a  *display port* , and is referred to by VNC as `:1`. VNC can launch multiple instances on other display ports, like `:2`, `:3`, and so on.\n\n首次设置VNC时，它将在端口`5901`上启动默认服务器实例。 此端口称为*显示端口* ，VNC将该端口称为`:1` 。 VNC可以在其他显示端口上启动多个实例，例如`:2` ， `:3`等。\n\nBecause we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port `5901` with the following command:\n\n因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口`5901`上运行的VNC服务器实例：\n\n```undefined\n# 停止刚刚的进程\nvncserver -kill :1r -kill：1\n```\n\n\nThe output should look like this, although you’ll see a different PID:\n\n输出将看起来像这样，尽管您将看到一个不同的PID：\n\n```undefined\n\n\n    Output\n   Killing Xtightvnc process ID 17648\n```\n\nBefore you modify the `xstartup` file, back up the original:\n\n在修改`xstartup`文件之前，请备份原始文件：\n\n```undefined\nmv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak\n```\n\n\nNow create a new `xstartup` file and open it in your text editor:\n\n现在创建一个新的`xstartup`文件，并在文本编辑器中将其打开：\n\n```undefined\nnano ~/.vnc/xstartup\n```\n\n\nCommands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:\n\n每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：\n\n```undefined\n〜/ .vnc / xstartup\n```\n\n\n```bash\n#!/bin/bash\nxrdb $HOME/.Xresources\nstartxfce4 &\n```\n\nThe first command in the file, `xrdb $HOME/.Xresources`, tells VNC’s GUI framework to read the user’s `.Xresources` file. `.Xresources` is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.\n\n文件中的第一个命令`xrdb $HOME/.Xresources`告诉VNC的GUI框架读取用户的`.Xresources`文件。 用户可以在`.Xresources`中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。\n\nTo ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.\n\n为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。\n\n```shell\nsudo chmod +x ~/.vnc/xstartup\n```\n\n\nNow, restart the VNC server.\n\n现在，重新启动VNC服务器。\n\n```shell\nvncserver\n```\n\n\nYou’ll see output similar to this:\n\n您将看到类似于以下的输出：\n\n```coffeescript\n\n\n    Output\n   New 'X' desktop is your_hostname:1\n\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\n```\n\nWith the configuration in place, let’s connect to the server from our local machine.\n\n完成配置后，让我们从本地计算机连接到服务器。\n\n## 步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\n\nVNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.\n\n连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。\n\nCreate an SSH connection on your local computer that securely forwards to the `localhost` connection for VNC. You can do this via the terminal on Linux or macOS with the following command:\n\n在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的`localhost`连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：\n\n```shell\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n```\n\n\nThe `-L` switch specifies the port bindings. In this case we’re binding port `5901` of the remote connection to port `5901` on your local machine. The `-C` switch enables compression, while the `-N` switch tells `ssh` that we don’t want to execute a remote command. The `-l` switch specifies the remote login name.\n\n`-L`开关指定端口绑定。 在这种情况下，我们绑定端口`5901`的远程连接端口`5901`在本地机器上。 `-C`开关启用压缩，而`-N`开关告诉`ssh`我们不想执行远程命令。 `-l`开关指定远程登录名。\n\nRemember to replace `sammy` and `your_server_ip` with your non-root username and the IP address of your server.\n\n请记住用非root用户名和服务器的IP地址替换`sammy`和`your_server_ip` 。\n\nIf you are using a graphical SSH client, like PuTTY, use `your_server_ip` as the connection IP, and set `localhost:5901` as a new forwarded port in the program’s SSH tunnel settings.\n\n如果使用的是图形SSH客户端(如PuTTY)，请使用`your_server_ip`作为连接IP，并在程序的SSH隧道设置中将`localhost:5901`设置为新的转发端口。\n\nOnce the tunnel is running, use a VNC client to connect to `localhost:5901`. You’ll be prompted to authenticate using the password you set in Step 1.\n\n隧道运行后，使用VNC客户端连接到`localhost:5901` 。 系统将提示您使用在步骤1中设置的密码进行身份验证。\n\nOnce you are connected, you’ll see the default Xfce desktop.\n\n建立连接后，您将看到默认的Xfce桌面。\n\nSelect **Use default config** to configure your desktop quickly.\n\n选择“  **使用默认配置”** 以快速配置您的桌面。\n\nYou can access files in your home directory with the file manager or from the command line, as seen here:\n\n您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：\n\nOn your local machine, press `CTRL+C` in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.\n\n在本地计算机上，在终端中按`CTRL+C`停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。\n\nNext let’s set up the VNC server as a service.\n\n接下来，我们将VNC服务器设置为服务。\n\n## 步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\n\nNext, we’ll set up the VNC server as a systemd service, so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.\n\n接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。\n\nFirst, create a new unit file called `/etc/systemd/system/vncserver@.service` using your favorite text editor:\n\n首先，使用您喜欢的文本编辑器创建一个名为`/etc/systemd/system/vncserver@.service`的新单元文件：\n\n```\nsudo nano /etc/systemd/system/vncserver@.service\n```\n\n\nThe `@` symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.\n\n名称末尾的`@`符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。\n\nAdd the following lines to the file. Be sure to change the value of  **User** ,  **Group** ,  **WorkingDirectory** , and the username in the value of **PIDFILE** to match your username:\n\n将以下行添加到文件中。 确保在**PIDFILE**的值中更改**User** ， **Group** ， **WorkingDirectory**和用户名的值以匹配您的用户名：\n\n/etc/systemd/system/vncserver@.service\n\n```dsconfig\n[Unit]\nDescription=Start TightVNC server at startup\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nUser=sammy\nGroup=sammy\nWorkingDirectory=/home/sammy\n\nPIDFile=/home/sammy/.vnc/%H:%i.pid\nExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1\nExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i\nExecStop=/usr/bin/vncserver -kill :%i\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThe `ExecStartPre` command stops VNC if it’s already running. The `ExecStart` command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.\n\n如果`ExecStartPre`命令已经在运行，它将停止它。 `ExecStart`命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。\n\nSave and close the file.\n\n保存并关闭文件。\n\nNext, make the system aware of the new unit file.\n\n接下来，使系统知道新的单位文件。\n\n```shell\n# sudo systemctl守护进程重新加载\nsudo systemctl daemon-reload\n```\n\nEnable the unit file.\n\n启用单位文件。\n\n```shell\n# sudo systemctl启用vncserver@1.service\nsudo systemctl enable vncserver@1.service\n```\n\nThe `1` following the `@` sign signifies which display number the service should appear over, in this case the default `:1` as was discussed in Step 2..\n\n`@`符号后的`1`表示服务应显示在哪个显示号上，在这种情况下，默认值`:1`如步骤2所述。\n\nStop the current instance of the VNC server if it’s still running.\n\n如果VNC服务器的当前实例仍在运行，请停止它。\n\n```\n# vncserver -kill :1\nvncserver -kill：1\n```\n\nThen start it as you would start any other systemd service.\n\n然后像启动其他任何systemd服务一样启动它。\n\n```shell\n# sudo systemctl启动vncserver @ 1\nsudo systemctl start vncserver@1\n```\n\nYou can verify that it started with this command:\n\n您可以验证它是否使用以下命令启动：\n\n```\n# sudo systemctl状态vncserver @ 1\nsudo systemctl status vncserver@1\n```\n\n\nIf it started correctly, the output should look like this:\n\n如果正确启动，则输出应如下所示：\n\n```shell\n\n\n    Output\n   ● vncserver@1.service - Start TightVNC server at startup\n   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago\n  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 > /dev/null 2>&1 (code=exited, status=2)\n  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)\n Main PID: 948 (Xtightvnc)\n. . .\n```\n\nYour VNC server will now be available when you reboot the machine.\n\n重新启动计算机后，您的VNC服务器现在将可用。\n\nStart your SSH tunnel again:\n\n再次启动SSH隧道：\n\n* ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n  ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThen make a new connection using your VNC client software to `localhost:5901` to connect to your machine.\n\n然后使用您的VNC客户端软件与`localhost:5901`建立新连接，以连接到您的计算机。\n\n## 结论 (Conclusion)\n\nYou now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.\n\n现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。\n\n\n引用 [debian vnc 配置_如何在Debian 10上安装和配置VNC_cukw6666的博客-CSDN博客](https://blog.csdn.net/cukw6666/article/details/107984389)","source":"_posts/Linux/Debian-VNC-安装.md","raw":"---\ntitle: Debian VNC 安装\ndate: 2024-06-18 01:03:19\ncategories:\n  - Linux\ntags:\n  - Linux\n  - vnc\n---\n## 步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\n\nBy default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest [Xfce](https://xfce.org/) desktop environment and the TightVNC package available in the official Debian repository.\n\n默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的[Xfce](https://xfce.org/)桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。\n\nOn your server, update your list of packages:\n\n在您的服务器上，更新软件包列表：\n\n```shell\n# sudo apt更新\nsudo apt update\n```\n\nNow install the Xfce desktop environment on your server:\n\n现在，在您的服务器上安装Xfce桌面环境：\n\n```shell\n# sudo apt安装xfce4 xfce4-goodies\nsudo apt install xfce4 xfce4-goodies\n```\n\nDuring the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press `Enter`. The installation will continue.\n\n在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按`Enter` 。 安装将继续。\n\nOnce the installation completes, install the TightVNC server:\n\n安装完成后，安装TightVNC服务器：\n\n```shell\n# sudo apt安装tightvncserver\nsudo apt install tightvncserver\n```\n\nTo complete the VNC server’s initial configuration after installation, use the `vncserver` command to set up a secure password and create the initial configuration files:\n\n要在安装后完成VNC服务器的初始配置，请使用`vncserver`命令设置安全密码并创建初始配置文件：\n\n```shell\n# vncserver\nvncserver\n```\n\n\nYou’ll be prompted to enter and verify a password to access your machine remotely:\n\n系统将提示您输入并验证密码以远程访问您的计算机：\n\n```vbnet\n    Output\n   You will require a password to access your desktops.\n\nPassword:\nVerify:\n```\n\nThe password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.\n\n密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。\n\nOnce you verify the password, you’ll have the option to create a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.\n\n验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。\n\nThe process then creates the necessary default configuration files and connection information for the server:\n\n然后，该过程为服务器创建必要的默认配置文件和连接信息：\n\n```shell\n\n\n    Output\n   Would you like to enter a view-only password (y/n)? n\nxauth:  file /home/sammy/.Xauthority does not exist\n\nNew 'X' desktop is your_hostname:1\n\nCreating default startup script /home/sammy/.vnc/xstartup\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\n```\n\nNow let’s configure the VNC server.\n\n现在，让我们配置VNC服务器。\n\n## 步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\n\nThe VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.\n\nVNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。\n\nThese commands are located in a configuration file called `xstartup` in the `.vnc` folder under your home directory. The startup script was created when you ran the `vncserver` command in the previous step, but we’ll create our own to launch the Xfce desktop.\n\n这些命令位于主目录下`.vnc`文件夹中名为`xstartup`的配置文件中。 在上一步中运行`vncserver`命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。\n\nWhen VNC is first set up, it launches a default server instance on port `5901`. This port is called a  *display port* , and is referred to by VNC as `:1`. VNC can launch multiple instances on other display ports, like `:2`, `:3`, and so on.\n\n首次设置VNC时，它将在端口`5901`上启动默认服务器实例。 此端口称为*显示端口* ，VNC将该端口称为`:1` 。 VNC可以在其他显示端口上启动多个实例，例如`:2` ， `:3`等。\n\nBecause we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port `5901` with the following command:\n\n因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口`5901`上运行的VNC服务器实例：\n\n```undefined\n# 停止刚刚的进程\nvncserver -kill :1r -kill：1\n```\n\n\nThe output should look like this, although you’ll see a different PID:\n\n输出将看起来像这样，尽管您将看到一个不同的PID：\n\n```undefined\n\n\n    Output\n   Killing Xtightvnc process ID 17648\n```\n\nBefore you modify the `xstartup` file, back up the original:\n\n在修改`xstartup`文件之前，请备份原始文件：\n\n```undefined\nmv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak\n```\n\n\nNow create a new `xstartup` file and open it in your text editor:\n\n现在创建一个新的`xstartup`文件，并在文本编辑器中将其打开：\n\n```undefined\nnano ~/.vnc/xstartup\n```\n\n\nCommands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:\n\n每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：\n\n```undefined\n〜/ .vnc / xstartup\n```\n\n\n```bash\n#!/bin/bash\nxrdb $HOME/.Xresources\nstartxfce4 &\n```\n\nThe first command in the file, `xrdb $HOME/.Xresources`, tells VNC’s GUI framework to read the user’s `.Xresources` file. `.Xresources` is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.\n\n文件中的第一个命令`xrdb $HOME/.Xresources`告诉VNC的GUI框架读取用户的`.Xresources`文件。 用户可以在`.Xresources`中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。\n\nTo ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.\n\n为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。\n\n```shell\nsudo chmod +x ~/.vnc/xstartup\n```\n\n\nNow, restart the VNC server.\n\n现在，重新启动VNC服务器。\n\n```shell\nvncserver\n```\n\n\nYou’ll see output similar to this:\n\n您将看到类似于以下的输出：\n\n```coffeescript\n\n\n    Output\n   New 'X' desktop is your_hostname:1\n\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\n```\n\nWith the configuration in place, let’s connect to the server from our local machine.\n\n完成配置后，让我们从本地计算机连接到服务器。\n\n## 步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\n\nVNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.\n\n连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。\n\nCreate an SSH connection on your local computer that securely forwards to the `localhost` connection for VNC. You can do this via the terminal on Linux or macOS with the following command:\n\n在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的`localhost`连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：\n\n```shell\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n```\n\n\nThe `-L` switch specifies the port bindings. In this case we’re binding port `5901` of the remote connection to port `5901` on your local machine. The `-C` switch enables compression, while the `-N` switch tells `ssh` that we don’t want to execute a remote command. The `-l` switch specifies the remote login name.\n\n`-L`开关指定端口绑定。 在这种情况下，我们绑定端口`5901`的远程连接端口`5901`在本地机器上。 `-C`开关启用压缩，而`-N`开关告诉`ssh`我们不想执行远程命令。 `-l`开关指定远程登录名。\n\nRemember to replace `sammy` and `your_server_ip` with your non-root username and the IP address of your server.\n\n请记住用非root用户名和服务器的IP地址替换`sammy`和`your_server_ip` 。\n\nIf you are using a graphical SSH client, like PuTTY, use `your_server_ip` as the connection IP, and set `localhost:5901` as a new forwarded port in the program’s SSH tunnel settings.\n\n如果使用的是图形SSH客户端(如PuTTY)，请使用`your_server_ip`作为连接IP，并在程序的SSH隧道设置中将`localhost:5901`设置为新的转发端口。\n\nOnce the tunnel is running, use a VNC client to connect to `localhost:5901`. You’ll be prompted to authenticate using the password you set in Step 1.\n\n隧道运行后，使用VNC客户端连接到`localhost:5901` 。 系统将提示您使用在步骤1中设置的密码进行身份验证。\n\nOnce you are connected, you’ll see the default Xfce desktop.\n\n建立连接后，您将看到默认的Xfce桌面。\n\nSelect **Use default config** to configure your desktop quickly.\n\n选择“  **使用默认配置”** 以快速配置您的桌面。\n\nYou can access files in your home directory with the file manager or from the command line, as seen here:\n\n您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：\n\nOn your local machine, press `CTRL+C` in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.\n\n在本地计算机上，在终端中按`CTRL+C`停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。\n\nNext let’s set up the VNC server as a service.\n\n接下来，我们将VNC服务器设置为服务。\n\n## 步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\n\nNext, we’ll set up the VNC server as a systemd service, so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.\n\n接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。\n\nFirst, create a new unit file called `/etc/systemd/system/vncserver@.service` using your favorite text editor:\n\n首先，使用您喜欢的文本编辑器创建一个名为`/etc/systemd/system/vncserver@.service`的新单元文件：\n\n```\nsudo nano /etc/systemd/system/vncserver@.service\n```\n\n\nThe `@` symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.\n\n名称末尾的`@`符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。\n\nAdd the following lines to the file. Be sure to change the value of  **User** ,  **Group** ,  **WorkingDirectory** , and the username in the value of **PIDFILE** to match your username:\n\n将以下行添加到文件中。 确保在**PIDFILE**的值中更改**User** ， **Group** ， **WorkingDirectory**和用户名的值以匹配您的用户名：\n\n/etc/systemd/system/vncserver@.service\n\n```dsconfig\n[Unit]\nDescription=Start TightVNC server at startup\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nUser=sammy\nGroup=sammy\nWorkingDirectory=/home/sammy\n\nPIDFile=/home/sammy/.vnc/%H:%i.pid\nExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1\nExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i\nExecStop=/usr/bin/vncserver -kill :%i\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThe `ExecStartPre` command stops VNC if it’s already running. The `ExecStart` command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.\n\n如果`ExecStartPre`命令已经在运行，它将停止它。 `ExecStart`命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。\n\nSave and close the file.\n\n保存并关闭文件。\n\nNext, make the system aware of the new unit file.\n\n接下来，使系统知道新的单位文件。\n\n```shell\n# sudo systemctl守护进程重新加载\nsudo systemctl daemon-reload\n```\n\nEnable the unit file.\n\n启用单位文件。\n\n```shell\n# sudo systemctl启用vncserver@1.service\nsudo systemctl enable vncserver@1.service\n```\n\nThe `1` following the `@` sign signifies which display number the service should appear over, in this case the default `:1` as was discussed in Step 2..\n\n`@`符号后的`1`表示服务应显示在哪个显示号上，在这种情况下，默认值`:1`如步骤2所述。\n\nStop the current instance of the VNC server if it’s still running.\n\n如果VNC服务器的当前实例仍在运行，请停止它。\n\n```\n# vncserver -kill :1\nvncserver -kill：1\n```\n\nThen start it as you would start any other systemd service.\n\n然后像启动其他任何systemd服务一样启动它。\n\n```shell\n# sudo systemctl启动vncserver @ 1\nsudo systemctl start vncserver@1\n```\n\nYou can verify that it started with this command:\n\n您可以验证它是否使用以下命令启动：\n\n```\n# sudo systemctl状态vncserver @ 1\nsudo systemctl status vncserver@1\n```\n\n\nIf it started correctly, the output should look like this:\n\n如果正确启动，则输出应如下所示：\n\n```shell\n\n\n    Output\n   ● vncserver@1.service - Start TightVNC server at startup\n   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago\n  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 > /dev/null 2>&1 (code=exited, status=2)\n  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)\n Main PID: 948 (Xtightvnc)\n. . .\n```\n\nYour VNC server will now be available when you reboot the machine.\n\n重新启动计算机后，您的VNC服务器现在将可用。\n\nStart your SSH tunnel again:\n\n再次启动SSH隧道：\n\n* ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n  ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThen make a new connection using your VNC client software to `localhost:5901` to connect to your machine.\n\n然后使用您的VNC客户端软件与`localhost:5901`建立新连接，以连接到您的计算机。\n\n## 结论 (Conclusion)\n\nYou now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.\n\n现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。\n\n\n引用 [debian vnc 配置_如何在Debian 10上安装和配置VNC_cukw6666的博客-CSDN博客](https://blog.csdn.net/cukw6666/article/details/107984389)","slug":"Linux/Debian-VNC-安装","published":1,"updated":"2024-06-17T17:08:15.240Z","_id":"clxj8ca35000xbkuy8fsabsoh","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"步骤1-—安装桌面环境和VNC服务器-Step-1-—-Installing-the-Desktop-Environment-and-VNC-Server\"><a href=\"#步骤1-—安装桌面环境和VNC服务器-Step-1-—-Installing-the-Desktop-Environment-and-VNC-Server\" class=\"headerlink\" title=\"步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\"></a>步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)</h2><p>By default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest <a href=\"https://xfce.org/\">Xfce</a> desktop environment and the TightVNC package available in the official Debian repository.</p>\n<p>默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的<a href=\"https://xfce.org/\">Xfce</a>桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。</p>\n<p>On your server, update your list of packages:</p>\n<p>在您的服务器上，更新软件包列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt更新</span></span><br><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<p>Now install the Xfce desktop environment on your server:</p>\n<p>现在，在您的服务器上安装Xfce桌面环境：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt安装xfce4 xfce4-goodies</span></span><br><span class=\"line\">sudo apt install xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure>\n\n<p>During the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press <code>Enter</code>. The installation will continue.</p>\n<p>在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按<code>Enter</code> 。 安装将继续。</p>\n<p>Once the installation completes, install the TightVNC server:</p>\n<p>安装完成后，安装TightVNC服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt安装tightvncserver</span></span><br><span class=\"line\">sudo apt install tightvncserver</span><br></pre></td></tr></table></figure>\n\n<p>To complete the VNC server’s initial configuration after installation, use the <code>vncserver</code> command to set up a secure password and create the initial configuration files:</p>\n<p>要在安装后完成VNC服务器的初始配置，请使用<code>vncserver</code>命令设置安全密码并创建初始配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vncserver</span></span><br><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure>\n\n\n<p>You’ll be prompted to enter and verify a password to access your machine remotely:</p>\n<p>系统将提示您输入并验证密码以远程访问您的计算机：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Output</span><br><span class=\"line\">   You will require a password <span class=\"keyword\">to</span> access your desktops.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Password:</span></span><br><span class=\"line\"><span class=\"symbol\">Verify:</span></span><br></pre></td></tr></table></figure>\n\n<p>The password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.</p>\n<p>密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。</p>\n<p>Once you verify the password, you’ll have the option to create a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.</p>\n<p>验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。</p>\n<p>The process then creates the necessary default configuration files and connection information for the server:</p>\n<p>然后，该过程为服务器创建必要的默认配置文件和连接信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   Would you like to enter a view-only password (y/n)? n</span><br><span class=\"line\">xauth:  file /home/sammy/.Xauthority does not exist</span><br><span class=\"line\"></span><br><span class=\"line\">New &#x27;X&#x27; desktop is your_hostname:1</span><br><span class=\"line\"></span><br><span class=\"line\">Creating default startup script /home/sammy/.vnc/xstartup</span><br><span class=\"line\">Starting applications specified in /home/sammy/.vnc/xstartup</span><br><span class=\"line\">Log file is /home/sammy/.vnc/your_hostname:1.log</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s configure the VNC server.</p>\n<p>现在，让我们配置VNC服务器。</p>\n<h2 id=\"步骤2-—配置VNC服务器-Step-2-—-Configuring-the-VNC-Server\"><a href=\"#步骤2-—配置VNC服务器-Step-2-—-Configuring-the-VNC-Server\" class=\"headerlink\" title=\"步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\"></a>步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)</h2><p>The VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.</p>\n<p>VNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。</p>\n<p>These commands are located in a configuration file called <code>xstartup</code> in the <code>.vnc</code> folder under your home directory. The startup script was created when you ran the <code>vncserver</code> command in the previous step, but we’ll create our own to launch the Xfce desktop.</p>\n<p>这些命令位于主目录下<code>.vnc</code>文件夹中名为<code>xstartup</code>的配置文件中。 在上一步中运行<code>vncserver</code>命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。</p>\n<p>When VNC is first set up, it launches a default server instance on port <code>5901</code>. This port is called a  <em>display port</em> , and is referred to by VNC as <code>:1</code>. VNC can launch multiple instances on other display ports, like <code>:2</code>, <code>:3</code>, and so on.</p>\n<p>首次设置VNC时，它将在端口<code>5901</code>上启动默认服务器实例。 此端口称为<em>显示端口</em> ，VNC将该端口称为<code>:1</code> 。 VNC可以在其他显示端口上启动多个实例，例如<code>:2</code> ， <code>:3</code>等。</p>\n<p>Because we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port <code>5901</code> with the following command:</p>\n<p>因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口<code>5901</code>上运行的VNC服务器实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 停止刚刚的进程</span><br><span class=\"line\">vncserver -kill :1r -kill：1</span><br></pre></td></tr></table></figure>\n\n\n<p>The output should look like this, although you’ll see a different PID:</p>\n<p>输出将看起来像这样，尽管您将看到一个不同的PID：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> Output</span><br><span class=\"line\">Killing Xtightvnc process ID 17648</span><br></pre></td></tr></table></figure>\n\n<p>Before you modify the <code>xstartup</code> file, back up the original:</p>\n<p>在修改<code>xstartup</code>文件之前，请备份原始文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak</span><br></pre></td></tr></table></figure>\n\n\n<p>Now create a new <code>xstartup</code> file and open it in your text editor:</p>\n<p>现在创建一个新的<code>xstartup</code>文件，并在文本编辑器中将其打开：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.vnc/xstartup</span><br></pre></td></tr></table></figure>\n\n\n<p>Commands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:</p>\n<p>每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">〜/ .vnc / xstartup</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">xrdb <span class=\"variable\">$HOME</span>/.Xresources</span><br><span class=\"line\">startxfce4 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>The first command in the file, <code>xrdb $HOME/.Xresources</code>, tells VNC’s GUI framework to read the user’s <code>.Xresources</code> file. <code>.Xresources</code> is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.</p>\n<p>文件中的第一个命令<code>xrdb $HOME/.Xresources</code>告诉VNC的GUI框架读取用户的<code>.Xresources</code>文件。 用户可以在<code>.Xresources</code>中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。</p>\n<p>To ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.</p>\n<p>为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x ~/.vnc/xstartup</span><br></pre></td></tr></table></figure>\n\n\n<p>Now, restart the VNC server.</p>\n<p>现在，重新启动VNC服务器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure>\n\n\n<p>You’ll see output similar to this:</p>\n<p>您将看到类似于以下的输出：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   New <span class=\"string\">&#x27;X&#x27;</span> desktop <span class=\"keyword\">is</span> your_hostname:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Starting applications specified <span class=\"keyword\">in</span> <span class=\"regexp\">/home/sammy/</span>.vnc/xstartup</span><br><span class=\"line\">Log file <span class=\"keyword\">is</span> <span class=\"regexp\">/home/sammy/</span>.vnc/your_hostname:<span class=\"number\">1.</span>log</span><br></pre></td></tr></table></figure>\n\n<p>With the configuration in place, let’s connect to the server from our local machine.</p>\n<p>完成配置后，让我们从本地计算机连接到服务器。</p>\n<h2 id=\"步骤3-—安全地连接VNC桌面-Step-3-—-Connecting-the-VNC-Desktop-Securely\"><a href=\"#步骤3-—安全地连接VNC桌面-Step-3-—-Connecting-the-VNC-Desktop-Securely\" class=\"headerlink\" title=\"步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\"></a>步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)</h2><p>VNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.</p>\n<p>连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。</p>\n<p>Create an SSH connection on your local computer that securely forwards to the <code>localhost</code> connection for VNC. You can do this via the terminal on Linux or macOS with the following command:</p>\n<p>在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的<code>localhost</code>连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</span><br></pre></td></tr></table></figure>\n\n\n<p>The <code>-L</code> switch specifies the port bindings. In this case we’re binding port <code>5901</code> of the remote connection to port <code>5901</code> on your local machine. The <code>-C</code> switch enables compression, while the <code>-N</code> switch tells <code>ssh</code> that we don’t want to execute a remote command. The <code>-l</code> switch specifies the remote login name.</p>\n<p><code>-L</code>开关指定端口绑定。 在这种情况下，我们绑定端口<code>5901</code>的远程连接端口<code>5901</code>在本地机器上。 <code>-C</code>开关启用压缩，而<code>-N</code>开关告诉<code>ssh</code>我们不想执行远程命令。 <code>-l</code>开关指定远程登录名。</p>\n<p>Remember to replace <code>sammy</code> and <code>your_server_ip</code> with your non-root username and the IP address of your server.</p>\n<p>请记住用非root用户名和服务器的IP地址替换<code>sammy</code>和<code>your_server_ip</code> 。</p>\n<p>If you are using a graphical SSH client, like PuTTY, use <code>your_server_ip</code> as the connection IP, and set <code>localhost:5901</code> as a new forwarded port in the program’s SSH tunnel settings.</p>\n<p>如果使用的是图形SSH客户端(如PuTTY)，请使用<code>your_server_ip</code>作为连接IP，并在程序的SSH隧道设置中将<code>localhost:5901</code>设置为新的转发端口。</p>\n<p>Once the tunnel is running, use a VNC client to connect to <code>localhost:5901</code>. You’ll be prompted to authenticate using the password you set in Step 1.</p>\n<p>隧道运行后，使用VNC客户端连接到<code>localhost:5901</code> 。 系统将提示您使用在步骤1中设置的密码进行身份验证。</p>\n<p>Once you are connected, you’ll see the default Xfce desktop.</p>\n<p>建立连接后，您将看到默认的Xfce桌面。</p>\n<p>Select <strong>Use default config</strong> to configure your desktop quickly.</p>\n<p>选择“  <strong>使用默认配置”</strong> 以快速配置您的桌面。</p>\n<p>You can access files in your home directory with the file manager or from the command line, as seen here:</p>\n<p>您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：</p>\n<p>On your local machine, press <code>CTRL+C</code> in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.</p>\n<p>在本地计算机上，在终端中按<code>CTRL+C</code>停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。</p>\n<p>Next let’s set up the VNC server as a service.</p>\n<p>接下来，我们将VNC服务器设置为服务。</p>\n<h2 id=\"步骤4-—将VNC作为系统服务运行-Step-4-—-Running-VNC-as-a-System-Service\"><a href=\"#步骤4-—将VNC作为系统服务运行-Step-4-—-Running-VNC-as-a-System-Service\" class=\"headerlink\" title=\"步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\"></a>步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)</h2><p>Next, we’ll set up the VNC server as a systemd service, so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.</p>\n<p>接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。</p>\n<p>First, create a new unit file called <code>/etc/systemd/system/vncserver@.service</code> using your favorite text editor:</p>\n<p>首先，使用您喜欢的文本编辑器创建一个名为<code>/etc/systemd/system/vncserver@.service</code>的新单元文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/vncserver@.service</span><br></pre></td></tr></table></figure>\n\n\n<p>The <code>@</code> symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.</p>\n<p>名称末尾的<code>@</code>符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。</p>\n<p>Add the following lines to the file. Be sure to change the value of  <strong>User</strong> ,  <strong>Group</strong> ,  <strong>WorkingDirectory</strong> , and the username in the value of <strong>PIDFILE</strong> to match your username:</p>\n<p>将以下行添加到文件中。 确保在<strong>PIDFILE</strong>的值中更改<strong>User</strong> ， <strong>Group</strong> ， <strong>WorkingDirectory</strong>和用户名的值以匹配您的用户名：</p>\n<p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">Unit</span>]</span><br><span class=\"line\"><span class=\"string\">Description</span>=<span class=\"string\">Start</span> <span class=\"string\">TightVNC</span> <span class=\"string\">server</span> <span class=\"string\">at</span> <span class=\"string\">startup</span></span><br><span class=\"line\"><span class=\"string\">After</span>=<span class=\"string\">syslog</span>.<span class=\"string\">target</span> <span class=\"string\">network</span>.<span class=\"string\">target</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">Service</span>]</span><br><span class=\"line\"><span class=\"string\">Type</span>=<span class=\"string\">forking</span></span><br><span class=\"line\"><span class=\"string\">User</span>=<span class=\"string\">sammy</span></span><br><span class=\"line\"><span class=\"string\">Group</span>=<span class=\"string\">sammy</span></span><br><span class=\"line\"><span class=\"string\">WorkingDirectory</span>=/<span class=\"string\">home</span>/<span class=\"string\">sammy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">PIDFile</span>=/<span class=\"string\">home</span>/<span class=\"string\">sammy</span>/.<span class=\"string\">vnc</span>/%<span class=\"string\">H</span>:%<span class=\"string\">i</span>.<span class=\"string\">pid</span></span><br><span class=\"line\"><span class=\"string\">ExecStartPre</span>=-/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">kill</span> :%<span class=\"string\">i</span> &gt; /<span class=\"string\">dev</span>/<span class=\"string\">null</span> <span class=\"string\">2</span>&gt;&amp;<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">ExecStart</span>=/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">depth</span> <span class=\"string\">24</span> -<span class=\"string\">geometry</span> <span class=\"string\">1280x800</span> :%<span class=\"string\">i</span></span><br><span class=\"line\"><span class=\"string\">ExecStop</span>=/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">kill</span> :%<span class=\"string\">i</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">Install</span>]</span><br><span class=\"line\"><span class=\"string\">WantedBy</span>=<span class=\"string\">multi-user</span>.<span class=\"string\">target</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>ExecStartPre</code> command stops VNC if it’s already running. The <code>ExecStart</code> command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.</p>\n<p>如果<code>ExecStartPre</code>命令已经在运行，它将停止它。 <code>ExecStart</code>命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。</p>\n<p>Save and close the file.</p>\n<p>保存并关闭文件。</p>\n<p>Next, make the system aware of the new unit file.</p>\n<p>接下来，使系统知道新的单位文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl守护进程重新加载</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>Enable the unit file.</p>\n<p>启用单位文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl启用vncserver@1.service</span></span><br><span class=\"line\">sudo systemctl enable vncserver@1.service</span><br></pre></td></tr></table></figure>\n\n<p>The <code>1</code> following the <code>@</code> sign signifies which display number the service should appear over, in this case the default <code>:1</code> as was discussed in Step 2..</p>\n<p><code>@</code>符号后的<code>1</code>表示服务应显示在哪个显示号上，在这种情况下，默认值<code>:1</code>如步骤2所述。</p>\n<p>Stop the current instance of the VNC server if it’s still running.</p>\n<p>如果VNC服务器的当前实例仍在运行，请停止它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vncserver -kill :1</span><br><span class=\"line\">vncserver -kill：1</span><br></pre></td></tr></table></figure>\n\n<p>Then start it as you would start any other systemd service.</p>\n<p>然后像启动其他任何systemd服务一样启动它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl启动vncserver @ 1</span></span><br><span class=\"line\">sudo systemctl start vncserver@1</span><br></pre></td></tr></table></figure>\n\n<p>You can verify that it started with this command:</p>\n<p>您可以验证它是否使用以下命令启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo systemctl状态vncserver @ 1</span><br><span class=\"line\">sudo systemctl status vncserver@1</span><br></pre></td></tr></table></figure>\n\n\n<p>If it started correctly, the output should look like this:</p>\n<p>如果正确启动，则输出应如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   ● vncserver@1.service - Start TightVNC server at startup</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago</span><br><span class=\"line\">  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 &gt; /dev/null 2&gt;&amp;1 (code=exited, status=2)</span><br><span class=\"line\">  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 948 (Xtightvnc)</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>Your VNC server will now be available when you reboot the machine.</p>\n<p>重新启动计算机后，您的VNC服务器现在将可用。</p>\n<p>Start your SSH tunnel again:</p>\n<p>再次启动SSH隧道：</p>\n<ul>\n<li>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip<br>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</li>\n</ul>\n<p>Then make a new connection using your VNC client software to <code>localhost:5901</code> to connect to your machine.</p>\n<p>然后使用您的VNC客户端软件与<code>localhost:5901</code>建立新连接，以连接到您的计算机。</p>\n<h2 id=\"结论-Conclusion\"><a href=\"#结论-Conclusion\" class=\"headerlink\" title=\"结论 (Conclusion)\"></a>结论 (Conclusion)</h2><p>You now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.</p>\n<p>现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。</p>\n<p>引用 <a href=\"https://blog.csdn.net/cukw6666/article/details/107984389\">debian vnc 配置_如何在Debian 10上安装和配置VNC_cukw6666的博客-CSDN博客</a></p>\n","excerpt":"","more":"<h2 id=\"步骤1-—安装桌面环境和VNC服务器-Step-1-—-Installing-the-Desktop-Environment-and-VNC-Server\"><a href=\"#步骤1-—安装桌面环境和VNC服务器-Step-1-—-Installing-the-Desktop-Environment-and-VNC-Server\" class=\"headerlink\" title=\"步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\"></a>步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)</h2><p>By default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest <a href=\"https://xfce.org/\">Xfce</a> desktop environment and the TightVNC package available in the official Debian repository.</p>\n<p>默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的<a href=\"https://xfce.org/\">Xfce</a>桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。</p>\n<p>On your server, update your list of packages:</p>\n<p>在您的服务器上，更新软件包列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt更新</span></span><br><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<p>Now install the Xfce desktop environment on your server:</p>\n<p>现在，在您的服务器上安装Xfce桌面环境：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt安装xfce4 xfce4-goodies</span></span><br><span class=\"line\">sudo apt install xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure>\n\n<p>During the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press <code>Enter</code>. The installation will continue.</p>\n<p>在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按<code>Enter</code> 。 安装将继续。</p>\n<p>Once the installation completes, install the TightVNC server:</p>\n<p>安装完成后，安装TightVNC服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo apt安装tightvncserver</span></span><br><span class=\"line\">sudo apt install tightvncserver</span><br></pre></td></tr></table></figure>\n\n<p>To complete the VNC server’s initial configuration after installation, use the <code>vncserver</code> command to set up a secure password and create the initial configuration files:</p>\n<p>要在安装后完成VNC服务器的初始配置，请使用<code>vncserver</code>命令设置安全密码并创建初始配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vncserver</span></span><br><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure>\n\n\n<p>You’ll be prompted to enter and verify a password to access your machine remotely:</p>\n<p>系统将提示您输入并验证密码以远程访问您的计算机：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Output</span><br><span class=\"line\">   You will require a password <span class=\"keyword\">to</span> access your desktops.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Password:</span></span><br><span class=\"line\"><span class=\"symbol\">Verify:</span></span><br></pre></td></tr></table></figure>\n\n<p>The password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.</p>\n<p>密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。</p>\n<p>Once you verify the password, you’ll have the option to create a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.</p>\n<p>验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。</p>\n<p>The process then creates the necessary default configuration files and connection information for the server:</p>\n<p>然后，该过程为服务器创建必要的默认配置文件和连接信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   Would you like to enter a view-only password (y/n)? n</span><br><span class=\"line\">xauth:  file /home/sammy/.Xauthority does not exist</span><br><span class=\"line\"></span><br><span class=\"line\">New &#x27;X&#x27; desktop is your_hostname:1</span><br><span class=\"line\"></span><br><span class=\"line\">Creating default startup script /home/sammy/.vnc/xstartup</span><br><span class=\"line\">Starting applications specified in /home/sammy/.vnc/xstartup</span><br><span class=\"line\">Log file is /home/sammy/.vnc/your_hostname:1.log</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s configure the VNC server.</p>\n<p>现在，让我们配置VNC服务器。</p>\n<h2 id=\"步骤2-—配置VNC服务器-Step-2-—-Configuring-the-VNC-Server\"><a href=\"#步骤2-—配置VNC服务器-Step-2-—-Configuring-the-VNC-Server\" class=\"headerlink\" title=\"步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\"></a>步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)</h2><p>The VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.</p>\n<p>VNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。</p>\n<p>These commands are located in a configuration file called <code>xstartup</code> in the <code>.vnc</code> folder under your home directory. The startup script was created when you ran the <code>vncserver</code> command in the previous step, but we’ll create our own to launch the Xfce desktop.</p>\n<p>这些命令位于主目录下<code>.vnc</code>文件夹中名为<code>xstartup</code>的配置文件中。 在上一步中运行<code>vncserver</code>命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。</p>\n<p>When VNC is first set up, it launches a default server instance on port <code>5901</code>. This port is called a  <em>display port</em> , and is referred to by VNC as <code>:1</code>. VNC can launch multiple instances on other display ports, like <code>:2</code>, <code>:3</code>, and so on.</p>\n<p>首次设置VNC时，它将在端口<code>5901</code>上启动默认服务器实例。 此端口称为<em>显示端口</em> ，VNC将该端口称为<code>:1</code> 。 VNC可以在其他显示端口上启动多个实例，例如<code>:2</code> ， <code>:3</code>等。</p>\n<p>Because we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port <code>5901</code> with the following command:</p>\n<p>因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口<code>5901</code>上运行的VNC服务器实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 停止刚刚的进程</span><br><span class=\"line\">vncserver -kill :1r -kill：1</span><br></pre></td></tr></table></figure>\n\n\n<p>The output should look like this, although you’ll see a different PID:</p>\n<p>输出将看起来像这样，尽管您将看到一个不同的PID：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> Output</span><br><span class=\"line\">Killing Xtightvnc process ID 17648</span><br></pre></td></tr></table></figure>\n\n<p>Before you modify the <code>xstartup</code> file, back up the original:</p>\n<p>在修改<code>xstartup</code>文件之前，请备份原始文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak</span><br></pre></td></tr></table></figure>\n\n\n<p>Now create a new <code>xstartup</code> file and open it in your text editor:</p>\n<p>现在创建一个新的<code>xstartup</code>文件，并在文本编辑器中将其打开：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.vnc/xstartup</span><br></pre></td></tr></table></figure>\n\n\n<p>Commands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:</p>\n<p>每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">〜/ .vnc / xstartup</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">xrdb <span class=\"variable\">$HOME</span>/.Xresources</span><br><span class=\"line\">startxfce4 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>The first command in the file, <code>xrdb $HOME/.Xresources</code>, tells VNC’s GUI framework to read the user’s <code>.Xresources</code> file. <code>.Xresources</code> is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.</p>\n<p>文件中的第一个命令<code>xrdb $HOME/.Xresources</code>告诉VNC的GUI框架读取用户的<code>.Xresources</code>文件。 用户可以在<code>.Xresources</code>中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。</p>\n<p>To ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.</p>\n<p>为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x ~/.vnc/xstartup</span><br></pre></td></tr></table></figure>\n\n\n<p>Now, restart the VNC server.</p>\n<p>现在，重新启动VNC服务器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver</span><br></pre></td></tr></table></figure>\n\n\n<p>You’ll see output similar to this:</p>\n<p>您将看到类似于以下的输出：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   New <span class=\"string\">&#x27;X&#x27;</span> desktop <span class=\"keyword\">is</span> your_hostname:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Starting applications specified <span class=\"keyword\">in</span> <span class=\"regexp\">/home/sammy/</span>.vnc/xstartup</span><br><span class=\"line\">Log file <span class=\"keyword\">is</span> <span class=\"regexp\">/home/sammy/</span>.vnc/your_hostname:<span class=\"number\">1.</span>log</span><br></pre></td></tr></table></figure>\n\n<p>With the configuration in place, let’s connect to the server from our local machine.</p>\n<p>完成配置后，让我们从本地计算机连接到服务器。</p>\n<h2 id=\"步骤3-—安全地连接VNC桌面-Step-3-—-Connecting-the-VNC-Desktop-Securely\"><a href=\"#步骤3-—安全地连接VNC桌面-Step-3-—-Connecting-the-VNC-Desktop-Securely\" class=\"headerlink\" title=\"步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\"></a>步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)</h2><p>VNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.</p>\n<p>连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。</p>\n<p>Create an SSH connection on your local computer that securely forwards to the <code>localhost</code> connection for VNC. You can do this via the terminal on Linux or macOS with the following command:</p>\n<p>在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的<code>localhost</code>连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</span><br></pre></td></tr></table></figure>\n\n\n<p>The <code>-L</code> switch specifies the port bindings. In this case we’re binding port <code>5901</code> of the remote connection to port <code>5901</code> on your local machine. The <code>-C</code> switch enables compression, while the <code>-N</code> switch tells <code>ssh</code> that we don’t want to execute a remote command. The <code>-l</code> switch specifies the remote login name.</p>\n<p><code>-L</code>开关指定端口绑定。 在这种情况下，我们绑定端口<code>5901</code>的远程连接端口<code>5901</code>在本地机器上。 <code>-C</code>开关启用压缩，而<code>-N</code>开关告诉<code>ssh</code>我们不想执行远程命令。 <code>-l</code>开关指定远程登录名。</p>\n<p>Remember to replace <code>sammy</code> and <code>your_server_ip</code> with your non-root username and the IP address of your server.</p>\n<p>请记住用非root用户名和服务器的IP地址替换<code>sammy</code>和<code>your_server_ip</code> 。</p>\n<p>If you are using a graphical SSH client, like PuTTY, use <code>your_server_ip</code> as the connection IP, and set <code>localhost:5901</code> as a new forwarded port in the program’s SSH tunnel settings.</p>\n<p>如果使用的是图形SSH客户端(如PuTTY)，请使用<code>your_server_ip</code>作为连接IP，并在程序的SSH隧道设置中将<code>localhost:5901</code>设置为新的转发端口。</p>\n<p>Once the tunnel is running, use a VNC client to connect to <code>localhost:5901</code>. You’ll be prompted to authenticate using the password you set in Step 1.</p>\n<p>隧道运行后，使用VNC客户端连接到<code>localhost:5901</code> 。 系统将提示您使用在步骤1中设置的密码进行身份验证。</p>\n<p>Once you are connected, you’ll see the default Xfce desktop.</p>\n<p>建立连接后，您将看到默认的Xfce桌面。</p>\n<p>Select <strong>Use default config</strong> to configure your desktop quickly.</p>\n<p>选择“  <strong>使用默认配置”</strong> 以快速配置您的桌面。</p>\n<p>You can access files in your home directory with the file manager or from the command line, as seen here:</p>\n<p>您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：</p>\n<p>On your local machine, press <code>CTRL+C</code> in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.</p>\n<p>在本地计算机上，在终端中按<code>CTRL+C</code>停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。</p>\n<p>Next let’s set up the VNC server as a service.</p>\n<p>接下来，我们将VNC服务器设置为服务。</p>\n<h2 id=\"步骤4-—将VNC作为系统服务运行-Step-4-—-Running-VNC-as-a-System-Service\"><a href=\"#步骤4-—将VNC作为系统服务运行-Step-4-—-Running-VNC-as-a-System-Service\" class=\"headerlink\" title=\"步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\"></a>步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)</h2><p>Next, we’ll set up the VNC server as a systemd service, so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.</p>\n<p>接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。</p>\n<p>First, create a new unit file called <code>/etc/systemd/system/vncserver@.service</code> using your favorite text editor:</p>\n<p>首先，使用您喜欢的文本编辑器创建一个名为<code>/etc/systemd/system/vncserver@.service</code>的新单元文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/vncserver@.service</span><br></pre></td></tr></table></figure>\n\n\n<p>The <code>@</code> symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.</p>\n<p>名称末尾的<code>@</code>符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。</p>\n<p>Add the following lines to the file. Be sure to change the value of  <strong>User</strong> ,  <strong>Group</strong> ,  <strong>WorkingDirectory</strong> , and the username in the value of <strong>PIDFILE</strong> to match your username:</p>\n<p>将以下行添加到文件中。 确保在<strong>PIDFILE</strong>的值中更改<strong>User</strong> ， <strong>Group</strong> ， <strong>WorkingDirectory</strong>和用户名的值以匹配您的用户名：</p>\n<p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">Unit</span>]</span><br><span class=\"line\"><span class=\"string\">Description</span>=<span class=\"string\">Start</span> <span class=\"string\">TightVNC</span> <span class=\"string\">server</span> <span class=\"string\">at</span> <span class=\"string\">startup</span></span><br><span class=\"line\"><span class=\"string\">After</span>=<span class=\"string\">syslog</span>.<span class=\"string\">target</span> <span class=\"string\">network</span>.<span class=\"string\">target</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">Service</span>]</span><br><span class=\"line\"><span class=\"string\">Type</span>=<span class=\"string\">forking</span></span><br><span class=\"line\"><span class=\"string\">User</span>=<span class=\"string\">sammy</span></span><br><span class=\"line\"><span class=\"string\">Group</span>=<span class=\"string\">sammy</span></span><br><span class=\"line\"><span class=\"string\">WorkingDirectory</span>=/<span class=\"string\">home</span>/<span class=\"string\">sammy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">PIDFile</span>=/<span class=\"string\">home</span>/<span class=\"string\">sammy</span>/.<span class=\"string\">vnc</span>/%<span class=\"string\">H</span>:%<span class=\"string\">i</span>.<span class=\"string\">pid</span></span><br><span class=\"line\"><span class=\"string\">ExecStartPre</span>=-/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">kill</span> :%<span class=\"string\">i</span> &gt; /<span class=\"string\">dev</span>/<span class=\"string\">null</span> <span class=\"string\">2</span>&gt;&amp;<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">ExecStart</span>=/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">depth</span> <span class=\"string\">24</span> -<span class=\"string\">geometry</span> <span class=\"string\">1280x800</span> :%<span class=\"string\">i</span></span><br><span class=\"line\"><span class=\"string\">ExecStop</span>=/<span class=\"string\">usr</span>/<span class=\"string\">bin</span>/<span class=\"string\">vncserver</span> -<span class=\"string\">kill</span> :%<span class=\"string\">i</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">Install</span>]</span><br><span class=\"line\"><span class=\"string\">WantedBy</span>=<span class=\"string\">multi-user</span>.<span class=\"string\">target</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>ExecStartPre</code> command stops VNC if it’s already running. The <code>ExecStart</code> command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.</p>\n<p>如果<code>ExecStartPre</code>命令已经在运行，它将停止它。 <code>ExecStart</code>命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。</p>\n<p>Save and close the file.</p>\n<p>保存并关闭文件。</p>\n<p>Next, make the system aware of the new unit file.</p>\n<p>接下来，使系统知道新的单位文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl守护进程重新加载</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>Enable the unit file.</p>\n<p>启用单位文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl启用vncserver@1.service</span></span><br><span class=\"line\">sudo systemctl enable vncserver@1.service</span><br></pre></td></tr></table></figure>\n\n<p>The <code>1</code> following the <code>@</code> sign signifies which display number the service should appear over, in this case the default <code>:1</code> as was discussed in Step 2..</p>\n<p><code>@</code>符号后的<code>1</code>表示服务应显示在哪个显示号上，在这种情况下，默认值<code>:1</code>如步骤2所述。</p>\n<p>Stop the current instance of the VNC server if it’s still running.</p>\n<p>如果VNC服务器的当前实例仍在运行，请停止它。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vncserver -kill :1</span><br><span class=\"line\">vncserver -kill：1</span><br></pre></td></tr></table></figure>\n\n<p>Then start it as you would start any other systemd service.</p>\n<p>然后像启动其他任何systemd服务一样启动它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sudo systemctl启动vncserver @ 1</span></span><br><span class=\"line\">sudo systemctl start vncserver@1</span><br></pre></td></tr></table></figure>\n\n<p>You can verify that it started with this command:</p>\n<p>您可以验证它是否使用以下命令启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo systemctl状态vncserver @ 1</span><br><span class=\"line\">sudo systemctl status vncserver@1</span><br></pre></td></tr></table></figure>\n\n\n<p>If it started correctly, the output should look like this:</p>\n<p>如果正确启动，则输出应如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Output</span><br><span class=\"line\">   ● vncserver@1.service - Start TightVNC server at startup</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago</span><br><span class=\"line\">  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 &gt; /dev/null 2&gt;&amp;1 (code=exited, status=2)</span><br><span class=\"line\">  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 948 (Xtightvnc)</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>Your VNC server will now be available when you reboot the machine.</p>\n<p>重新启动计算机后，您的VNC服务器现在将可用。</p>\n<p>Start your SSH tunnel again:</p>\n<p>再次启动SSH隧道：</p>\n<ul>\n<li>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip<br>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</li>\n</ul>\n<p>Then make a new connection using your VNC client software to <code>localhost:5901</code> to connect to your machine.</p>\n<p>然后使用您的VNC客户端软件与<code>localhost:5901</code>建立新连接，以连接到您的计算机。</p>\n<h2 id=\"结论-Conclusion\"><a href=\"#结论-Conclusion\" class=\"headerlink\" title=\"结论 (Conclusion)\"></a>结论 (Conclusion)</h2><p>You now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.</p>\n<p>现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。</p>\n<p>引用 <a href=\"https://blog.csdn.net/cukw6666/article/details/107984389\">debian vnc 配置_如何在Debian 10上安装和配置VNC_cukw6666的博客-CSDN博客</a></p>\n"},{"title":"apt yum rpm 对比","date":"2024-06-17T17:09:33.000Z","_content":"### 问题\n1. `rpm`存在什么问题？\n2. `yum`有什么优势？\n3. `apt-get`与`yum`有什么相同之处？\n\n### 经常会看到`yum`、`apt-get`、`rpm`，那么它们是什么？下面介绍一下。\n\n`rpm`是由红帽公司开发的软件包管理方式，使用`rpm`我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是`rpm`软件包之间的依赖性问题往往会很繁琐,尤其是软件由多个`rpm`包组成时。  \n`yum`（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於`rpm`包管理，能够从指定的服务器自动下载`rpm`包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  \n`rpm` 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：`rpm` -ivh，`rpm`包的安装有一个很大的缺点就是文件的关联性太大，有时候装一个软件要安装很多其他的软件包，很麻烦，所以为此RedHat小红帽开发了`yum`安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：`yum` -y install ，`yum`并不是一中包，而是安装包的软件\n\n简单点说, `rpm` 只能安装已经下载到本地机器上的`rpm` 包. `yum`能在线下载并安装`rpm`包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是`rpm` 工具所不具备的。\n\n`yum`与`apt-get`的相同点：  \n`apt-get`属于ubuntu、Debian的包管理工具  \n`yum`则属于Redhat、Centos包管理工具  \n\n明白了这两点，对于我们使用hadoop、openstack已经没有问题了。更详细参考：\n\n一般来说著名的linux系统基本上分两大类：\n\n1.RedHat系列：Redhat、Centos、Fedora等\n\n2.Debian系列：Debian、Ubuntu等\n\nRedHat 系列\n1 常见的安装包格式 `rpm`包,安装`rpm`包的命令是“`rpm` -参数”\n\n2 包管理工具 `yum`\n\n3 支持tar包\n\nDebian系列  \n\n1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”\n\n2 包管理工具 `apt-get`\n\n3 支持tar包\n\ntar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。\n`rpm` 相当于windows中的安装文件，它会自动处理软件包之间的依赖关系。\n\n优缺点来说，`rpm`一般都是预先编译好的文件，它可能已经绑定到某种CPU或者发行版上面了。\ntar一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。\n\n如果你的包不想开放源代码，你可以制作成`rpm`，如果开源，用tar更方便了。\n\ntar一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，./configure, make, make install.　来安装软件。\n\n`rpm`是redhat公司的一种软件包管理机制，直接通过`rpm`命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。\n\n参考 https://blog.csdn.net/mier9042/article/details/80612707\n\n这样一来就很明显了 初入linux 我们应该选择一个适合自己的阵营\n\n因为VPS大多以centos来的 自己本地 也要选centos阵营 否则以后命令熟悉了  再换就不行了\n\n就一开始 就坚守一个阵地  所以我放弃mint 系统 虽然它类windows 但是命令不合 不相为谋  拜拜\n————————————————\n版权声明：本文为CSDN博主「Lucky@Dong」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/zzddada/article/details/123208388","source":"_posts/Linux/apt-yum-rpm.md","raw":"---\ntitle: apt yum rpm 对比\ndate: 2024-06-18 01:09:33\ncategories:\n  - Linux\ntags:\n  - Linux\n  - apt\n  - yum\n  - rpm\n---\n### 问题\n1. `rpm`存在什么问题？\n2. `yum`有什么优势？\n3. `apt-get`与`yum`有什么相同之处？\n\n### 经常会看到`yum`、`apt-get`、`rpm`，那么它们是什么？下面介绍一下。\n\n`rpm`是由红帽公司开发的软件包管理方式，使用`rpm`我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是`rpm`软件包之间的依赖性问题往往会很繁琐,尤其是软件由多个`rpm`包组成时。  \n`yum`（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於`rpm`包管理，能够从指定的服务器自动下载`rpm`包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  \n`rpm` 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：`rpm` -ivh，`rpm`包的安装有一个很大的缺点就是文件的关联性太大，有时候装一个软件要安装很多其他的软件包，很麻烦，所以为此RedHat小红帽开发了`yum`安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：`yum` -y install ，`yum`并不是一中包，而是安装包的软件\n\n简单点说, `rpm` 只能安装已经下载到本地机器上的`rpm` 包. `yum`能在线下载并安装`rpm`包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是`rpm` 工具所不具备的。\n\n`yum`与`apt-get`的相同点：  \n`apt-get`属于ubuntu、Debian的包管理工具  \n`yum`则属于Redhat、Centos包管理工具  \n\n明白了这两点，对于我们使用hadoop、openstack已经没有问题了。更详细参考：\n\n一般来说著名的linux系统基本上分两大类：\n\n1.RedHat系列：Redhat、Centos、Fedora等\n\n2.Debian系列：Debian、Ubuntu等\n\nRedHat 系列\n1 常见的安装包格式 `rpm`包,安装`rpm`包的命令是“`rpm` -参数”\n\n2 包管理工具 `yum`\n\n3 支持tar包\n\nDebian系列  \n\n1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”\n\n2 包管理工具 `apt-get`\n\n3 支持tar包\n\ntar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。\n`rpm` 相当于windows中的安装文件，它会自动处理软件包之间的依赖关系。\n\n优缺点来说，`rpm`一般都是预先编译好的文件，它可能已经绑定到某种CPU或者发行版上面了。\ntar一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。\n\n如果你的包不想开放源代码，你可以制作成`rpm`，如果开源，用tar更方便了。\n\ntar一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，./configure, make, make install.　来安装软件。\n\n`rpm`是redhat公司的一种软件包管理机制，直接通过`rpm`命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。\n\n参考 https://blog.csdn.net/mier9042/article/details/80612707\n\n这样一来就很明显了 初入linux 我们应该选择一个适合自己的阵营\n\n因为VPS大多以centos来的 自己本地 也要选centos阵营 否则以后命令熟悉了  再换就不行了\n\n就一开始 就坚守一个阵地  所以我放弃mint 系统 虽然它类windows 但是命令不合 不相为谋  拜拜\n————————————————\n版权声明：本文为CSDN博主「Lucky@Dong」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/zzddada/article/details/123208388","slug":"Linux/apt-yum-rpm","published":1,"updated":"2024-06-17T17:19:48.966Z","_id":"clxj8i7i9001abkuy6t2a3kz4","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li><code>rpm</code>存在什么问题？</li>\n<li><code>yum</code>有什么优势？</li>\n<li><code>apt-get</code>与<code>yum</code>有什么相同之处？</li>\n</ol>\n<h3 id=\"经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\"><a href=\"#经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\" class=\"headerlink\" title=\"经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\"></a>经常会看到<code>yum</code>、<code>apt-get</code>、<code>rpm</code>，那么它们是什么？下面介绍一下。</h3><p><code>rpm</code>是由红帽公司开发的软件包管理方式，使用<code>rpm</code>我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是<code>rpm</code>软件包之间的依赖性问题往往会很繁琐,尤其是软件由多个<code>rpm</code>包组成时。<br><code>yum</code>（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於<code>rpm</code>包管理，能够从指定的服务器自动下载<code>rpm</code>包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。<br><code>rpm</code> 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：<code>rpm</code> -ivh，<code>rpm</code>包的安装有一个很大的缺点就是文件的关联性太大，有时候装一个软件要安装很多其他的软件包，很麻烦，所以为此RedHat小红帽开发了<code>yum</code>安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：<code>yum</code> -y install ，<code>yum</code>并不是一中包，而是安装包的软件</p>\n<p>简单点说, <code>rpm</code> 只能安装已经下载到本地机器上的<code>rpm</code> 包. <code>yum</code>能在线下载并安装<code>rpm</code>包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是<code>rpm</code> 工具所不具备的。</p>\n<p><code>yum</code>与<code>apt-get</code>的相同点：<br><code>apt-get</code>属于ubuntu、Debian的包管理工具<br><code>yum</code>则属于Redhat、Centos包管理工具  </p>\n<p>明白了这两点，对于我们使用hadoop、openstack已经没有问题了。更详细参考：</p>\n<p>一般来说著名的linux系统基本上分两大类：</p>\n<p>1.RedHat系列：Redhat、Centos、Fedora等</p>\n<p>2.Debian系列：Debian、Ubuntu等</p>\n<p>RedHat 系列<br>1 常见的安装包格式 <code>rpm</code>包,安装<code>rpm</code>包的命令是“<code>rpm</code> -参数”</p>\n<p>2 包管理工具 <code>yum</code></p>\n<p>3 支持tar包</p>\n<p>Debian系列  </p>\n<p>1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”</p>\n<p>2 包管理工具 <code>apt-get</code></p>\n<p>3 支持tar包</p>\n<p>tar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。<br><code>rpm</code> 相当于windows中的安装文件，它会自动处理软件包之间的依赖关系。</p>\n<p>优缺点来说，<code>rpm</code>一般都是预先编译好的文件，它可能已经绑定到某种CPU或者发行版上面了。<br>tar一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。</p>\n<p>如果你的包不想开放源代码，你可以制作成<code>rpm</code>，如果开源，用tar更方便了。</p>\n<p>tar一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，.&#x2F;configure, make, make install.　来安装软件。</p>\n<p><code>rpm</code>是redhat公司的一种软件包管理机制，直接通过<code>rpm</code>命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。</p>\n<p>参考 <a href=\"https://blog.csdn.net/mier9042/article/details/80612707\">https://blog.csdn.net/mier9042/article/details/80612707</a></p>\n<p>这样一来就很明显了 初入linux 我们应该选择一个适合自己的阵营</p>\n<p>因为VPS大多以centos来的 自己本地 也要选centos阵营 否则以后命令熟悉了  再换就不行了</p>\n<p>就一开始 就坚守一个阵地  所以我放弃mint 系统 虽然它类windows 但是命令不合 不相为谋  拜拜<br>————————————————<br>版权声明：本文为CSDN博主「Lucky@Dong」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/zzddada/article/details/123208388\">https://blog.csdn.net/zzddada/article/details/123208388</a></p>\n","excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li><code>rpm</code>存在什么问题？</li>\n<li><code>yum</code>有什么优势？</li>\n<li><code>apt-get</code>与<code>yum</code>有什么相同之处？</li>\n</ol>\n<h3 id=\"经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\"><a href=\"#经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\" class=\"headerlink\" title=\"经常会看到yum、apt-get、rpm，那么它们是什么？下面介绍一下。\"></a>经常会看到<code>yum</code>、<code>apt-get</code>、<code>rpm</code>，那么它们是什么？下面介绍一下。</h3><p><code>rpm</code>是由红帽公司开发的软件包管理方式，使用<code>rpm</code>我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是<code>rpm</code>软件包之间的依赖性问题往往会很繁琐,尤其是软件由多个<code>rpm</code>包组成时。<br><code>yum</code>（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於<code>rpm</code>包管理，能够从指定的服务器自动下载<code>rpm</code>包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。<br><code>rpm</code> 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：<code>rpm</code> -ivh，<code>rpm</code>包的安装有一个很大的缺点就是文件的关联性太大，有时候装一个软件要安装很多其他的软件包，很麻烦，所以为此RedHat小红帽开发了<code>yum</code>安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：<code>yum</code> -y install ，<code>yum</code>并不是一中包，而是安装包的软件</p>\n<p>简单点说, <code>rpm</code> 只能安装已经下载到本地机器上的<code>rpm</code> 包. <code>yum</code>能在线下载并安装<code>rpm</code>包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是<code>rpm</code> 工具所不具备的。</p>\n<p><code>yum</code>与<code>apt-get</code>的相同点：<br><code>apt-get</code>属于ubuntu、Debian的包管理工具<br><code>yum</code>则属于Redhat、Centos包管理工具  </p>\n<p>明白了这两点，对于我们使用hadoop、openstack已经没有问题了。更详细参考：</p>\n<p>一般来说著名的linux系统基本上分两大类：</p>\n<p>1.RedHat系列：Redhat、Centos、Fedora等</p>\n<p>2.Debian系列：Debian、Ubuntu等</p>\n<p>RedHat 系列<br>1 常见的安装包格式 <code>rpm</code>包,安装<code>rpm</code>包的命令是“<code>rpm</code> -参数”</p>\n<p>2 包管理工具 <code>yum</code></p>\n<p>3 支持tar包</p>\n<p>Debian系列  </p>\n<p>1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”</p>\n<p>2 包管理工具 <code>apt-get</code></p>\n<p>3 支持tar包</p>\n<p>tar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。<br><code>rpm</code> 相当于windows中的安装文件，它会自动处理软件包之间的依赖关系。</p>\n<p>优缺点来说，<code>rpm</code>一般都是预先编译好的文件，它可能已经绑定到某种CPU或者发行版上面了。<br>tar一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。</p>\n<p>如果你的包不想开放源代码，你可以制作成<code>rpm</code>，如果开源，用tar更方便了。</p>\n<p>tar一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，.&#x2F;configure, make, make install.　来安装软件。</p>\n<p><code>rpm</code>是redhat公司的一种软件包管理机制，直接通过<code>rpm</code>命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。</p>\n<p>参考 <a href=\"https://blog.csdn.net/mier9042/article/details/80612707\">https://blog.csdn.net/mier9042/article/details/80612707</a></p>\n<p>这样一来就很明显了 初入linux 我们应该选择一个适合自己的阵营</p>\n<p>因为VPS大多以centos来的 自己本地 也要选centos阵营 否则以后命令熟悉了  再换就不行了</p>\n<p>就一开始 就坚守一个阵地  所以我放弃mint 系统 虽然它类windows 但是命令不合 不相为谋  拜拜<br>————————————————<br>版权声明：本文为CSDN博主「Lucky@Dong」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/zzddada/article/details/123208388\">https://blog.csdn.net/zzddada/article/details/123208388</a></p>\n"},{"title":"tqdm 进度条","date":"2024-06-19T16:03:48.000Z","_content":"\n全称\"taqaddum\"，阿拉伯语中的“进展”\n\n样例  \n```Python\nfrom tqdm import tqdm\nimport time\nfor i in tqdm(range(100)):\n    # 假设我们正在进行一些耗时的操作，比如训练深度学习模型\n    time.sleep(0.01)\n```\n\n```Python\nwith tqdm(total=100) as pbar:\n    for i in range(10):\n        # 执行一些耗时的操作\n        time.sleep(0.1)\n        pbar.update(10)\n```\n\n","source":"_posts/python/tqdm进度条.md","raw":"---\ntitle: tqdm 进度条\ndate: 2024-06-20 00:03:48\ncategories:\n  - python\ntags:\n  - python\n  - 进度条\n---\n\n全称\"taqaddum\"，阿拉伯语中的“进展”\n\n样例  \n```Python\nfrom tqdm import tqdm\nimport time\nfor i in tqdm(range(100)):\n    # 假设我们正在进行一些耗时的操作，比如训练深度学习模型\n    time.sleep(0.01)\n```\n\n```Python\nwith tqdm(total=100) as pbar:\n    for i in range(10):\n        # 执行一些耗时的操作\n        time.sleep(0.1)\n        pbar.update(10)\n```\n\n","slug":"python/tqdm进度条","published":1,"updated":"2024-06-19T16:05:45.526Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6i10004g4uycoilh9sx","content":"<p>全称”taqaddum”，阿拉伯语中的“进展”</p>\n<p>样例  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>)):</span><br><span class=\"line\">    <span class=\"comment\"># 假设我们正在进行一些耗时的操作，比如训练深度学习模型</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.01</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tqdm(total=<span class=\"number\">100</span>) <span class=\"keyword\">as</span> pbar:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 执行一些耗时的操作</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        pbar.update(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>全称”taqaddum”，阿拉伯语中的“进展”</p>\n<p>样例  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>)):</span><br><span class=\"line\">    <span class=\"comment\"># 假设我们正在进行一些耗时的操作，比如训练深度学习模型</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.01</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tqdm(total=<span class=\"number\">100</span>) <span class=\"keyword\">as</span> pbar:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 执行一些耗时的操作</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        pbar.update(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"frp","date":"2024-06-19T16:22:17.000Z","_content":"客户端直连服务端，服务端反代理客户端推送的内容\n\n\n无域名的情况下不能使用http、https，可以使用tcp方式将数据转发，代理内网服务","source":"_posts/沙堆/frp.md","raw":"---\ntitle: frp\ndate: 2024-06-20 00:22:17\ncategories:\ntags:\n  - frp\n  - 内网穿透\n---\n客户端直连服务端，服务端反代理客户端推送的内容\n\n\n无域名的情况下不能使用http、https，可以使用tcp方式将数据转发，代理内网服务","slug":"沙堆/frp","published":1,"updated":"2024-06-19T16:23:20.898Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6i30005g4uy6lied6nw","content":"<p>客户端直连服务端，服务端反代理客户端推送的内容</p>\n<p>无域名的情况下不能使用http、https，可以使用tcp方式将数据转发，代理内网服务</p>\n","excerpt":"","more":"<p>客户端直连服务端，服务端反代理客户端推送的内容</p>\n<p>无域名的情况下不能使用http、https，可以使用tcp方式将数据转发，代理内网服务</p>\n"},{"title":"搭梯子","date":"2024-06-19T16:35:50.000Z","_content":"\n[记录《Shadowsocks一键安装脚本（四合一）》-秋水逸冰 · Issue #2 · idseventeen/Blog · GitHub](https://github.com/idseventeen/Blog/issues/2)\n\n## 秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文\n\n#### 本脚本适用环境\n\n* 系统支持：CentOS 6+，Debian 7+，Ubuntu 12+\n* 内存要求：≥128M\n* 日　　期：2019 年 01 月 11 日\n\n#### 关于本脚本\n\n1. 一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；\n2. 各版本的启动脚本及配置文件名不再重合；\n3. 每次运行可安装一种版本；\n4. 支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；\n5. 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；\n\n> **友情提示：如果你有问题，请先阅读这篇《Shadowsocks Troubleshooting》之后再询问。**\n\n#### 默认配置\n\n* 服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）\n* 密码：自己设定（如不设定，默认为 teddysun.com）\n* 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）\n* 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）\n* 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）\n* **备注** ：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。\n\n#### 客户端下载\n\n* 常规版 Windows 客户端 [https://github.com/shadowsocks/shadowsocks-windows/releases](https://github.com/shadowsocks/shadowsocks-windows/releases)\n* ShadowsocksR 版 Windows 客户端 [https://github.com/shadowsocksrr/shadowsocksr-csharp/releases](https://github.com/shadowsocksrr/shadowsocksr-csharp/releases)\n\n#### 使用方法\n\n使用 root 用户登录，运行以下命令：\n\n```shell\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\nchmod +x shadowsocks-all.sh\n\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n#### 安装完成后，脚本提示如下\n\n```shell\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP :your_server_ip\nYour Server Port :your_server_port\nYour Password :your_password\nYour Encryption Method:your_encryption_method\n\nYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)\nss://your_encryption_method:your_password@your_server_ip:your_server_port\nYour QR Code has been saved as a PNG file path:\nyour_path.png\n\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n\n#### 卸载方法\n\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n\n使用 root 用户登录，运行以下命令：\n\n```shell\n./shadowsocks-all.sh uninstall\n```\n\n#### 启动脚本\n\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\n\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\n\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\n\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n\n#### 各版本默认配置文件\n\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\n\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\n\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\n\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n\n#### 更新日志\n\n**2019 年 01 月 11 日：**\n\n1. 升级：libsodium 到最新版本 1.0.17；\n2. 升级：mbedtls 到最新版本 2.16.0；\n\n**2018 年 11 月 05 日：**\n\n1. 升级：使用 Github 上最新代码编译出 Go 版二进制可执行文件，版本号 1.2.2。\n\n**2018 年 06 月 01 日：**\n\n1. 修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；\n2. 修正：在使用 /etc/init.d/shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；\n3. 修正：移除 libev 版配置文件中的 local_address 字段；\n4. 修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；\n5. 升级：mbedtls 到版本 2.9.0；\n6. 修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；\n7. 修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 /etc/resolv.conf 中取得。\n\n**2018 年 02 月 07 日：**\n\n1. 修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。\n\n**2018 年 02 月 06 日：**\n\n1. 修改：ShadowsocksR 版为 ShadowsocksRR 最新版；\n2. 新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：\n\n```shell\nauth_chain_c\nauth_chain_d\nauth_chain_e\nauth_chain_f\n```\n\n**2017 年 12 月 29 日：**\n\n1. 升级：libsodium 到 1.0.16。\n\n**2017 年 11 月 25 日：**\n\n1. 如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；\n2. 新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 /var/log/messages 方便查看。\n\n**2017 年 11 月 12 日：**\n\n1. 新增生成 ss:// 或 ssr:// 链接，以及其二维码图片。\n   ※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:// 或 ssr:// 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。\n\n复制二维码链接后 Shadowsocks 客户端识别示例：\n[![](assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-zkgzg2a.png)](https://camo.githubusercontent.com/74a339571842519c8450f5fb3770e5c5dee3774e1830712d1dfbe04dae97bec3/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f73735f636c69656e742e706e67)\n\n复制二维码链接后 ShadowsocksR 客户端识别示例：\n[![](assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-9yodny0.png)](https://camo.githubusercontent.com/2b9420a13be3265a42c3bed990d16e7013c303612648fbd502ab0c2f24d8131e/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f7373725f636c69656e742e706e67)\n\n二维码（QR Code）参考链接：\n[https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients](https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients)\n[https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme](https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme)\n\n**2017 年 10 月 22 日：**\n\n1. 升级：libsodium 到 1.0.15。\n\n**2017 年 10 月 14 日：**\n\n1. 新增：在安装 Shadowsocks-libev 版时可选安装 simple-obfs 服务端。\n   ※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。\n   ※ 使用方法参考：[https://teddysun.com/511.html](https://teddysun.com/511.html)\n\n**2017 年 09 月 16 日：**\n\n1. 修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；\n2. 升级：mbedtls 到版本 2.6.0。\n\n**2017 年 07 月 27 日：**\n\n1. 新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） ShadowsocksR 版客户端；\n2. 修改：更新 ShadowsocksR 源码下载地址。","source":"_posts/沙堆/搭梯子.md","raw":"---\ntitle: 搭梯子\ndate: 2024-06-20 00:35:50\ncategories:\ntags:\n  - 梯子\n---\n\n[记录《Shadowsocks一键安装脚本（四合一）》-秋水逸冰 · Issue #2 · idseventeen/Blog · GitHub](https://github.com/idseventeen/Blog/issues/2)\n\n## 秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文\n\n#### 本脚本适用环境\n\n* 系统支持：CentOS 6+，Debian 7+，Ubuntu 12+\n* 内存要求：≥128M\n* 日　　期：2019 年 01 月 11 日\n\n#### 关于本脚本\n\n1. 一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；\n2. 各版本的启动脚本及配置文件名不再重合；\n3. 每次运行可安装一种版本；\n4. 支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；\n5. 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；\n\n> **友情提示：如果你有问题，请先阅读这篇《Shadowsocks Troubleshooting》之后再询问。**\n\n#### 默认配置\n\n* 服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）\n* 密码：自己设定（如不设定，默认为 teddysun.com）\n* 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）\n* 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）\n* 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）\n* **备注** ：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。\n\n#### 客户端下载\n\n* 常规版 Windows 客户端 [https://github.com/shadowsocks/shadowsocks-windows/releases](https://github.com/shadowsocks/shadowsocks-windows/releases)\n* ShadowsocksR 版 Windows 客户端 [https://github.com/shadowsocksrr/shadowsocksr-csharp/releases](https://github.com/shadowsocksrr/shadowsocksr-csharp/releases)\n\n#### 使用方法\n\n使用 root 用户登录，运行以下命令：\n\n```shell\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\nchmod +x shadowsocks-all.sh\n\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n#### 安装完成后，脚本提示如下\n\n```shell\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP :your_server_ip\nYour Server Port :your_server_port\nYour Password :your_password\nYour Encryption Method:your_encryption_method\n\nYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)\nss://your_encryption_method:your_password@your_server_ip:your_server_port\nYour QR Code has been saved as a PNG file path:\nyour_path.png\n\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n\n#### 卸载方法\n\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n\n使用 root 用户登录，运行以下命令：\n\n```shell\n./shadowsocks-all.sh uninstall\n```\n\n#### 启动脚本\n\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\n\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\n\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\n\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n\n#### 各版本默认配置文件\n\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\n\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\n\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\n\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n\n#### 更新日志\n\n**2019 年 01 月 11 日：**\n\n1. 升级：libsodium 到最新版本 1.0.17；\n2. 升级：mbedtls 到最新版本 2.16.0；\n\n**2018 年 11 月 05 日：**\n\n1. 升级：使用 Github 上最新代码编译出 Go 版二进制可执行文件，版本号 1.2.2。\n\n**2018 年 06 月 01 日：**\n\n1. 修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；\n2. 修正：在使用 /etc/init.d/shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；\n3. 修正：移除 libev 版配置文件中的 local_address 字段；\n4. 修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；\n5. 升级：mbedtls 到版本 2.9.0；\n6. 修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；\n7. 修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 /etc/resolv.conf 中取得。\n\n**2018 年 02 月 07 日：**\n\n1. 修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。\n\n**2018 年 02 月 06 日：**\n\n1. 修改：ShadowsocksR 版为 ShadowsocksRR 最新版；\n2. 新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：\n\n```shell\nauth_chain_c\nauth_chain_d\nauth_chain_e\nauth_chain_f\n```\n\n**2017 年 12 月 29 日：**\n\n1. 升级：libsodium 到 1.0.16。\n\n**2017 年 11 月 25 日：**\n\n1. 如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；\n2. 新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 /var/log/messages 方便查看。\n\n**2017 年 11 月 12 日：**\n\n1. 新增生成 ss:// 或 ssr:// 链接，以及其二维码图片。\n   ※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:// 或 ssr:// 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。\n\n复制二维码链接后 Shadowsocks 客户端识别示例：\n[![](assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-zkgzg2a.png)](https://camo.githubusercontent.com/74a339571842519c8450f5fb3770e5c5dee3774e1830712d1dfbe04dae97bec3/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f73735f636c69656e742e706e67)\n\n复制二维码链接后 ShadowsocksR 客户端识别示例：\n[![](assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-9yodny0.png)](https://camo.githubusercontent.com/2b9420a13be3265a42c3bed990d16e7013c303612648fbd502ab0c2f24d8131e/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f7373725f636c69656e742e706e67)\n\n二维码（QR Code）参考链接：\n[https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients](https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients)\n[https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme](https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme)\n\n**2017 年 10 月 22 日：**\n\n1. 升级：libsodium 到 1.0.15。\n\n**2017 年 10 月 14 日：**\n\n1. 新增：在安装 Shadowsocks-libev 版时可选安装 simple-obfs 服务端。\n   ※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。\n   ※ 使用方法参考：[https://teddysun.com/511.html](https://teddysun.com/511.html)\n\n**2017 年 09 月 16 日：**\n\n1. 修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；\n2. 升级：mbedtls 到版本 2.6.0。\n\n**2017 年 07 月 27 日：**\n\n1. 新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） ShadowsocksR 版客户端；\n2. 修改：更新 ShadowsocksR 源码下载地址。","slug":"沙堆/搭梯子","published":1,"updated":"2024-06-19T16:40:40.304Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6i60008g4uycsi2hgg7","content":"<p><a href=\"https://github.com/idseventeen/Blog/issues/2\">记录《Shadowsocks一键安装脚本（四合一）》-秋水逸冰 · Issue #2 · idseventeen&#x2F;Blog · GitHub</a></p>\n<h2 id=\"秋水逸冰《Shadowsocks-一键安装脚本（四合一）》原文\"><a href=\"#秋水逸冰《Shadowsocks-一键安装脚本（四合一）》原文\" class=\"headerlink\" title=\"秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文\"></a>秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文</h2><h4 id=\"本脚本适用环境\"><a href=\"#本脚本适用环境\" class=\"headerlink\" title=\"本脚本适用环境\"></a>本脚本适用环境</h4><ul>\n<li>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</li>\n<li>内存要求：≥128M</li>\n<li>日　　期：2019 年 01 月 11 日</li>\n</ul>\n<h4 id=\"关于本脚本\"><a href=\"#关于本脚本\" class=\"headerlink\" title=\"关于本脚本\"></a>关于本脚本</h4><ol>\n<li>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；</li>\n<li>各版本的启动脚本及配置文件名不再重合；</li>\n<li>每次运行可安装一种版本；</li>\n<li>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；</li>\n<li>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</li>\n</ol>\n<blockquote>\n<p><strong>友情提示：如果你有问题，请先阅读这篇《Shadowsocks Troubleshooting》之后再询问。</strong></p>\n</blockquote>\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><ul>\n<li>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）</li>\n<li>密码：自己设定（如不设定，默认为 teddysun.com）</li>\n<li>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</li>\n<li>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</li>\n<li>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</li>\n<li><strong>备注</strong> ：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</li>\n</ul>\n<h4 id=\"客户端下载\"><a href=\"#客户端下载\" class=\"headerlink\" title=\"客户端下载\"></a>客户端下载</h4><ul>\n<li>常规版 Windows 客户端 <a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></li>\n<li>ShadowsocksR 版 Windows 客户端 <a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></li>\n</ul>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装完成后，脚本提示如下\"><a href=\"#安装完成后，脚本提示如下\" class=\"headerlink\" title=\"安装完成后，脚本提示如下\"></a>安装完成后，脚本提示如下</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP :your_server_ip</span><br><span class=\"line\">Your Server Port :your_server_port</span><br><span class=\"line\">Your Password :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\"></span><br><span class=\"line\">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class=\"line\">ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class=\"line\">Your QR Code has been saved as a PNG file path:</span><br><span class=\"line\">your_path.png</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载方法\"><a href=\"#卸载方法\" class=\"headerlink\" title=\"卸载方法\"></a>卸载方法</h4><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>\n<p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h4><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>\n<p>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start | stop | restart | status</p>\n<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-r start | stop | restart | status</p>\n<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-go start | stop | restart | status</p>\n<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start | stop | restart | status</p>\n<h4 id=\"各版本默认配置文件\"><a href=\"#各版本默认配置文件\" class=\"headerlink\" title=\"各版本默认配置文件\"></a>各版本默认配置文件</h4><p>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;shadowsocks-python&#x2F;config.json</p>\n<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;shadowsocks-r&#x2F;config.json</p>\n<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;shadowsocks-go&#x2F;config.json</p>\n<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</p>\n<h4 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h4><p><strong>2019 年 01 月 11 日：</strong></p>\n<ol>\n<li>升级：libsodium 到最新版本 1.0.17；</li>\n<li>升级：mbedtls 到最新版本 2.16.0；</li>\n</ol>\n<p><strong>2018 年 11 月 05 日：</strong></p>\n<ol>\n<li>升级：使用 Github 上最新代码编译出 Go 版二进制可执行文件，版本号 1.2.2。</li>\n</ol>\n<p><strong>2018 年 06 月 01 日：</strong></p>\n<ol>\n<li>修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；</li>\n<li>修正：在使用 &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；</li>\n<li>修正：移除 libev 版配置文件中的 local_address 字段；</li>\n<li>修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；</li>\n<li>升级：mbedtls 到版本 2.9.0；</li>\n<li>修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；</li>\n<li>修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 &#x2F;etc&#x2F;resolv.conf 中取得。</li>\n</ol>\n<p><strong>2018 年 02 月 07 日：</strong></p>\n<ol>\n<li>修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。</li>\n</ol>\n<p><strong>2018 年 02 月 06 日：</strong></p>\n<ol>\n<li>修改：ShadowsocksR 版为 ShadowsocksRR 最新版；</li>\n<li>新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth_chain_c</span><br><span class=\"line\">auth_chain_d</span><br><span class=\"line\">auth_chain_e</span><br><span class=\"line\">auth_chain_f</span><br></pre></td></tr></table></figure>\n\n<p><strong>2017 年 12 月 29 日：</strong></p>\n<ol>\n<li>升级：libsodium 到 1.0.16。</li>\n</ol>\n<p><strong>2017 年 11 月 25 日：</strong></p>\n<ol>\n<li>如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；</li>\n<li>新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 &#x2F;var&#x2F;log&#x2F;messages 方便查看。</li>\n</ol>\n<p><strong>2017 年 11 月 12 日：</strong></p>\n<ol>\n<li>新增生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 链接，以及其二维码图片。<br>※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。</li>\n</ol>\n<p>复制二维码链接后 Shadowsocks 客户端识别示例：<br><a href=\"https://camo.githubusercontent.com/74a339571842519c8450f5fb3770e5c5dee3774e1830712d1dfbe04dae97bec3/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f73735f636c69656e742e706e67\"><img src=\"/hexo-blog/assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-zkgzg2a.png\"></a></p>\n<p>复制二维码链接后 ShadowsocksR 客户端识别示例：<br><a href=\"https://camo.githubusercontent.com/2b9420a13be3265a42c3bed990d16e7013c303612648fbd502ab0c2f24d8131e/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f7373725f636c69656e742e706e67\"><img src=\"/hexo-blog/assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-9yodny0.png\"></a></p>\n<p>二维码（QR Code）参考链接：<br><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients\">https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients</a><br><a href=\"https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme\">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme</a></p>\n<p><strong>2017 年 10 月 22 日：</strong></p>\n<ol>\n<li>升级：libsodium 到 1.0.15。</li>\n</ol>\n<p><strong>2017 年 10 月 14 日：</strong></p>\n<ol>\n<li>新增：在安装 Shadowsocks-libev 版时可选安装 simple-obfs 服务端。<br>※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。<br>※ 使用方法参考：<a href=\"https://teddysun.com/511.html\">https://teddysun.com/511.html</a></li>\n</ol>\n<p><strong>2017 年 09 月 16 日：</strong></p>\n<ol>\n<li>修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；</li>\n<li>升级：mbedtls 到版本 2.6.0。</li>\n</ol>\n<p><strong>2017 年 07 月 27 日：</strong></p>\n<ol>\n<li>新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） ShadowsocksR 版客户端；</li>\n<li>修改：更新 ShadowsocksR 源码下载地址。</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://github.com/idseventeen/Blog/issues/2\">记录《Shadowsocks一键安装脚本（四合一）》-秋水逸冰 · Issue #2 · idseventeen&#x2F;Blog · GitHub</a></p>\n<h2 id=\"秋水逸冰《Shadowsocks-一键安装脚本（四合一）》原文\"><a href=\"#秋水逸冰《Shadowsocks-一键安装脚本（四合一）》原文\" class=\"headerlink\" title=\"秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文\"></a>秋水逸冰《Shadowsocks 一键安装脚本（四合一）》原文</h2><h4 id=\"本脚本适用环境\"><a href=\"#本脚本适用环境\" class=\"headerlink\" title=\"本脚本适用环境\"></a>本脚本适用环境</h4><ul>\n<li>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</li>\n<li>内存要求：≥128M</li>\n<li>日　　期：2019 年 01 月 11 日</li>\n</ul>\n<h4 id=\"关于本脚本\"><a href=\"#关于本脚本\" class=\"headerlink\" title=\"关于本脚本\"></a>关于本脚本</h4><ol>\n<li>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；</li>\n<li>各版本的启动脚本及配置文件名不再重合；</li>\n<li>每次运行可安装一种版本；</li>\n<li>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；</li>\n<li>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</li>\n</ol>\n<blockquote>\n<p><strong>友情提示：如果你有问题，请先阅读这篇《Shadowsocks Troubleshooting》之后再询问。</strong></p>\n</blockquote>\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><ul>\n<li>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）</li>\n<li>密码：自己设定（如不设定，默认为 teddysun.com）</li>\n<li>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</li>\n<li>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</li>\n<li>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</li>\n<li><strong>备注</strong> ：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</li>\n</ul>\n<h4 id=\"客户端下载\"><a href=\"#客户端下载\" class=\"headerlink\" title=\"客户端下载\"></a>客户端下载</h4><ul>\n<li>常规版 Windows 客户端 <a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></li>\n<li>ShadowsocksR 版 Windows 客户端 <a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></li>\n</ul>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装完成后，脚本提示如下\"><a href=\"#安装完成后，脚本提示如下\" class=\"headerlink\" title=\"安装完成后，脚本提示如下\"></a>安装完成后，脚本提示如下</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP :your_server_ip</span><br><span class=\"line\">Your Server Port :your_server_port</span><br><span class=\"line\">Your Password :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\"></span><br><span class=\"line\">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class=\"line\">ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class=\"line\">Your QR Code has been saved as a PNG file path:</span><br><span class=\"line\">your_path.png</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载方法\"><a href=\"#卸载方法\" class=\"headerlink\" title=\"卸载方法\"></a>卸载方法</h4><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>\n<p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h4><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>\n<p>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start | stop | restart | status</p>\n<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-r start | stop | restart | status</p>\n<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-go start | stop | restart | status</p>\n<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start | stop | restart | status</p>\n<h4 id=\"各版本默认配置文件\"><a href=\"#各版本默认配置文件\" class=\"headerlink\" title=\"各版本默认配置文件\"></a>各版本默认配置文件</h4><p>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;shadowsocks-python&#x2F;config.json</p>\n<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;shadowsocks-r&#x2F;config.json</p>\n<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;shadowsocks-go&#x2F;config.json</p>\n<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</p>\n<h4 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h4><p><strong>2019 年 01 月 11 日：</strong></p>\n<ol>\n<li>升级：libsodium 到最新版本 1.0.17；</li>\n<li>升级：mbedtls 到最新版本 2.16.0；</li>\n</ol>\n<p><strong>2018 年 11 月 05 日：</strong></p>\n<ol>\n<li>升级：使用 Github 上最新代码编译出 Go 版二进制可执行文件，版本号 1.2.2。</li>\n</ol>\n<p><strong>2018 年 06 月 01 日：</strong></p>\n<ol>\n<li>修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；</li>\n<li>修正：在使用 &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；</li>\n<li>修正：移除 libev 版配置文件中的 local_address 字段；</li>\n<li>修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；</li>\n<li>升级：mbedtls 到版本 2.9.0；</li>\n<li>修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；</li>\n<li>修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 &#x2F;etc&#x2F;resolv.conf 中取得。</li>\n</ol>\n<p><strong>2018 年 02 月 07 日：</strong></p>\n<ol>\n<li>修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。</li>\n</ol>\n<p><strong>2018 年 02 月 06 日：</strong></p>\n<ol>\n<li>修改：ShadowsocksR 版为 ShadowsocksRR 最新版；</li>\n<li>新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth_chain_c</span><br><span class=\"line\">auth_chain_d</span><br><span class=\"line\">auth_chain_e</span><br><span class=\"line\">auth_chain_f</span><br></pre></td></tr></table></figure>\n\n<p><strong>2017 年 12 月 29 日：</strong></p>\n<ol>\n<li>升级：libsodium 到 1.0.16。</li>\n</ol>\n<p><strong>2017 年 11 月 25 日：</strong></p>\n<ol>\n<li>如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；</li>\n<li>新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 &#x2F;var&#x2F;log&#x2F;messages 方便查看。</li>\n</ol>\n<p><strong>2017 年 11 月 12 日：</strong></p>\n<ol>\n<li>新增生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 链接，以及其二维码图片。<br>※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。</li>\n</ol>\n<p>复制二维码链接后 Shadowsocks 客户端识别示例：<br><a href=\"https://camo.githubusercontent.com/74a339571842519c8450f5fb3770e5c5dee3774e1830712d1dfbe04dae97bec3/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f73735f636c69656e742e706e67\"><img src=\"/hexo-blog/assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-zkgzg2a.png\"></a></p>\n<p>复制二维码链接后 ShadowsocksR 客户端识别示例：<br><a href=\"https://camo.githubusercontent.com/2b9420a13be3265a42c3bed990d16e7013c303612648fbd502ab0c2f24d8131e/68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f7373725f636c69656e742e706e67\"><img src=\"/hexo-blog/assets/net-img-68747470733a2f2f746564647973756e2e636f6d2f77702d636f6e74656e742f-20240620003911-9yodny0.png\"></a></p>\n<p>二维码（QR Code）参考链接：<br><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients\">https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients</a><br><a href=\"https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme\">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme</a></p>\n<p><strong>2017 年 10 月 22 日：</strong></p>\n<ol>\n<li>升级：libsodium 到 1.0.15。</li>\n</ol>\n<p><strong>2017 年 10 月 14 日：</strong></p>\n<ol>\n<li>新增：在安装 Shadowsocks-libev 版时可选安装 simple-obfs 服务端。<br>※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。<br>※ 使用方法参考：<a href=\"https://teddysun.com/511.html\">https://teddysun.com/511.html</a></li>\n</ol>\n<p><strong>2017 年 09 月 16 日：</strong></p>\n<ol>\n<li>修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；</li>\n<li>升级：mbedtls 到版本 2.6.0。</li>\n</ol>\n<p><strong>2017 年 07 月 27 日：</strong></p>\n<ol>\n<li>新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） ShadowsocksR 版客户端；</li>\n<li>修改：更新 ShadowsocksR 源码下载地址。</li>\n</ol>\n"},{"title":"心灵奇旅 Soul","date":"2024-06-19T16:19:07.000Z","_content":"# 前置概念\n\n**火花 spark：** 新生灵魂得到火花才能去往地球获得生命，火花从某项活动中得到，如音乐、绘画等\n\n**导师 mentor：** 指导不能获得火花的灵魂获取火花，通常知名灵魂死后会获得导师资格\n\n# 简述\n\n意外死亡，意外成为导师的人，指导了一个经过很多人指导未获得火花的灵魂，获取火花\n\n\n# 主旨\n\n火花不是目标，而是为此准备好了去生活","source":"_posts/电影/心灵奇旅-Soul.md","raw":"---\ntitle: 心灵奇旅 Soul\ndate: 2024-06-20 00:19:07\ncategories:\n  - 电影\ntags:\n  - 动漫\n---\n# 前置概念\n\n**火花 spark：** 新生灵魂得到火花才能去往地球获得生命，火花从某项活动中得到，如音乐、绘画等\n\n**导师 mentor：** 指导不能获得火花的灵魂获取火花，通常知名灵魂死后会获得导师资格\n\n# 简述\n\n意外死亡，意外成为导师的人，指导了一个经过很多人指导未获得火花的灵魂，获取火花\n\n\n# 主旨\n\n火花不是目标，而是为此准备好了去生活","slug":"电影/心灵奇旅-Soul","published":1,"updated":"2024-06-19T16:19:50.170Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6i70009g4uyavx44rxy","content":"<h1 id=\"前置概念\"><a href=\"#前置概念\" class=\"headerlink\" title=\"前置概念\"></a>前置概念</h1><p><strong>火花 spark：</strong> 新生灵魂得到火花才能去往地球获得生命，火花从某项活动中得到，如音乐、绘画等</p>\n<p><strong>导师 mentor：</strong> 指导不能获得火花的灵魂获取火花，通常知名灵魂死后会获得导师资格</p>\n<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>意外死亡，意外成为导师的人，指导了一个经过很多人指导未获得火花的灵魂，获取火花</p>\n<h1 id=\"主旨\"><a href=\"#主旨\" class=\"headerlink\" title=\"主旨\"></a>主旨</h1><p>火花不是目标，而是为此准备好了去生活</p>\n","excerpt":"","more":"<h1 id=\"前置概念\"><a href=\"#前置概念\" class=\"headerlink\" title=\"前置概念\"></a>前置概念</h1><p><strong>火花 spark：</strong> 新生灵魂得到火花才能去往地球获得生命，火花从某项活动中得到，如音乐、绘画等</p>\n<p><strong>导师 mentor：</strong> 指导不能获得火花的灵魂获取火花，通常知名灵魂死后会获得导师资格</p>\n<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>意外死亡，意外成为导师的人，指导了一个经过很多人指导未获得火花的灵魂，获取火花</p>\n<h1 id=\"主旨\"><a href=\"#主旨\" class=\"headerlink\" title=\"主旨\"></a>主旨</h1><p>火花不是目标，而是为此准备好了去生活</p>\n"},{"title":"牧马人","date":"2024-06-19T16:20:05.000Z","_content":"主演： 朱时茂  丛珊\n\n\n许灵均，祖上为地主阶级，父亲为资本家，父母离异，由母亲抚养，生活贫苦，14岁母亲去世，父亲解放前夕逃亡美国，受社会主义抚养。文化大革命时期被打为右派，于敕勒川进行劳动改造。在20年艰苦劳动改造中，受淳朴乡民感染和照顾，度过了艰苦的岁月。经乡民 郭口扁子 介绍，与逃荒的李秀芝结婚。后被平反，在敕勒川从事教育工作，经历新中国的起伏，对中国和社会主义的道路非常坚定。\n\n李秀芝，祖籍四川，受文化大革命影响，耕地无人栽种，逃荒至敕勒川。\n\n\n许景由，许灵均父亲，由父母包办婚姻，婚后并不幸福，许灵均出生后与其母离异，解放前夕逃亡美国，成立旧金山医药公司，亿万富翁。\n\n\n#","source":"_posts/电影/牧马人.md","raw":"---\ntitle: 牧马人\ndate: 2024-06-20 00:20:05\ncategories:\n  - 电影\ntags:\n---\n主演： 朱时茂  丛珊\n\n\n许灵均，祖上为地主阶级，父亲为资本家，父母离异，由母亲抚养，生活贫苦，14岁母亲去世，父亲解放前夕逃亡美国，受社会主义抚养。文化大革命时期被打为右派，于敕勒川进行劳动改造。在20年艰苦劳动改造中，受淳朴乡民感染和照顾，度过了艰苦的岁月。经乡民 郭口扁子 介绍，与逃荒的李秀芝结婚。后被平反，在敕勒川从事教育工作，经历新中国的起伏，对中国和社会主义的道路非常坚定。\n\n李秀芝，祖籍四川，受文化大革命影响，耕地无人栽种，逃荒至敕勒川。\n\n\n许景由，许灵均父亲，由父母包办婚姻，婚后并不幸福，许灵均出生后与其母离异，解放前夕逃亡美国，成立旧金山医药公司，亿万富翁。\n\n\n#","slug":"电影/牧马人","published":1,"updated":"2024-06-19T16:20:33.085Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6i9000dg4uy6l9wh2tw","content":"<p>主演： 朱时茂  丛珊</p>\n<p>许灵均，祖上为地主阶级，父亲为资本家，父母离异，由母亲抚养，生活贫苦，14岁母亲去世，父亲解放前夕逃亡美国，受社会主义抚养。文化大革命时期被打为右派，于敕勒川进行劳动改造。在20年艰苦劳动改造中，受淳朴乡民感染和照顾，度过了艰苦的岁月。经乡民 郭口扁子 介绍，与逃荒的李秀芝结婚。后被平反，在敕勒川从事教育工作，经历新中国的起伏，对中国和社会主义的道路非常坚定。</p>\n<p>李秀芝，祖籍四川，受文化大革命影响，耕地无人栽种，逃荒至敕勒川。</p>\n<p>许景由，许灵均父亲，由父母包办婚姻，婚后并不幸福，许灵均出生后与其母离异，解放前夕逃亡美国，成立旧金山医药公司，亿万富翁。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","excerpt":"","more":"<p>主演： 朱时茂  丛珊</p>\n<p>许灵均，祖上为地主阶级，父亲为资本家，父母离异，由母亲抚养，生活贫苦，14岁母亲去世，父亲解放前夕逃亡美国，受社会主义抚养。文化大革命时期被打为右派，于敕勒川进行劳动改造。在20年艰苦劳动改造中，受淳朴乡民感染和照顾，度过了艰苦的岁月。经乡民 郭口扁子 介绍，与逃荒的李秀芝结婚。后被平反，在敕勒川从事教育工作，经历新中国的起伏，对中国和社会主义的道路非常坚定。</p>\n<p>李秀芝，祖籍四川，受文化大革命影响，耕地无人栽种，逃荒至敕勒川。</p>\n<p>许景由，许灵均父亲，由父母包办婚姻，婚后并不幸福，许灵均出生后与其母离异，解放前夕逃亡美国，成立旧金山医药公司，亿万富翁。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"装机工具","date":"2024-06-19T16:24:06.000Z","_content":"\nventoy: 单次刻录，可烧制多重镜像入系统\n\nrufu: 含分盘\n\nPE: 老毛桃等版本，兼容性、支持格式最多，操作较复杂\n\nUltrol: 实用工具，个人体验一般","source":"_posts/沙堆/装机.md","raw":"---\ntitle: 装机工具\ndate: 2024-06-20 00:24:06\ncategories:\ntags:\n  - 装机\n---\n\nventoy: 单次刻录，可烧制多重镜像入系统\n\nrufu: 含分盘\n\nPE: 老毛桃等版本，兼容性、支持格式最多，操作较复杂\n\nUltrol: 实用工具，个人体验一般","slug":"沙堆/装机","published":1,"updated":"2024-06-19T16:24:29.014Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6ia000fg4uy0vqe2kfm","content":"<p>ventoy: 单次刻录，可烧制多重镜像入系统</p>\n<p>rufu: 含分盘</p>\n<p>PE: 老毛桃等版本，兼容性、支持格式最多，操作较复杂</p>\n<p>Ultrol: 实用工具，个人体验一般</p>\n","excerpt":"","more":"<p>ventoy: 单次刻录，可烧制多重镜像入系统</p>\n<p>rufu: 含分盘</p>\n<p>PE: 老毛桃等版本，兼容性、支持格式最多，操作较复杂</p>\n<p>Ultrol: 实用工具，个人体验一般</p>\n"},{"title":"阿凡达","date":"2024-06-19T16:20:53.000Z","_content":"# 第一部\n\n剧情新颖，3D效果很逼真，剧情老套但总体尚可\n\n\n# 第二部\n\n和第一步一模一样，剧情都一样，抄自己的又不犯法","source":"_posts/电影/阿凡达.md","raw":"---\ntitle: 阿凡达\ndate: 2024-06-20 00:20:53\ncategories:\n  - 电影\ntags:\n---\n# 第一部\n\n剧情新颖，3D效果很逼真，剧情老套但总体尚可\n\n\n# 第二部\n\n和第一步一模一样，剧情都一样，抄自己的又不犯法","slug":"电影/阿凡达","published":1,"updated":"2024-06-19T16:21:03.940Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6ic000kg4uygujt9esz","content":"<h1 id=\"第一部\"><a href=\"#第一部\" class=\"headerlink\" title=\"第一部\"></a>第一部</h1><p>剧情新颖，3D效果很逼真，剧情老套但总体尚可</p>\n<h1 id=\"第二部\"><a href=\"#第二部\" class=\"headerlink\" title=\"第二部\"></a>第二部</h1><p>和第一步一模一样，剧情都一样，抄自己的又不犯法</p>\n","excerpt":"","more":"<h1 id=\"第一部\"><a href=\"#第一部\" class=\"headerlink\" title=\"第一部\"></a>第一部</h1><p>剧情新颖，3D效果很逼真，剧情老套但总体尚可</p>\n<h1 id=\"第二部\"><a href=\"#第二部\" class=\"headerlink\" title=\"第二部\"></a>第二部</h1><p>和第一步一模一样，剧情都一样，抄自己的又不犯法</p>\n"},{"title":"景点","date":"2024-06-19T16:07:23.000Z","_content":"\n# 古北水镇\n\n时间：2022年4月3日 清明假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正\n\n项目：夜景，游船，水镇设施（染坊等），无人机表演，喷泉表演\n\n费用：门票140\n\n### 住宿\n\n内部住宿价格较贵，但在住宿期间可以自由返回景区，不比重复买票；\n\n周边民宿价格较为适宜\n\n\n### 美食\n\n未有出色体验，平价，口味一般\n\n### 总结\n\n无人机表演很不错，夜景也可以，半天时间没逛过来，很多东西没体验，还应当有目的的提前了解景区内容，才能有收获。\n\n\n\n# 陶然亭公园\n\n时间：2022年4月4日 清明假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正\n\n项目：高君宇烈士墓，游船，赏花，休闲，锻炼等\n\n费用：门票10元，电动游船160一小时\n\n### 总结\n\n较为推荐遛弯放松闲逛，环境很好，10元门票还是比较值的。\n\n\n# 玉渊潭公园\n\n时间：2022年5月3日 劳动节假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正，梁飞\n\n内容：晓晨带了羽毛球，刘方正带了桌游\n\n项目：游船\n\n#### 总结\n\n湖上划船还可以，闲逛不错，杨柳絮有点多\n\n\n# 北京动物园\n\n地点：西直门\n\n时间：2023年3月5日\n\n价格：门票10块，熊猫馆4块\n\n内容：动物有白虎、狮子、貘等，飞禽较少，比济南动物园少很多动物。春夏季节可能可以划船\n\n\n# 苏州\n\n### 锦溪古镇\n\n消费很低，吃的很便宜，其实可以不买门票逛景点，景点除了廊桥风景不错其他的不如在古镇逛一逛\n\n\n### 西山岛\n\n人太多，岛很大，感觉没玩什么东西\n\n### 总结\n\n值得一去，苏式火锅也可以，请不要点她家的花生沙冰\n","source":"_posts/游玩/景点.md","raw":"---\ntitle: 景点\ndate: 2024-06-20 00:07:23\ncategories:\n  - 游玩\ntags:\n  - 游玩\n  - 景点\n---\n\n# 古北水镇\n\n时间：2022年4月3日 清明假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正\n\n项目：夜景，游船，水镇设施（染坊等），无人机表演，喷泉表演\n\n费用：门票140\n\n### 住宿\n\n内部住宿价格较贵，但在住宿期间可以自由返回景区，不比重复买票；\n\n周边民宿价格较为适宜\n\n\n### 美食\n\n未有出色体验，平价，口味一般\n\n### 总结\n\n无人机表演很不错，夜景也可以，半天时间没逛过来，很多东西没体验，还应当有目的的提前了解景区内容，才能有收获。\n\n\n\n# 陶然亭公园\n\n时间：2022年4月4日 清明假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正\n\n项目：高君宇烈士墓，游船，赏花，休闲，锻炼等\n\n费用：门票10元，电动游船160一小时\n\n### 总结\n\n较为推荐遛弯放松闲逛，环境很好，10元门票还是比较值的。\n\n\n# 玉渊潭公园\n\n时间：2022年5月3日 劳动节假期\n\n同行：房晓松，王少强，刘晓晨，杨凯，刘方正，梁飞\n\n内容：晓晨带了羽毛球，刘方正带了桌游\n\n项目：游船\n\n#### 总结\n\n湖上划船还可以，闲逛不错，杨柳絮有点多\n\n\n# 北京动物园\n\n地点：西直门\n\n时间：2023年3月5日\n\n价格：门票10块，熊猫馆4块\n\n内容：动物有白虎、狮子、貘等，飞禽较少，比济南动物园少很多动物。春夏季节可能可以划船\n\n\n# 苏州\n\n### 锦溪古镇\n\n消费很低，吃的很便宜，其实可以不买门票逛景点，景点除了廊桥风景不错其他的不如在古镇逛一逛\n\n\n### 西山岛\n\n人太多，岛很大，感觉没玩什么东西\n\n### 总结\n\n值得一去，苏式火锅也可以，请不要点她家的花生沙冰\n","slug":"游玩/景点","published":1,"updated":"2024-06-19T16:15:40.931Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6ic000mg4uyfy06epeo","content":"<h1 id=\"古北水镇\"><a href=\"#古北水镇\" class=\"headerlink\" title=\"古北水镇\"></a>古北水镇</h1><p>时间：2022年4月3日 清明假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正</p>\n<p>项目：夜景，游船，水镇设施（染坊等），无人机表演，喷泉表演</p>\n<p>费用：门票140</p>\n<h3 id=\"住宿\"><a href=\"#住宿\" class=\"headerlink\" title=\"住宿\"></a>住宿</h3><p>内部住宿价格较贵，但在住宿期间可以自由返回景区，不比重复买票；</p>\n<p>周边民宿价格较为适宜</p>\n<h3 id=\"美食\"><a href=\"#美食\" class=\"headerlink\" title=\"美食\"></a>美食</h3><p>未有出色体验，平价，口味一般</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>无人机表演很不错，夜景也可以，半天时间没逛过来，很多东西没体验，还应当有目的的提前了解景区内容，才能有收获。</p>\n<h1 id=\"陶然亭公园\"><a href=\"#陶然亭公园\" class=\"headerlink\" title=\"陶然亭公园\"></a>陶然亭公园</h1><p>时间：2022年4月4日 清明假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正</p>\n<p>项目：高君宇烈士墓，游船，赏花，休闲，锻炼等</p>\n<p>费用：门票10元，电动游船160一小时</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>较为推荐遛弯放松闲逛，环境很好，10元门票还是比较值的。</p>\n<h1 id=\"玉渊潭公园\"><a href=\"#玉渊潭公园\" class=\"headerlink\" title=\"玉渊潭公园\"></a>玉渊潭公园</h1><p>时间：2022年5月3日 劳动节假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正，梁飞</p>\n<p>内容：晓晨带了羽毛球，刘方正带了桌游</p>\n<p>项目：游船</p>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>湖上划船还可以，闲逛不错，杨柳絮有点多</p>\n<h1 id=\"北京动物园\"><a href=\"#北京动物园\" class=\"headerlink\" title=\"北京动物园\"></a>北京动物园</h1><p>地点：西直门</p>\n<p>时间：2023年3月5日</p>\n<p>价格：门票10块，熊猫馆4块</p>\n<p>内容：动物有白虎、狮子、貘等，飞禽较少，比济南动物园少很多动物。春夏季节可能可以划船</p>\n<h1 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h1><h3 id=\"锦溪古镇\"><a href=\"#锦溪古镇\" class=\"headerlink\" title=\"锦溪古镇\"></a>锦溪古镇</h3><p>消费很低，吃的很便宜，其实可以不买门票逛景点，景点除了廊桥风景不错其他的不如在古镇逛一逛</p>\n<h3 id=\"西山岛\"><a href=\"#西山岛\" class=\"headerlink\" title=\"西山岛\"></a>西山岛</h3><p>人太多，岛很大，感觉没玩什么东西</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>值得一去，苏式火锅也可以，请不要点她家的花生沙冰</p>\n","excerpt":"","more":"<h1 id=\"古北水镇\"><a href=\"#古北水镇\" class=\"headerlink\" title=\"古北水镇\"></a>古北水镇</h1><p>时间：2022年4月3日 清明假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正</p>\n<p>项目：夜景，游船，水镇设施（染坊等），无人机表演，喷泉表演</p>\n<p>费用：门票140</p>\n<h3 id=\"住宿\"><a href=\"#住宿\" class=\"headerlink\" title=\"住宿\"></a>住宿</h3><p>内部住宿价格较贵，但在住宿期间可以自由返回景区，不比重复买票；</p>\n<p>周边民宿价格较为适宜</p>\n<h3 id=\"美食\"><a href=\"#美食\" class=\"headerlink\" title=\"美食\"></a>美食</h3><p>未有出色体验，平价，口味一般</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>无人机表演很不错，夜景也可以，半天时间没逛过来，很多东西没体验，还应当有目的的提前了解景区内容，才能有收获。</p>\n<h1 id=\"陶然亭公园\"><a href=\"#陶然亭公园\" class=\"headerlink\" title=\"陶然亭公园\"></a>陶然亭公园</h1><p>时间：2022年4月4日 清明假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正</p>\n<p>项目：高君宇烈士墓，游船，赏花，休闲，锻炼等</p>\n<p>费用：门票10元，电动游船160一小时</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>较为推荐遛弯放松闲逛，环境很好，10元门票还是比较值的。</p>\n<h1 id=\"玉渊潭公园\"><a href=\"#玉渊潭公园\" class=\"headerlink\" title=\"玉渊潭公园\"></a>玉渊潭公园</h1><p>时间：2022年5月3日 劳动节假期</p>\n<p>同行：房晓松，王少强，刘晓晨，杨凯，刘方正，梁飞</p>\n<p>内容：晓晨带了羽毛球，刘方正带了桌游</p>\n<p>项目：游船</p>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>湖上划船还可以，闲逛不错，杨柳絮有点多</p>\n<h1 id=\"北京动物园\"><a href=\"#北京动物园\" class=\"headerlink\" title=\"北京动物园\"></a>北京动物园</h1><p>地点：西直门</p>\n<p>时间：2023年3月5日</p>\n<p>价格：门票10块，熊猫馆4块</p>\n<p>内容：动物有白虎、狮子、貘等，飞禽较少，比济南动物园少很多动物。春夏季节可能可以划船</p>\n<h1 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h1><h3 id=\"锦溪古镇\"><a href=\"#锦溪古镇\" class=\"headerlink\" title=\"锦溪古镇\"></a>锦溪古镇</h3><p>消费很低，吃的很便宜，其实可以不买门票逛景点，景点除了廊桥风景不错其他的不如在古镇逛一逛</p>\n<h3 id=\"西山岛\"><a href=\"#西山岛\" class=\"headerlink\" title=\"西山岛\"></a>西山岛</h3><p>人太多，岛很大，感觉没玩什么东西</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>值得一去，苏式火锅也可以，请不要点她家的花生沙冰</p>\n"},{"title":"美食","date":"2024-06-19T16:07:14.000Z","_content":"# 西塔老太太烤肉\n\n地点：亚运村\n\n时间：2023年3月5日\n\n烤肉还可以，味道、质量都不错，生菜不限量提供，\n\n推荐：土豆泥、泥炉海鲜葱饼\n\n\n# 云海肴\n\n地点：西直门\n\n时间：2023年3月5日\n\n汽锅鸡好像十分美味，去了两次都没了，汽锅鱼鱼汤很浓，部分鱼肉煮化了\n\n\n# 潇湘府\n\n商务餐厅，家常菜挺好吃，稀有的菜如蜗牛、焖带鱼等不好吃，价格略高\n\n\n# 滇境\n\n米粉店，新中关，米粉可以上料自己做，也可以做好端上来，以米粉来看挺贵的，45一份，味道还可以\n\n\n# **火锅\n\n外国语学院附近，魏公村，万寿寺站1.4km，人很少，中午只有三桌，服务还好，点单系统不好用\n\n\n# 小吊梨汤（连锁）\n\n人均100左右可以吃饱，菜品不错，特色菜偏甜口，推荐\n\n地点16号线二里沟附件\n\n\n# 大鸭梨\n\n大厅人很多，吃席一样的感觉，菜品还可以\n\n\n# 莎姐螺蛳粉 苏家坨柳林\n\n中辣超棒","source":"_posts/游玩/美食.md","raw":"---\ntitle: 美食\ndate: 2024-06-20 00:07:14\ncategories:\n  - 游玩\ntags:\n  - 游玩\n  - 美食\n---\n# 西塔老太太烤肉\n\n地点：亚运村\n\n时间：2023年3月5日\n\n烤肉还可以，味道、质量都不错，生菜不限量提供，\n\n推荐：土豆泥、泥炉海鲜葱饼\n\n\n# 云海肴\n\n地点：西直门\n\n时间：2023年3月5日\n\n汽锅鸡好像十分美味，去了两次都没了，汽锅鱼鱼汤很浓，部分鱼肉煮化了\n\n\n# 潇湘府\n\n商务餐厅，家常菜挺好吃，稀有的菜如蜗牛、焖带鱼等不好吃，价格略高\n\n\n# 滇境\n\n米粉店，新中关，米粉可以上料自己做，也可以做好端上来，以米粉来看挺贵的，45一份，味道还可以\n\n\n# **火锅\n\n外国语学院附近，魏公村，万寿寺站1.4km，人很少，中午只有三桌，服务还好，点单系统不好用\n\n\n# 小吊梨汤（连锁）\n\n人均100左右可以吃饱，菜品不错，特色菜偏甜口，推荐\n\n地点16号线二里沟附件\n\n\n# 大鸭梨\n\n大厅人很多，吃席一样的感觉，菜品还可以\n\n\n# 莎姐螺蛳粉 苏家坨柳林\n\n中辣超棒","slug":"游玩/美食","published":1,"updated":"2024-06-19T16:09:32.421Z","comments":1,"layout":"post","photos":[],"_id":"clxm2j6in001bg4uyesnh1x8r","content":"<h1 id=\"西塔老太太烤肉\"><a href=\"#西塔老太太烤肉\" class=\"headerlink\" title=\"西塔老太太烤肉\"></a>西塔老太太烤肉</h1><p>地点：亚运村</p>\n<p>时间：2023年3月5日</p>\n<p>烤肉还可以，味道、质量都不错，生菜不限量提供，</p>\n<p>推荐：土豆泥、泥炉海鲜葱饼</p>\n<h1 id=\"云海肴\"><a href=\"#云海肴\" class=\"headerlink\" title=\"云海肴\"></a>云海肴</h1><p>地点：西直门</p>\n<p>时间：2023年3月5日</p>\n<p>汽锅鸡好像十分美味，去了两次都没了，汽锅鱼鱼汤很浓，部分鱼肉煮化了</p>\n<h1 id=\"潇湘府\"><a href=\"#潇湘府\" class=\"headerlink\" title=\"潇湘府\"></a>潇湘府</h1><p>商务餐厅，家常菜挺好吃，稀有的菜如蜗牛、焖带鱼等不好吃，价格略高</p>\n<h1 id=\"滇境\"><a href=\"#滇境\" class=\"headerlink\" title=\"滇境\"></a>滇境</h1><p>米粉店，新中关，米粉可以上料自己做，也可以做好端上来，以米粉来看挺贵的，45一份，味道还可以</p>\n<h1 id=\"火锅\"><a href=\"#火锅\" class=\"headerlink\" title=\"**火锅\"></a>**火锅</h1><p>外国语学院附近，魏公村，万寿寺站1.4km，人很少，中午只有三桌，服务还好，点单系统不好用</p>\n<h1 id=\"小吊梨汤（连锁）\"><a href=\"#小吊梨汤（连锁）\" class=\"headerlink\" title=\"小吊梨汤（连锁）\"></a>小吊梨汤（连锁）</h1><p>人均100左右可以吃饱，菜品不错，特色菜偏甜口，推荐</p>\n<p>地点16号线二里沟附件</p>\n<h1 id=\"大鸭梨\"><a href=\"#大鸭梨\" class=\"headerlink\" title=\"大鸭梨\"></a>大鸭梨</h1><p>大厅人很多，吃席一样的感觉，菜品还可以</p>\n<h1 id=\"莎姐螺蛳粉-苏家坨柳林\"><a href=\"#莎姐螺蛳粉-苏家坨柳林\" class=\"headerlink\" title=\"莎姐螺蛳粉 苏家坨柳林\"></a>莎姐螺蛳粉 苏家坨柳林</h1><p>中辣超棒</p>\n","excerpt":"","more":"<h1 id=\"西塔老太太烤肉\"><a href=\"#西塔老太太烤肉\" class=\"headerlink\" title=\"西塔老太太烤肉\"></a>西塔老太太烤肉</h1><p>地点：亚运村</p>\n<p>时间：2023年3月5日</p>\n<p>烤肉还可以，味道、质量都不错，生菜不限量提供，</p>\n<p>推荐：土豆泥、泥炉海鲜葱饼</p>\n<h1 id=\"云海肴\"><a href=\"#云海肴\" class=\"headerlink\" title=\"云海肴\"></a>云海肴</h1><p>地点：西直门</p>\n<p>时间：2023年3月5日</p>\n<p>汽锅鸡好像十分美味，去了两次都没了，汽锅鱼鱼汤很浓，部分鱼肉煮化了</p>\n<h1 id=\"潇湘府\"><a href=\"#潇湘府\" class=\"headerlink\" title=\"潇湘府\"></a>潇湘府</h1><p>商务餐厅，家常菜挺好吃，稀有的菜如蜗牛、焖带鱼等不好吃，价格略高</p>\n<h1 id=\"滇境\"><a href=\"#滇境\" class=\"headerlink\" title=\"滇境\"></a>滇境</h1><p>米粉店，新中关，米粉可以上料自己做，也可以做好端上来，以米粉来看挺贵的，45一份，味道还可以</p>\n<h1 id=\"火锅\"><a href=\"#火锅\" class=\"headerlink\" title=\"**火锅\"></a>**火锅</h1><p>外国语学院附近，魏公村，万寿寺站1.4km，人很少，中午只有三桌，服务还好，点单系统不好用</p>\n<h1 id=\"小吊梨汤（连锁）\"><a href=\"#小吊梨汤（连锁）\" class=\"headerlink\" title=\"小吊梨汤（连锁）\"></a>小吊梨汤（连锁）</h1><p>人均100左右可以吃饱，菜品不错，特色菜偏甜口，推荐</p>\n<p>地点16号线二里沟附件</p>\n<h1 id=\"大鸭梨\"><a href=\"#大鸭梨\" class=\"headerlink\" title=\"大鸭梨\"></a>大鸭梨</h1><p>大厅人很多，吃席一样的感觉，菜品还可以</p>\n<h1 id=\"莎姐螺蛳粉-苏家坨柳林\"><a href=\"#莎姐螺蛳粉-苏家坨柳林\" class=\"headerlink\" title=\"莎姐螺蛳粉 苏家坨柳林\"></a>莎姐螺蛳粉 苏家坨柳林</h1><p>中辣超棒</p>\n"},{"title":"显示温度，去除订阅","date":"2024-06-19T16:55:16.000Z","_content":"\n\n\n**Pve_Tools 安装**  \n1.先删除企业源：\n```shell\nrm /etc/apt/sources.list.d/pve-enterprise.list\n\n```\n2.安装路径 Github: https://github.com/ivanhao/pvetools\n```shell\n\nexport LC_ALL=en_US.UTF-8\napt update && apt -y install git && git clone https://github.com/ivanhao/pvetools.git\n\n```\n3.启动工具\n```shell\npvetools\n```\n\n新链接  \nhttps://wp.gxnas.com/13756.html\nhttps://tendcode.com/subject/article/pve-cpu-temperature/  \n原文链接  \nhttps://www.right.com.cn/forum/thread-6754687-1-1.html  \nhttps://post.smzdm.com/p/awzn7qrg/  \n\n\n安装温度显示软件\n在升级软件之前，需要先禁用企业源，不然，升级软件包可能会出现报错信息。\n\n```shell\napt update\napt-get install lm-sensors\n```\n\n安装完成后运行一下命令\n\n```shell\nsensors\n```\n\n即可看到温度信息\n\n执行优化脚本\n这一步主要写给新手，大佬可以直接使用该脚本脚本内容如下\n\n\n```config\n#!/usr/bin/env bash\nnp=\"/usr/share/perl5/PVE/API2/Nodes.pm\"\npvejs=\"/usr/share/pve-manager/js/pvemanagerlib.js\"\nplib=\"/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js\"\n\n\npvever=$(pveversion | awk -F\"/\" '{print $2}')\necho pve版本$pvever\necho 备份源文件\n[ ! -e $np.$pvever.bak ] && cp $np $np.$pvever.bak || { echo 已经修改过，请务重复执行; exit 1;}\n[ ! -e $pvejs.$pvever.bak ] && cp $pvejs $pvejs.$pvever.bak\n[ ! -e $plib.$pvever.bak ] && cp $plib $plib.$pvever.bak\n\ntherm='$res->{thermalstate} = `sensors`;';\ncpure='$res->{cpure} = `cat /proc/cpuinfo | grep -i  \"cpu mhz\"`;';\n\necho 修改node.pm：\nsed -i \"/PVE::pvecfg::version_text()/a $cpure\\n$therm\" $np\n\nsed -n \"/PVE::pvecfg::version_text()/,+5p\"  $np\n\n\ntmpf=tmpfile.temp\ntouch $tmpf\ncat > $tmpf << 'EOF'\n        {\n                  itemId: 'thermal',\n                  colspan: 2,\n                  printBar: false,\n                  title: gettext('温度'),\n                  textField: 'thermalstate',\n                  renderer:function(value){\n                        const m = value.match(/(?<=:[^\\+]+\\+)\\d+/g)\n                        return `CPU: ${m[0]}(${m[1]},${m[2]},${m[3]},${m[4]}) | BOARD: ${m[5]} | NVME: ${m[6]}`;\n                 }\n        },\n        {\n                  itemId: 'cpumhz',\n                  colspan: 2,\n                  printBar: false,\n                  title: gettext('CPU频率'),\n                  textField: 'cpure',\n                  renderer:function(value){\n                        const m = value.match(/(?<=:\\s+)(\\d+)/g);\n                        return `CPUMHZ: ${m[0]} | ${m[1]} | ${m[2]} | ${m[3]}`;\n                 }\n        },\nEOF\n\n#找到关键字pveversion的行号\necho 修改pvemanagerlib.js\nln=$(sed -n '/pveversion/,+10{/},/{=;q}}' $pvejs)\necho \"匹配的行号pveversion：\" $ln\n\necho 修改结果：\nsed -i \"${ln}r $tmpf\" $pvejs\nsed -n '/pveversion/,+30p' $pvejs\n\nrm $tmpf\n\n\necho 修改页面高度\nsed -i -r '/widget\\.pveNodeStatus/,+5{/height/{s#[0-9]+#360#}}' $pvejs\nsed -n '/widget\\.pveNodeStatus/,+5{/height/{p}}' $pvejs\nsed -i -r '/\\[logView\\]/,+5{/heigh/{s#[0-9]+#460#;}}' $pvejs\nsed -n '/\\[logView\\]/,+5{/heigh/{p}}' $pvejs\n\n\necho 修改去除订阅弹窗\nsed -r -i '/\\/nodes\\/localhost\\/subscription/,+10{/^\\s+if \\(res === null /{N;s#.+#\\t\\t  if(false){#}}' $plib\nsed -n '/\\/nodes\\/localhost\\/subscription/,+10p' $plib\n\nsystemctl restart pveproxy\n\necho \"请刷新浏览器缓存shift+f5\"\n```\n","source":"_posts/pve/显示温度，去除订阅.md","raw":"---\ntitle: 显示温度，去除订阅\ndate: 2024-06-20 00:55:16\ncategories:\n  - pve\ntags:\n  - pve\n---\n\n\n\n**Pve_Tools 安装**  \n1.先删除企业源：\n```shell\nrm /etc/apt/sources.list.d/pve-enterprise.list\n\n```\n2.安装路径 Github: https://github.com/ivanhao/pvetools\n```shell\n\nexport LC_ALL=en_US.UTF-8\napt update && apt -y install git && git clone https://github.com/ivanhao/pvetools.git\n\n```\n3.启动工具\n```shell\npvetools\n```\n\n新链接  \nhttps://wp.gxnas.com/13756.html\nhttps://tendcode.com/subject/article/pve-cpu-temperature/  \n原文链接  \nhttps://www.right.com.cn/forum/thread-6754687-1-1.html  \nhttps://post.smzdm.com/p/awzn7qrg/  \n\n\n安装温度显示软件\n在升级软件之前，需要先禁用企业源，不然，升级软件包可能会出现报错信息。\n\n```shell\napt update\napt-get install lm-sensors\n```\n\n安装完成后运行一下命令\n\n```shell\nsensors\n```\n\n即可看到温度信息\n\n执行优化脚本\n这一步主要写给新手，大佬可以直接使用该脚本脚本内容如下\n\n\n```config\n#!/usr/bin/env bash\nnp=\"/usr/share/perl5/PVE/API2/Nodes.pm\"\npvejs=\"/usr/share/pve-manager/js/pvemanagerlib.js\"\nplib=\"/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js\"\n\n\npvever=$(pveversion | awk -F\"/\" '{print $2}')\necho pve版本$pvever\necho 备份源文件\n[ ! -e $np.$pvever.bak ] && cp $np $np.$pvever.bak || { echo 已经修改过，请务重复执行; exit 1;}\n[ ! -e $pvejs.$pvever.bak ] && cp $pvejs $pvejs.$pvever.bak\n[ ! -e $plib.$pvever.bak ] && cp $plib $plib.$pvever.bak\n\ntherm='$res->{thermalstate} = `sensors`;';\ncpure='$res->{cpure} = `cat /proc/cpuinfo | grep -i  \"cpu mhz\"`;';\n\necho 修改node.pm：\nsed -i \"/PVE::pvecfg::version_text()/a $cpure\\n$therm\" $np\n\nsed -n \"/PVE::pvecfg::version_text()/,+5p\"  $np\n\n\ntmpf=tmpfile.temp\ntouch $tmpf\ncat > $tmpf << 'EOF'\n        {\n                  itemId: 'thermal',\n                  colspan: 2,\n                  printBar: false,\n                  title: gettext('温度'),\n                  textField: 'thermalstate',\n                  renderer:function(value){\n                        const m = value.match(/(?<=:[^\\+]+\\+)\\d+/g)\n                        return `CPU: ${m[0]}(${m[1]},${m[2]},${m[3]},${m[4]}) | BOARD: ${m[5]} | NVME: ${m[6]}`;\n                 }\n        },\n        {\n                  itemId: 'cpumhz',\n                  colspan: 2,\n                  printBar: false,\n                  title: gettext('CPU频率'),\n                  textField: 'cpure',\n                  renderer:function(value){\n                        const m = value.match(/(?<=:\\s+)(\\d+)/g);\n                        return `CPUMHZ: ${m[0]} | ${m[1]} | ${m[2]} | ${m[3]}`;\n                 }\n        },\nEOF\n\n#找到关键字pveversion的行号\necho 修改pvemanagerlib.js\nln=$(sed -n '/pveversion/,+10{/},/{=;q}}' $pvejs)\necho \"匹配的行号pveversion：\" $ln\n\necho 修改结果：\nsed -i \"${ln}r $tmpf\" $pvejs\nsed -n '/pveversion/,+30p' $pvejs\n\nrm $tmpf\n\n\necho 修改页面高度\nsed -i -r '/widget\\.pveNodeStatus/,+5{/height/{s#[0-9]+#360#}}' $pvejs\nsed -n '/widget\\.pveNodeStatus/,+5{/height/{p}}' $pvejs\nsed -i -r '/\\[logView\\]/,+5{/heigh/{s#[0-9]+#460#;}}' $pvejs\nsed -n '/\\[logView\\]/,+5{/heigh/{p}}' $pvejs\n\n\necho 修改去除订阅弹窗\nsed -r -i '/\\/nodes\\/localhost\\/subscription/,+10{/^\\s+if \\(res === null /{N;s#.+#\\t\\t  if(false){#}}' $plib\nsed -n '/\\/nodes\\/localhost\\/subscription/,+10p' $plib\n\nsystemctl restart pveproxy\n\necho \"请刷新浏览器缓存shift+f5\"\n```\n","slug":"pve/显示温度，去除订阅","published":1,"updated":"2024-11-09T19:53:43.072Z","_id":"clxm54wnl00017guy0fg09mgm","comments":1,"layout":"post","photos":[],"content":"<p><strong>Pve_Tools 安装</strong><br>1.先删除企业源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /etc/apt/sources.list.d/pve-enterprise.list</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.安装路径 Github: <a href=\"https://github.com/ivanhao/pvetools\">https://github.com/ivanhao/pvetools</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">apt update &amp;&amp; apt -y install git &amp;&amp; git clone https://github.com/ivanhao/pvetools.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3.启动工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvetools</span><br></pre></td></tr></table></figure>\n\n<p>新链接<br><a href=\"https://wp.gxnas.com/13756.html\">https://wp.gxnas.com/13756.html</a><br><a href=\"https://tendcode.com/subject/article/pve-cpu-temperature/\">https://tendcode.com/subject/article/pve-cpu-temperature/</a><br>原文链接<br><a href=\"https://www.right.com.cn/forum/thread-6754687-1-1.html\">https://www.right.com.cn/forum/thread-6754687-1-1.html</a><br><a href=\"https://post.smzdm.com/p/awzn7qrg/\">https://post.smzdm.com/p/awzn7qrg/</a>  </p>\n<p>安装温度显示软件<br>在升级软件之前，需要先禁用企业源，不然，升级软件包可能会出现报错信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt-get install lm-sensors</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后运行一下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sensors</span><br></pre></td></tr></table></figure>\n\n<p>即可看到温度信息</p>\n<p>执行优化脚本<br>这一步主要写给新手，大佬可以直接使用该脚本脚本内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">np=&quot;/usr/share/perl5/PVE/API2/Nodes.pm&quot;</span><br><span class=\"line\">pvejs=&quot;/usr/share/pve-manager/js/pvemanagerlib.js&quot;</span><br><span class=\"line\">plib=&quot;/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pvever=$(pveversion | awk -F&quot;/&quot; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">echo pve版本$pvever</span><br><span class=\"line\">echo 备份源文件</span><br><span class=\"line\">[ ! -e $np.$pvever.bak ] &amp;&amp; cp $np $np.$pvever.bak || &#123; echo 已经修改过，请务重复执行; exit 1;&#125;</span><br><span class=\"line\">[ ! -e $pvejs.$pvever.bak ] &amp;&amp; cp $pvejs $pvejs.$pvever.bak</span><br><span class=\"line\">[ ! -e $plib.$pvever.bak ] &amp;&amp; cp $plib $plib.$pvever.bak</span><br><span class=\"line\"></span><br><span class=\"line\">therm=&#x27;$res-&gt;&#123;thermalstate&#125; = `sensors`;&#x27;;</span><br><span class=\"line\">cpure=&#x27;$res-&gt;&#123;cpure&#125; = `cat /proc/cpuinfo | grep -i  &quot;cpu mhz&quot;`;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改node.pm：</span><br><span class=\"line\">sed -i &quot;/PVE::pvecfg::version_text()/a $cpure\\n$therm&quot; $np</span><br><span class=\"line\"></span><br><span class=\"line\">sed -n &quot;/PVE::pvecfg::version_text()/,+5p&quot;  $np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tmpf=tmpfile.temp</span><br><span class=\"line\">touch $tmpf</span><br><span class=\"line\">cat &gt; $tmpf &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                  itemId: &#x27;thermal&#x27;,</span><br><span class=\"line\">                  colspan: 2,</span><br><span class=\"line\">                  printBar: false,</span><br><span class=\"line\">                  title: gettext(&#x27;温度&#x27;),</span><br><span class=\"line\">                  textField: &#x27;thermalstate&#x27;,</span><br><span class=\"line\">                  renderer:function(value)&#123;</span><br><span class=\"line\">                        const m = value.match(/(?&lt;=:[^\\+]+\\+)\\d+/g)</span><br><span class=\"line\">                        return `CPU: $&#123;m[0]&#125;($&#123;m[1]&#125;,$&#123;m[2]&#125;,$&#123;m[3]&#125;,$&#123;m[4]&#125;) | BOARD: $&#123;m[5]&#125; | NVME: $&#123;m[6]&#125;`;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                  itemId: &#x27;cpumhz&#x27;,</span><br><span class=\"line\">                  colspan: 2,</span><br><span class=\"line\">                  printBar: false,</span><br><span class=\"line\">                  title: gettext(&#x27;CPU频率&#x27;),</span><br><span class=\"line\">                  textField: &#x27;cpure&#x27;,</span><br><span class=\"line\">                  renderer:function(value)&#123;</span><br><span class=\"line\">                        const m = value.match(/(?&lt;=:\\s+)(\\d+)/g);</span><br><span class=\"line\">                        return `CPUMHZ: $&#123;m[0]&#125; | $&#123;m[1]&#125; | $&#123;m[2]&#125; | $&#123;m[3]&#125;`;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">#找到关键字pveversion的行号</span><br><span class=\"line\">echo 修改pvemanagerlib.js</span><br><span class=\"line\">ln=$(sed -n &#x27;/pveversion/,+10&#123;/&#125;,/&#123;=;q&#125;&#125;&#x27; $pvejs)</span><br><span class=\"line\">echo &quot;匹配的行号pveversion：&quot; $ln</span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改结果：</span><br><span class=\"line\">sed -i &quot;$&#123;ln&#125;r $tmpf&quot; $pvejs</span><br><span class=\"line\">sed -n &#x27;/pveversion/,+30p&#x27; $pvejs</span><br><span class=\"line\"></span><br><span class=\"line\">rm $tmpf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改页面高度</span><br><span class=\"line\">sed -i -r &#x27;/widget\\.pveNodeStatus/,+5&#123;/height/&#123;s#[0-9]+#360#&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -n &#x27;/widget\\.pveNodeStatus/,+5&#123;/height/&#123;p&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -i -r &#x27;/\\[logView\\]/,+5&#123;/heigh/&#123;s#[0-9]+#460#;&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -n &#x27;/\\[logView\\]/,+5&#123;/heigh/&#123;p&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改去除订阅弹窗</span><br><span class=\"line\">sed -r -i &#x27;/\\/nodes\\/localhost\\/subscription/,+10&#123;/^\\s+if \\(res === null /&#123;N;s#.+#\\t\\t  if(false)&#123;#&#125;&#125;&#x27; $plib</span><br><span class=\"line\">sed -n &#x27;/\\/nodes\\/localhost\\/subscription/,+10p&#x27; $plib</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart pveproxy</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;请刷新浏览器缓存shift+f5&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>Pve_Tools 安装</strong><br>1.先删除企业源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /etc/apt/sources.list.d/pve-enterprise.list</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.安装路径 Github: <a href=\"https://github.com/ivanhao/pvetools\">https://github.com/ivanhao/pvetools</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">apt update &amp;&amp; apt -y install git &amp;&amp; git clone https://github.com/ivanhao/pvetools.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3.启动工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvetools</span><br></pre></td></tr></table></figure>\n\n<p>新链接<br><a href=\"https://wp.gxnas.com/13756.html\">https://wp.gxnas.com/13756.html</a><br><a href=\"https://tendcode.com/subject/article/pve-cpu-temperature/\">https://tendcode.com/subject/article/pve-cpu-temperature/</a><br>原文链接<br><a href=\"https://www.right.com.cn/forum/thread-6754687-1-1.html\">https://www.right.com.cn/forum/thread-6754687-1-1.html</a><br><a href=\"https://post.smzdm.com/p/awzn7qrg/\">https://post.smzdm.com/p/awzn7qrg/</a>  </p>\n<p>安装温度显示软件<br>在升级软件之前，需要先禁用企业源，不然，升级软件包可能会出现报错信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt-get install lm-sensors</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后运行一下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sensors</span><br></pre></td></tr></table></figure>\n\n<p>即可看到温度信息</p>\n<p>执行优化脚本<br>这一步主要写给新手，大佬可以直接使用该脚本脚本内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">np=&quot;/usr/share/perl5/PVE/API2/Nodes.pm&quot;</span><br><span class=\"line\">pvejs=&quot;/usr/share/pve-manager/js/pvemanagerlib.js&quot;</span><br><span class=\"line\">plib=&quot;/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pvever=$(pveversion | awk -F&quot;/&quot; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">echo pve版本$pvever</span><br><span class=\"line\">echo 备份源文件</span><br><span class=\"line\">[ ! -e $np.$pvever.bak ] &amp;&amp; cp $np $np.$pvever.bak || &#123; echo 已经修改过，请务重复执行; exit 1;&#125;</span><br><span class=\"line\">[ ! -e $pvejs.$pvever.bak ] &amp;&amp; cp $pvejs $pvejs.$pvever.bak</span><br><span class=\"line\">[ ! -e $plib.$pvever.bak ] &amp;&amp; cp $plib $plib.$pvever.bak</span><br><span class=\"line\"></span><br><span class=\"line\">therm=&#x27;$res-&gt;&#123;thermalstate&#125; = `sensors`;&#x27;;</span><br><span class=\"line\">cpure=&#x27;$res-&gt;&#123;cpure&#125; = `cat /proc/cpuinfo | grep -i  &quot;cpu mhz&quot;`;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改node.pm：</span><br><span class=\"line\">sed -i &quot;/PVE::pvecfg::version_text()/a $cpure\\n$therm&quot; $np</span><br><span class=\"line\"></span><br><span class=\"line\">sed -n &quot;/PVE::pvecfg::version_text()/,+5p&quot;  $np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tmpf=tmpfile.temp</span><br><span class=\"line\">touch $tmpf</span><br><span class=\"line\">cat &gt; $tmpf &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                  itemId: &#x27;thermal&#x27;,</span><br><span class=\"line\">                  colspan: 2,</span><br><span class=\"line\">                  printBar: false,</span><br><span class=\"line\">                  title: gettext(&#x27;温度&#x27;),</span><br><span class=\"line\">                  textField: &#x27;thermalstate&#x27;,</span><br><span class=\"line\">                  renderer:function(value)&#123;</span><br><span class=\"line\">                        const m = value.match(/(?&lt;=:[^\\+]+\\+)\\d+/g)</span><br><span class=\"line\">                        return `CPU: $&#123;m[0]&#125;($&#123;m[1]&#125;,$&#123;m[2]&#125;,$&#123;m[3]&#125;,$&#123;m[4]&#125;) | BOARD: $&#123;m[5]&#125; | NVME: $&#123;m[6]&#125;`;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                  itemId: &#x27;cpumhz&#x27;,</span><br><span class=\"line\">                  colspan: 2,</span><br><span class=\"line\">                  printBar: false,</span><br><span class=\"line\">                  title: gettext(&#x27;CPU频率&#x27;),</span><br><span class=\"line\">                  textField: &#x27;cpure&#x27;,</span><br><span class=\"line\">                  renderer:function(value)&#123;</span><br><span class=\"line\">                        const m = value.match(/(?&lt;=:\\s+)(\\d+)/g);</span><br><span class=\"line\">                        return `CPUMHZ: $&#123;m[0]&#125; | $&#123;m[1]&#125; | $&#123;m[2]&#125; | $&#123;m[3]&#125;`;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">#找到关键字pveversion的行号</span><br><span class=\"line\">echo 修改pvemanagerlib.js</span><br><span class=\"line\">ln=$(sed -n &#x27;/pveversion/,+10&#123;/&#125;,/&#123;=;q&#125;&#125;&#x27; $pvejs)</span><br><span class=\"line\">echo &quot;匹配的行号pveversion：&quot; $ln</span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改结果：</span><br><span class=\"line\">sed -i &quot;$&#123;ln&#125;r $tmpf&quot; $pvejs</span><br><span class=\"line\">sed -n &#x27;/pveversion/,+30p&#x27; $pvejs</span><br><span class=\"line\"></span><br><span class=\"line\">rm $tmpf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改页面高度</span><br><span class=\"line\">sed -i -r &#x27;/widget\\.pveNodeStatus/,+5&#123;/height/&#123;s#[0-9]+#360#&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -n &#x27;/widget\\.pveNodeStatus/,+5&#123;/height/&#123;p&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -i -r &#x27;/\\[logView\\]/,+5&#123;/heigh/&#123;s#[0-9]+#460#;&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\">sed -n &#x27;/\\[logView\\]/,+5&#123;/heigh/&#123;p&#125;&#125;&#x27; $pvejs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo 修改去除订阅弹窗</span><br><span class=\"line\">sed -r -i &#x27;/\\/nodes\\/localhost\\/subscription/,+10&#123;/^\\s+if \\(res === null /&#123;N;s#.+#\\t\\t  if(false)&#123;#&#125;&#125;&#x27; $plib</span><br><span class=\"line\">sed -n &#x27;/\\/nodes\\/localhost\\/subscription/,+10p&#x27; $plib</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart pveproxy</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;请刷新浏览器缓存shift+f5&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"设备直通","date":"2024-06-19T16:59:13.000Z","_content":"原文链接： https://www.orcy.net.cn/185.html\n\n默认未直通，在PVE添加PCI设备会有如下提示：\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160614.png)\n图1 报错提示内容\n\n直通网卡需要修改gurb、增加模块、虚拟机添加网卡\n\n# **修改gurb**\n\n## Intel CPU\n\nshell里面输入命令：\n\n```\nnano /etc/default/grub\n```\n\n在里面找到：\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n```\n\n然后修改为\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on\"\n```\n\n在更新一下\n\n```\nupdate-grub\n```\n\n重启一下\n\n```\nreboot\n```\n\n## AMD CPU\n\nshell里面输入命令：\n\n```\nnano /etc/default/grub\n```\n\n在里面找到：\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n```\n\n然后修改为\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on\"\"\n```\n\n重启一下\n\n```\nreboot\n```\n\n**#增加模块**\n\n修改文件 /etc/modules 加入如下的行（默认为空）：\n\n```\nvfio\n vfio_iommu_type1\n vfio_pci\n vfio_virqfd\n```\n\n# 虚拟机添加网卡（可在web页面添加）\n\n查找网卡ID\n\n```\nlspci |grep net\n```\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160645.png)\n图2 查找网卡ID\n\n需要记住前面ID值\n\n命令行登录系统，打开文件\n\n```\n/etc/pve/nodes/你的集群名称/qemu-server/虚拟机id.conf \n```\n\n其内容由上述操做所生成。以下项目必须手工添加。\n\n```\nmachine:q35\n hostpci0:02:00.0,pcie=1  # 网卡 1\n hostpci1:02:00.1,pcie=1  # 网卡 2\n```\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160724.png)  \n图3 添加成功\n\n成功后会在上述出现 ，注意 :如果不小心添加了物理主机所使用的网卡，会导致，服务器掉线，这时候使用u盘进入救救援模式，删除原来的配置，重启即可。\n\n＃补充说明：Web管理页面添加网卡操作如下\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160924.png)  \n图4 添加PCI设备\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160949.png)  \n图5 选择要添加的网卡","source":"_posts/pve/设备直通.md","raw":"---\ntitle: 设备直通\ndate: 2024-06-20 00:59:13\ncategories:\n  - pve\ntags:\n---\n原文链接： https://www.orcy.net.cn/185.html\n\n默认未直通，在PVE添加PCI设备会有如下提示：\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160614.png)\n图1 报错提示内容\n\n直通网卡需要修改gurb、增加模块、虚拟机添加网卡\n\n# **修改gurb**\n\n## Intel CPU\n\nshell里面输入命令：\n\n```\nnano /etc/default/grub\n```\n\n在里面找到：\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n```\n\n然后修改为\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on\"\n```\n\n在更新一下\n\n```\nupdate-grub\n```\n\n重启一下\n\n```\nreboot\n```\n\n## AMD CPU\n\nshell里面输入命令：\n\n```\nnano /etc/default/grub\n```\n\n在里面找到：\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n```\n\n然后修改为\n\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on\"\"\n```\n\n重启一下\n\n```\nreboot\n```\n\n**#增加模块**\n\n修改文件 /etc/modules 加入如下的行（默认为空）：\n\n```\nvfio\n vfio_iommu_type1\n vfio_pci\n vfio_virqfd\n```\n\n# 虚拟机添加网卡（可在web页面添加）\n\n查找网卡ID\n\n```\nlspci |grep net\n```\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160645.png)\n图2 查找网卡ID\n\n需要记住前面ID值\n\n命令行登录系统，打开文件\n\n```\n/etc/pve/nodes/你的集群名称/qemu-server/虚拟机id.conf \n```\n\n其内容由上述操做所生成。以下项目必须手工添加。\n\n```\nmachine:q35\n hostpci0:02:00.0,pcie=1  # 网卡 1\n hostpci1:02:00.1,pcie=1  # 网卡 2\n```\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160724.png)  \n图3 添加成功\n\n成功后会在上述出现 ，注意 :如果不小心添加了物理主机所使用的网卡，会导致，服务器掉线，这时候使用u盘进入救救援模式，删除原来的配置，重启即可。\n\n＃补充说明：Web管理页面添加网卡操作如下\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160924.png)  \n图4 添加PCI设备\n\n![PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云](https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160949.png)  \n图5 选择要添加的网卡","slug":"pve/设备直通","published":1,"updated":"2024-09-27T14:59:56.690Z","_id":"clxm54wns00067guy5rpq73we","comments":1,"layout":"post","photos":[],"content":"<p>原文链接： <a href=\"https://www.orcy.net.cn/185.html\">https://www.orcy.net.cn/185.html</a></p>\n<p>默认未直通，在PVE添加PCI设备会有如下提示：</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160614.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图1 报错提示内容</p>\n<p>直通网卡需要修改gurb、增加模块、虚拟机添加网卡</p>\n<h1 id=\"修改gurb\"><a href=\"#修改gurb\" class=\"headerlink\" title=\"修改gurb\"></a><strong>修改gurb</strong></h1><h2 id=\"Intel-CPU\"><a href=\"#Intel-CPU\" class=\"headerlink\" title=\"Intel CPU\"></a>Intel CPU</h2><p>shell里面输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<p>在里面找到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在更新一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br></pre></td></tr></table></figure>\n\n<p>重启一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AMD-CPU\"><a href=\"#AMD-CPU\" class=\"headerlink\" title=\"AMD CPU\"></a>AMD CPU</h2><p>shell里面输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<p>在里面找到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>重启一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p><strong>#增加模块</strong></p>\n<p>修改文件 &#x2F;etc&#x2F;modules 加入如下的行（默认为空）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vfio</span><br><span class=\"line\"> vfio_iommu_type1</span><br><span class=\"line\"> vfio_pci</span><br><span class=\"line\"> vfio_virqfd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"虚拟机添加网卡（可在web页面添加）\"><a href=\"#虚拟机添加网卡（可在web页面添加）\" class=\"headerlink\" title=\"虚拟机添加网卡（可在web页面添加）\"></a>虚拟机添加网卡（可在web页面添加）</h1><p>查找网卡ID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci |grep net</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160645.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图2 查找网卡ID</p>\n<p>需要记住前面ID值</p>\n<p>命令行登录系统，打开文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/pve/nodes/你的集群名称/qemu-server/虚拟机id.conf </span><br></pre></td></tr></table></figure>\n\n<p>其内容由上述操做所生成。以下项目必须手工添加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine:q35</span><br><span class=\"line\"> hostpci0:02:00.0,pcie=1  # 网卡 1</span><br><span class=\"line\"> hostpci1:02:00.1,pcie=1  # 网卡 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160724.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图3 添加成功</p>\n<p>成功后会在上述出现 ，注意 :如果不小心添加了物理主机所使用的网卡，会导致，服务器掉线，这时候使用u盘进入救救援模式，删除原来的配置，重启即可。</p>\n<p>＃补充说明：Web管理页面添加网卡操作如下</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160924.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图4 添加PCI设备</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160949.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图5 选择要添加的网卡</p>\n","excerpt":"","more":"<p>原文链接： <a href=\"https://www.orcy.net.cn/185.html\">https://www.orcy.net.cn/185.html</a></p>\n<p>默认未直通，在PVE添加PCI设备会有如下提示：</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160614.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图1 报错提示内容</p>\n<p>直通网卡需要修改gurb、增加模块、虚拟机添加网卡</p>\n<h1 id=\"修改gurb\"><a href=\"#修改gurb\" class=\"headerlink\" title=\"修改gurb\"></a><strong>修改gurb</strong></h1><h2 id=\"Intel-CPU\"><a href=\"#Intel-CPU\" class=\"headerlink\" title=\"Intel CPU\"></a>Intel CPU</h2><p>shell里面输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<p>在里面找到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在更新一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br></pre></td></tr></table></figure>\n\n<p>重启一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AMD-CPU\"><a href=\"#AMD-CPU\" class=\"headerlink\" title=\"AMD CPU\"></a>AMD CPU</h2><p>shell里面输入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<p>在里面找到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>重启一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p><strong>#增加模块</strong></p>\n<p>修改文件 &#x2F;etc&#x2F;modules 加入如下的行（默认为空）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vfio</span><br><span class=\"line\"> vfio_iommu_type1</span><br><span class=\"line\"> vfio_pci</span><br><span class=\"line\"> vfio_virqfd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"虚拟机添加网卡（可在web页面添加）\"><a href=\"#虚拟机添加网卡（可在web页面添加）\" class=\"headerlink\" title=\"虚拟机添加网卡（可在web页面添加）\"></a>虚拟机添加网卡（可在web页面添加）</h1><p>查找网卡ID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci |grep net</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160645.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图2 查找网卡ID</p>\n<p>需要记住前面ID值</p>\n<p>命令行登录系统，打开文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/pve/nodes/你的集群名称/qemu-server/虚拟机id.conf </span><br></pre></td></tr></table></figure>\n\n<p>其内容由上述操做所生成。以下项目必须手工添加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine:q35</span><br><span class=\"line\"> hostpci0:02:00.0,pcie=1  # 网卡 1</span><br><span class=\"line\"> hostpci1:02:00.1,pcie=1  # 网卡 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160724.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图3 添加成功</p>\n<p>成功后会在上述出现 ，注意 :如果不小心添加了物理主机所使用的网卡，会导致，服务器掉线，这时候使用u盘进入救救援模式，删除原来的配置，重启即可。</p>\n<p>＃补充说明：Web管理页面添加网卡操作如下</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160924.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图4 添加PCI设备</p>\n<p><img src=\"https://myoss.orcy.net.cn:9000/oss-orcy-img/20210326160949.png\" alt=\"PVE(Proxmox VE)下网卡是如何设置直通的-下一朵云\"><br>图5 选择要添加的网卡</p>\n"},{"title":"Bootstrap","date":"2024-06-19T17:50:46.000Z","_content":"\n[Bootstrap中文网 (bootcss.com)](https://www.bootcss.com/)\n\n前端框架，来自Twitter，基于HTML，css，JavaScript\n\n优势：\n\n1. 定义了许多css样式和js插件，开发人员可以直接调用得到丰富的页面效果\n2. 响应式布局\n\n   同一套页面代码可以适应不同尺寸的屏幕\n\n## 快速入门\n\n1. 下载\n2. 项目中引入bootstrap文件\n3. 基本模板\n\n    ```html\n    <!doctype html>\n    <html lang=\"zh-CN\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->\n        <title>Bootstrap 101 Template</title>\n\n        <!-- Bootstrap -->\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\" crossorigin=\"anonymous\">\n\n        <!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 -->\n        <!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 -->\n        <!--[if lt IE 9]>\n          <script src=\"https://fastly.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js\"></script>\n          <script src=\"https://fastly.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js\"></script>\n        <![endif]-->\n      </head>\n      <body>\n        <h1>你好，世界！</h1>\n\n        <!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->\n        <script src=\"https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js\" integrity=\"sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ\" crossorigin=\"anonymous\"></script>\n        <!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\" integrity=\"sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd\" crossorigin=\"anonymous\"></script>\n      </body>\n    </html>\n    ```\n\n\n## 响应式布局\n\n概念：同一套页面代码适配不同分辨率不同尺寸的设备\n\n实现：栅格系统，将一行平均分为12个格子，可以指定元素占几个格子\n\n\n使用步骤：\n\n1. 定义容器\n\n    * **容器分类**\n\n        1. `container`: 两边根据不同设备留白\n        2. `container-fluid`： 固定100%宽度\n        3. `col` ：列可以再作为容器，同样12等分\n2. 定义行\n3. 定义元素   样式：`col-设备代号-格子数目`\n\n    1. `xs`: 超小屏幕\n    2. `sm`: 小屏幕\n    3. `md`: **中等屏幕** 一般使用此类别较多，更小设备使其独自占用一行\n    4. `lg`: 大屏幕\n\n   > *注：*\n   >\n   > 1. 具体设备信息查看下方表格\n   >\n   > 2. 每行最多12个格子，超过则自动换行\n   > 3. 栅格属性向上兼容，超小屏幕配置适用于所有规格屏幕\n   > 4. 设备宽度小于设置的栅格属性，则一列占用一行\n>\n\n* “行（row）”必须包含在 `.container` （固定宽度）或 `.container-fluid` （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。\n* 通过“行（row）”在水平方向创建一组“列（column）”。\n* 你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。\n* 类似 `.row` 和 `.col-xs-4` 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。\n* 通过为“列（column）”设置 `padding` 属性，从而创建列与列之间的间隔（gutter）。通过为 `.row` 元素设置负值 `margin` 从而抵消掉为 `.container` 元素设置的 `padding`，也就间接为“行（row）”所包含的“列（column）”抵消掉了`padding`。\n* 负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。\n* 栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 `.col-xs-4` 来创建。\n* 如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。\n* 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 `.col-md-*` 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 `.col-lg-*` 不存在， 也影响大屏幕设备。\n\n\n通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。\n\n|                         |   超小屏幕 手机 (<768px)   |                 小屏幕 平板 (≥768px)                 | 中等屏幕 桌面显示器 (≥992px) | 大屏幕 大桌面显示器 (≥1200px) |\n| ------------------------- | :--------------------------: | :-----------------------------------------------------: | :-----------------------------: | :------------------------------: |\n| 栅格系统行为            |        总是水平排列        | 开始是堆叠在一起的，当大于这些阈值时将变为水平排列C<br /> |                                |  |\n| `.container` 最大宽度 |       None （自动）       |                         750px                         |             970px             |             1170px             |\n| 类前缀                  |        `.col-xs-`        |                     `.col-sm-`                     |         `.col-md-`         |          `.col-lg-`          |\n| 列（column）数          |            12<br />            |                              |  |  |\n| 最大列（column）宽      |            自动            |                         ~62px                         |             ~81px             |             ~97px             |\n| 槽（gutter）宽          | 30px （每列左右均有 15px） |                                                      |                              |                                |\n| 可嵌套                  |            是<br />            |                              |  |  |\n| 偏移（Offsets）         |            是<br />            |                              |  |  |\n| 列排序                  |            是<br />            |                              |  |  |\n\n\n## css样式和js插件\n\n全局css样式\n\n1. 按钮\n\n   常用样式\n\n    ```html\n    <!-- Standard button -->\n    <button type=\"button\" class=\"btn btn-default\">（默认样式）Default</button>\n\n    <!-- Provides extra visual weight and identifies the primary action in a set of buttons -->\n    <button type=\"button\" class=\"btn btn-primary\">（首选项）Primary</button>\n\n    <!-- Indicates a successful or positive action -->\n    <button type=\"button\" class=\"btn btn-success\">（成功）Success</button>\n\n    <!-- Contextual button for informational alert messages -->\n    <button type=\"button\" class=\"btn btn-info\">（一般信息）Info</button>\n\n    <!-- Indicates caution should be taken with this action -->\n    <button type=\"button\" class=\"btn btn-warning\">（警告）Warning</button>\n\n    <!-- Indicates a dangerous or potentially negative action -->\n    <button type=\"button\" class=\"btn btn-danger\">（危险）Danger</button>\n\n    <!-- Deemphasize a button by making it look like a link while maintaining button behavior -->\n    <button type=\"button\" class=\"btn btn-link\">（链接）Link</button>\n    ```\n2. 图片\n\n   响应式\n\n   *响应式会受图片本身像素影响，超过图片本身像素大小后不能够再放大*\n\n    ```js\n    <img src=\"...\" class=\"img-responsive\" alt=\"Responsive image\">\n    ```\n\n   形状\n\n    ```js\n    <img src=\"...\" alt=\"...\" class=\"img-rounded\">\n    <img src=\"...\" alt=\"...\" class=\"img-circle\">\n    <img src=\"...\" alt=\"...\" class=\"img-thumbnail\">\n    ```\n3. 表格\n\n   为任意 `<table>` 标签添加 `.table` 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。\n\n   通过 `.table-striped` 类可以给 `<tbody>` 之内的每一行增加斑马条纹样式。\n\n   添加 `.table-bordered` 类为表格和其中的每个单元格增加边框。\n\n   通过添加 `.table-hover` 类可以让 `<tbody>` 中的每一行对鼠标悬停状态作出响应。\n\n   通过添加 `.table-condensed` 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。\n4. 表单\n\n组件\n\n1. 导航条\n2. 分页条\n\n插件：\n\n* 轮播图  Carousel","source":"_posts/web前端/Bootstrap.md","raw":"---\ntitle: Bootstrap\ndate: 2024-06-20 01:50:46\ncategories:\n   - web 前端\ntags:\n---\n\n[Bootstrap中文网 (bootcss.com)](https://www.bootcss.com/)\n\n前端框架，来自Twitter，基于HTML，css，JavaScript\n\n优势：\n\n1. 定义了许多css样式和js插件，开发人员可以直接调用得到丰富的页面效果\n2. 响应式布局\n\n   同一套页面代码可以适应不同尺寸的屏幕\n\n## 快速入门\n\n1. 下载\n2. 项目中引入bootstrap文件\n3. 基本模板\n\n    ```html\n    <!doctype html>\n    <html lang=\"zh-CN\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->\n        <title>Bootstrap 101 Template</title>\n\n        <!-- Bootstrap -->\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\" crossorigin=\"anonymous\">\n\n        <!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 -->\n        <!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 -->\n        <!--[if lt IE 9]>\n          <script src=\"https://fastly.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js\"></script>\n          <script src=\"https://fastly.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js\"></script>\n        <![endif]-->\n      </head>\n      <body>\n        <h1>你好，世界！</h1>\n\n        <!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->\n        <script src=\"https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js\" integrity=\"sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ\" crossorigin=\"anonymous\"></script>\n        <!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\" integrity=\"sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd\" crossorigin=\"anonymous\"></script>\n      </body>\n    </html>\n    ```\n\n\n## 响应式布局\n\n概念：同一套页面代码适配不同分辨率不同尺寸的设备\n\n实现：栅格系统，将一行平均分为12个格子，可以指定元素占几个格子\n\n\n使用步骤：\n\n1. 定义容器\n\n    * **容器分类**\n\n        1. `container`: 两边根据不同设备留白\n        2. `container-fluid`： 固定100%宽度\n        3. `col` ：列可以再作为容器，同样12等分\n2. 定义行\n3. 定义元素   样式：`col-设备代号-格子数目`\n\n    1. `xs`: 超小屏幕\n    2. `sm`: 小屏幕\n    3. `md`: **中等屏幕** 一般使用此类别较多，更小设备使其独自占用一行\n    4. `lg`: 大屏幕\n\n   > *注：*\n   >\n   > 1. 具体设备信息查看下方表格\n   >\n   > 2. 每行最多12个格子，超过则自动换行\n   > 3. 栅格属性向上兼容，超小屏幕配置适用于所有规格屏幕\n   > 4. 设备宽度小于设置的栅格属性，则一列占用一行\n>\n\n* “行（row）”必须包含在 `.container` （固定宽度）或 `.container-fluid` （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。\n* 通过“行（row）”在水平方向创建一组“列（column）”。\n* 你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。\n* 类似 `.row` 和 `.col-xs-4` 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。\n* 通过为“列（column）”设置 `padding` 属性，从而创建列与列之间的间隔（gutter）。通过为 `.row` 元素设置负值 `margin` 从而抵消掉为 `.container` 元素设置的 `padding`，也就间接为“行（row）”所包含的“列（column）”抵消掉了`padding`。\n* 负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。\n* 栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 `.col-xs-4` 来创建。\n* 如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。\n* 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 `.col-md-*` 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 `.col-lg-*` 不存在， 也影响大屏幕设备。\n\n\n通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。\n\n|                         |   超小屏幕 手机 (<768px)   |                 小屏幕 平板 (≥768px)                 | 中等屏幕 桌面显示器 (≥992px) | 大屏幕 大桌面显示器 (≥1200px) |\n| ------------------------- | :--------------------------: | :-----------------------------------------------------: | :-----------------------------: | :------------------------------: |\n| 栅格系统行为            |        总是水平排列        | 开始是堆叠在一起的，当大于这些阈值时将变为水平排列C<br /> |                                |  |\n| `.container` 最大宽度 |       None （自动）       |                         750px                         |             970px             |             1170px             |\n| 类前缀                  |        `.col-xs-`        |                     `.col-sm-`                     |         `.col-md-`         |          `.col-lg-`          |\n| 列（column）数          |            12<br />            |                              |  |  |\n| 最大列（column）宽      |            自动            |                         ~62px                         |             ~81px             |             ~97px             |\n| 槽（gutter）宽          | 30px （每列左右均有 15px） |                                                      |                              |                                |\n| 可嵌套                  |            是<br />            |                              |  |  |\n| 偏移（Offsets）         |            是<br />            |                              |  |  |\n| 列排序                  |            是<br />            |                              |  |  |\n\n\n## css样式和js插件\n\n全局css样式\n\n1. 按钮\n\n   常用样式\n\n    ```html\n    <!-- Standard button -->\n    <button type=\"button\" class=\"btn btn-default\">（默认样式）Default</button>\n\n    <!-- Provides extra visual weight and identifies the primary action in a set of buttons -->\n    <button type=\"button\" class=\"btn btn-primary\">（首选项）Primary</button>\n\n    <!-- Indicates a successful or positive action -->\n    <button type=\"button\" class=\"btn btn-success\">（成功）Success</button>\n\n    <!-- Contextual button for informational alert messages -->\n    <button type=\"button\" class=\"btn btn-info\">（一般信息）Info</button>\n\n    <!-- Indicates caution should be taken with this action -->\n    <button type=\"button\" class=\"btn btn-warning\">（警告）Warning</button>\n\n    <!-- Indicates a dangerous or potentially negative action -->\n    <button type=\"button\" class=\"btn btn-danger\">（危险）Danger</button>\n\n    <!-- Deemphasize a button by making it look like a link while maintaining button behavior -->\n    <button type=\"button\" class=\"btn btn-link\">（链接）Link</button>\n    ```\n2. 图片\n\n   响应式\n\n   *响应式会受图片本身像素影响，超过图片本身像素大小后不能够再放大*\n\n    ```js\n    <img src=\"...\" class=\"img-responsive\" alt=\"Responsive image\">\n    ```\n\n   形状\n\n    ```js\n    <img src=\"...\" alt=\"...\" class=\"img-rounded\">\n    <img src=\"...\" alt=\"...\" class=\"img-circle\">\n    <img src=\"...\" alt=\"...\" class=\"img-thumbnail\">\n    ```\n3. 表格\n\n   为任意 `<table>` 标签添加 `.table` 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。\n\n   通过 `.table-striped` 类可以给 `<tbody>` 之内的每一行增加斑马条纹样式。\n\n   添加 `.table-bordered` 类为表格和其中的每个单元格增加边框。\n\n   通过添加 `.table-hover` 类可以让 `<tbody>` 中的每一行对鼠标悬停状态作出响应。\n\n   通过添加 `.table-condensed` 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。\n4. 表单\n\n组件\n\n1. 导航条\n2. 分页条\n\n插件：\n\n* 轮播图  Carousel","slug":"web前端/Bootstrap","published":1,"updated":"2024-06-19T17:53:29.121Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wns00077guy5f6n0gie","content":"<p><a href=\"https://www.bootcss.com/\">Bootstrap中文网 (bootcss.com)</a></p>\n<p>前端框架，来自Twitter，基于HTML，css，JavaScript</p>\n<p>优势：</p>\n<ol>\n<li><p>定义了许多css样式和js插件，开发人员可以直接调用得到丰富的页面效果</p>\n</li>\n<li><p>响应式布局</p>\n<p>同一套页面代码可以适应不同尺寸的屏幕</p>\n</li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><ol>\n<li><p>下载</p>\n</li>\n<li><p>项目中引入bootstrap文件</p>\n</li>\n<li><p>基本模板</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Bootstrap 101 Template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=&quot;https://fastly.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=&quot;https://fastly.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好，世界！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h2><p>概念：同一套页面代码适配不同分辨率不同尺寸的设备</p>\n<p>实现：栅格系统，将一行平均分为12个格子，可以指定元素占几个格子</p>\n<p>使用步骤：</p>\n<ol>\n<li><p>定义容器</p>\n<ul>\n<li><p><strong>容器分类</strong></p>\n<ol>\n<li><code>container</code>: 两边根据不同设备留白</li>\n<li><code>container-fluid</code>： 固定100%宽度</li>\n<li><code>col</code> ：列可以再作为容器，同样12等分</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>定义行</p>\n</li>\n<li><p>定义元素   样式：<code>col-设备代号-格子数目</code></p>\n<ol>\n<li><code>xs</code>: 超小屏幕</li>\n<li><code>sm</code>: 小屏幕</li>\n<li><code>md</code>: <strong>中等屏幕</strong> 一般使用此类别较多，更小设备使其独自占用一行</li>\n<li><code>lg</code>: 大屏幕</li>\n</ol>\n<blockquote>\n<p><em>注：</em></p>\n<ol>\n<li><p>具体设备信息查看下方表格</p>\n</li>\n<li><p>每行最多12个格子，超过则自动换行</p>\n</li>\n<li><p>栅格属性向上兼容，超小屏幕配置适用于所有规格屏幕</p>\n</li>\n<li><p>设备宽度小于设置的栅格属性，则一列占用一行</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ul>\n<li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li>\n<li>通过“行（row）”在水平方向创建一组“列（column）”。</li>\n<li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li>\n<li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li>\n<li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li>\n<li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li>\n<li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li>\n<li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li>\n<li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-lg-*</code> 不存在， 也影响大屏幕设备。</li>\n</ul>\n<p>通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">超小屏幕 手机 (&lt;768px)</th>\n<th align=\"center\">小屏幕 平板 (≥768px)</th>\n<th align=\"center\">中等屏幕 桌面显示器 (≥992px)</th>\n<th align=\"center\">大屏幕 大桌面显示器 (≥1200px)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>栅格系统行为</td>\n<td align=\"center\">总是水平排列</td>\n<td align=\"center\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>.container</code> 最大宽度</td>\n<td align=\"center\">None （自动）</td>\n<td align=\"center\">750px</td>\n<td align=\"center\">970px</td>\n<td align=\"center\">1170px</td>\n</tr>\n<tr>\n<td>类前缀</td>\n<td align=\"center\"><code>.col-xs-</code></td>\n<td align=\"center\"><code>.col-sm-</code></td>\n<td align=\"center\"><code>.col-md-</code></td>\n<td align=\"center\"><code>.col-lg-</code></td>\n</tr>\n<tr>\n<td>列（column）数</td>\n<td align=\"center\">12<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>最大列（column）宽</td>\n<td align=\"center\">自动</td>\n<td align=\"center\">~62px</td>\n<td align=\"center\">~81px</td>\n<td align=\"center\">~97px</td>\n</tr>\n<tr>\n<td>槽（gutter）宽</td>\n<td align=\"center\">30px （每列左右均有 15px）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>可嵌套</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>偏移（Offsets）</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>列排序</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"css样式和js插件\"><a href=\"#css样式和js插件\" class=\"headerlink\" title=\"css样式和js插件\"></a>css样式和js插件</h2><p>全局css样式</p>\n<ol>\n<li><p>按钮</p>\n<p>常用样式</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Standard button --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>图片</p>\n<p>响应式</p>\n<p><em>响应式会受图片本身像素影响，超过图片本身像素大小后不能够再放大</em></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;...&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;img-responsive&quot;</span> alt=<span class=\"string\">&quot;Responsive image&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>形状</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;...&quot;</span> alt=<span class=\"string\">&quot;...&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;img-rounded&quot;</span>&gt;</span><br><span class=\"line\">&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>表格</p>\n<p>为任意 <code>&lt;table&gt;</code> 标签添加 <code>.table</code> 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。</p>\n<p>通过 <code>.table-striped</code> 类可以给 <code>&lt;tbody&gt;</code> 之内的每一行增加斑马条纹样式。</p>\n<p>添加 <code>.table-bordered</code> 类为表格和其中的每个单元格增加边框。</p>\n<p>通过添加 <code>.table-hover</code> 类可以让 <code>&lt;tbody&gt;</code> 中的每一行对鼠标悬停状态作出响应。</p>\n<p>通过添加 <code>.table-condensed</code> 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。</p>\n</li>\n<li><p>表单</p>\n</li>\n</ol>\n<p>组件</p>\n<ol>\n<li>导航条</li>\n<li>分页条</li>\n</ol>\n<p>插件：</p>\n<ul>\n<li>轮播图  Carousel</li>\n</ul>\n","excerpt":"","more":"<p><a href=\"https://www.bootcss.com/\">Bootstrap中文网 (bootcss.com)</a></p>\n<p>前端框架，来自Twitter，基于HTML，css，JavaScript</p>\n<p>优势：</p>\n<ol>\n<li><p>定义了许多css样式和js插件，开发人员可以直接调用得到丰富的页面效果</p>\n</li>\n<li><p>响应式布局</p>\n<p>同一套页面代码可以适应不同尺寸的屏幕</p>\n</li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><ol>\n<li><p>下载</p>\n</li>\n<li><p>项目中引入bootstrap文件</p>\n</li>\n<li><p>基本模板</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Bootstrap 101 Template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=&quot;https://fastly.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;script src=&quot;https://fastly.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好，世界！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://fastly.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h2><p>概念：同一套页面代码适配不同分辨率不同尺寸的设备</p>\n<p>实现：栅格系统，将一行平均分为12个格子，可以指定元素占几个格子</p>\n<p>使用步骤：</p>\n<ol>\n<li><p>定义容器</p>\n<ul>\n<li><p><strong>容器分类</strong></p>\n<ol>\n<li><code>container</code>: 两边根据不同设备留白</li>\n<li><code>container-fluid</code>： 固定100%宽度</li>\n<li><code>col</code> ：列可以再作为容器，同样12等分</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>定义行</p>\n</li>\n<li><p>定义元素   样式：<code>col-设备代号-格子数目</code></p>\n<ol>\n<li><code>xs</code>: 超小屏幕</li>\n<li><code>sm</code>: 小屏幕</li>\n<li><code>md</code>: <strong>中等屏幕</strong> 一般使用此类别较多，更小设备使其独自占用一行</li>\n<li><code>lg</code>: 大屏幕</li>\n</ol>\n<blockquote>\n<p><em>注：</em></p>\n<ol>\n<li><p>具体设备信息查看下方表格</p>\n</li>\n<li><p>每行最多12个格子，超过则自动换行</p>\n</li>\n<li><p>栅格属性向上兼容，超小屏幕配置适用于所有规格屏幕</p>\n</li>\n<li><p>设备宽度小于设置的栅格属性，则一列占用一行</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ul>\n<li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li>\n<li>通过“行（row）”在水平方向创建一组“列（column）”。</li>\n<li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li>\n<li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li>\n<li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li>\n<li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li>\n<li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li>\n<li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li>\n<li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-lg-*</code> 不存在， 也影响大屏幕设备。</li>\n</ul>\n<p>通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">超小屏幕 手机 (&lt;768px)</th>\n<th align=\"center\">小屏幕 平板 (≥768px)</th>\n<th align=\"center\">中等屏幕 桌面显示器 (≥992px)</th>\n<th align=\"center\">大屏幕 大桌面显示器 (≥1200px)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>栅格系统行为</td>\n<td align=\"center\">总是水平排列</td>\n<td align=\"center\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td><code>.container</code> 最大宽度</td>\n<td align=\"center\">None （自动）</td>\n<td align=\"center\">750px</td>\n<td align=\"center\">970px</td>\n<td align=\"center\">1170px</td>\n</tr>\n<tr>\n<td>类前缀</td>\n<td align=\"center\"><code>.col-xs-</code></td>\n<td align=\"center\"><code>.col-sm-</code></td>\n<td align=\"center\"><code>.col-md-</code></td>\n<td align=\"center\"><code>.col-lg-</code></td>\n</tr>\n<tr>\n<td>列（column）数</td>\n<td align=\"center\">12<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>最大列（column）宽</td>\n<td align=\"center\">自动</td>\n<td align=\"center\">~62px</td>\n<td align=\"center\">~81px</td>\n<td align=\"center\">~97px</td>\n</tr>\n<tr>\n<td>槽（gutter）宽</td>\n<td align=\"center\">30px （每列左右均有 15px）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>可嵌套</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>偏移（Offsets）</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>列排序</td>\n<td align=\"center\">是<br /></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"css样式和js插件\"><a href=\"#css样式和js插件\" class=\"headerlink\" title=\"css样式和js插件\"></a>css样式和js插件</h2><p>全局css样式</p>\n<ol>\n<li><p>按钮</p>\n<p>常用样式</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Standard button --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>图片</p>\n<p>响应式</p>\n<p><em>响应式会受图片本身像素影响，超过图片本身像素大小后不能够再放大</em></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;...&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;img-responsive&quot;</span> alt=<span class=\"string\">&quot;Responsive image&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>形状</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;...&quot;</span> alt=<span class=\"string\">&quot;...&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;img-rounded&quot;</span>&gt;</span><br><span class=\"line\">&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>表格</p>\n<p>为任意 <code>&lt;table&gt;</code> 标签添加 <code>.table</code> 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。</p>\n<p>通过 <code>.table-striped</code> 类可以给 <code>&lt;tbody&gt;</code> 之内的每一行增加斑马条纹样式。</p>\n<p>添加 <code>.table-bordered</code> 类为表格和其中的每个单元格增加边框。</p>\n<p>通过添加 <code>.table-hover</code> 类可以让 <code>&lt;tbody&gt;</code> 中的每一行对鼠标悬停状态作出响应。</p>\n<p>通过添加 <code>.table-condensed</code> 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。</p>\n</li>\n<li><p>表单</p>\n</li>\n</ol>\n<p>组件</p>\n<ol>\n<li>导航条</li>\n<li>分页条</li>\n</ol>\n<p>插件：</p>\n<ul>\n<li>轮播图  Carousel</li>\n</ul>\n"},{"title":"CSS","date":"2024-06-19T17:51:46.000Z","_content":"\n层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现[HTML](https://baike.baidu.com/item/HTML)（[标准通用标记语言](https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073)的一个应用）或[XML](https://baike.baidu.com/item/XML)（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n\n\nCSS控制样式优势\n\n1. 功能强大\n2. 将内容展示与样式控制分离\n\n    1. 解耦\n    2. 让分工合作更容易\n    3. 提高开发效率\n\nCSS使用\n\n1. 内联样式\n\n   在标签内使用styles属性指定css代码\n\n    ```html\n    <div style=\"color:red;\">hello css</div>\n    ```\n2. 内部样式\n\n   在`head`标签内使用`style`标签，标签内容即css代码\n\n   定义后当前页面`div`内所有内容应用格式\n\n    ```html\n        <style>\n            div{\n                color: red;\n            }\n        </style>\n    ```\n3. 外部样式\n\n    1. 定义css资源文件\n    2. `head`标签内使用`link`标签引入外部资源（或使用style标签 @import引用)\n\n\n### css语法\n\n格式：\n\n```css\n<选择器>{\n\t<属性1>:<属性值1>;\n\t<属性2>:<属性值2>;\n\t...\n}\n```\n\n### 选择器\n\n选择器：筛选具有相似特征的元素\n\n分类：\n\n1. 基本选择器\n\n    1. id选择器（优先级最高）\n\n       `#<id>{...}`\n    2. 类选择器（优先级中等）\n\n       `.<class名>{...}`\n    3. 元素选择器（优先级最低）\n\n       `<标签>{...}`\n2. 扩展选择器\n\n    1. \\* ：选择所有元素\n\n       `*{...}`\n    2. 并集选择器   选择几种选择器这\n\n       `选择器1，选择器2{}`\n    3. 子选择器  选择选择器1下的选择器2\n\n       `选择器1 选择器2{}`\n    4. 父选择器 选择包含选择器2的选择器1\n\n       `选择器1 > 选择器2{}`\n    5. 属性选择器：选择元素名称，属性名=属性值\n\n       `选择器1\\[属性=属性值\\]{}`\n    6. 伪类选择器：选择一些元素具有的状态\n\n       `<元素>:<状态>{}`\n\n       <a>超链接标签\n\n        * link: 初始化\n        * visited: 访问过\n        * active: 正在访问\n        * hover: 鼠标悬停\n\n        ```css\n        a:link{\n        \tcolor:green;\n        }\n        ```\n\n\n### 属性\n\n1. 字体文本\n\n    * front-size：字体大小\n    * color：颜色\n    * text-align：对齐方式\n    * line-height：行高\n2. 背景\n\n   background\n\n    ```css\n    background: url(<图片地址>) no-repeat center\n    ```\n3. 边框\n\n   border\n\n    ```css\n    border: 1px solid red\n    ```\n4. 尺寸\n\n    * width: 宽度\n    * height: 高度\n5. 盒子模型\n\n    * `margin`: 外边距\n    * `padding`: 内边距\n\n      默认会影响盒子大小\n\n      使用`box-sizing： border-box`固定盒子大小\n    *   `float`: 浮动","source":"_posts/web前端/CSS.md","raw":"---\ntitle: CSS\ndate: 2024-06-20 01:51:46\ncategories:\n  - web 前端\ntags:\n---\n\n层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现[HTML](https://baike.baidu.com/item/HTML)（[标准通用标记语言](https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073)的一个应用）或[XML](https://baike.baidu.com/item/XML)（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n\n\nCSS控制样式优势\n\n1. 功能强大\n2. 将内容展示与样式控制分离\n\n    1. 解耦\n    2. 让分工合作更容易\n    3. 提高开发效率\n\nCSS使用\n\n1. 内联样式\n\n   在标签内使用styles属性指定css代码\n\n    ```html\n    <div style=\"color:red;\">hello css</div>\n    ```\n2. 内部样式\n\n   在`head`标签内使用`style`标签，标签内容即css代码\n\n   定义后当前页面`div`内所有内容应用格式\n\n    ```html\n        <style>\n            div{\n                color: red;\n            }\n        </style>\n    ```\n3. 外部样式\n\n    1. 定义css资源文件\n    2. `head`标签内使用`link`标签引入外部资源（或使用style标签 @import引用)\n\n\n### css语法\n\n格式：\n\n```css\n<选择器>{\n\t<属性1>:<属性值1>;\n\t<属性2>:<属性值2>;\n\t...\n}\n```\n\n### 选择器\n\n选择器：筛选具有相似特征的元素\n\n分类：\n\n1. 基本选择器\n\n    1. id选择器（优先级最高）\n\n       `#<id>{...}`\n    2. 类选择器（优先级中等）\n\n       `.<class名>{...}`\n    3. 元素选择器（优先级最低）\n\n       `<标签>{...}`\n2. 扩展选择器\n\n    1. \\* ：选择所有元素\n\n       `*{...}`\n    2. 并集选择器   选择几种选择器这\n\n       `选择器1，选择器2{}`\n    3. 子选择器  选择选择器1下的选择器2\n\n       `选择器1 选择器2{}`\n    4. 父选择器 选择包含选择器2的选择器1\n\n       `选择器1 > 选择器2{}`\n    5. 属性选择器：选择元素名称，属性名=属性值\n\n       `选择器1\\[属性=属性值\\]{}`\n    6. 伪类选择器：选择一些元素具有的状态\n\n       `<元素>:<状态>{}`\n\n       <a>超链接标签\n\n        * link: 初始化\n        * visited: 访问过\n        * active: 正在访问\n        * hover: 鼠标悬停\n\n        ```css\n        a:link{\n        \tcolor:green;\n        }\n        ```\n\n\n### 属性\n\n1. 字体文本\n\n    * front-size：字体大小\n    * color：颜色\n    * text-align：对齐方式\n    * line-height：行高\n2. 背景\n\n   background\n\n    ```css\n    background: url(<图片地址>) no-repeat center\n    ```\n3. 边框\n\n   border\n\n    ```css\n    border: 1px solid red\n    ```\n4. 尺寸\n\n    * width: 宽度\n    * height: 高度\n5. 盒子模型\n\n    * `margin`: 外边距\n    * `padding`: 内边距\n\n      默认会影响盒子大小\n\n      使用`box-sizing： border-box`固定盒子大小\n    *   `float`: 浮动","slug":"web前端/CSS","published":1,"updated":"2024-06-19T17:53:29.130Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wnv000b7guy66rv65m1","content":"<p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现<a href=\"https://baike.baidu.com/item/HTML\">HTML</a>（<a href=\"https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073\">标准通用标记语言</a>的一个应用）或<a href=\"https://baike.baidu.com/item/XML\">XML</a>（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p>\n<p>CSS控制样式优势</p>\n<ol>\n<li><p>功能强大</p>\n</li>\n<li><p>将内容展示与样式控制分离</p>\n<ol>\n<li>解耦</li>\n<li>让分工合作更容易</li>\n<li>提高开发效率</li>\n</ol>\n</li>\n</ol>\n<p>CSS使用</p>\n<ol>\n<li><p>内联样式</p>\n<p>在标签内使用styles属性指定css代码</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red;&quot;</span>&gt;</span>hello css<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内部样式</p>\n<p>在<code>head</code>标签内使用<code>style</code>标签，标签内容即css代码</p>\n<p>定义后当前页面<code>div</code>内所有内容应用格式</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>外部样式</p>\n<ol>\n<li>定义css资源文件</li>\n<li><code>head</code>标签内使用<code>link</code>标签引入外部资源（或使用style标签 @import引用)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"css语法\"><a href=\"#css语法\" class=\"headerlink\" title=\"css语法\"></a>css语法</h3><p>格式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;选择器&gt;&#123;</span><br><span class=\"line\">\t&lt;属性<span class=\"number\">1</span>&gt;:&lt;属性值<span class=\"number\">1</span>&gt;;</span><br><span class=\"line\">\t&lt;属性<span class=\"number\">2</span>&gt;:&lt;属性值<span class=\"number\">2</span>&gt;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>选择器：筛选具有相似特征的元素</p>\n<p>分类：</p>\n<ol>\n<li><p>基本选择器</p>\n<ol>\n<li><p>id选择器（优先级最高）</p>\n<p><code>#&lt;id&gt;&#123;...&#125;</code></p>\n</li>\n<li><p>类选择器（优先级中等）</p>\n<p><code>.&lt;class名&gt;&#123;...&#125;</code></p>\n</li>\n<li><p>元素选择器（优先级最低）</p>\n<p><code>&lt;标签&gt;&#123;...&#125;</code></p>\n</li>\n</ol>\n</li>\n<li><p>扩展选择器</p>\n<ol>\n<li><p>* ：选择所有元素</p>\n<p><code>*&#123;...&#125;</code></p>\n</li>\n<li><p>并集选择器   选择几种选择器这</p>\n<p><code>选择器1，选择器2&#123;&#125;</code></p>\n</li>\n<li><p>子选择器  选择选择器1下的选择器2</p>\n<p><code>选择器1 选择器2&#123;&#125;</code></p>\n</li>\n<li><p>父选择器 选择包含选择器2的选择器1</p>\n<p><code>选择器1 &gt; 选择器2&#123;&#125;</code></p>\n</li>\n<li><p>属性选择器：选择元素名称，属性名&#x3D;属性值</p>\n<p><code>选择器1\\[属性=属性值\\]&#123;&#125;</code></p>\n</li>\n<li><p>伪类选择器：选择一些元素具有的状态</p>\n<p><code>&lt;元素&gt;:&lt;状态&gt;&#123;&#125;</code></p>\n<p><a>超链接标签</p>\n<ul>\n<li>link: 初始化</li>\n<li>visited: 访问过</li>\n<li>active: 正在访问</li>\n<li>hover: 鼠标悬停</li>\n</ul>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li><p>字体文本</p>\n<ul>\n<li>front-size：字体大小</li>\n<li>color：颜色</li>\n<li>text-align：对齐方式</li>\n<li>line-height：行高</li>\n</ul>\n</li>\n<li><p>背景</p>\n<p>background</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&lt;图片地址&gt;</span>) no-repeat center</span><br></pre></td></tr></table></figure></li>\n<li><p>边框</p>\n<p>border</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red</span><br></pre></td></tr></table></figure></li>\n<li><p>尺寸</p>\n<ul>\n<li>width: 宽度</li>\n<li>height: 高度</li>\n</ul>\n</li>\n<li><p>盒子模型</p>\n<ul>\n<li><p><code>margin</code>: 外边距</p>\n</li>\n<li><p><code>padding</code>: 内边距</p>\n<p>默认会影响盒子大小</p>\n<p>使用<code>box-sizing： border-box</code>固定盒子大小</p>\n</li>\n<li><p><code>float</code>: 浮动</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现<a href=\"https://baike.baidu.com/item/HTML\">HTML</a>（<a href=\"https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073\">标准通用标记语言</a>的一个应用）或<a href=\"https://baike.baidu.com/item/XML\">XML</a>（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p>\n<p>CSS控制样式优势</p>\n<ol>\n<li><p>功能强大</p>\n</li>\n<li><p>将内容展示与样式控制分离</p>\n<ol>\n<li>解耦</li>\n<li>让分工合作更容易</li>\n<li>提高开发效率</li>\n</ol>\n</li>\n</ol>\n<p>CSS使用</p>\n<ol>\n<li><p>内联样式</p>\n<p>在标签内使用styles属性指定css代码</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red;&quot;</span>&gt;</span>hello css<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内部样式</p>\n<p>在<code>head</code>标签内使用<code>style</code>标签，标签内容即css代码</p>\n<p>定义后当前页面<code>div</code>内所有内容应用格式</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>外部样式</p>\n<ol>\n<li>定义css资源文件</li>\n<li><code>head</code>标签内使用<code>link</code>标签引入外部资源（或使用style标签 @import引用)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"css语法\"><a href=\"#css语法\" class=\"headerlink\" title=\"css语法\"></a>css语法</h3><p>格式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;选择器&gt;&#123;</span><br><span class=\"line\">\t&lt;属性<span class=\"number\">1</span>&gt;:&lt;属性值<span class=\"number\">1</span>&gt;;</span><br><span class=\"line\">\t&lt;属性<span class=\"number\">2</span>&gt;:&lt;属性值<span class=\"number\">2</span>&gt;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>选择器：筛选具有相似特征的元素</p>\n<p>分类：</p>\n<ol>\n<li><p>基本选择器</p>\n<ol>\n<li><p>id选择器（优先级最高）</p>\n<p><code>#&lt;id&gt;&#123;...&#125;</code></p>\n</li>\n<li><p>类选择器（优先级中等）</p>\n<p><code>.&lt;class名&gt;&#123;...&#125;</code></p>\n</li>\n<li><p>元素选择器（优先级最低）</p>\n<p><code>&lt;标签&gt;&#123;...&#125;</code></p>\n</li>\n</ol>\n</li>\n<li><p>扩展选择器</p>\n<ol>\n<li><p>* ：选择所有元素</p>\n<p><code>*&#123;...&#125;</code></p>\n</li>\n<li><p>并集选择器   选择几种选择器这</p>\n<p><code>选择器1，选择器2&#123;&#125;</code></p>\n</li>\n<li><p>子选择器  选择选择器1下的选择器2</p>\n<p><code>选择器1 选择器2&#123;&#125;</code></p>\n</li>\n<li><p>父选择器 选择包含选择器2的选择器1</p>\n<p><code>选择器1 &gt; 选择器2&#123;&#125;</code></p>\n</li>\n<li><p>属性选择器：选择元素名称，属性名&#x3D;属性值</p>\n<p><code>选择器1\\[属性=属性值\\]&#123;&#125;</code></p>\n</li>\n<li><p>伪类选择器：选择一些元素具有的状态</p>\n<p><code>&lt;元素&gt;:&lt;状态&gt;&#123;&#125;</code></p>\n<p><a>超链接标签</p>\n<ul>\n<li>link: 初始化</li>\n<li>visited: 访问过</li>\n<li>active: 正在访问</li>\n<li>hover: 鼠标悬停</li>\n</ul>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li><p>字体文本</p>\n<ul>\n<li>front-size：字体大小</li>\n<li>color：颜色</li>\n<li>text-align：对齐方式</li>\n<li>line-height：行高</li>\n</ul>\n</li>\n<li><p>背景</p>\n<p>background</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&lt;图片地址&gt;</span>) no-repeat center</span><br></pre></td></tr></table></figure></li>\n<li><p>边框</p>\n<p>border</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red</span><br></pre></td></tr></table></figure></li>\n<li><p>尺寸</p>\n<ul>\n<li>width: 宽度</li>\n<li>height: 高度</li>\n</ul>\n</li>\n<li><p>盒子模型</p>\n<ul>\n<li><p><code>margin</code>: 外边距</p>\n</li>\n<li><p><code>padding</code>: 内边距</p>\n<p>默认会影响盒子大小</p>\n<p>使用<code>box-sizing： border-box</code>固定盒子大小</p>\n</li>\n<li><p><code>float</code>: 浮动</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"HTML","date":"2024-06-19T17:52:24.000Z","_content":"\nHyper Text Markup Language\n\n[HTML 标签参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/index.asp)\n\n## 快速入门\n\n1. html文档后缀名 ：`html`,`htm`\n2. 标签\n\n    1. 围堵标签：有开始标签和结束标签\n    2. 自闭和标签。 如`<br/>`\n3. 标签可以嵌套，后开先闭\n4. 开始标签中可以定义属性。属性由键值对构成，值需要使用引号（**单双均可**）引起来\n5. html标签不区分大小写，建议使用小写\n\n### 标签\n\n1. 文本标签：基本标签\n\n    * `html`\n\n      html文档的根标签\n    * `head`\n\n      头标签。用于指定HTML文档的一些属性，引用外部资源\n    * `title`\n\n      标题\n    * `body`\n\n      文档题\n    * `<!DOCTYPE html>`\n2. 文本标签\n\n    * 注释\n\n      ```html\n      <!-- 注释内容 -->\n      ```\n    * `<br />`\n\n      换行\n    * h1 - h6\n\n      各级标题\n    * `<p>`\n\n      段落标签\n    * `<hr>`\n\n      h4后均不再使用，浏览器兼容可以识别属性\n\n        * corlor：颜色\n        * width：宽度\n        * size：高度\n        * align：对齐\n\n          center, left, right\n    * `<b>` 加粗\n    * `<i>` 斜体\n    * `<font>`\n\n        * color：颜色\n        * size：大小\n        * face：字体\n    * `<center>`\n\n      文本居中\n3. 图片标签\n\n   `<img>`:\n\n   src ：指定图片路径\n4. 列表标签\n\n    * `<ol>`：有序列表\n\n    * `<ul>`：无序列表\n\n   `<li>`：列表项\n5. 链接标签\n\n    * `<a>`：超链接\n\n      属性：\n\n        *  href ：指定访问URL\n\n        * target\n\n          _self：当前页面打开\n\n          _blank：新页面打开\n\n      内容：\n\n        * 网址\n        * 本站资源：直接引用相对刘静资源\n        * mailto：邮件\n6. `<span>`\n\n   没有任何样式，文本信息在一行显示，行内标签，内联标签\n7. `<div>`\n\n   没有任何样式，每个div占满一行。块级标签\n8. 语义化标签：h5为了提高程序可读性提供了一些标签，没有任何样式，仅为了方便阅读和编写代码\n\n    1. `<header>`\n    2. `<footer>`\n9. 表格标签\n\n    * `table`：定义表\n    * `tr`：行\n    * `td`：单元格\n\n      合并单元格用属性：\n\n      `colspan`：指示单元格所占行数\n\n      `rowspan`：指示单元格所占列数\n\n\n    下方无样式，仅为方便阅读和编写代码\n\n    * `thead`：表头\n    * `tbody`：表体\n    * `tfoot`：表脚\n10. `form` **表单**，用于定义数据采集的范围\n\n    * 属性：\n\n        * action：指定提交的URL\n        * method：指定提交方式\n\n            * get\n\n                * 请求参数会显示在地址栏中\n                * 请求参数大小有限制\n                * 不安全\n\n            * post\n\n                * 请求参数在请求体里\n                * 参数大小无限制\n                * 相对较为安全\n        * name：指定名称，被提交的项必须有此属性\n\n    1. `input`\n\n       属性：\n\n        * `type`\n\n            * `text`：文本\n            * `password`：密码\n            * `radio`：单选框\n\n              `name`相同为一个选择组\n\n              使用`value`确定被选中后的内容\n\n              使用`checked`属性默认选中\n            * `checkbox`：多选框\n\n              name相同为一个选择组\n\n              使用`value`确定被选中后的内容\n\n              使用`checked`属性默认选中\n            * placeholder：指定输入框的提示信息\n            * `file`：文件\n            * `hidden`：隐藏域，用于提交隐藏信息\n            * `submit`：提交\n            * `button`：按钮\n            * `img`：图片，可以使用scr属性设置图片\n            * `color`：拾色器\n            * `date`：日期\n            * `datetime-local`：时间日期\n            * `email`：邮箱\n            * `number`：数字\n    2. `lable`\n\n       layle的for属性一般会和input的id属性值对应。使用后点击label区域input会获取焦点\n    3. `select`：下拉列表\n\n       option设置子项，selcted默认选中\n    4. `textarea`：文本域\n\n       cos指定每行字符数\n\n       rows指定默认多少行\n\nform示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"ch\" xmlns=\"http://www.w3.org/1999/html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form action=\"#\" method=\"get\">\n    <label for=\"username\">用户</label>\n    <input id=\"username\" name=\"username\" type=\"text\"/>\n    <br/>\n    <label for=\"pass\">密码</label>\n    <input id=\"pass\" name=\"pass\" type=\"password\"/>\n    <br/>\n    <label>\n        文件：\n        <input type=\"file\" name=\"file\"/>\n    </label>\n    <br/>\n    <label>\n        生日：\n        <input type=\"date\" name=\"file\"/>\n    </label>\n    <br/>\n    <input type=\"hidden\" name=\"msg\" value=\"123\"/>\n    <label>\n        省份：\n        <select name=\"province\">\n            <option>--请选择--</option>\n            <option value=\"1\">北京</option>\n            <option value=\"2\">上海</option>\n        </select>\n    </label>\n    <br/>\n    <label>\n        自我描述：\n        <textarea name=\"des\" cols=\"20\" rows=\"5\"></textarea>\n    </label>\n    <br/>\n    <input type=\"submit\" value=\"登录\"/>\n    <br/>\n    <input type=\"button\" value=\"按钮\">\n    <br/>\n    <input type=\"image\" src=\"Snipaste_2022-03-25_00-05-10.png\">\n</form>\n</body>\n</html>\n```\n\ncolor取值：\n\n1. red, green, blue\n2. rgb(value1, value2, value3)：取值1-255\n3. #value1,value2,value3, 取值00-FF，如 #FF00FF （推荐）\n\nwidth取值：\n\n1. 数值：width=‘20’,单位默认px\n2. 数值%：标识占比\n\n\n### 事件\n\n[HTML 事件参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/html_ref_eventattributes.asp)\n\n1. 点击事件\n\n    1. onclick: 单击\n\n       通过入参获取按下的按钮\n\n        ```javascript\n        document.getElementbById(\"id\").onclick = function(){\n        \t...\n        }\n        ```\n\n        ```javascript\n        document.getElementbById(\"id\").onclick = function(event){\n        \t// 获取鼠标点击按键\n        \tvar bt = event.button;\n        }\n        ```\n    2. ondbclick: 双击\n2. 焦点事件\n\n    1. onblur: 失去焦点\n    2. onfocus: 获得焦点\n3. 加载事件\n\n   onload: 页面或图像加载完成\n\n    ```javascript\n    window.onload = function() {\n    \t// 一般绑定事件等操作需要加载完成后运行\n    }\n    ```\n4. 鼠标事件\n\n    1. onmousedown: 鼠标被按下\n    2. onmouseup: 鼠标被松开\n    3. onmousemove: 鼠标被移动\n    4. onmouseover: 鼠标移动到元素上\n5. 键盘事件\n\n    1. onkeydown: 按键被按下\n    2. onkeyup: 按键抬起\n    3. onkeypress: 按键点击\n6. 选择和改变\n\n    1. onchange: 域的内容被改变\n    2. onselect: 文本被选中\n7. 表单事件\n\n    1. onsubmit: 确认按钮被点击\n\n       返回false可以阻止表单提交\n    2. onreset: 充值按钮被点击","source":"_posts/web前端/HTML.md","raw":"---\ntitle: HTML\ndate: 2024-06-20 01:52:24\ncategories:\n  - web 前端\ntags:\n---\n\nHyper Text Markup Language\n\n[HTML 标签参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/index.asp)\n\n## 快速入门\n\n1. html文档后缀名 ：`html`,`htm`\n2. 标签\n\n    1. 围堵标签：有开始标签和结束标签\n    2. 自闭和标签。 如`<br/>`\n3. 标签可以嵌套，后开先闭\n4. 开始标签中可以定义属性。属性由键值对构成，值需要使用引号（**单双均可**）引起来\n5. html标签不区分大小写，建议使用小写\n\n### 标签\n\n1. 文本标签：基本标签\n\n    * `html`\n\n      html文档的根标签\n    * `head`\n\n      头标签。用于指定HTML文档的一些属性，引用外部资源\n    * `title`\n\n      标题\n    * `body`\n\n      文档题\n    * `<!DOCTYPE html>`\n2. 文本标签\n\n    * 注释\n\n      ```html\n      <!-- 注释内容 -->\n      ```\n    * `<br />`\n\n      换行\n    * h1 - h6\n\n      各级标题\n    * `<p>`\n\n      段落标签\n    * `<hr>`\n\n      h4后均不再使用，浏览器兼容可以识别属性\n\n        * corlor：颜色\n        * width：宽度\n        * size：高度\n        * align：对齐\n\n          center, left, right\n    * `<b>` 加粗\n    * `<i>` 斜体\n    * `<font>`\n\n        * color：颜色\n        * size：大小\n        * face：字体\n    * `<center>`\n\n      文本居中\n3. 图片标签\n\n   `<img>`:\n\n   src ：指定图片路径\n4. 列表标签\n\n    * `<ol>`：有序列表\n\n    * `<ul>`：无序列表\n\n   `<li>`：列表项\n5. 链接标签\n\n    * `<a>`：超链接\n\n      属性：\n\n        *  href ：指定访问URL\n\n        * target\n\n          _self：当前页面打开\n\n          _blank：新页面打开\n\n      内容：\n\n        * 网址\n        * 本站资源：直接引用相对刘静资源\n        * mailto：邮件\n6. `<span>`\n\n   没有任何样式，文本信息在一行显示，行内标签，内联标签\n7. `<div>`\n\n   没有任何样式，每个div占满一行。块级标签\n8. 语义化标签：h5为了提高程序可读性提供了一些标签，没有任何样式，仅为了方便阅读和编写代码\n\n    1. `<header>`\n    2. `<footer>`\n9. 表格标签\n\n    * `table`：定义表\n    * `tr`：行\n    * `td`：单元格\n\n      合并单元格用属性：\n\n      `colspan`：指示单元格所占行数\n\n      `rowspan`：指示单元格所占列数\n\n\n    下方无样式，仅为方便阅读和编写代码\n\n    * `thead`：表头\n    * `tbody`：表体\n    * `tfoot`：表脚\n10. `form` **表单**，用于定义数据采集的范围\n\n    * 属性：\n\n        * action：指定提交的URL\n        * method：指定提交方式\n\n            * get\n\n                * 请求参数会显示在地址栏中\n                * 请求参数大小有限制\n                * 不安全\n\n            * post\n\n                * 请求参数在请求体里\n                * 参数大小无限制\n                * 相对较为安全\n        * name：指定名称，被提交的项必须有此属性\n\n    1. `input`\n\n       属性：\n\n        * `type`\n\n            * `text`：文本\n            * `password`：密码\n            * `radio`：单选框\n\n              `name`相同为一个选择组\n\n              使用`value`确定被选中后的内容\n\n              使用`checked`属性默认选中\n            * `checkbox`：多选框\n\n              name相同为一个选择组\n\n              使用`value`确定被选中后的内容\n\n              使用`checked`属性默认选中\n            * placeholder：指定输入框的提示信息\n            * `file`：文件\n            * `hidden`：隐藏域，用于提交隐藏信息\n            * `submit`：提交\n            * `button`：按钮\n            * `img`：图片，可以使用scr属性设置图片\n            * `color`：拾色器\n            * `date`：日期\n            * `datetime-local`：时间日期\n            * `email`：邮箱\n            * `number`：数字\n    2. `lable`\n\n       layle的for属性一般会和input的id属性值对应。使用后点击label区域input会获取焦点\n    3. `select`：下拉列表\n\n       option设置子项，selcted默认选中\n    4. `textarea`：文本域\n\n       cos指定每行字符数\n\n       rows指定默认多少行\n\nform示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"ch\" xmlns=\"http://www.w3.org/1999/html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form action=\"#\" method=\"get\">\n    <label for=\"username\">用户</label>\n    <input id=\"username\" name=\"username\" type=\"text\"/>\n    <br/>\n    <label for=\"pass\">密码</label>\n    <input id=\"pass\" name=\"pass\" type=\"password\"/>\n    <br/>\n    <label>\n        文件：\n        <input type=\"file\" name=\"file\"/>\n    </label>\n    <br/>\n    <label>\n        生日：\n        <input type=\"date\" name=\"file\"/>\n    </label>\n    <br/>\n    <input type=\"hidden\" name=\"msg\" value=\"123\"/>\n    <label>\n        省份：\n        <select name=\"province\">\n            <option>--请选择--</option>\n            <option value=\"1\">北京</option>\n            <option value=\"2\">上海</option>\n        </select>\n    </label>\n    <br/>\n    <label>\n        自我描述：\n        <textarea name=\"des\" cols=\"20\" rows=\"5\"></textarea>\n    </label>\n    <br/>\n    <input type=\"submit\" value=\"登录\"/>\n    <br/>\n    <input type=\"button\" value=\"按钮\">\n    <br/>\n    <input type=\"image\" src=\"Snipaste_2022-03-25_00-05-10.png\">\n</form>\n</body>\n</html>\n```\n\ncolor取值：\n\n1. red, green, blue\n2. rgb(value1, value2, value3)：取值1-255\n3. #value1,value2,value3, 取值00-FF，如 #FF00FF （推荐）\n\nwidth取值：\n\n1. 数值：width=‘20’,单位默认px\n2. 数值%：标识占比\n\n\n### 事件\n\n[HTML 事件参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/html_ref_eventattributes.asp)\n\n1. 点击事件\n\n    1. onclick: 单击\n\n       通过入参获取按下的按钮\n\n        ```javascript\n        document.getElementbById(\"id\").onclick = function(){\n        \t...\n        }\n        ```\n\n        ```javascript\n        document.getElementbById(\"id\").onclick = function(event){\n        \t// 获取鼠标点击按键\n        \tvar bt = event.button;\n        }\n        ```\n    2. ondbclick: 双击\n2. 焦点事件\n\n    1. onblur: 失去焦点\n    2. onfocus: 获得焦点\n3. 加载事件\n\n   onload: 页面或图像加载完成\n\n    ```javascript\n    window.onload = function() {\n    \t// 一般绑定事件等操作需要加载完成后运行\n    }\n    ```\n4. 鼠标事件\n\n    1. onmousedown: 鼠标被按下\n    2. onmouseup: 鼠标被松开\n    3. onmousemove: 鼠标被移动\n    4. onmouseover: 鼠标移动到元素上\n5. 键盘事件\n\n    1. onkeydown: 按键被按下\n    2. onkeyup: 按键抬起\n    3. onkeypress: 按键点击\n6. 选择和改变\n\n    1. onchange: 域的内容被改变\n    2. onselect: 文本被选中\n7. 表单事件\n\n    1. onsubmit: 确认按钮被点击\n\n       返回false可以阻止表单提交\n    2. onreset: 充值按钮被点击","slug":"web前端/HTML","published":1,"updated":"2024-06-19T17:53:29.125Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wnv000c7guybqqm866c","content":"<p>Hyper Text Markup Language</p>\n<p><a href=\"https://www.w3school.com.cn/tags/index.asp\">HTML 标签参考手册 (w3school.com.cn)</a></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><ol>\n<li><p>html文档后缀名 ：<code>html</code>,<code>htm</code></p>\n</li>\n<li><p>标签</p>\n<ol>\n<li>围堵标签：有开始标签和结束标签</li>\n<li>自闭和标签。 如<code>&lt;br/&gt;</code></li>\n</ol>\n</li>\n<li><p>标签可以嵌套，后开先闭</p>\n</li>\n<li><p>开始标签中可以定义属性。属性由键值对构成，值需要使用引号（<strong>单双均可</strong>）引起来</p>\n</li>\n<li><p>html标签不区分大小写，建议使用小写</p>\n</li>\n</ol>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ol>\n<li><p>文本标签：基本标签</p>\n<ul>\n<li><p><code>html</code></p>\n<p>html文档的根标签</p>\n</li>\n<li><p><code>head</code></p>\n<p>头标签。用于指定HTML文档的一些属性，引用外部资源</p>\n</li>\n<li><p><code>title</code></p>\n<p>标题</p>\n</li>\n<li><p><code>body</code></p>\n<p>文档题</p>\n</li>\n<li><p><code>&lt;!DOCTYPE html&gt;</code></p>\n</li>\n</ul>\n</li>\n<li><p>文本标签</p>\n<ul>\n<li><p>注释</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>&lt;br /&gt;</code></p>\n<p>换行</p>\n</li>\n<li><p>h1 - h6</p>\n<p>各级标题</p>\n</li>\n<li><p><code>&lt;p&gt;</code></p>\n<p>段落标签</p>\n</li>\n<li><p><code>&lt;hr&gt;</code></p>\n<p>h4后均不再使用，浏览器兼容可以识别属性</p>\n<ul>\n<li><p>corlor：颜色</p>\n</li>\n<li><p>width：宽度</p>\n</li>\n<li><p>size：高度</p>\n</li>\n<li><p>align：对齐</p>\n<p>center, left, right</p>\n</li>\n</ul>\n</li>\n<li><p><code>&lt;b&gt;</code> 加粗</p>\n</li>\n<li><p><code>&lt;i&gt;</code> 斜体</p>\n</li>\n<li><p><code>&lt;font&gt;</code></p>\n<ul>\n<li>color：颜色</li>\n<li>size：大小</li>\n<li>face：字体</li>\n</ul>\n</li>\n<li><p><code>&lt;center&gt;</code></p>\n<p>文本居中</p>\n</li>\n</ul>\n</li>\n<li><p>图片标签</p>\n<p><code>&lt;img&gt;</code>:</p>\n<p>src ：指定图片路径</p>\n</li>\n<li><p>列表标签</p>\n<ul>\n<li><p><code>&lt;ol&gt;</code>：有序列表</p>\n</li>\n<li><p><code>&lt;ul&gt;</code>：无序列表</p>\n</li>\n</ul>\n<p><code>&lt;li&gt;</code>：列表项</p>\n</li>\n<li><p>链接标签</p>\n<ul>\n<li><p><code>&lt;a&gt;</code>：超链接</p>\n<p>属性：</p>\n<ul>\n<li><p>href ：指定访问URL</p>\n</li>\n<li><p>target</p>\n<p>_self：当前页面打开</p>\n<p>_blank：新页面打开</p>\n</li>\n</ul>\n<p>内容：</p>\n<ul>\n<li>网址</li>\n<li>本站资源：直接引用相对刘静资源</li>\n<li>mailto：邮件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>&lt;span&gt;</code></p>\n<p>没有任何样式，文本信息在一行显示，行内标签，内联标签</p>\n</li>\n<li><p><code>&lt;div&gt;</code></p>\n<p>没有任何样式，每个div占满一行。块级标签</p>\n</li>\n<li><p>语义化标签：h5为了提高程序可读性提供了一些标签，没有任何样式，仅为了方便阅读和编写代码</p>\n<ol>\n<li><code>&lt;header&gt;</code></li>\n<li><code>&lt;footer&gt;</code></li>\n</ol>\n</li>\n<li><p>表格标签</p>\n<ul>\n<li><p><code>table</code>：定义表</p>\n</li>\n<li><p><code>tr</code>：行</p>\n</li>\n<li><p><code>td</code>：单元格</p>\n<p>合并单元格用属性：</p>\n<p><code>colspan</code>：指示单元格所占行数</p>\n<p><code>rowspan</code>：指示单元格所占列数</p>\n</li>\n</ul>\n<p> 下方无样式，仅为方便阅读和编写代码</p>\n<ul>\n<li><code>thead</code>：表头</li>\n<li><code>tbody</code>：表体</li>\n<li><code>tfoot</code>：表脚</li>\n</ul>\n</li>\n<li><p><code>form</code> <strong>表单</strong>，用于定义数据采集的范围</p>\n<ul>\n<li><p>属性：</p>\n<ul>\n<li><p>action：指定提交的URL</p>\n</li>\n<li><p>method：指定提交方式</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li>请求参数会显示在地址栏中</li>\n<li>请求参数大小有限制</li>\n<li>不安全</li>\n</ul>\n</li>\n<li><p>post</p>\n<ul>\n<li>请求参数在请求体里</li>\n<li>参数大小无限制</li>\n<li>相对较为安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>name：指定名称，被提交的项必须有此属性</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p><code>input</code></p>\n<p>属性：</p>\n<ul>\n<li><p><code>type</code></p>\n<ul>\n<li><p><code>text</code>：文本</p>\n</li>\n<li><p><code>password</code>：密码</p>\n</li>\n<li><p><code>radio</code>：单选框</p>\n<p><code>name</code>相同为一个选择组</p>\n<p>使用<code>value</code>确定被选中后的内容</p>\n<p>使用<code>checked</code>属性默认选中</p>\n</li>\n<li><p><code>checkbox</code>：多选框</p>\n<p>name相同为一个选择组</p>\n<p>使用<code>value</code>确定被选中后的内容</p>\n<p>使用<code>checked</code>属性默认选中</p>\n</li>\n<li><p>placeholder：指定输入框的提示信息</p>\n</li>\n<li><p><code>file</code>：文件</p>\n</li>\n<li><p><code>hidden</code>：隐藏域，用于提交隐藏信息</p>\n</li>\n<li><p><code>submit</code>：提交</p>\n</li>\n<li><p><code>button</code>：按钮</p>\n</li>\n<li><p><code>img</code>：图片，可以使用scr属性设置图片</p>\n</li>\n<li><p><code>color</code>：拾色器</p>\n</li>\n<li><p><code>date</code>：日期</p>\n</li>\n<li><p><code>datetime-local</code>：时间日期</p>\n</li>\n<li><p><code>email</code>：邮箱</p>\n</li>\n<li><p><code>number</code>：数字</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>lable</code></p>\n<p>layle的for属性一般会和input的id属性值对应。使用后点击label区域input会获取焦点</p>\n</li>\n<li><p><code>select</code>：下拉列表</p>\n<p>option设置子项，selcted默认选中</p>\n</li>\n<li><p><code>textarea</code>：文本域</p>\n<p>cos指定每行字符数</p>\n<p>rows指定默认多少行</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>form示例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>用户<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        文件：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        生日：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        省份：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>--请选择--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>北京<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>上海<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        自我描述：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;des&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;按钮&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;Snipaste_2022-03-25_00-05-10.png&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color取值：</p>\n<ol>\n<li>red, green, blue</li>\n<li>rgb(value1, value2, value3)：取值1-255</li>\n<li>#value1,value2,value3, 取值00-FF，如 #FF00FF （推荐）</li>\n</ol>\n<p>width取值：</p>\n<ol>\n<li>数值：width&#x3D;‘20’,单位默认px</li>\n<li>数值%：标识占比</li>\n</ol>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p><a href=\"https://www.w3school.com.cn/tags/html_ref_eventattributes.asp\">HTML 事件参考手册 (w3school.com.cn)</a></p>\n<ol>\n<li><p>点击事件</p>\n<ol>\n<li><p>onclick: 单击</p>\n<p>通过入参获取按下的按钮</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementbById</span>(<span class=\"string\">&quot;id&quot;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementbById</span>(<span class=\"string\">&quot;id&quot;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取鼠标点击按键</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bt = event.<span class=\"property\">button</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ondbclick: 双击</p>\n</li>\n</ol>\n</li>\n<li><p>焦点事件</p>\n<ol>\n<li>onblur: 失去焦点</li>\n<li>onfocus: 获得焦点</li>\n</ol>\n</li>\n<li><p>加载事件</p>\n<p>onload: 页面或图像加载完成</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 一般绑定事件等操作需要加载完成后运行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>鼠标事件</p>\n<ol>\n<li>onmousedown: 鼠标被按下</li>\n<li>onmouseup: 鼠标被松开</li>\n<li>onmousemove: 鼠标被移动</li>\n<li>onmouseover: 鼠标移动到元素上</li>\n</ol>\n</li>\n<li><p>键盘事件</p>\n<ol>\n<li>onkeydown: 按键被按下</li>\n<li>onkeyup: 按键抬起</li>\n<li>onkeypress: 按键点击</li>\n</ol>\n</li>\n<li><p>选择和改变</p>\n<ol>\n<li>onchange: 域的内容被改变</li>\n<li>onselect: 文本被选中</li>\n</ol>\n</li>\n<li><p>表单事件</p>\n<ol>\n<li><p>onsubmit: 确认按钮被点击</p>\n<p>返回false可以阻止表单提交</p>\n</li>\n<li><p>onreset: 充值按钮被点击</p>\n</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p>Hyper Text Markup Language</p>\n<p><a href=\"https://www.w3school.com.cn/tags/index.asp\">HTML 标签参考手册 (w3school.com.cn)</a></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><ol>\n<li><p>html文档后缀名 ：<code>html</code>,<code>htm</code></p>\n</li>\n<li><p>标签</p>\n<ol>\n<li>围堵标签：有开始标签和结束标签</li>\n<li>自闭和标签。 如<code>&lt;br/&gt;</code></li>\n</ol>\n</li>\n<li><p>标签可以嵌套，后开先闭</p>\n</li>\n<li><p>开始标签中可以定义属性。属性由键值对构成，值需要使用引号（<strong>单双均可</strong>）引起来</p>\n</li>\n<li><p>html标签不区分大小写，建议使用小写</p>\n</li>\n</ol>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ol>\n<li><p>文本标签：基本标签</p>\n<ul>\n<li><p><code>html</code></p>\n<p>html文档的根标签</p>\n</li>\n<li><p><code>head</code></p>\n<p>头标签。用于指定HTML文档的一些属性，引用外部资源</p>\n</li>\n<li><p><code>title</code></p>\n<p>标题</p>\n</li>\n<li><p><code>body</code></p>\n<p>文档题</p>\n</li>\n<li><p><code>&lt;!DOCTYPE html&gt;</code></p>\n</li>\n</ul>\n</li>\n<li><p>文本标签</p>\n<ul>\n<li><p>注释</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>&lt;br /&gt;</code></p>\n<p>换行</p>\n</li>\n<li><p>h1 - h6</p>\n<p>各级标题</p>\n</li>\n<li><p><code>&lt;p&gt;</code></p>\n<p>段落标签</p>\n</li>\n<li><p><code>&lt;hr&gt;</code></p>\n<p>h4后均不再使用，浏览器兼容可以识别属性</p>\n<ul>\n<li><p>corlor：颜色</p>\n</li>\n<li><p>width：宽度</p>\n</li>\n<li><p>size：高度</p>\n</li>\n<li><p>align：对齐</p>\n<p>center, left, right</p>\n</li>\n</ul>\n</li>\n<li><p><code>&lt;b&gt;</code> 加粗</p>\n</li>\n<li><p><code>&lt;i&gt;</code> 斜体</p>\n</li>\n<li><p><code>&lt;font&gt;</code></p>\n<ul>\n<li>color：颜色</li>\n<li>size：大小</li>\n<li>face：字体</li>\n</ul>\n</li>\n<li><p><code>&lt;center&gt;</code></p>\n<p>文本居中</p>\n</li>\n</ul>\n</li>\n<li><p>图片标签</p>\n<p><code>&lt;img&gt;</code>:</p>\n<p>src ：指定图片路径</p>\n</li>\n<li><p>列表标签</p>\n<ul>\n<li><p><code>&lt;ol&gt;</code>：有序列表</p>\n</li>\n<li><p><code>&lt;ul&gt;</code>：无序列表</p>\n</li>\n</ul>\n<p><code>&lt;li&gt;</code>：列表项</p>\n</li>\n<li><p>链接标签</p>\n<ul>\n<li><p><code>&lt;a&gt;</code>：超链接</p>\n<p>属性：</p>\n<ul>\n<li><p>href ：指定访问URL</p>\n</li>\n<li><p>target</p>\n<p>_self：当前页面打开</p>\n<p>_blank：新页面打开</p>\n</li>\n</ul>\n<p>内容：</p>\n<ul>\n<li>网址</li>\n<li>本站资源：直接引用相对刘静资源</li>\n<li>mailto：邮件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>&lt;span&gt;</code></p>\n<p>没有任何样式，文本信息在一行显示，行内标签，内联标签</p>\n</li>\n<li><p><code>&lt;div&gt;</code></p>\n<p>没有任何样式，每个div占满一行。块级标签</p>\n</li>\n<li><p>语义化标签：h5为了提高程序可读性提供了一些标签，没有任何样式，仅为了方便阅读和编写代码</p>\n<ol>\n<li><code>&lt;header&gt;</code></li>\n<li><code>&lt;footer&gt;</code></li>\n</ol>\n</li>\n<li><p>表格标签</p>\n<ul>\n<li><p><code>table</code>：定义表</p>\n</li>\n<li><p><code>tr</code>：行</p>\n</li>\n<li><p><code>td</code>：单元格</p>\n<p>合并单元格用属性：</p>\n<p><code>colspan</code>：指示单元格所占行数</p>\n<p><code>rowspan</code>：指示单元格所占列数</p>\n</li>\n</ul>\n<p> 下方无样式，仅为方便阅读和编写代码</p>\n<ul>\n<li><code>thead</code>：表头</li>\n<li><code>tbody</code>：表体</li>\n<li><code>tfoot</code>：表脚</li>\n</ul>\n</li>\n<li><p><code>form</code> <strong>表单</strong>，用于定义数据采集的范围</p>\n<ul>\n<li><p>属性：</p>\n<ul>\n<li><p>action：指定提交的URL</p>\n</li>\n<li><p>method：指定提交方式</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li>请求参数会显示在地址栏中</li>\n<li>请求参数大小有限制</li>\n<li>不安全</li>\n</ul>\n</li>\n<li><p>post</p>\n<ul>\n<li>请求参数在请求体里</li>\n<li>参数大小无限制</li>\n<li>相对较为安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>name：指定名称，被提交的项必须有此属性</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p><code>input</code></p>\n<p>属性：</p>\n<ul>\n<li><p><code>type</code></p>\n<ul>\n<li><p><code>text</code>：文本</p>\n</li>\n<li><p><code>password</code>：密码</p>\n</li>\n<li><p><code>radio</code>：单选框</p>\n<p><code>name</code>相同为一个选择组</p>\n<p>使用<code>value</code>确定被选中后的内容</p>\n<p>使用<code>checked</code>属性默认选中</p>\n</li>\n<li><p><code>checkbox</code>：多选框</p>\n<p>name相同为一个选择组</p>\n<p>使用<code>value</code>确定被选中后的内容</p>\n<p>使用<code>checked</code>属性默认选中</p>\n</li>\n<li><p>placeholder：指定输入框的提示信息</p>\n</li>\n<li><p><code>file</code>：文件</p>\n</li>\n<li><p><code>hidden</code>：隐藏域，用于提交隐藏信息</p>\n</li>\n<li><p><code>submit</code>：提交</p>\n</li>\n<li><p><code>button</code>：按钮</p>\n</li>\n<li><p><code>img</code>：图片，可以使用scr属性设置图片</p>\n</li>\n<li><p><code>color</code>：拾色器</p>\n</li>\n<li><p><code>date</code>：日期</p>\n</li>\n<li><p><code>datetime-local</code>：时间日期</p>\n</li>\n<li><p><code>email</code>：邮箱</p>\n</li>\n<li><p><code>number</code>：数字</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>lable</code></p>\n<p>layle的for属性一般会和input的id属性值对应。使用后点击label区域input会获取焦点</p>\n</li>\n<li><p><code>select</code>：下拉列表</p>\n<p>option设置子项，selcted默认选中</p>\n</li>\n<li><p><code>textarea</code>：文本域</p>\n<p>cos指定每行字符数</p>\n<p>rows指定默认多少行</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>form示例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ch&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>用户<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        文件：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        生日：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        省份：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>--请选择--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>北京<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>上海<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        自我描述：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;des&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;按钮&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;Snipaste_2022-03-25_00-05-10.png&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color取值：</p>\n<ol>\n<li>red, green, blue</li>\n<li>rgb(value1, value2, value3)：取值1-255</li>\n<li>#value1,value2,value3, 取值00-FF，如 #FF00FF （推荐）</li>\n</ol>\n<p>width取值：</p>\n<ol>\n<li>数值：width&#x3D;‘20’,单位默认px</li>\n<li>数值%：标识占比</li>\n</ol>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p><a href=\"https://www.w3school.com.cn/tags/html_ref_eventattributes.asp\">HTML 事件参考手册 (w3school.com.cn)</a></p>\n<ol>\n<li><p>点击事件</p>\n<ol>\n<li><p>onclick: 单击</p>\n<p>通过入参获取按下的按钮</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementbById</span>(<span class=\"string\">&quot;id&quot;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementbById</span>(<span class=\"string\">&quot;id&quot;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取鼠标点击按键</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bt = event.<span class=\"property\">button</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ondbclick: 双击</p>\n</li>\n</ol>\n</li>\n<li><p>焦点事件</p>\n<ol>\n<li>onblur: 失去焦点</li>\n<li>onfocus: 获得焦点</li>\n</ol>\n</li>\n<li><p>加载事件</p>\n<p>onload: 页面或图像加载完成</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 一般绑定事件等操作需要加载完成后运行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>鼠标事件</p>\n<ol>\n<li>onmousedown: 鼠标被按下</li>\n<li>onmouseup: 鼠标被松开</li>\n<li>onmousemove: 鼠标被移动</li>\n<li>onmouseover: 鼠标移动到元素上</li>\n</ol>\n</li>\n<li><p>键盘事件</p>\n<ol>\n<li>onkeydown: 按键被按下</li>\n<li>onkeyup: 按键抬起</li>\n<li>onkeypress: 按键点击</li>\n</ol>\n</li>\n<li><p>选择和改变</p>\n<ol>\n<li>onchange: 域的内容被改变</li>\n<li>onselect: 文本被选中</li>\n</ol>\n</li>\n<li><p>表单事件</p>\n<ol>\n<li><p>onsubmit: 确认按钮被点击</p>\n<p>返回false可以阻止表单提交</p>\n</li>\n<li><p>onreset: 充值按钮被点击</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"JavaScript","date":"2024-06-19T17:51:18.000Z","_content":"\n[JavaScript 教程 (w3school.com.cn)](https://www.w3school.com.cn/js/index.asp)\n\n## ECMAScript\n\n### 基本语法\n\n1. 与html结合方式\n\n   **注意：script可以定义再任何位置，但是会按顺序执行，一般会放在最后**\n\n    1. 内部JS\n\n       `script`标签内编写js代码\n    2. 外部JS\n\n       `scrip`属性`src`引入js文件\n2. 注释\n\n    1. 单行注释 : //\n    2. 多行注释: /*   */\n3. 数据类型\n\n    1. 原始数据类型\n\n        1. number\n\n            * 整数\n            * 小数\n            * NaN\n        2. string: 字符、字符串\n        3. boolean\n        4. null\n        5. undefined : 变量未初始化值默认为此值\n    2. 引用数据类型：对象\n4. 变量\n\n   弱类型语言：变量存放任意类型的变量\n\n   语法：\n\n    ```js\n    var a = 3;\n    document.write(a+\"<br>\")\n    a = \"abc\";\n    document.write(a+\"<br>\")\n    ```\n5. 运算符\n\n    1. 一元运算符\n\n       ++，--\n    2. 算数运算符\n\n       +，-，*，/，%。。。\n    3. 赋值运算符\n    4. =，+=，-= 。。。\n    5. 比较运算符\n\n       \\>, <, >=, <=, ==, ===（全等于）\n\n       > 字符串比较从左到右按位比较\n       >\n       > ==类型不同先转换类型，后比较\n       >\n       > ===类型不同直接返回false\n    >\n    6. 逻辑运算符\n\n       &&，||， ！\n    7. 三元运算符\n\n       ?  :\n\n   **注意：运算符不符合条件时会自动进行转换**\n\n   **转number规则：**\n\n    1. string转number：按照字面值转，字面非数字则转为NaN\n    2. boolean转number：true为1，false为0\n\n   **转boolean规则：**\n\n    1. number：0，NaN为假，其他为真\n    2. string：除空字符串，其他为真\n    3. null, undifined：false\n    4. object：true\n6. 流程控制\n\n    1. `if... else`\n    2. `switch`\n\n       java中switch仅可以接收原始数据类型、枚举和string，js中可以接收任意类型\n    3. `while`\n    4. `do.. while`\n    5. `for`\n7. JS特殊语法（不建议使用）\n\n    1. 语句以`;`结束，也可以以`\\n`结束\n    2. `var`定义变量，不使用`var`为全局变量\n\n\n### 基本对象\n\n> Function\n>\n> Array\n>\n> Boolean\n>\n> Date\n>\n> Math\n>\n> Number\n>\n> String\n>\n> RegExp\n>\n> Global\n\n#### Function对象\n\n1. 创建\n\n   方法1：\n\n    ```js\n    var fun = new Function(<形参列表>, <方法体>);`\n    ```\n\n   方法2：\n\n    ```js\n    function <方法名>(<参数列表>) { <方法体>}\n    // 如\n    function fun(a, b) {\n    \talert(a + b);\n    }\n    ```\n\n   方法3：\n\n    ```js\n    var <方法名> = function (<参数列表>){ <方法体>}\n    // 如\n    var fun3 = function (a, b) {\n    \talert(a + b);\n    }\n    ```\n2. 属性\n\n    * length : 参数个数\n3. 特点\n\n    1. 方法定义时形参无类型标注，返回值无类型标注\n\n    2. 方法是对象，相同方法名的方法，后边会覆盖掉前边\n    3. 方法调用仅与方法名有关，找到方法名即调用成功\n    4. 方法声明中有一个内置隐藏数组对象`arguments`，可以通过该关键字访问访问所有入参\n4. 调用\n\n    ```js\n    <方法名>（<实参列表>)\n    ```\n\n\n#### Array对象\n\n1. 创建\n\n    ```js\n    var arr = new Array(<元素列表>);\n\n    var arr2 = new Array(<默认长度>);\n\n    var arr3 = new [<元素列表>); \n    ```\n2. 方法\n\n    * join\n\n      拼接元素返回字符串，入参为连接字符串，默认`,`\n    * push\n\n      尾部添加元素\n    *\n3. 属性\n\n    * length : 数组长度\n4. 特点\n\n    1. 元素类型可变\n    2. 数组长度可变\n\n\n#### Date对象\n\n1. 创建\n\n    ```js\n    var data = new Date()\n    ```\n2. 方法\n\n    * toLocalString()\n\n      返回对象的当前系统配置的格式的字符串\n    * getTime\n\n      时间戳\n\n\n#### Math\n\n1. 创建\n\n   不需要创建，直接使用\n2. 方法\n\n    * random :\n\n      返回[0,1)区间内的随机数\n    * ceil\n\n      对数进行向上舍入\n    * floor\n\n      向下舍入\n    * round\n\n      四舍五入\n3. 属性\n\n    * PI   圆周率\n\n\n#### RegExp\n\n1. 正则表达式\n\n    1. 单个字符`[]`\n    2. 量词符号\n\n        * ？: 0次或1次\n\n        * \\* :  0次或多次\\+ : 0次或一次\n        * \\+ : 0次或一次\n        * {m, n} : 表示m-n次之间，{m,}表示最少m次，{,n}表示最多n次\n    3. 位置\n\n        * ^ : 开始\n        * $ : 结尾\n2. 创建正则对象\n\n    ```js\n    var reg = new RegExp(<表达式>);\n\n    var reg2 = /<表达式>/;\n    ```\n3. 方法\n\n    * test\n\n      验证字符串是否匹配成功\n\n\n#### Global\n\n1. 特点：全局对象，不需要对象就可以使用\n2. 方法\n\n    * `encodeURI `: URI编码\n    * `decodeURI `: URI解码\n    * `encodeURIComponent `: URI编码\n\n      斜线等特殊字符也进行编码\n    * `decodeURIComponent `: URI解码\n    * `parseInt`\n\n      可以识别字符串的前缀数字并返回，非数字开头为`NaN`\n    * `isNaN`\n\n      判断是否为`NaN`\n    * `eval`\n\n      将js字符串，转为脚本执行\n\n## BOM\n\n概念：Browser Object Model 浏览器对象模型\n\n组成：\n\n* window : 窗口\n* navigator : 浏览器对象\n* screen : 显示器对象\n* location : 地址栏对象\n* history : 历史记录\n\n### window\n\n1. 方法\n\n    1. 弹窗方法\n\n        1. `alter` 一个带确认按钮的警告框\n        2. `confirm` 一个带确认和取消按钮的确认框，返回用户按了哪个按钮\n        3. `prompt` 输入框，返回用户输入值\n    2. 打开关闭方法\n\n        1. `open`  打开新窗口，入参为新窗口地址，返回打开的窗口对象\n        2. `close` 关闭窗口\n    3. 定时器方法\n\n        1. `setTimeout`\n\n           参数1：js代码或方法\n\n           参数2：时间毫秒值\n\n           返回：定时器标识\n        2. `clearTimeout`\n\n           参数：定时器标\n        3. `setInterval`\n\n           参数1：js代码或方法\n\n           参数2：时间毫秒值\n\n           返回：定时器标识\n        4. `clearInterval`\n\n           参数：定时器标\n2. 属性\n\n    * window : 窗口\n    * navigator : 浏览器对象\n    * screen : 显示器对象\n    * location : 地址栏对象\n    * history : 历史记录\n    * document : dom对象\n3. 特点\n\n    1. 不需要创建，直接使用`window`使用\n    2. `window`可以省略，`alert`方法即window对象的方法\n\n\n### location\n\n1. 获取、\n\n    ```js\n    window.locaiton;\n\n    location;\n    ```\n2. 方法\n\n    * `reload`: 刷新\n3. 属性\n\n    * `href`: 地址\n\n\n### history\n\n1. 获取\n\n    ```js\n    window.history;\n\n    history;\n    ```\n2. 方法\n\n    * `back`: 后退\n    * `forward`:前进\n    * `go`: 去特定页面，参数为正数表示前进n个记录，为负数为后退n个记录\n3. 属性\n\n    * length: 返回当前窗口历史列表中的URL数量\n\n## DOM\n\n组成：\n\n* 核心DOM\n\n    * Document对象\n    * Element对象\n    * Attribute对象\n    * Comment对象\n    * Node节点对象，上述对象均继承自此对象\n* XML DOM\n* HTML DOM\n\n\n功能：控制HTML文档内容\n\n1. 通过id获取元素对象并修改内容\n2. **改变标签内内容** ：`innerHTML`\n\n```js\nvar item = document.getElementById(<id>)；\nitem.src = \"...\"; \nitem.innerHTML = \"<div>新子节点</div>\"; // 改变标签内内容\n```\n\n### 事件\n\n**绑定事件：**\n\n1. 使用`onclick`属性\n\n    * 直接在标签内设置\n    * 在js中获取元素，然后设置属性\n\n\n### 核心DOM模型\n\n1. 获取\n\n    1. window.document\n    2. document\n2. 方法\n\n    1. 获取Element对象\n\n        1. `getElementById()` :根据id属性获取元素对象\n        2. `getElementsByTagName() `: 根据tag（标签，尖括号头）获取元素对象，返回数组\n        3. `getElementsByClassName()` : 根据class返回元素对象，返回数组\n        4. `getElementsByName()` : 根据name获取元素对象，返回数组\n    2. 创建DOM对象\n\n        1. `createAttribute(name)`\n        2. `createComment()`\n        3. `createElement()`\n        4. `createTextNode()`\n\n    ```js\n    // 创建table元素\n    var table = document.createElement(\"table\");\n\n    // 获取所有div\n    var divs = document.getElementsByTagName(\"div\");\n    ```\n3. 属性\n\n\n### Element\n\n1. 获取\n\n   通过document获取\n2. 方法\n\n    1. `removeAttribute`删除属性\n    2. `setAttribute`设置属性\n\n       参数1：属性名\n\n       参数2：属性值\n\n\n### Node\n\n1. 特点\n\n   所有DOM对象均可以看作node\n2. 方法\n\n    * CURD dom数\n\n        * `appendChild`: 向节点子节点列表添加节点\n        * `removeChild`: 删除并返回被指定的子节点\n        * `replacechild`: 使用新节点替换子节点\n3. 属性\n\n   `parentNode `: 父节点\n\n   `innerHTML`: 内部内容，包含子节点也将以文本的形式被读取\n\n\n### 控制样式\n\n使用style属性控制\n\n1. 直接使用style\n\n    ```js\n    div1.style.border = \"1px solid red\";\n    div1.style.width = \"200px\";\n    div1.style.fontSize = \"20px\";\n    ```\n\n2. 提前定义好css，更改元素相关属性来实现更多样的样式控制","source":"_posts/web前端/JavaScript.md","raw":"---\ntitle: JavaScript\ndate: 2024-06-20 01:51:18\ncategories:\n  - web 前端\ntags:\n---\n\n[JavaScript 教程 (w3school.com.cn)](https://www.w3school.com.cn/js/index.asp)\n\n## ECMAScript\n\n### 基本语法\n\n1. 与html结合方式\n\n   **注意：script可以定义再任何位置，但是会按顺序执行，一般会放在最后**\n\n    1. 内部JS\n\n       `script`标签内编写js代码\n    2. 外部JS\n\n       `scrip`属性`src`引入js文件\n2. 注释\n\n    1. 单行注释 : //\n    2. 多行注释: /*   */\n3. 数据类型\n\n    1. 原始数据类型\n\n        1. number\n\n            * 整数\n            * 小数\n            * NaN\n        2. string: 字符、字符串\n        3. boolean\n        4. null\n        5. undefined : 变量未初始化值默认为此值\n    2. 引用数据类型：对象\n4. 变量\n\n   弱类型语言：变量存放任意类型的变量\n\n   语法：\n\n    ```js\n    var a = 3;\n    document.write(a+\"<br>\")\n    a = \"abc\";\n    document.write(a+\"<br>\")\n    ```\n5. 运算符\n\n    1. 一元运算符\n\n       ++，--\n    2. 算数运算符\n\n       +，-，*，/，%。。。\n    3. 赋值运算符\n    4. =，+=，-= 。。。\n    5. 比较运算符\n\n       \\>, <, >=, <=, ==, ===（全等于）\n\n       > 字符串比较从左到右按位比较\n       >\n       > ==类型不同先转换类型，后比较\n       >\n       > ===类型不同直接返回false\n    >\n    6. 逻辑运算符\n\n       &&，||， ！\n    7. 三元运算符\n\n       ?  :\n\n   **注意：运算符不符合条件时会自动进行转换**\n\n   **转number规则：**\n\n    1. string转number：按照字面值转，字面非数字则转为NaN\n    2. boolean转number：true为1，false为0\n\n   **转boolean规则：**\n\n    1. number：0，NaN为假，其他为真\n    2. string：除空字符串，其他为真\n    3. null, undifined：false\n    4. object：true\n6. 流程控制\n\n    1. `if... else`\n    2. `switch`\n\n       java中switch仅可以接收原始数据类型、枚举和string，js中可以接收任意类型\n    3. `while`\n    4. `do.. while`\n    5. `for`\n7. JS特殊语法（不建议使用）\n\n    1. 语句以`;`结束，也可以以`\\n`结束\n    2. `var`定义变量，不使用`var`为全局变量\n\n\n### 基本对象\n\n> Function\n>\n> Array\n>\n> Boolean\n>\n> Date\n>\n> Math\n>\n> Number\n>\n> String\n>\n> RegExp\n>\n> Global\n\n#### Function对象\n\n1. 创建\n\n   方法1：\n\n    ```js\n    var fun = new Function(<形参列表>, <方法体>);`\n    ```\n\n   方法2：\n\n    ```js\n    function <方法名>(<参数列表>) { <方法体>}\n    // 如\n    function fun(a, b) {\n    \talert(a + b);\n    }\n    ```\n\n   方法3：\n\n    ```js\n    var <方法名> = function (<参数列表>){ <方法体>}\n    // 如\n    var fun3 = function (a, b) {\n    \talert(a + b);\n    }\n    ```\n2. 属性\n\n    * length : 参数个数\n3. 特点\n\n    1. 方法定义时形参无类型标注，返回值无类型标注\n\n    2. 方法是对象，相同方法名的方法，后边会覆盖掉前边\n    3. 方法调用仅与方法名有关，找到方法名即调用成功\n    4. 方法声明中有一个内置隐藏数组对象`arguments`，可以通过该关键字访问访问所有入参\n4. 调用\n\n    ```js\n    <方法名>（<实参列表>)\n    ```\n\n\n#### Array对象\n\n1. 创建\n\n    ```js\n    var arr = new Array(<元素列表>);\n\n    var arr2 = new Array(<默认长度>);\n\n    var arr3 = new [<元素列表>); \n    ```\n2. 方法\n\n    * join\n\n      拼接元素返回字符串，入参为连接字符串，默认`,`\n    * push\n\n      尾部添加元素\n    *\n3. 属性\n\n    * length : 数组长度\n4. 特点\n\n    1. 元素类型可变\n    2. 数组长度可变\n\n\n#### Date对象\n\n1. 创建\n\n    ```js\n    var data = new Date()\n    ```\n2. 方法\n\n    * toLocalString()\n\n      返回对象的当前系统配置的格式的字符串\n    * getTime\n\n      时间戳\n\n\n#### Math\n\n1. 创建\n\n   不需要创建，直接使用\n2. 方法\n\n    * random :\n\n      返回[0,1)区间内的随机数\n    * ceil\n\n      对数进行向上舍入\n    * floor\n\n      向下舍入\n    * round\n\n      四舍五入\n3. 属性\n\n    * PI   圆周率\n\n\n#### RegExp\n\n1. 正则表达式\n\n    1. 单个字符`[]`\n    2. 量词符号\n\n        * ？: 0次或1次\n\n        * \\* :  0次或多次\\+ : 0次或一次\n        * \\+ : 0次或一次\n        * {m, n} : 表示m-n次之间，{m,}表示最少m次，{,n}表示最多n次\n    3. 位置\n\n        * ^ : 开始\n        * $ : 结尾\n2. 创建正则对象\n\n    ```js\n    var reg = new RegExp(<表达式>);\n\n    var reg2 = /<表达式>/;\n    ```\n3. 方法\n\n    * test\n\n      验证字符串是否匹配成功\n\n\n#### Global\n\n1. 特点：全局对象，不需要对象就可以使用\n2. 方法\n\n    * `encodeURI `: URI编码\n    * `decodeURI `: URI解码\n    * `encodeURIComponent `: URI编码\n\n      斜线等特殊字符也进行编码\n    * `decodeURIComponent `: URI解码\n    * `parseInt`\n\n      可以识别字符串的前缀数字并返回，非数字开头为`NaN`\n    * `isNaN`\n\n      判断是否为`NaN`\n    * `eval`\n\n      将js字符串，转为脚本执行\n\n## BOM\n\n概念：Browser Object Model 浏览器对象模型\n\n组成：\n\n* window : 窗口\n* navigator : 浏览器对象\n* screen : 显示器对象\n* location : 地址栏对象\n* history : 历史记录\n\n### window\n\n1. 方法\n\n    1. 弹窗方法\n\n        1. `alter` 一个带确认按钮的警告框\n        2. `confirm` 一个带确认和取消按钮的确认框，返回用户按了哪个按钮\n        3. `prompt` 输入框，返回用户输入值\n    2. 打开关闭方法\n\n        1. `open`  打开新窗口，入参为新窗口地址，返回打开的窗口对象\n        2. `close` 关闭窗口\n    3. 定时器方法\n\n        1. `setTimeout`\n\n           参数1：js代码或方法\n\n           参数2：时间毫秒值\n\n           返回：定时器标识\n        2. `clearTimeout`\n\n           参数：定时器标\n        3. `setInterval`\n\n           参数1：js代码或方法\n\n           参数2：时间毫秒值\n\n           返回：定时器标识\n        4. `clearInterval`\n\n           参数：定时器标\n2. 属性\n\n    * window : 窗口\n    * navigator : 浏览器对象\n    * screen : 显示器对象\n    * location : 地址栏对象\n    * history : 历史记录\n    * document : dom对象\n3. 特点\n\n    1. 不需要创建，直接使用`window`使用\n    2. `window`可以省略，`alert`方法即window对象的方法\n\n\n### location\n\n1. 获取、\n\n    ```js\n    window.locaiton;\n\n    location;\n    ```\n2. 方法\n\n    * `reload`: 刷新\n3. 属性\n\n    * `href`: 地址\n\n\n### history\n\n1. 获取\n\n    ```js\n    window.history;\n\n    history;\n    ```\n2. 方法\n\n    * `back`: 后退\n    * `forward`:前进\n    * `go`: 去特定页面，参数为正数表示前进n个记录，为负数为后退n个记录\n3. 属性\n\n    * length: 返回当前窗口历史列表中的URL数量\n\n## DOM\n\n组成：\n\n* 核心DOM\n\n    * Document对象\n    * Element对象\n    * Attribute对象\n    * Comment对象\n    * Node节点对象，上述对象均继承自此对象\n* XML DOM\n* HTML DOM\n\n\n功能：控制HTML文档内容\n\n1. 通过id获取元素对象并修改内容\n2. **改变标签内内容** ：`innerHTML`\n\n```js\nvar item = document.getElementById(<id>)；\nitem.src = \"...\"; \nitem.innerHTML = \"<div>新子节点</div>\"; // 改变标签内内容\n```\n\n### 事件\n\n**绑定事件：**\n\n1. 使用`onclick`属性\n\n    * 直接在标签内设置\n    * 在js中获取元素，然后设置属性\n\n\n### 核心DOM模型\n\n1. 获取\n\n    1. window.document\n    2. document\n2. 方法\n\n    1. 获取Element对象\n\n        1. `getElementById()` :根据id属性获取元素对象\n        2. `getElementsByTagName() `: 根据tag（标签，尖括号头）获取元素对象，返回数组\n        3. `getElementsByClassName()` : 根据class返回元素对象，返回数组\n        4. `getElementsByName()` : 根据name获取元素对象，返回数组\n    2. 创建DOM对象\n\n        1. `createAttribute(name)`\n        2. `createComment()`\n        3. `createElement()`\n        4. `createTextNode()`\n\n    ```js\n    // 创建table元素\n    var table = document.createElement(\"table\");\n\n    // 获取所有div\n    var divs = document.getElementsByTagName(\"div\");\n    ```\n3. 属性\n\n\n### Element\n\n1. 获取\n\n   通过document获取\n2. 方法\n\n    1. `removeAttribute`删除属性\n    2. `setAttribute`设置属性\n\n       参数1：属性名\n\n       参数2：属性值\n\n\n### Node\n\n1. 特点\n\n   所有DOM对象均可以看作node\n2. 方法\n\n    * CURD dom数\n\n        * `appendChild`: 向节点子节点列表添加节点\n        * `removeChild`: 删除并返回被指定的子节点\n        * `replacechild`: 使用新节点替换子节点\n3. 属性\n\n   `parentNode `: 父节点\n\n   `innerHTML`: 内部内容，包含子节点也将以文本的形式被读取\n\n\n### 控制样式\n\n使用style属性控制\n\n1. 直接使用style\n\n    ```js\n    div1.style.border = \"1px solid red\";\n    div1.style.width = \"200px\";\n    div1.style.fontSize = \"20px\";\n    ```\n\n2. 提前定义好css，更改元素相关属性来实现更多样的样式控制","slug":"web前端/JavaScript","published":1,"updated":"2024-06-19T17:53:29.136Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wnw000f7guycootd1dn","content":"<p><a href=\"https://www.w3school.com.cn/js/index.asp\">JavaScript 教程 (w3school.com.cn)</a></p>\n<h2 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><ol>\n<li><p>与html结合方式</p>\n<p><strong>注意：script可以定义再任何位置，但是会按顺序执行，一般会放在最后</strong></p>\n<ol>\n<li><p>内部JS</p>\n<p><code>script</code>标签内编写js代码</p>\n</li>\n<li><p>外部JS</p>\n<p><code>scrip</code>属性<code>src</code>引入js文件</p>\n</li>\n</ol>\n</li>\n<li><p>注释</p>\n<ol>\n<li>单行注释 : &#x2F;&#x2F;</li>\n<li>多行注释: &#x2F;*   *&#x2F;</li>\n</ol>\n</li>\n<li><p>数据类型</p>\n<ol>\n<li><p>原始数据类型</p>\n<ol>\n<li><p>number</p>\n<ul>\n<li>整数</li>\n<li>小数</li>\n<li>NaN</li>\n</ul>\n</li>\n<li><p>string: 字符、字符串</p>\n</li>\n<li><p>boolean</p>\n</li>\n<li><p>null</p>\n</li>\n<li><p>undefined : 变量未初始化值默认为此值</p>\n</li>\n</ol>\n</li>\n<li><p>引用数据类型：对象</p>\n</li>\n</ol>\n</li>\n<li><p>变量</p>\n<p>弱类型语言：变量存放任意类型的变量</p>\n<p>语法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(a+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>)</span><br><span class=\"line\">a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(a+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>运算符</p>\n<ol>\n<li><p>一元运算符</p>\n<p>++，–</p>\n</li>\n<li><p>算数运算符</p>\n<p>+，-，*，&#x2F;，%。。。</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n<li><p>&#x3D;，+&#x3D;，-&#x3D; 。。。</p>\n</li>\n<li><p>比较运算符</p>\n<p>&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;&#x3D;, &#x3D;&#x3D;&#x3D;（全等于）</p>\n<blockquote>\n<p>字符串比较从左到右按位比较</p>\n<p>&#x3D;&#x3D;类型不同先转换类型，后比较</p>\n<p>&#x3D;&#x3D;&#x3D;类型不同直接返回false</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"6\">\n<li><p>逻辑运算符</p>\n<p>&amp;&amp;，||， ！</p>\n</li>\n<li><p>三元运算符</p>\n<p>?  :</p>\n</li>\n</ol>\n<p><strong>注意：运算符不符合条件时会自动进行转换</strong></p>\n<p><strong>转number规则：</strong></p>\n<ol>\n<li>string转number：按照字面值转，字面非数字则转为NaN</li>\n<li>boolean转number：true为1，false为0</li>\n</ol>\n<p><strong>转boolean规则：</strong></p>\n<ol>\n<li>number：0，NaN为假，其他为真</li>\n<li>string：除空字符串，其他为真</li>\n<li>null, undifined：false</li>\n<li>object：true</li>\n</ol>\n</li>\n<li><p>流程控制</p>\n<ol>\n<li><p><code>if... else</code></p>\n</li>\n<li><p><code>switch</code></p>\n<p>java中switch仅可以接收原始数据类型、枚举和string，js中可以接收任意类型</p>\n</li>\n<li><p><code>while</code></p>\n</li>\n<li><p><code>do.. while</code></p>\n</li>\n<li><p><code>for</code></p>\n</li>\n</ol>\n</li>\n<li><p>JS特殊语法（不建议使用）</p>\n<ol>\n<li>语句以<code>;</code>结束，也可以以<code>\\n</code>结束</li>\n<li><code>var</code>定义变量，不使用<code>var</code>为全局变量</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h3><blockquote>\n<p>Function</p>\n<p>Array</p>\n<p>Boolean</p>\n<p>Date</p>\n<p>Math</p>\n<p>Number</p>\n<p>String</p>\n<p>RegExp</p>\n<p>Global</p>\n</blockquote>\n<h4 id=\"Function对象\"><a href=\"#Function对象\" class=\"headerlink\" title=\"Function对象\"></a>Function对象</h4><ol>\n<li><p>创建</p>\n<p>方法1：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(&lt;形参列表&gt;, &lt;方法体&gt;);<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>方法2：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> &lt;方法名&gt;(&lt;参数列表&gt;) &#123; &lt;方法体&gt;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法3：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &lt;方法名&gt; = <span class=\"keyword\">function</span> (<span class=\"params\">&lt;参数列表&gt;</span>)&#123; &lt;方法体&gt;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun3 = <span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>属性</p>\n<ul>\n<li>length : 参数个数</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li><p>方法定义时形参无类型标注，返回值无类型标注</p>\n</li>\n<li><p>方法是对象，相同方法名的方法，后边会覆盖掉前边</p>\n</li>\n<li><p>方法调用仅与方法名有关，找到方法名即调用成功</p>\n</li>\n<li><p>方法声明中有一个内置隐藏数组对象<code>arguments</code>，可以通过该关键字访问访问所有入参</p>\n</li>\n</ol>\n</li>\n<li><p>调用</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;方法名&gt;（&lt;实参列表&gt;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Array对象\"><a href=\"#Array对象\" class=\"headerlink\" title=\"Array对象\"></a>Array对象</h4><ol>\n<li><p>创建</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(&lt;元素列表&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(&lt;默认长度&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"keyword\">new</span> [&lt;元素列表&gt;); </span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>join</p>\n<p>拼接元素返回字符串，入参为连接字符串，默认<code>,</code></p>\n</li>\n<li><p>push</p>\n<p>尾部添加元素</p>\n</li>\n<li></li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>length : 数组长度</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li>元素类型可变</li>\n<li>数组长度可变</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"Date对象\"><a href=\"#Date对象\" class=\"headerlink\" title=\"Date对象\"></a>Date对象</h4><ol>\n<li><p>创建</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>toLocalString()</p>\n<p>返回对象的当前系统配置的格式的字符串</p>\n</li>\n<li><p>getTime</p>\n<p>时间戳</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h4><ol>\n<li><p>创建</p>\n<p>不需要创建，直接使用</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>random :</p>\n<p>返回[0,1)区间内的随机数</p>\n</li>\n<li><p>ceil</p>\n<p>对数进行向上舍入</p>\n</li>\n<li><p>floor</p>\n<p>向下舍入</p>\n</li>\n<li><p>round</p>\n<p>四舍五入</p>\n</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>PI   圆周率</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h4><ol>\n<li><p>正则表达式</p>\n<ol>\n<li><p>单个字符<code>[]</code></p>\n</li>\n<li><p>量词符号</p>\n<ul>\n<li><p>？: 0次或1次</p>\n</li>\n<li><p>* :  0次或多次+ : 0次或一次</p>\n</li>\n<li><p>+ : 0次或一次</p>\n</li>\n<li><p>{m, n} : 表示m-n次之间，{m,}表示最少m次，{,n}表示最多n次</p>\n</li>\n</ul>\n</li>\n<li><p>位置</p>\n<ul>\n<li>^ : 开始</li>\n<li>$ : 结尾</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>创建正则对象</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(&lt;表达式&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/&lt;表达式&gt;/</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>test</p>\n<p>验证字符串是否匹配成功</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Global\"><a href=\"#Global\" class=\"headerlink\" title=\"Global\"></a>Global</h4><ol>\n<li><p>特点：全局对象，不需要对象就可以使用</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p><code>encodeURI </code>: URI编码</p>\n</li>\n<li><p><code>decodeURI </code>: URI解码</p>\n</li>\n<li><p><code>encodeURIComponent </code>: URI编码</p>\n<p>斜线等特殊字符也进行编码</p>\n</li>\n<li><p><code>decodeURIComponent </code>: URI解码</p>\n</li>\n<li><p><code>parseInt</code></p>\n<p>可以识别字符串的前缀数字并返回，非数字开头为<code>NaN</code></p>\n</li>\n<li><p><code>isNaN</code></p>\n<p>判断是否为<code>NaN</code></p>\n</li>\n<li><p><code>eval</code></p>\n<p>将js字符串，转为脚本执行</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><p>概念：Browser Object Model 浏览器对象模型</p>\n<p>组成：</p>\n<ul>\n<li>window : 窗口</li>\n<li>navigator : 浏览器对象</li>\n<li>screen : 显示器对象</li>\n<li>location : 地址栏对象</li>\n<li>history : 历史记录</li>\n</ul>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><p>方法</p>\n<ol>\n<li><p>弹窗方法</p>\n<ol>\n<li><code>alter</code> 一个带确认按钮的警告框</li>\n<li><code>confirm</code> 一个带确认和取消按钮的确认框，返回用户按了哪个按钮</li>\n<li><code>prompt</code> 输入框，返回用户输入值</li>\n</ol>\n</li>\n<li><p>打开关闭方法</p>\n<ol>\n<li><code>open</code>  打开新窗口，入参为新窗口地址，返回打开的窗口对象</li>\n<li><code>close</code> 关闭窗口</li>\n</ol>\n</li>\n<li><p>定时器方法</p>\n<ol>\n<li><p><code>setTimeout</code></p>\n<p>参数1：js代码或方法</p>\n<p>参数2：时间毫秒值</p>\n<p>返回：定时器标识</p>\n</li>\n<li><p><code>clearTimeout</code></p>\n<p>参数：定时器标</p>\n</li>\n<li><p><code>setInterval</code></p>\n<p>参数1：js代码或方法</p>\n<p>参数2：时间毫秒值</p>\n<p>返回：定时器标识</p>\n</li>\n<li><p><code>clearInterval</code></p>\n<p>参数：定时器标</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>属性</p>\n<ul>\n<li>window : 窗口</li>\n<li>navigator : 浏览器对象</li>\n<li>screen : 显示器对象</li>\n<li>location : 地址栏对象</li>\n<li>history : 历史记录</li>\n<li>document : dom对象</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li>不需要创建，直接使用<code>window</code>使用</li>\n<li><code>window</code>可以省略，<code>alert</code>方法即window对象的方法</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><ol>\n<li><p>获取、</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">locaiton</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">location;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><code>reload</code>: 刷新</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li><code>href</code>: 地址</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><ol>\n<li><p>获取</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">history;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><code>back</code>: 后退</li>\n<li><code>forward</code>:前进</li>\n<li><code>go</code>: 去特定页面，参数为正数表示前进n个记录，为负数为后退n个记录</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>length: 返回当前窗口历史列表中的URL数量</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p>组成：</p>\n<ul>\n<li><p>核心DOM</p>\n<ul>\n<li>Document对象</li>\n<li>Element对象</li>\n<li>Attribute对象</li>\n<li>Comment对象</li>\n<li>Node节点对象，上述对象均继承自此对象</li>\n</ul>\n</li>\n<li><p>XML DOM</p>\n</li>\n<li><p>HTML DOM</p>\n</li>\n</ul>\n<p>功能：控制HTML文档内容</p>\n<ol>\n<li>通过id获取元素对象并修改内容</li>\n<li><strong>改变标签内内容</strong> ：<code>innerHTML</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(&lt;id&gt;)；</span><br><span class=\"line\">item.<span class=\"property\">src</span> = <span class=\"string\">&quot;...&quot;</span>; </span><br><span class=\"line\">item.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&lt;div&gt;新子节点&lt;/div&gt;&quot;</span>; <span class=\"comment\">// 改变标签内内容</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p><strong>绑定事件：</strong></p>\n<ol>\n<li><p>使用<code>onclick</code>属性</p>\n<ul>\n<li>直接在标签内设置</li>\n<li>在js中获取元素，然后设置属性</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"核心DOM模型\"><a href=\"#核心DOM模型\" class=\"headerlink\" title=\"核心DOM模型\"></a>核心DOM模型</h3><ol>\n<li><p>获取</p>\n<ol>\n<li>window.document</li>\n<li>document</li>\n</ol>\n</li>\n<li><p>方法</p>\n<ol>\n<li><p>获取Element对象</p>\n<ol>\n<li><code>getElementById()</code> :根据id属性获取元素对象</li>\n<li><code>getElementsByTagName() </code>: 根据tag（标签，尖括号头）获取元素对象，返回数组</li>\n<li><code>getElementsByClassName()</code> : 根据class返回元素对象，返回数组</li>\n<li><code>getElementsByName()</code> : 根据name获取元素对象，返回数组</li>\n</ol>\n</li>\n<li><p>创建DOM对象</p>\n<ol>\n<li><code>createAttribute(name)</code></li>\n<li><code>createComment()</code></li>\n<li><code>createElement()</code></li>\n<li><code>createTextNode()</code></li>\n</ol>\n</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建table元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> table = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;table&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取所有div</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>属性</p>\n</li>\n</ol>\n<h3 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h3><ol>\n<li><p>获取</p>\n<p>通过document获取</p>\n</li>\n<li><p>方法</p>\n<ol>\n<li><p><code>removeAttribute</code>删除属性</p>\n</li>\n<li><p><code>setAttribute</code>设置属性</p>\n<p>参数1：属性名</p>\n<p>参数2：属性值</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ol>\n<li><p>特点</p>\n<p>所有DOM对象均可以看作node</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>CURD dom数</p>\n<ul>\n<li><code>appendChild</code>: 向节点子节点列表添加节点</li>\n<li><code>removeChild</code>: 删除并返回被指定的子节点</li>\n<li><code>replacechild</code>: 使用新节点替换子节点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>属性</p>\n<p><code>parentNode </code>: 父节点</p>\n<p><code>innerHTML</code>: 内部内容，包含子节点也将以文本的形式被读取</p>\n</li>\n</ol>\n<h3 id=\"控制样式\"><a href=\"#控制样式\" class=\"headerlink\" title=\"控制样式\"></a>控制样式</h3><p>使用style属性控制</p>\n<ol>\n<li><p>直接使用style</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">border</span> = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;200px&quot;</span>;</span><br><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"string\">&quot;20px&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提前定义好css，更改元素相关属性来实现更多样的样式控制</p>\n</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://www.w3school.com.cn/js/index.asp\">JavaScript 教程 (w3school.com.cn)</a></p>\n<h2 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><ol>\n<li><p>与html结合方式</p>\n<p><strong>注意：script可以定义再任何位置，但是会按顺序执行，一般会放在最后</strong></p>\n<ol>\n<li><p>内部JS</p>\n<p><code>script</code>标签内编写js代码</p>\n</li>\n<li><p>外部JS</p>\n<p><code>scrip</code>属性<code>src</code>引入js文件</p>\n</li>\n</ol>\n</li>\n<li><p>注释</p>\n<ol>\n<li>单行注释 : &#x2F;&#x2F;</li>\n<li>多行注释: &#x2F;*   *&#x2F;</li>\n</ol>\n</li>\n<li><p>数据类型</p>\n<ol>\n<li><p>原始数据类型</p>\n<ol>\n<li><p>number</p>\n<ul>\n<li>整数</li>\n<li>小数</li>\n<li>NaN</li>\n</ul>\n</li>\n<li><p>string: 字符、字符串</p>\n</li>\n<li><p>boolean</p>\n</li>\n<li><p>null</p>\n</li>\n<li><p>undefined : 变量未初始化值默认为此值</p>\n</li>\n</ol>\n</li>\n<li><p>引用数据类型：对象</p>\n</li>\n</ol>\n</li>\n<li><p>变量</p>\n<p>弱类型语言：变量存放任意类型的变量</p>\n<p>语法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(a+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>)</span><br><span class=\"line\">a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(a+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>运算符</p>\n<ol>\n<li><p>一元运算符</p>\n<p>++，–</p>\n</li>\n<li><p>算数运算符</p>\n<p>+，-，*，&#x2F;，%。。。</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n<li><p>&#x3D;，+&#x3D;，-&#x3D; 。。。</p>\n</li>\n<li><p>比较运算符</p>\n<p>&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;&#x3D;, &#x3D;&#x3D;&#x3D;（全等于）</p>\n<blockquote>\n<p>字符串比较从左到右按位比较</p>\n<p>&#x3D;&#x3D;类型不同先转换类型，后比较</p>\n<p>&#x3D;&#x3D;&#x3D;类型不同直接返回false</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"6\">\n<li><p>逻辑运算符</p>\n<p>&amp;&amp;，||， ！</p>\n</li>\n<li><p>三元运算符</p>\n<p>?  :</p>\n</li>\n</ol>\n<p><strong>注意：运算符不符合条件时会自动进行转换</strong></p>\n<p><strong>转number规则：</strong></p>\n<ol>\n<li>string转number：按照字面值转，字面非数字则转为NaN</li>\n<li>boolean转number：true为1，false为0</li>\n</ol>\n<p><strong>转boolean规则：</strong></p>\n<ol>\n<li>number：0，NaN为假，其他为真</li>\n<li>string：除空字符串，其他为真</li>\n<li>null, undifined：false</li>\n<li>object：true</li>\n</ol>\n</li>\n<li><p>流程控制</p>\n<ol>\n<li><p><code>if... else</code></p>\n</li>\n<li><p><code>switch</code></p>\n<p>java中switch仅可以接收原始数据类型、枚举和string，js中可以接收任意类型</p>\n</li>\n<li><p><code>while</code></p>\n</li>\n<li><p><code>do.. while</code></p>\n</li>\n<li><p><code>for</code></p>\n</li>\n</ol>\n</li>\n<li><p>JS特殊语法（不建议使用）</p>\n<ol>\n<li>语句以<code>;</code>结束，也可以以<code>\\n</code>结束</li>\n<li><code>var</code>定义变量，不使用<code>var</code>为全局变量</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h3><blockquote>\n<p>Function</p>\n<p>Array</p>\n<p>Boolean</p>\n<p>Date</p>\n<p>Math</p>\n<p>Number</p>\n<p>String</p>\n<p>RegExp</p>\n<p>Global</p>\n</blockquote>\n<h4 id=\"Function对象\"><a href=\"#Function对象\" class=\"headerlink\" title=\"Function对象\"></a>Function对象</h4><ol>\n<li><p>创建</p>\n<p>方法1：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(&lt;形参列表&gt;, &lt;方法体&gt;);<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>方法2：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> &lt;方法名&gt;(&lt;参数列表&gt;) &#123; &lt;方法体&gt;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法3：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &lt;方法名&gt; = <span class=\"keyword\">function</span> (<span class=\"params\">&lt;参数列表&gt;</span>)&#123; &lt;方法体&gt;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun3 = <span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>属性</p>\n<ul>\n<li>length : 参数个数</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li><p>方法定义时形参无类型标注，返回值无类型标注</p>\n</li>\n<li><p>方法是对象，相同方法名的方法，后边会覆盖掉前边</p>\n</li>\n<li><p>方法调用仅与方法名有关，找到方法名即调用成功</p>\n</li>\n<li><p>方法声明中有一个内置隐藏数组对象<code>arguments</code>，可以通过该关键字访问访问所有入参</p>\n</li>\n</ol>\n</li>\n<li><p>调用</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;方法名&gt;（&lt;实参列表&gt;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Array对象\"><a href=\"#Array对象\" class=\"headerlink\" title=\"Array对象\"></a>Array对象</h4><ol>\n<li><p>创建</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(&lt;元素列表&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(&lt;默认长度&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"keyword\">new</span> [&lt;元素列表&gt;); </span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>join</p>\n<p>拼接元素返回字符串，入参为连接字符串，默认<code>,</code></p>\n</li>\n<li><p>push</p>\n<p>尾部添加元素</p>\n</li>\n<li></li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>length : 数组长度</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li>元素类型可变</li>\n<li>数组长度可变</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"Date对象\"><a href=\"#Date对象\" class=\"headerlink\" title=\"Date对象\"></a>Date对象</h4><ol>\n<li><p>创建</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>toLocalString()</p>\n<p>返回对象的当前系统配置的格式的字符串</p>\n</li>\n<li><p>getTime</p>\n<p>时间戳</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h4><ol>\n<li><p>创建</p>\n<p>不需要创建，直接使用</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>random :</p>\n<p>返回[0,1)区间内的随机数</p>\n</li>\n<li><p>ceil</p>\n<p>对数进行向上舍入</p>\n</li>\n<li><p>floor</p>\n<p>向下舍入</p>\n</li>\n<li><p>round</p>\n<p>四舍五入</p>\n</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>PI   圆周率</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h4><ol>\n<li><p>正则表达式</p>\n<ol>\n<li><p>单个字符<code>[]</code></p>\n</li>\n<li><p>量词符号</p>\n<ul>\n<li><p>？: 0次或1次</p>\n</li>\n<li><p>* :  0次或多次+ : 0次或一次</p>\n</li>\n<li><p>+ : 0次或一次</p>\n</li>\n<li><p>{m, n} : 表示m-n次之间，{m,}表示最少m次，{,n}表示最多n次</p>\n</li>\n</ul>\n</li>\n<li><p>位置</p>\n<ul>\n<li>^ : 开始</li>\n<li>$ : 结尾</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>创建正则对象</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(&lt;表达式&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/&lt;表达式&gt;/</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><p>test</p>\n<p>验证字符串是否匹配成功</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Global\"><a href=\"#Global\" class=\"headerlink\" title=\"Global\"></a>Global</h4><ol>\n<li><p>特点：全局对象，不需要对象就可以使用</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p><code>encodeURI </code>: URI编码</p>\n</li>\n<li><p><code>decodeURI </code>: URI解码</p>\n</li>\n<li><p><code>encodeURIComponent </code>: URI编码</p>\n<p>斜线等特殊字符也进行编码</p>\n</li>\n<li><p><code>decodeURIComponent </code>: URI解码</p>\n</li>\n<li><p><code>parseInt</code></p>\n<p>可以识别字符串的前缀数字并返回，非数字开头为<code>NaN</code></p>\n</li>\n<li><p><code>isNaN</code></p>\n<p>判断是否为<code>NaN</code></p>\n</li>\n<li><p><code>eval</code></p>\n<p>将js字符串，转为脚本执行</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><p>概念：Browser Object Model 浏览器对象模型</p>\n<p>组成：</p>\n<ul>\n<li>window : 窗口</li>\n<li>navigator : 浏览器对象</li>\n<li>screen : 显示器对象</li>\n<li>location : 地址栏对象</li>\n<li>history : 历史记录</li>\n</ul>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><ol>\n<li><p>方法</p>\n<ol>\n<li><p>弹窗方法</p>\n<ol>\n<li><code>alter</code> 一个带确认按钮的警告框</li>\n<li><code>confirm</code> 一个带确认和取消按钮的确认框，返回用户按了哪个按钮</li>\n<li><code>prompt</code> 输入框，返回用户输入值</li>\n</ol>\n</li>\n<li><p>打开关闭方法</p>\n<ol>\n<li><code>open</code>  打开新窗口，入参为新窗口地址，返回打开的窗口对象</li>\n<li><code>close</code> 关闭窗口</li>\n</ol>\n</li>\n<li><p>定时器方法</p>\n<ol>\n<li><p><code>setTimeout</code></p>\n<p>参数1：js代码或方法</p>\n<p>参数2：时间毫秒值</p>\n<p>返回：定时器标识</p>\n</li>\n<li><p><code>clearTimeout</code></p>\n<p>参数：定时器标</p>\n</li>\n<li><p><code>setInterval</code></p>\n<p>参数1：js代码或方法</p>\n<p>参数2：时间毫秒值</p>\n<p>返回：定时器标识</p>\n</li>\n<li><p><code>clearInterval</code></p>\n<p>参数：定时器标</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>属性</p>\n<ul>\n<li>window : 窗口</li>\n<li>navigator : 浏览器对象</li>\n<li>screen : 显示器对象</li>\n<li>location : 地址栏对象</li>\n<li>history : 历史记录</li>\n<li>document : dom对象</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ol>\n<li>不需要创建，直接使用<code>window</code>使用</li>\n<li><code>window</code>可以省略，<code>alert</code>方法即window对象的方法</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><ol>\n<li><p>获取、</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">locaiton</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">location;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><code>reload</code>: 刷新</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li><code>href</code>: 地址</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><ol>\n<li><p>获取</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">history;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n<ul>\n<li><code>back</code>: 后退</li>\n<li><code>forward</code>:前进</li>\n<li><code>go</code>: 去特定页面，参数为正数表示前进n个记录，为负数为后退n个记录</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li>length: 返回当前窗口历史列表中的URL数量</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p>组成：</p>\n<ul>\n<li><p>核心DOM</p>\n<ul>\n<li>Document对象</li>\n<li>Element对象</li>\n<li>Attribute对象</li>\n<li>Comment对象</li>\n<li>Node节点对象，上述对象均继承自此对象</li>\n</ul>\n</li>\n<li><p>XML DOM</p>\n</li>\n<li><p>HTML DOM</p>\n</li>\n</ul>\n<p>功能：控制HTML文档内容</p>\n<ol>\n<li>通过id获取元素对象并修改内容</li>\n<li><strong>改变标签内内容</strong> ：<code>innerHTML</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(&lt;id&gt;)；</span><br><span class=\"line\">item.<span class=\"property\">src</span> = <span class=\"string\">&quot;...&quot;</span>; </span><br><span class=\"line\">item.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&lt;div&gt;新子节点&lt;/div&gt;&quot;</span>; <span class=\"comment\">// 改变标签内内容</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p><strong>绑定事件：</strong></p>\n<ol>\n<li><p>使用<code>onclick</code>属性</p>\n<ul>\n<li>直接在标签内设置</li>\n<li>在js中获取元素，然后设置属性</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"核心DOM模型\"><a href=\"#核心DOM模型\" class=\"headerlink\" title=\"核心DOM模型\"></a>核心DOM模型</h3><ol>\n<li><p>获取</p>\n<ol>\n<li>window.document</li>\n<li>document</li>\n</ol>\n</li>\n<li><p>方法</p>\n<ol>\n<li><p>获取Element对象</p>\n<ol>\n<li><code>getElementById()</code> :根据id属性获取元素对象</li>\n<li><code>getElementsByTagName() </code>: 根据tag（标签，尖括号头）获取元素对象，返回数组</li>\n<li><code>getElementsByClassName()</code> : 根据class返回元素对象，返回数组</li>\n<li><code>getElementsByName()</code> : 根据name获取元素对象，返回数组</li>\n</ol>\n</li>\n<li><p>创建DOM对象</p>\n<ol>\n<li><code>createAttribute(name)</code></li>\n<li><code>createComment()</code></li>\n<li><code>createElement()</code></li>\n<li><code>createTextNode()</code></li>\n</ol>\n</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建table元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> table = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;table&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取所有div</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>属性</p>\n</li>\n</ol>\n<h3 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h3><ol>\n<li><p>获取</p>\n<p>通过document获取</p>\n</li>\n<li><p>方法</p>\n<ol>\n<li><p><code>removeAttribute</code>删除属性</p>\n</li>\n<li><p><code>setAttribute</code>设置属性</p>\n<p>参数1：属性名</p>\n<p>参数2：属性值</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ol>\n<li><p>特点</p>\n<p>所有DOM对象均可以看作node</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>CURD dom数</p>\n<ul>\n<li><code>appendChild</code>: 向节点子节点列表添加节点</li>\n<li><code>removeChild</code>: 删除并返回被指定的子节点</li>\n<li><code>replacechild</code>: 使用新节点替换子节点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>属性</p>\n<p><code>parentNode </code>: 父节点</p>\n<p><code>innerHTML</code>: 内部内容，包含子节点也将以文本的形式被读取</p>\n</li>\n</ol>\n<h3 id=\"控制样式\"><a href=\"#控制样式\" class=\"headerlink\" title=\"控制样式\"></a>控制样式</h3><p>使用style属性控制</p>\n<ol>\n<li><p>直接使用style</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">border</span> = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;200px&quot;</span>;</span><br><span class=\"line\">div1.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"string\">&quot;20px&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提前定义好css，更改元素相关属性来实现更多样的样式控制</p>\n</li>\n</ol>\n"},{"title":"xml","date":"2024-06-19T17:50:04.000Z","_content":"\n[XML系列教程 (w3school.com.cn)](https://www.w3school.com.cn/x.asp)\n\n与HTML区别\n\n1. XML标签都是自定义的，HTML标签都是预定义的\n2. XML语法更严格\n3. XML用于存储数据，HTML用于展示数据\n\n### 功能\n\n存储数据\n\n1. 配置文件\n2. 在网络中传输\n\n### 语法\n\n1. 文档后缀名为 `xml`\n2. **第一行**必须为文档声明\n3. 有且仅有一个根标签\n4. 属性值需要用引号包裹\n5. 标签需要正常关闭\n6. 标签名称区分大小写\n\n### 组成部分\n\n1. 文档声明\n\n    1. 格式 `<?xml 属性列表 ?>`\n    2. 属性列表\n\n        1. version: 版本号，必须属性\n        2. encoding: 编码方式，默认 `ISO-8859-1`\n        3. standalone:\n\n           是否独立\n\n           yes 不依赖其他文件\n\n           no 依赖其他文件\n2. 指令  结合CSS使用\n\n   以下代码会尝试查找a.css来添加样式\n\n    ```xml\n    <?xml-stylesheet type=\"text/css\" herf=\"a.css\" ?>\n    ```\n3. 标签\n\n    1. 不能以数字或符号开头\n    2. 不能以字母xml、Xml、XML开头\n    3. 不能包含空格\n4. 属性\n\n   id属性唯一（存疑）\n5. 文本\n\n   CDATE区   区域内数据会被识别为纯文本\n\n    ```xml\n    <![CDATA[\n    \t数据\n    ]]>\n    ```\n\n# 约束\n\n分类：\n\n1. DTD\n\n   简单的约束技术\n2. Schema\n\n   复杂的约束技术\n\n### DTD\n\n1. 内部dtd：约束规则定义在xml文件中\n\n    ```xml\n    <!DOCTYPE 根标签名 [\n    \t约束内容\n    ]>\n    ```\n\n\n    ![image.png](assets/image-20220412225315-3wgb54x.png)\n2. 外部dtd：约束规则单独编写文档\n\n    1. 本地引用：\n\n        ```xml\n        <!DOCTYPE 根标签名 SYSTEM \"dtd文件位置\">\n\n        ```\n    2. 网络引用：\n\n        ```xml\n        <!DOCTYPE 根标签名 PUBLIC \"dtd文件名\" \"dtd文件url\">\n        ```\n\n\n### Schema\n\n* xsi: schema执行实例\n\n* schemaLocation: <URI1> <URI2>\n\n  URI1 ：前缀\n\n  URI2： 约束地址\n* xmlns:<命名空间>:<URI1>\n\n  用于确定标签属于哪个命名空间，来确定唯一的标签\n\n\n![image.png](assets/image-20220412231127-r2gwtmn.png)","source":"_posts/web前端/xml.md","raw":"---\ntitle: xml\ndate: 2024-06-20 01:50:04\ncategories:\n  - web 前端\ntags:\n---\n\n[XML系列教程 (w3school.com.cn)](https://www.w3school.com.cn/x.asp)\n\n与HTML区别\n\n1. XML标签都是自定义的，HTML标签都是预定义的\n2. XML语法更严格\n3. XML用于存储数据，HTML用于展示数据\n\n### 功能\n\n存储数据\n\n1. 配置文件\n2. 在网络中传输\n\n### 语法\n\n1. 文档后缀名为 `xml`\n2. **第一行**必须为文档声明\n3. 有且仅有一个根标签\n4. 属性值需要用引号包裹\n5. 标签需要正常关闭\n6. 标签名称区分大小写\n\n### 组成部分\n\n1. 文档声明\n\n    1. 格式 `<?xml 属性列表 ?>`\n    2. 属性列表\n\n        1. version: 版本号，必须属性\n        2. encoding: 编码方式，默认 `ISO-8859-1`\n        3. standalone:\n\n           是否独立\n\n           yes 不依赖其他文件\n\n           no 依赖其他文件\n2. 指令  结合CSS使用\n\n   以下代码会尝试查找a.css来添加样式\n\n    ```xml\n    <?xml-stylesheet type=\"text/css\" herf=\"a.css\" ?>\n    ```\n3. 标签\n\n    1. 不能以数字或符号开头\n    2. 不能以字母xml、Xml、XML开头\n    3. 不能包含空格\n4. 属性\n\n   id属性唯一（存疑）\n5. 文本\n\n   CDATE区   区域内数据会被识别为纯文本\n\n    ```xml\n    <![CDATA[\n    \t数据\n    ]]>\n    ```\n\n# 约束\n\n分类：\n\n1. DTD\n\n   简单的约束技术\n2. Schema\n\n   复杂的约束技术\n\n### DTD\n\n1. 内部dtd：约束规则定义在xml文件中\n\n    ```xml\n    <!DOCTYPE 根标签名 [\n    \t约束内容\n    ]>\n    ```\n\n\n    ![image.png](assets/image-20220412225315-3wgb54x.png)\n2. 外部dtd：约束规则单独编写文档\n\n    1. 本地引用：\n\n        ```xml\n        <!DOCTYPE 根标签名 SYSTEM \"dtd文件位置\">\n\n        ```\n    2. 网络引用：\n\n        ```xml\n        <!DOCTYPE 根标签名 PUBLIC \"dtd文件名\" \"dtd文件url\">\n        ```\n\n\n### Schema\n\n* xsi: schema执行实例\n\n* schemaLocation: <URI1> <URI2>\n\n  URI1 ：前缀\n\n  URI2： 约束地址\n* xmlns:<命名空间>:<URI1>\n\n  用于确定标签属于哪个命名空间，来确定唯一的标签\n\n\n![image.png](assets/image-20220412231127-r2gwtmn.png)","slug":"web前端/xml","published":1,"updated":"2024-06-19T17:50:30.774Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wnx000i7guy3wtaa1bj","content":"<p><a href=\"https://www.w3school.com.cn/x.asp\">XML系列教程 (w3school.com.cn)</a></p>\n<p>与HTML区别</p>\n<ol>\n<li>XML标签都是自定义的，HTML标签都是预定义的</li>\n<li>XML语法更严格</li>\n<li>XML用于存储数据，HTML用于展示数据</li>\n</ol>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>存储数据</p>\n<ol>\n<li>配置文件</li>\n<li>在网络中传输</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ol>\n<li>文档后缀名为 <code>xml</code></li>\n<li><strong>第一行</strong>必须为文档声明</li>\n<li>有且仅有一个根标签</li>\n<li>属性值需要用引号包裹</li>\n<li>标签需要正常关闭</li>\n<li>标签名称区分大小写</li>\n</ol>\n<h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><ol>\n<li><p>文档声明</p>\n<ol>\n<li><p>格式 <code>&lt;?xml 属性列表 ?&gt;</code></p>\n</li>\n<li><p>属性列表</p>\n<ol>\n<li><p>version: 版本号，必须属性</p>\n</li>\n<li><p>encoding: 编码方式，默认 <code>ISO-8859-1</code></p>\n</li>\n<li><p>standalone:</p>\n<p>是否独立</p>\n<p>yes 不依赖其他文件</p>\n<p>no 依赖其他文件</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>指令  结合CSS使用</p>\n<p>以下代码会尝试查找a.css来添加样式</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml-stylesheet type=<span class=\"string\">&quot;text/css&quot;</span> herf=<span class=\"string\">&quot;a.css&quot;</span> ?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>标签</p>\n<ol>\n<li>不能以数字或符号开头</li>\n<li>不能以字母xml、Xml、XML开头</li>\n<li>不能包含空格</li>\n</ol>\n</li>\n<li><p>属性</p>\n<p>id属性唯一（存疑）</p>\n</li>\n<li><p>文本</p>\n<p>CDATE区   区域内数据会被识别为纯文本</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[</span><br><span class=\"line\">\t数据</span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><p>分类：</p>\n<ol>\n<li><p>DTD</p>\n<p>简单的约束技术</p>\n</li>\n<li><p>Schema</p>\n<p>复杂的约束技术</p>\n</li>\n</ol>\n<h3 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h3><ol>\n<li><p>内部dtd：约束规则定义在xml文件中</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 [</span></span><br><span class=\"line\"><span class=\"meta\">\t约束内容</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p> <img src=\"/hexo-blog/assets/image-20220412225315-3wgb54x.png\" alt=\"image.png\"></p>\n</li>\n<li><p>外部dtd：约束规则单独编写文档</p>\n<ol>\n<li><p>本地引用：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;dtd文件位置&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>网络引用：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;dtd文件名&quot;</span> <span class=\"string\">&quot;dtd文件url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><ul>\n<li><p>xsi: schema执行实例</p>\n</li>\n<li><p>schemaLocation: <URI1> <URI2></p>\n<p>URI1 ：前缀</p>\n<p>URI2： 约束地址</p>\n</li>\n<li><p>xmlns:&lt;命名空间&gt;:<URI1></p>\n<p>用于确定标签属于哪个命名空间，来确定唯一的标签</p>\n</li>\n</ul>\n<p><img src=\"/hexo-blog/assets/image-20220412231127-r2gwtmn.png\" alt=\"image.png\"></p>\n","excerpt":"","more":"<p><a href=\"https://www.w3school.com.cn/x.asp\">XML系列教程 (w3school.com.cn)</a></p>\n<p>与HTML区别</p>\n<ol>\n<li>XML标签都是自定义的，HTML标签都是预定义的</li>\n<li>XML语法更严格</li>\n<li>XML用于存储数据，HTML用于展示数据</li>\n</ol>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>存储数据</p>\n<ol>\n<li>配置文件</li>\n<li>在网络中传输</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ol>\n<li>文档后缀名为 <code>xml</code></li>\n<li><strong>第一行</strong>必须为文档声明</li>\n<li>有且仅有一个根标签</li>\n<li>属性值需要用引号包裹</li>\n<li>标签需要正常关闭</li>\n<li>标签名称区分大小写</li>\n</ol>\n<h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><ol>\n<li><p>文档声明</p>\n<ol>\n<li><p>格式 <code>&lt;?xml 属性列表 ?&gt;</code></p>\n</li>\n<li><p>属性列表</p>\n<ol>\n<li><p>version: 版本号，必须属性</p>\n</li>\n<li><p>encoding: 编码方式，默认 <code>ISO-8859-1</code></p>\n</li>\n<li><p>standalone:</p>\n<p>是否独立</p>\n<p>yes 不依赖其他文件</p>\n<p>no 依赖其他文件</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>指令  结合CSS使用</p>\n<p>以下代码会尝试查找a.css来添加样式</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml-stylesheet type=<span class=\"string\">&quot;text/css&quot;</span> herf=<span class=\"string\">&quot;a.css&quot;</span> ?&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>标签</p>\n<ol>\n<li>不能以数字或符号开头</li>\n<li>不能以字母xml、Xml、XML开头</li>\n<li>不能包含空格</li>\n</ol>\n</li>\n<li><p>属性</p>\n<p>id属性唯一（存疑）</p>\n</li>\n<li><p>文本</p>\n<p>CDATE区   区域内数据会被识别为纯文本</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;![CDATA[</span><br><span class=\"line\">\t数据</span><br><span class=\"line\">]]&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><p>分类：</p>\n<ol>\n<li><p>DTD</p>\n<p>简单的约束技术</p>\n</li>\n<li><p>Schema</p>\n<p>复杂的约束技术</p>\n</li>\n</ol>\n<h3 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h3><ol>\n<li><p>内部dtd：约束规则定义在xml文件中</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 [</span></span><br><span class=\"line\"><span class=\"meta\">\t约束内容</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p> <img src=\"/hexo-blog/assets/image-20220412225315-3wgb54x.png\" alt=\"image.png\"></p>\n</li>\n<li><p>外部dtd：约束规则单独编写文档</p>\n<ol>\n<li><p>本地引用：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;dtd文件位置&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>网络引用：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 根标签名 <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;dtd文件名&quot;</span> <span class=\"string\">&quot;dtd文件url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><ul>\n<li><p>xsi: schema执行实例</p>\n</li>\n<li><p>schemaLocation: <URI1> <URI2></p>\n<p>URI1 ：前缀</p>\n<p>URI2： 约束地址</p>\n</li>\n<li><p>xmlns:&lt;命名空间&gt;:<URI1></p>\n<p>用于确定标签属于哪个命名空间，来确定唯一的标签</p>\n</li>\n</ul>\n<p><img src=\"/hexo-blog/assets/image-20220412231127-r2gwtmn.png\" alt=\"image.png\"></p>\n"},{"title":"面试问题关注点","date":"2024-06-19T17:10:39.000Z","_content":"\n### 工作相关\n\n1. 工作职责。\n\n   负责的工作范围，工作强度（每周工作几天，加班情况，加班费是否有），是业务扩张招人还是接手之前离职的人的工作，是否有人交接\n2. 同事相关\n\n   领导是否就是面试官，几年工作经验，团队有几人，分别负责哪方面\n3. 工作地点\n\n   了解地点，私下进一步了解通勤情况\n4. 出差\n\n   是否有出差，去哪里，频次多少，多久，有事是否可以安排别人，最多容许多久不出差\n\n\n### 薪资相关\n\n1. 薪资构成\n\n   基本工资+绩效工资，年终奖多少，绩效工资考核标准，是否强制考核\n2. argue薪资\n\n    1. 工时，工时长可argue工资\n    2. 五险一金，目标公司五险一金低可以在工资要求补偿\n    3. 目前薪资，目前收入算总包（月收入+五险一金+年终奖）*1.3做心里预期","source":"_posts/沙堆/面试问题关注点.md","raw":"---\ntitle: 面试问题关注点\ndate: 2024-06-20 01:10:39\ncategories:\ntags:\n---\n\n### 工作相关\n\n1. 工作职责。\n\n   负责的工作范围，工作强度（每周工作几天，加班情况，加班费是否有），是业务扩张招人还是接手之前离职的人的工作，是否有人交接\n2. 同事相关\n\n   领导是否就是面试官，几年工作经验，团队有几人，分别负责哪方面\n3. 工作地点\n\n   了解地点，私下进一步了解通勤情况\n4. 出差\n\n   是否有出差，去哪里，频次多少，多久，有事是否可以安排别人，最多容许多久不出差\n\n\n### 薪资相关\n\n1. 薪资构成\n\n   基本工资+绩效工资，年终奖多少，绩效工资考核标准，是否强制考核\n2. argue薪资\n\n    1. 工时，工时长可argue工资\n    2. 五险一金，目标公司五险一金低可以在工资要求补偿\n    3. 目前薪资，目前收入算总包（月收入+五险一金+年终奖）*1.3做心里预期","slug":"沙堆/面试问题关注点","published":1,"updated":"2024-06-19T17:11:11.933Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wny000l7guy4dre6mf1","content":"<h3 id=\"工作相关\"><a href=\"#工作相关\" class=\"headerlink\" title=\"工作相关\"></a>工作相关</h3><ol>\n<li><p>工作职责。</p>\n<p>负责的工作范围，工作强度（每周工作几天，加班情况，加班费是否有），是业务扩张招人还是接手之前离职的人的工作，是否有人交接</p>\n</li>\n<li><p>同事相关</p>\n<p>领导是否就是面试官，几年工作经验，团队有几人，分别负责哪方面</p>\n</li>\n<li><p>工作地点</p>\n<p>了解地点，私下进一步了解通勤情况</p>\n</li>\n<li><p>出差</p>\n<p>是否有出差，去哪里，频次多少，多久，有事是否可以安排别人，最多容许多久不出差</p>\n</li>\n</ol>\n<h3 id=\"薪资相关\"><a href=\"#薪资相关\" class=\"headerlink\" title=\"薪资相关\"></a>薪资相关</h3><ol>\n<li><p>薪资构成</p>\n<p>基本工资+绩效工资，年终奖多少，绩效工资考核标准，是否强制考核</p>\n</li>\n<li><p>argue薪资</p>\n<ol>\n<li>工时，工时长可argue工资</li>\n<li>五险一金，目标公司五险一金低可以在工资要求补偿</li>\n<li>目前薪资，目前收入算总包（月收入+五险一金+年终奖）*1.3做心里预期</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"工作相关\"><a href=\"#工作相关\" class=\"headerlink\" title=\"工作相关\"></a>工作相关</h3><ol>\n<li><p>工作职责。</p>\n<p>负责的工作范围，工作强度（每周工作几天，加班情况，加班费是否有），是业务扩张招人还是接手之前离职的人的工作，是否有人交接</p>\n</li>\n<li><p>同事相关</p>\n<p>领导是否就是面试官，几年工作经验，团队有几人，分别负责哪方面</p>\n</li>\n<li><p>工作地点</p>\n<p>了解地点，私下进一步了解通勤情况</p>\n</li>\n<li><p>出差</p>\n<p>是否有出差，去哪里，频次多少，多久，有事是否可以安排别人，最多容许多久不出差</p>\n</li>\n</ol>\n<h3 id=\"薪资相关\"><a href=\"#薪资相关\" class=\"headerlink\" title=\"薪资相关\"></a>薪资相关</h3><ol>\n<li><p>薪资构成</p>\n<p>基本工资+绩效工资，年终奖多少，绩效工资考核标准，是否强制考核</p>\n</li>\n<li><p>argue薪资</p>\n<ol>\n<li>工时，工时长可argue工资</li>\n<li>五险一金，目标公司五险一金低可以在工资要求补偿</li>\n<li>目前薪资，目前收入算总包（月收入+五险一金+年终奖）*1.3做心里预期</li>\n</ol>\n</li>\n</ol>\n"},{"title":"windows","date":"2024-06-19T17:53:56.000Z","_content":"\n### 快捷键\n\n* windows+[0-9]\n\n  快捷打开任务栏相关应用\n\n  ctrl + shift + [0-9] 以**管理员**权限打开\n\n* ctrl + windows + [方向键]\n\n  切换桌面\n* windows + l\n\n  锁屏\n* windows + r\n\n  运行\n* windows + d\n\n  显示桌面\n* windows + e\n\n  文件资源管理器\n\n\n### 查看端口占用\n\n使用以下命令找到占用线程的PID，进入任务管理器确定占用程序\n\n```shell\nnetstat -ano\nnetstat -aon|findstr \"8081\"\n\ntasklist|findstr \"9088\"\n```\n\n\n\n# 环境变量\n\n**立即启用方法**\n\n打开新的terminal即可","source":"_posts/沙堆/windows.md","raw":"---\ntitle: windows\ndate: 2024-06-20 01:53:56\ncategories:\ntags:\n---\n\n### 快捷键\n\n* windows+[0-9]\n\n  快捷打开任务栏相关应用\n\n  ctrl + shift + [0-9] 以**管理员**权限打开\n\n* ctrl + windows + [方向键]\n\n  切换桌面\n* windows + l\n\n  锁屏\n* windows + r\n\n  运行\n* windows + d\n\n  显示桌面\n* windows + e\n\n  文件资源管理器\n\n\n### 查看端口占用\n\n使用以下命令找到占用线程的PID，进入任务管理器确定占用程序\n\n```shell\nnetstat -ano\nnetstat -aon|findstr \"8081\"\n\ntasklist|findstr \"9088\"\n```\n\n\n\n# 环境变量\n\n**立即启用方法**\n\n打开新的terminal即可","slug":"沙堆/windows","published":1,"updated":"2024-06-19T17:54:04.468Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wnz000m7guy8f9c1wi2","content":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li><p>windows+[0-9]</p>\n<p>快捷打开任务栏相关应用</p>\n<p>ctrl + shift + [0-9] 以<strong>管理员</strong>权限打开</p>\n</li>\n<li><p>ctrl + windows + [方向键]</p>\n<p>切换桌面</p>\n</li>\n<li><p>windows + l</p>\n<p>锁屏</p>\n</li>\n<li><p>windows + r</p>\n<p>运行</p>\n</li>\n<li><p>windows + d</p>\n<p>显示桌面</p>\n</li>\n<li><p>windows + e</p>\n<p>文件资源管理器</p>\n</li>\n</ul>\n<h3 id=\"查看端口占用\"><a href=\"#查看端口占用\" class=\"headerlink\" title=\"查看端口占用\"></a>查看端口占用</h3><p>使用以下命令找到占用线程的PID，进入任务管理器确定占用程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano</span><br><span class=\"line\">netstat -aon|findstr &quot;8081&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">tasklist|findstr &quot;9088&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><p><strong>立即启用方法</strong></p>\n<p>打开新的terminal即可</p>\n","excerpt":"","more":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li><p>windows+[0-9]</p>\n<p>快捷打开任务栏相关应用</p>\n<p>ctrl + shift + [0-9] 以<strong>管理员</strong>权限打开</p>\n</li>\n<li><p>ctrl + windows + [方向键]</p>\n<p>切换桌面</p>\n</li>\n<li><p>windows + l</p>\n<p>锁屏</p>\n</li>\n<li><p>windows + r</p>\n<p>运行</p>\n</li>\n<li><p>windows + d</p>\n<p>显示桌面</p>\n</li>\n<li><p>windows + e</p>\n<p>文件资源管理器</p>\n</li>\n</ul>\n<h3 id=\"查看端口占用\"><a href=\"#查看端口占用\" class=\"headerlink\" title=\"查看端口占用\"></a>查看端口占用</h3><p>使用以下命令找到占用线程的PID，进入任务管理器确定占用程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano</span><br><span class=\"line\">netstat -aon|findstr &quot;8081&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">tasklist|findstr &quot;9088&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><p><strong>立即启用方法</strong></p>\n<p>打开新的terminal即可</p>\n"},{"title":"istore安装","date":"2024-06-19T17:04:19.000Z","_content":"\n[工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客](https://blog.csdn.net/weixin_38168694/article/details/130544422)\n\n# 问题\n\n1. img文件安装问题  \n    需要cmd引入磁盘  \n    ```shell\n    qm importdisk 100<虚拟机号> <磁盘文件路径> local-lvm\n    ```\n\n# network文件\n\n```config\nconfig interface 'loopback'\n        option device 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdc9:6f90:39f6::/48'\n\nconfig device\n        option name 'br-lan'\n        option type 'bridge'\n        list ports 'eth0'\n\nconfig interface 'lan'\n        option device 'br-lan'\n        option proto 'static'\n        option ipaddr '192.168.100.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option proto 'dhcp'\n        option device 'eth1'\n\nconfig interface 'lan1'\n        option proto 'static'\n        option device 'eth3'\n        option ipaddr '192.168.101.1'\n```","source":"_posts/软路由/istore安装.md","raw":"---\ntitle: istore安装\ndate: 2024-06-20 01:04:19\ncategories:\n  - 软路由\ntags:\n  - istore\n---\n\n[工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客](https://blog.csdn.net/weixin_38168694/article/details/130544422)\n\n# 问题\n\n1. img文件安装问题  \n    需要cmd引入磁盘  \n    ```shell\n    qm importdisk 100<虚拟机号> <磁盘文件路径> local-lvm\n    ```\n\n# network文件\n\n```config\nconfig interface 'loopback'\n        option device 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdc9:6f90:39f6::/48'\n\nconfig device\n        option name 'br-lan'\n        option type 'bridge'\n        list ports 'eth0'\n\nconfig interface 'lan'\n        option device 'br-lan'\n        option proto 'static'\n        option ipaddr '192.168.100.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option proto 'dhcp'\n        option device 'eth1'\n\nconfig interface 'lan1'\n        option proto 'static'\n        option device 'eth3'\n        option ipaddr '192.168.101.1'\n```","slug":"软路由/istore安装","published":1,"updated":"2024-06-19T17:07:00.737Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo2000p7guy1xzx5d24","content":"<p><a href=\"https://blog.csdn.net/weixin_38168694/article/details/130544422\">工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>img文件安装问题<br> 需要cmd引入磁盘   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qm importdisk 100&lt;虚拟机号&gt; &lt;磁盘文件路径&gt; local-lvm</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"network文件\"><a href=\"#network文件\" class=\"headerlink\" title=\"network文件\"></a>network文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#x27;loopback&#x27;</span><br><span class=\"line\">        option device &#x27;lo&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#x27;globals&#x27;</span><br><span class=\"line\">        option ula_prefix &#x27;fdc9:6f90:39f6::/48&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config device</span><br><span class=\"line\">        option name &#x27;br-lan&#x27;</span><br><span class=\"line\">        option type &#x27;bridge&#x27;</span><br><span class=\"line\">        list ports &#x27;eth0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan&#x27;</span><br><span class=\"line\">        option device &#x27;br-lan&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.100.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class=\"line\">        option ip6assign &#x27;60&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;wan&#x27;</span><br><span class=\"line\">        option proto &#x27;dhcp&#x27;</span><br><span class=\"line\">        option device &#x27;eth1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan1&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option device &#x27;eth3&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.101.1&#x27;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p><a href=\"https://blog.csdn.net/weixin_38168694/article/details/130544422\">工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>img文件安装问题<br> 需要cmd引入磁盘   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qm importdisk 100&lt;虚拟机号&gt; &lt;磁盘文件路径&gt; local-lvm</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"network文件\"><a href=\"#network文件\" class=\"headerlink\" title=\"network文件\"></a>network文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#x27;loopback&#x27;</span><br><span class=\"line\">        option device &#x27;lo&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#x27;globals&#x27;</span><br><span class=\"line\">        option ula_prefix &#x27;fdc9:6f90:39f6::/48&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config device</span><br><span class=\"line\">        option name &#x27;br-lan&#x27;</span><br><span class=\"line\">        option type &#x27;bridge&#x27;</span><br><span class=\"line\">        list ports &#x27;eth0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan&#x27;</span><br><span class=\"line\">        option device &#x27;br-lan&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.100.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class=\"line\">        option ip6assign &#x27;60&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;wan&#x27;</span><br><span class=\"line\">        option proto &#x27;dhcp&#x27;</span><br><span class=\"line\">        option device &#x27;eth1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan1&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option device &#x27;eth3&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.101.1&#x27;</span><br></pre></td></tr></table></figure>"},{"title":"trueNas","date":"2024-06-19T16:52:13.000Z","_content":"[PVE下安装Truenas Scale_NAS存储_什么值得买 (smzdm.com)](https://post.smzdm.com/p/a60mqoo0/)\n\n[基于 PVE + TrueNAS 的私有云配置流程 - 冯金伟博客园 (fengjinwei.com)](https://www.fengjinwei.com/blog-1272140.html)\n\n\troot用户不能用作分享\n\n[基于TrueNAS的简易服务器搭建——2. TrueNAS物理机设置与TrueNAS后台设置 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv18289249)\n\n\n### 挂载\n\n[linux挂载iscsi及nas网络磁盘_混沌道奴的博客-CSDN博客_linux挂载iscsi](https://blog.csdn.net/dym383140314/article/details/126986695)\n\n[TureNas+Iscsi配置共享存储系统_51CTO博客_iscsi存储和nas的区别](https://blog.51cto.com/riverxyz/4572290)","source":"_posts/软路由/trueNas.md","raw":"---\ntitle: trueNas\ndate: 2024-06-20 00:52:13\ncategories:\n  - 软路由\ntags:\n  - NAS\n---\n[PVE下安装Truenas Scale_NAS存储_什么值得买 (smzdm.com)](https://post.smzdm.com/p/a60mqoo0/)\n\n[基于 PVE + TrueNAS 的私有云配置流程 - 冯金伟博客园 (fengjinwei.com)](https://www.fengjinwei.com/blog-1272140.html)\n\n\troot用户不能用作分享\n\n[基于TrueNAS的简易服务器搭建——2. TrueNAS物理机设置与TrueNAS后台设置 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv18289249)\n\n\n### 挂载\n\n[linux挂载iscsi及nas网络磁盘_混沌道奴的博客-CSDN博客_linux挂载iscsi](https://blog.csdn.net/dym383140314/article/details/126986695)\n\n[TureNas+Iscsi配置共享存储系统_51CTO博客_iscsi存储和nas的区别](https://blog.51cto.com/riverxyz/4572290)","slug":"软路由/trueNas","published":1,"updated":"2024-06-19T16:52:43.421Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo3000r7guy433n2nzh","content":"<p><a href=\"https://post.smzdm.com/p/a60mqoo0/\">PVE下安装Truenas Scale_NAS存储_什么值得买 (smzdm.com)</a></p>\n<p><a href=\"https://www.fengjinwei.com/blog-1272140.html\">基于 PVE + TrueNAS 的私有云配置流程 - 冯金伟博客园 (fengjinwei.com)</a></p>\n<pre><code>root用户不能用作分享\n</code></pre>\n<p><a href=\"https://www.bilibili.com/read/cv18289249\">基于TrueNAS的简易服务器搭建——2. TrueNAS物理机设置与TrueNAS后台设置 - 哔哩哔哩 (bilibili.com)</a></p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p><a href=\"https://blog.csdn.net/dym383140314/article/details/126986695\">linux挂载iscsi及nas网络磁盘_混沌道奴的博客-CSDN博客_linux挂载iscsi</a></p>\n<p><a href=\"https://blog.51cto.com/riverxyz/4572290\">TureNas+Iscsi配置共享存储系统_51CTO博客_iscsi存储和nas的区别</a></p>\n","excerpt":"","more":"<p><a href=\"https://post.smzdm.com/p/a60mqoo0/\">PVE下安装Truenas Scale_NAS存储_什么值得买 (smzdm.com)</a></p>\n<p><a href=\"https://www.fengjinwei.com/blog-1272140.html\">基于 PVE + TrueNAS 的私有云配置流程 - 冯金伟博客园 (fengjinwei.com)</a></p>\n<pre><code>root用户不能用作分享\n</code></pre>\n<p><a href=\"https://www.bilibili.com/read/cv18289249\">基于TrueNAS的简易服务器搭建——2. TrueNAS物理机设置与TrueNAS后台设置 - 哔哩哔哩 (bilibili.com)</a></p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p><a href=\"https://blog.csdn.net/dym383140314/article/details/126986695\">linux挂载iscsi及nas网络磁盘_混沌道奴的博客-CSDN博客_linux挂载iscsi</a></p>\n<p><a href=\"https://blog.51cto.com/riverxyz/4572290\">TureNas+Iscsi配置共享存储系统_51CTO博客_iscsi存储和nas的区别</a></p>\n"},{"title":"jellyfin","date":"2024-06-19T16:46:17.000Z","_content":"\n资源刮削\n\nhttps://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json\n\n\n硬件解码\n\n[N5105 4口2.5g V3 Intel i225 PVE7.2下的jellyfin硬解设置 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/580600848)\n\n首先：PVE7.2 的内核需要更新\n\n1、更新PVE内核到5.19（2022-9-13官网更新）\n\n如果你的PVE是新安装的，需要把自带的企业源更改掉，默认是需要订阅的：\n\n```text\n#删除默认的企业源\nrm /etc/apt/sources.list.d/pve-enterprise.list\n# 添加官方，非订阅源\necho 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription' >> /etc/apt/sources.list.d/pve-no-subscription.list\n```\n\n开始更新内核：（2022-9-13官网更新）\n\n```text\napt update\napt install pve-kernel-5.19\nreboot\n```\n\n查看当前使用内核\n\n```text\nuname -a\n```\n\n2、补全PVE缺少的915 guc huc dmc固件\n\n```text\nmkdir -p /lib/firmware/i915 && cd /lib/firmware/i915\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_guc_70.1.1.bin\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_huc_9.0.0.bin\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/icl_dmc_ver1_09.bin\n```\n\n3、lxc模板安装debian 11，完成后不要启动\n\n![](https://pic2.zhimg.com/80/v2-041fdaf6e5551baf30e00082392f2b2d_720w.webp)\n\n![](https://pic1.zhimg.com/80/v2-7dfe53119a7678365fb936a456a22898_720w.webp)\n\n![](https://pic2.zhimg.com/80/v2-f4faaf69c7e8a20e8cd9f2bbda8cbdf9_720w.webp)\n\n4、在宿主PVE节点下指派核显给lxc下的debian（可以用finalshell或者PVE自己的shell命令工具）\n\n查看核显（PVE宿主机的核显）\n\n```text\nls -l /dev/dri\n```\n\n正常情况下，你会看到反馈：\n\n```text\ntotal 0\ndrwxrwxrwx 2 root root         80 Nov  4 16:28 by-path\ncrwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0\ncrwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128\n```\n\n编辑LXC容器的config文件：\n\n```text\nnano /etc/pve/lxc/101.conf  #这里101.conf的101是根据你自己的虚拟机序号来的，如下图，你自己是多少就改成多少。\n```\n\n![](https://pic4.zhimg.com/80/v2-bbac35898eee8ea8a7ae5d9500ebbc63_720w.webp)\n\n```text\n#在打开的101.conf文件的最下方添加以下命令，把核显赋权给虚拟机\nlxc.cgroup2.devices.allow: c 226:0 rwm\nlxc.cgroup2.devices.allow: c 226:128 rwm\nlxc.cgroup2.devices.allow: c 29:0 rwm\nlxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir\nlxc.mount.entry: /dev/fb0 dev/fb0 none bind,optional,create=file\nlxc.apparmor.profile: unconfined\n```\n\n编辑 i915.conf文件，打开intle低压cpu的硬解参数\n\n```text\nnano /etc/modprobe.d/i915.conf\n\n#打开后是空文件，直接复制黏贴一下内容\noptions i915 enable_guc=3   #这里的值设置成2也可以\nctrl+x，y，enter            #nano的保存退出\n```\n\n5、PVE开机自动赋权给核显及解码器\n\n```text\nnano /lib/systemd/system/rc-local.service\n```\n\n文件尾部加入\n\n```text\n[Install]\nWantedBy=multi-user.target\n```\n\n创建开始脚本\n\n```text\ncat <<EOF >/etc/rc.local\n#!/bin/sh -e\n#\n#rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits\n#\n# By default this script does nothing.**\nchmod 777 /dev/dri/*\nexit 0\nEOF\n```\n\n给脚本赋权限\n\n```text\nchmod +x /etc/rc.local\n```\n\n然后启动服务\n\n```text\nsystemctl enable rc-local.service\n```\n\n6，接着开启LXC的虚拟机（用PVE自带的Shell工具，输入刚才的root账号和密码登录）\n\n检查核显有没有正确的传递过来：\n\n```text\nls -l /dev/dri\n```\n\n如果看到和宿主机PVE一样的代码：那就说明核显已经顺利的接入进来了，为下一步开启硬解打开了大门\n\n```text\ntotal 0\ndrwxrwxrwx 2 root root         80 Nov  4 16:28 by-path\ncrwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0\ncrwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128\n```\n\n升级一下Debian的系统\n\n```text\napt update\napt upgrade -y\n```\n\n7，开始安装jellyfin\n\n```text\napt install extrepo\nextrepo enable jellyfin\napt update\napt install jellyfin\n#查看\nservice jellyfin status\n#重启\nsystemctl restart jellyfin\n#停止\n/etc/init.d/jellyfin stop\n```\n\n这个时候，浏览器输入你的LXC虚拟机的IP地址+8096的端口号，就可以看到jellyfin的登录界面了，第一次登录需要设置管理员的用户名和密码\n\n![](https://pic2.zhimg.com/80/v2-0f9c54da000d6b2a3e04169ae15602fd_720w.webp)\n\n8，到这边开始，jellyfin的安装和硬解的准备工作都已经完成。\n\n接着开始挂载远程NAS的媒体文件夹，为jellyfin添加媒体资料库，这里面有最重要的一点，**先把你的LXC虚拟机给关了，要不然试了好几次，容器启动不了了。**\n\n**关机Debian虚拟机。**\n\n9，开始做媒体资料库的映射，这里分两步走：\n\na，先把NAS里的媒体库映射到PVE的宿主机里\n\n![](https://pic3.zhimg.com/80/v2-e7082377ab90a5cff2c3616ed9e1cb4e_720w.webp)\n\nb，接着把宿主机挂载的远程NAS媒体文件夹映射到LXC的Debian虚拟机里面。用一条命令来实现：（这是在PVE的Shell里面进行的）\n\n```text\npct set 101 -mp0 /mnt/pve/media,mp=/mnt/media\n\n#稍微解释一下，这里的101就是你之前虚拟机的号码，上面已经讲过了。后的-mp0是命令，做映射。/mnt/pve/media是PVE挂载的NAS文件夹，\n#/mnt/media是映射到Debian的文件夹的位置。\n#这条命令，相当于是在101.conf的文件里添加了一条 -mp0 /mnt/pve/media,mp=/mnt/media 启动命令\n#可以nano /etc/pve/lxc/101.conf查看一下\n```\n\nc，检查没问题后，开机Debian\n\n进入Shell，输入root用户名和密码\n\n```text\ncd /mnt            #进入mnt文件夹\nls                 #查看media文件夹有没有被正确的映射过来\nls -l /dev/dri     #查看核显有没有正确的映射过来\n```\n\n10，一切都没有问题\n\n登录Jellyfin后台 Debian的IP+8096端口号，输入刚才设置的用户名+密码\n\n开始Jellyfin的配置，\n\n此文略过了，记得在播放设置里打开硬件解码，选择QSV\n\n![](https://pic1.zhimg.com/80/v2-aa5132a847a9dc7679087e5fab193da0_720w.webp)\n\n有问题可以发邮件咨询：[szbaohuang@163.com](mailto:szbaohuang@163.com)","source":"_posts/软路由/jellyfin.md","raw":"---\ntitle: jellyfin\ndate: 2024-06-20 00:46:17\ncategories:\n  - 软路由\ntags:\n  - 软路由\n  - 家庭影院\n---\n\n资源刮削\n\nhttps://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json\n\n\n硬件解码\n\n[N5105 4口2.5g V3 Intel i225 PVE7.2下的jellyfin硬解设置 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/580600848)\n\n首先：PVE7.2 的内核需要更新\n\n1、更新PVE内核到5.19（2022-9-13官网更新）\n\n如果你的PVE是新安装的，需要把自带的企业源更改掉，默认是需要订阅的：\n\n```text\n#删除默认的企业源\nrm /etc/apt/sources.list.d/pve-enterprise.list\n# 添加官方，非订阅源\necho 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription' >> /etc/apt/sources.list.d/pve-no-subscription.list\n```\n\n开始更新内核：（2022-9-13官网更新）\n\n```text\napt update\napt install pve-kernel-5.19\nreboot\n```\n\n查看当前使用内核\n\n```text\nuname -a\n```\n\n2、补全PVE缺少的915 guc huc dmc固件\n\n```text\nmkdir -p /lib/firmware/i915 && cd /lib/firmware/i915\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_guc_70.1.1.bin\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_huc_9.0.0.bin\ncurl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/icl_dmc_ver1_09.bin\n```\n\n3、lxc模板安装debian 11，完成后不要启动\n\n![](https://pic2.zhimg.com/80/v2-041fdaf6e5551baf30e00082392f2b2d_720w.webp)\n\n![](https://pic1.zhimg.com/80/v2-7dfe53119a7678365fb936a456a22898_720w.webp)\n\n![](https://pic2.zhimg.com/80/v2-f4faaf69c7e8a20e8cd9f2bbda8cbdf9_720w.webp)\n\n4、在宿主PVE节点下指派核显给lxc下的debian（可以用finalshell或者PVE自己的shell命令工具）\n\n查看核显（PVE宿主机的核显）\n\n```text\nls -l /dev/dri\n```\n\n正常情况下，你会看到反馈：\n\n```text\ntotal 0\ndrwxrwxrwx 2 root root         80 Nov  4 16:28 by-path\ncrwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0\ncrwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128\n```\n\n编辑LXC容器的config文件：\n\n```text\nnano /etc/pve/lxc/101.conf  #这里101.conf的101是根据你自己的虚拟机序号来的，如下图，你自己是多少就改成多少。\n```\n\n![](https://pic4.zhimg.com/80/v2-bbac35898eee8ea8a7ae5d9500ebbc63_720w.webp)\n\n```text\n#在打开的101.conf文件的最下方添加以下命令，把核显赋权给虚拟机\nlxc.cgroup2.devices.allow: c 226:0 rwm\nlxc.cgroup2.devices.allow: c 226:128 rwm\nlxc.cgroup2.devices.allow: c 29:0 rwm\nlxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir\nlxc.mount.entry: /dev/fb0 dev/fb0 none bind,optional,create=file\nlxc.apparmor.profile: unconfined\n```\n\n编辑 i915.conf文件，打开intle低压cpu的硬解参数\n\n```text\nnano /etc/modprobe.d/i915.conf\n\n#打开后是空文件，直接复制黏贴一下内容\noptions i915 enable_guc=3   #这里的值设置成2也可以\nctrl+x，y，enter            #nano的保存退出\n```\n\n5、PVE开机自动赋权给核显及解码器\n\n```text\nnano /lib/systemd/system/rc-local.service\n```\n\n文件尾部加入\n\n```text\n[Install]\nWantedBy=multi-user.target\n```\n\n创建开始脚本\n\n```text\ncat <<EOF >/etc/rc.local\n#!/bin/sh -e\n#\n#rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits\n#\n# By default this script does nothing.**\nchmod 777 /dev/dri/*\nexit 0\nEOF\n```\n\n给脚本赋权限\n\n```text\nchmod +x /etc/rc.local\n```\n\n然后启动服务\n\n```text\nsystemctl enable rc-local.service\n```\n\n6，接着开启LXC的虚拟机（用PVE自带的Shell工具，输入刚才的root账号和密码登录）\n\n检查核显有没有正确的传递过来：\n\n```text\nls -l /dev/dri\n```\n\n如果看到和宿主机PVE一样的代码：那就说明核显已经顺利的接入进来了，为下一步开启硬解打开了大门\n\n```text\ntotal 0\ndrwxrwxrwx 2 root root         80 Nov  4 16:28 by-path\ncrwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0\ncrwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128\n```\n\n升级一下Debian的系统\n\n```text\napt update\napt upgrade -y\n```\n\n7，开始安装jellyfin\n\n```text\napt install extrepo\nextrepo enable jellyfin\napt update\napt install jellyfin\n#查看\nservice jellyfin status\n#重启\nsystemctl restart jellyfin\n#停止\n/etc/init.d/jellyfin stop\n```\n\n这个时候，浏览器输入你的LXC虚拟机的IP地址+8096的端口号，就可以看到jellyfin的登录界面了，第一次登录需要设置管理员的用户名和密码\n\n![](https://pic2.zhimg.com/80/v2-0f9c54da000d6b2a3e04169ae15602fd_720w.webp)\n\n8，到这边开始，jellyfin的安装和硬解的准备工作都已经完成。\n\n接着开始挂载远程NAS的媒体文件夹，为jellyfin添加媒体资料库，这里面有最重要的一点，**先把你的LXC虚拟机给关了，要不然试了好几次，容器启动不了了。**\n\n**关机Debian虚拟机。**\n\n9，开始做媒体资料库的映射，这里分两步走：\n\na，先把NAS里的媒体库映射到PVE的宿主机里\n\n![](https://pic3.zhimg.com/80/v2-e7082377ab90a5cff2c3616ed9e1cb4e_720w.webp)\n\nb，接着把宿主机挂载的远程NAS媒体文件夹映射到LXC的Debian虚拟机里面。用一条命令来实现：（这是在PVE的Shell里面进行的）\n\n```text\npct set 101 -mp0 /mnt/pve/media,mp=/mnt/media\n\n#稍微解释一下，这里的101就是你之前虚拟机的号码，上面已经讲过了。后的-mp0是命令，做映射。/mnt/pve/media是PVE挂载的NAS文件夹，\n#/mnt/media是映射到Debian的文件夹的位置。\n#这条命令，相当于是在101.conf的文件里添加了一条 -mp0 /mnt/pve/media,mp=/mnt/media 启动命令\n#可以nano /etc/pve/lxc/101.conf查看一下\n```\n\nc，检查没问题后，开机Debian\n\n进入Shell，输入root用户名和密码\n\n```text\ncd /mnt            #进入mnt文件夹\nls                 #查看media文件夹有没有被正确的映射过来\nls -l /dev/dri     #查看核显有没有正确的映射过来\n```\n\n10，一切都没有问题\n\n登录Jellyfin后台 Debian的IP+8096端口号，输入刚才设置的用户名+密码\n\n开始Jellyfin的配置，\n\n此文略过了，记得在播放设置里打开硬件解码，选择QSV\n\n![](https://pic1.zhimg.com/80/v2-aa5132a847a9dc7679087e5fab193da0_720w.webp)\n\n有问题可以发邮件咨询：[szbaohuang@163.com](mailto:szbaohuang@163.com)","slug":"软路由/jellyfin","published":1,"updated":"2024-06-19T16:49:26.742Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo3000u7guyfq6pg13k","content":"<p>资源刮削</p>\n<p><a href=\"https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json\">https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json</a></p>\n<p>硬件解码</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/580600848\">N5105 4口2.5g V3 Intel i225 PVE7.2下的jellyfin硬解设置 - 知乎 (zhihu.com)</a></p>\n<p>首先：PVE7.2 的内核需要更新</p>\n<p>1、更新PVE内核到5.19（2022-9-13官网更新）</p>\n<p>如果你的PVE是新安装的，需要把自带的企业源更改掉，默认是需要订阅的：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除默认的企业源</span><br><span class=\"line\">rm /etc/apt/sources.list.d/pve-enterprise.list</span><br><span class=\"line\"># 添加官方，非订阅源</span><br><span class=\"line\">echo &#x27;deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription&#x27; &gt;&gt; /etc/apt/sources.list.d/pve-no-subscription.list</span><br></pre></td></tr></table></figure>\n\n<p>开始更新内核：（2022-9-13官网更新）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt install pve-kernel-5.19</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用内核</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>2、补全PVE缺少的915 guc huc dmc固件</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /lib/firmware/i915 &amp;&amp; cd /lib/firmware/i915</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_guc_70.1.1.bin</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_huc_9.0.0.bin</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/icl_dmc_ver1_09.bin</span><br></pre></td></tr></table></figure>\n\n<p>3、lxc模板安装debian 11，完成后不要启动</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-041fdaf6e5551baf30e00082392f2b2d_720w.webp\"></p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7dfe53119a7678365fb936a456a22898_720w.webp\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-f4faaf69c7e8a20e8cd9f2bbda8cbdf9_720w.webp\"></p>\n<p>4、在宿主PVE节点下指派核显给lxc下的debian（可以用finalshell或者PVE自己的shell命令工具）</p>\n<p>查看核显（PVE宿主机的核显）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/dri</span><br></pre></td></tr></table></figure>\n\n<p>正常情况下，你会看到反馈：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx 2 root root         80 Nov  4 16:28 by-path</span><br><span class=\"line\">crwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0</span><br><span class=\"line\">crwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128</span><br></pre></td></tr></table></figure>\n\n<p>编辑LXC容器的config文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/pve/lxc/101.conf  #这里101.conf的101是根据你自己的虚拟机序号来的，如下图，你自己是多少就改成多少。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-bbac35898eee8ea8a7ae5d9500ebbc63_720w.webp\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在打开的101.conf文件的最下方添加以下命令，把核显赋权给虚拟机</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 226:0 rwm</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 226:128 rwm</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 29:0 rwm</span><br><span class=\"line\">lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir</span><br><span class=\"line\">lxc.mount.entry: /dev/fb0 dev/fb0 none bind,optional,create=file</span><br><span class=\"line\">lxc.apparmor.profile: unconfined</span><br></pre></td></tr></table></figure>\n\n<p>编辑 i915.conf文件，打开intle低压cpu的硬解参数</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/modprobe.d/i915.conf</span><br><span class=\"line\"></span><br><span class=\"line\">#打开后是空文件，直接复制黏贴一下内容</span><br><span class=\"line\">options i915 enable_guc=3   #这里的值设置成2也可以</span><br><span class=\"line\">ctrl+x，y，enter            #nano的保存退出</span><br></pre></td></tr></table></figure>\n\n<p>5、PVE开机自动赋权给核显及解码器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>\n\n<p>文件尾部加入</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>创建开始脚本</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt;/etc/rc.local</span><br><span class=\"line\">#!/bin/sh -e</span><br><span class=\"line\">#</span><br><span class=\"line\">#rc.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script is executed at the end of each multiuser runlevel.</span><br><span class=\"line\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class=\"line\"># value on error.</span><br><span class=\"line\">#</span><br><span class=\"line\"># In order to enable or disable this script just change the execution</span><br><span class=\"line\"># bits</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default this script does nothing.**</span><br><span class=\"line\">chmod 777 /dev/dri/*</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>给脚本赋权限</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>然后启动服务</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rc-local.service</span><br></pre></td></tr></table></figure>\n\n<p>6，接着开启LXC的虚拟机（用PVE自带的Shell工具，输入刚才的root账号和密码登录）</p>\n<p>检查核显有没有正确的传递过来：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/dri</span><br></pre></td></tr></table></figure>\n\n<p>如果看到和宿主机PVE一样的代码：那就说明核显已经顺利的接入进来了，为下一步开启硬解打开了大门</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx 2 root root         80 Nov  4 16:28 by-path</span><br><span class=\"line\">crwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0</span><br><span class=\"line\">crwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128</span><br></pre></td></tr></table></figure>\n\n<p>升级一下Debian的系统</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt upgrade -y</span><br></pre></td></tr></table></figure>\n\n<p>7，开始安装jellyfin</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install extrepo</span><br><span class=\"line\">extrepo enable jellyfin</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install jellyfin</span><br><span class=\"line\">#查看</span><br><span class=\"line\">service jellyfin status</span><br><span class=\"line\">#重启</span><br><span class=\"line\">systemctl restart jellyfin</span><br><span class=\"line\">#停止</span><br><span class=\"line\">/etc/init.d/jellyfin stop</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，浏览器输入你的LXC虚拟机的IP地址+8096的端口号，就可以看到jellyfin的登录界面了，第一次登录需要设置管理员的用户名和密码</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0f9c54da000d6b2a3e04169ae15602fd_720w.webp\"></p>\n<p>8，到这边开始，jellyfin的安装和硬解的准备工作都已经完成。</p>\n<p>接着开始挂载远程NAS的媒体文件夹，为jellyfin添加媒体资料库，这里面有最重要的一点，<strong>先把你的LXC虚拟机给关了，要不然试了好几次，容器启动不了了。</strong></p>\n<p><strong>关机Debian虚拟机。</strong></p>\n<p>9，开始做媒体资料库的映射，这里分两步走：</p>\n<p>a，先把NAS里的媒体库映射到PVE的宿主机里</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e7082377ab90a5cff2c3616ed9e1cb4e_720w.webp\"></p>\n<p>b，接着把宿主机挂载的远程NAS媒体文件夹映射到LXC的Debian虚拟机里面。用一条命令来实现：（这是在PVE的Shell里面进行的）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pct set 101 -mp0 /mnt/pve/media,mp=/mnt/media</span><br><span class=\"line\"></span><br><span class=\"line\">#稍微解释一下，这里的101就是你之前虚拟机的号码，上面已经讲过了。后的-mp0是命令，做映射。/mnt/pve/media是PVE挂载的NAS文件夹，</span><br><span class=\"line\">#/mnt/media是映射到Debian的文件夹的位置。</span><br><span class=\"line\">#这条命令，相当于是在101.conf的文件里添加了一条 -mp0 /mnt/pve/media,mp=/mnt/media 启动命令</span><br><span class=\"line\">#可以nano /etc/pve/lxc/101.conf查看一下</span><br></pre></td></tr></table></figure>\n\n<p>c，检查没问题后，开机Debian</p>\n<p>进入Shell，输入root用户名和密码</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt            #进入mnt文件夹</span><br><span class=\"line\">ls                 #查看media文件夹有没有被正确的映射过来</span><br><span class=\"line\">ls -l /dev/dri     #查看核显有没有正确的映射过来</span><br></pre></td></tr></table></figure>\n\n<p>10，一切都没有问题</p>\n<p>登录Jellyfin后台 Debian的IP+8096端口号，输入刚才设置的用户名+密码</p>\n<p>开始Jellyfin的配置，</p>\n<p>此文略过了，记得在播放设置里打开硬件解码，选择QSV</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-aa5132a847a9dc7679087e5fab193da0_720w.webp\"></p>\n<p>有问题可以发邮件咨询：<a href=\"mailto:szbaohuang@163.com\">szbaohuang@163.com</a></p>\n","excerpt":"","more":"<p>资源刮削</p>\n<p><a href=\"https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json\">https://mirror.ghproxy.com/https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest_cn.json</a></p>\n<p>硬件解码</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/580600848\">N5105 4口2.5g V3 Intel i225 PVE7.2下的jellyfin硬解设置 - 知乎 (zhihu.com)</a></p>\n<p>首先：PVE7.2 的内核需要更新</p>\n<p>1、更新PVE内核到5.19（2022-9-13官网更新）</p>\n<p>如果你的PVE是新安装的，需要把自带的企业源更改掉，默认是需要订阅的：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除默认的企业源</span><br><span class=\"line\">rm /etc/apt/sources.list.d/pve-enterprise.list</span><br><span class=\"line\"># 添加官方，非订阅源</span><br><span class=\"line\">echo &#x27;deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription&#x27; &gt;&gt; /etc/apt/sources.list.d/pve-no-subscription.list</span><br></pre></td></tr></table></figure>\n\n<p>开始更新内核：（2022-9-13官网更新）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt install pve-kernel-5.19</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用内核</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>2、补全PVE缺少的915 guc huc dmc固件</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /lib/firmware/i915 &amp;&amp; cd /lib/firmware/i915</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_guc_70.1.1.bin</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/ehl_huc_9.0.0.bin</span><br><span class=\"line\">curl -LO https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/i915/icl_dmc_ver1_09.bin</span><br></pre></td></tr></table></figure>\n\n<p>3、lxc模板安装debian 11，完成后不要启动</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-041fdaf6e5551baf30e00082392f2b2d_720w.webp\"></p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7dfe53119a7678365fb936a456a22898_720w.webp\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-f4faaf69c7e8a20e8cd9f2bbda8cbdf9_720w.webp\"></p>\n<p>4、在宿主PVE节点下指派核显给lxc下的debian（可以用finalshell或者PVE自己的shell命令工具）</p>\n<p>查看核显（PVE宿主机的核显）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/dri</span><br></pre></td></tr></table></figure>\n\n<p>正常情况下，你会看到反馈：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx 2 root root         80 Nov  4 16:28 by-path</span><br><span class=\"line\">crwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0</span><br><span class=\"line\">crwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128</span><br></pre></td></tr></table></figure>\n\n<p>编辑LXC容器的config文件：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/pve/lxc/101.conf  #这里101.conf的101是根据你自己的虚拟机序号来的，如下图，你自己是多少就改成多少。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-bbac35898eee8ea8a7ae5d9500ebbc63_720w.webp\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在打开的101.conf文件的最下方添加以下命令，把核显赋权给虚拟机</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 226:0 rwm</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 226:128 rwm</span><br><span class=\"line\">lxc.cgroup2.devices.allow: c 29:0 rwm</span><br><span class=\"line\">lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir</span><br><span class=\"line\">lxc.mount.entry: /dev/fb0 dev/fb0 none bind,optional,create=file</span><br><span class=\"line\">lxc.apparmor.profile: unconfined</span><br></pre></td></tr></table></figure>\n\n<p>编辑 i915.conf文件，打开intle低压cpu的硬解参数</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/modprobe.d/i915.conf</span><br><span class=\"line\"></span><br><span class=\"line\">#打开后是空文件，直接复制黏贴一下内容</span><br><span class=\"line\">options i915 enable_guc=3   #这里的值设置成2也可以</span><br><span class=\"line\">ctrl+x，y，enter            #nano的保存退出</span><br></pre></td></tr></table></figure>\n\n<p>5、PVE开机自动赋权给核显及解码器</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /lib/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>\n\n<p>文件尾部加入</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>创建开始脚本</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt;/etc/rc.local</span><br><span class=\"line\">#!/bin/sh -e</span><br><span class=\"line\">#</span><br><span class=\"line\">#rc.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script is executed at the end of each multiuser runlevel.</span><br><span class=\"line\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class=\"line\"># value on error.</span><br><span class=\"line\">#</span><br><span class=\"line\"># In order to enable or disable this script just change the execution</span><br><span class=\"line\"># bits</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default this script does nothing.**</span><br><span class=\"line\">chmod 777 /dev/dri/*</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>给脚本赋权限</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>然后启动服务</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rc-local.service</span><br></pre></td></tr></table></figure>\n\n<p>6，接着开启LXC的虚拟机（用PVE自带的Shell工具，输入刚才的root账号和密码登录）</p>\n<p>检查核显有没有正确的传递过来：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/dri</span><br></pre></td></tr></table></figure>\n\n<p>如果看到和宿主机PVE一样的代码：那就说明核显已经顺利的接入进来了，为下一步开启硬解打开了大门</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx 2 root root         80 Nov  4 16:28 by-path</span><br><span class=\"line\">crwxrwxrwx 1 root video  226,   0 Nov  4 16:28 card0</span><br><span class=\"line\">crwxrwxrwx 1 root render 226, 128 Nov  4 16:28 renderD128</span><br></pre></td></tr></table></figure>\n\n<p>升级一下Debian的系统</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt upgrade -y</span><br></pre></td></tr></table></figure>\n\n<p>7，开始安装jellyfin</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install extrepo</span><br><span class=\"line\">extrepo enable jellyfin</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install jellyfin</span><br><span class=\"line\">#查看</span><br><span class=\"line\">service jellyfin status</span><br><span class=\"line\">#重启</span><br><span class=\"line\">systemctl restart jellyfin</span><br><span class=\"line\">#停止</span><br><span class=\"line\">/etc/init.d/jellyfin stop</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，浏览器输入你的LXC虚拟机的IP地址+8096的端口号，就可以看到jellyfin的登录界面了，第一次登录需要设置管理员的用户名和密码</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0f9c54da000d6b2a3e04169ae15602fd_720w.webp\"></p>\n<p>8，到这边开始，jellyfin的安装和硬解的准备工作都已经完成。</p>\n<p>接着开始挂载远程NAS的媒体文件夹，为jellyfin添加媒体资料库，这里面有最重要的一点，<strong>先把你的LXC虚拟机给关了，要不然试了好几次，容器启动不了了。</strong></p>\n<p><strong>关机Debian虚拟机。</strong></p>\n<p>9，开始做媒体资料库的映射，这里分两步走：</p>\n<p>a，先把NAS里的媒体库映射到PVE的宿主机里</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e7082377ab90a5cff2c3616ed9e1cb4e_720w.webp\"></p>\n<p>b，接着把宿主机挂载的远程NAS媒体文件夹映射到LXC的Debian虚拟机里面。用一条命令来实现：（这是在PVE的Shell里面进行的）</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pct set 101 -mp0 /mnt/pve/media,mp=/mnt/media</span><br><span class=\"line\"></span><br><span class=\"line\">#稍微解释一下，这里的101就是你之前虚拟机的号码，上面已经讲过了。后的-mp0是命令，做映射。/mnt/pve/media是PVE挂载的NAS文件夹，</span><br><span class=\"line\">#/mnt/media是映射到Debian的文件夹的位置。</span><br><span class=\"line\">#这条命令，相当于是在101.conf的文件里添加了一条 -mp0 /mnt/pve/media,mp=/mnt/media 启动命令</span><br><span class=\"line\">#可以nano /etc/pve/lxc/101.conf查看一下</span><br></pre></td></tr></table></figure>\n\n<p>c，检查没问题后，开机Debian</p>\n<p>进入Shell，输入root用户名和密码</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt            #进入mnt文件夹</span><br><span class=\"line\">ls                 #查看media文件夹有没有被正确的映射过来</span><br><span class=\"line\">ls -l /dev/dri     #查看核显有没有正确的映射过来</span><br></pre></td></tr></table></figure>\n\n<p>10，一切都没有问题</p>\n<p>登录Jellyfin后台 Debian的IP+8096端口号，输入刚才设置的用户名+密码</p>\n<p>开始Jellyfin的配置，</p>\n<p>此文略过了，记得在播放设置里打开硬件解码，选择QSV</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-aa5132a847a9dc7679087e5fab193da0_720w.webp\"></p>\n<p>有问题可以发邮件咨询：<a href=\"mailto:szbaohuang@163.com\">szbaohuang@163.com</a></p>\n"},{"title":"软路由","date":"2024-06-19T16:43:28.000Z","_content":"\n### 点心云\n\n[闲置带宽赚网费实现睡后收入？你的软路由还只是软路由么（当软路由遇上点心云~） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/501752702)\n\n### 甜糖\n\n[[2021-03-05]软路由赚钱之ESXi+PVE/上跑X86甜糖docker/一键导入，小白懒人专属-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)](https://www.right.com.cn/forum/thread-4063192-1-1.html)\n\n\n# 配置\n\n[倍控N5105软路由安装Exsi7.0+Openwrt+ikuai - 一枝梅的技术收录 (kdyzm.cn)](http://blog.kdyzm.cn/post/122)\n\n### Esxi安装\n\n[vSphere ESXI 7.0镜像 Rufus U盘安装盘制作(Windows)含镜像下载 - Hewitt Blog (qiaohewei.cc)](https://blog.qiaohewei.cc/2020/07/29/esxi7_install_disk/)\n\n[安装VMware ESXi 软路由N5105小主机I225四个2.5G网口ESXI-7.0U3E-19898904-i225.iso (wanuse.com)](https://www.wanuse.com/2022/08/vmware-esxi-n5105i22525gesxi-70u3e.html)\n\n许可\n\n> 五组许可证：\n>\n> JA0W8-AX216-08E19-A995H-1PHH2\n>\n> JU45H-6PHD4-481T1-5C37P-1FKQ2\n>\n> 1U25H-DV05N-H81Y8-7LA7P-8P0N4\n>\n> HV49K-8G013-H8528-P09X6-A220A\n>\n> 1G6DU-4LJ1K-48451-3T0X6-3G2MD\n>\n> 5U4TK-DML1M-M8550-XK1QP-1A052\n\n### 硬件转码\n\n[N5105 软路由安装 ESXi 7 直通核显给 Debian / Ubuntu 虚拟机通过 Docker 实现 jellyfin 硬件转码视频文件（硬解/编码）_aoeii的博客-CSDN博客_esxi直通核显](https://blog.csdn.net/aoeii/article/details/125834294)\n\n\n### ikuai安装配置\n\n[ESXi安装爱快iKuai OS路由 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv8888842/)\n\n#### adguard\n\nclash 附带拦截作用，clash订阅合理不应单独装\n\n[爱快软路由使用docker安装AdGuardHome去广告 - 简书 (jianshu.com)](https://www.jianshu.com/p/2d0eb05d42a2)\n\n[清爽无广告—Adguardhome应用篇（12月5日更新IPv6远程访问爱快-群晖docker） - 科技玩家 (kejiwanjia.com)](https://www.kejiwanjia.com/jiaocheng/48952.html/comment-page-5)包含自定义规则\n\n\n### 无线路由设置\n\n无线路由设置“有线中继”模式，wan 连接上级网络 lan 口，上级网络配置DHCP服务\n\n\n### 虚拟机间网络\n\n虚拟机间需要配置虚拟网络`VM Network`,来互相连接，提前定好各个虚拟设备ip，一般网关为`x.x.x.1`","source":"_posts/软路由/软路由.md","raw":"---\ntitle: 软路由\ndate: 2024-06-20 00:43:28\ncategories:\n  - 软路由\ntags:\n  - 软路由\n---\n\n### 点心云\n\n[闲置带宽赚网费实现睡后收入？你的软路由还只是软路由么（当软路由遇上点心云~） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/501752702)\n\n### 甜糖\n\n[[2021-03-05]软路由赚钱之ESXi+PVE/上跑X86甜糖docker/一键导入，小白懒人专属-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)](https://www.right.com.cn/forum/thread-4063192-1-1.html)\n\n\n# 配置\n\n[倍控N5105软路由安装Exsi7.0+Openwrt+ikuai - 一枝梅的技术收录 (kdyzm.cn)](http://blog.kdyzm.cn/post/122)\n\n### Esxi安装\n\n[vSphere ESXI 7.0镜像 Rufus U盘安装盘制作(Windows)含镜像下载 - Hewitt Blog (qiaohewei.cc)](https://blog.qiaohewei.cc/2020/07/29/esxi7_install_disk/)\n\n[安装VMware ESXi 软路由N5105小主机I225四个2.5G网口ESXI-7.0U3E-19898904-i225.iso (wanuse.com)](https://www.wanuse.com/2022/08/vmware-esxi-n5105i22525gesxi-70u3e.html)\n\n许可\n\n> 五组许可证：\n>\n> JA0W8-AX216-08E19-A995H-1PHH2\n>\n> JU45H-6PHD4-481T1-5C37P-1FKQ2\n>\n> 1U25H-DV05N-H81Y8-7LA7P-8P0N4\n>\n> HV49K-8G013-H8528-P09X6-A220A\n>\n> 1G6DU-4LJ1K-48451-3T0X6-3G2MD\n>\n> 5U4TK-DML1M-M8550-XK1QP-1A052\n\n### 硬件转码\n\n[N5105 软路由安装 ESXi 7 直通核显给 Debian / Ubuntu 虚拟机通过 Docker 实现 jellyfin 硬件转码视频文件（硬解/编码）_aoeii的博客-CSDN博客_esxi直通核显](https://blog.csdn.net/aoeii/article/details/125834294)\n\n\n### ikuai安装配置\n\n[ESXi安装爱快iKuai OS路由 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv8888842/)\n\n#### adguard\n\nclash 附带拦截作用，clash订阅合理不应单独装\n\n[爱快软路由使用docker安装AdGuardHome去广告 - 简书 (jianshu.com)](https://www.jianshu.com/p/2d0eb05d42a2)\n\n[清爽无广告—Adguardhome应用篇（12月5日更新IPv6远程访问爱快-群晖docker） - 科技玩家 (kejiwanjia.com)](https://www.kejiwanjia.com/jiaocheng/48952.html/comment-page-5)包含自定义规则\n\n\n### 无线路由设置\n\n无线路由设置“有线中继”模式，wan 连接上级网络 lan 口，上级网络配置DHCP服务\n\n\n### 虚拟机间网络\n\n虚拟机间需要配置虚拟网络`VM Network`,来互相连接，提前定好各个虚拟设备ip，一般网关为`x.x.x.1`","slug":"软路由/软路由","published":1,"updated":"2024-06-19T16:44:49.269Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo4000w7guybc6fcyvs","content":"<h3 id=\"点心云\"><a href=\"#点心云\" class=\"headerlink\" title=\"点心云\"></a>点心云</h3><p><a href=\"https://zhuanlan.zhihu.com/p/501752702\">闲置带宽赚网费实现睡后收入？你的软路由还只是软路由么（当软路由遇上点心云~） - 知乎 (zhihu.com)</a></p>\n<h3 id=\"甜糖\"><a href=\"#甜糖\" class=\"headerlink\" title=\"甜糖\"></a>甜糖</h3><p><a href=\"https://www.right.com.cn/forum/thread-4063192-1-1.html\">[2021-03-05]软路由赚钱之ESXi+PVE&#x2F;上跑X86甜糖docker&#x2F;一键导入，小白懒人专属-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><a href=\"http://blog.kdyzm.cn/post/122\">倍控N5105软路由安装Exsi7.0+Openwrt+ikuai - 一枝梅的技术收录 (kdyzm.cn)</a></p>\n<h3 id=\"Esxi安装\"><a href=\"#Esxi安装\" class=\"headerlink\" title=\"Esxi安装\"></a>Esxi安装</h3><p><a href=\"https://blog.qiaohewei.cc/2020/07/29/esxi7_install_disk/\">vSphere ESXI 7.0镜像 Rufus U盘安装盘制作(Windows)含镜像下载 - Hewitt Blog (qiaohewei.cc)</a></p>\n<p><a href=\"https://www.wanuse.com/2022/08/vmware-esxi-n5105i22525gesxi-70u3e.html\">安装VMware ESXi 软路由N5105小主机I225四个2.5G网口ESXI-7.0U3E-19898904-i225.iso (wanuse.com)</a></p>\n<p>许可</p>\n<blockquote>\n<p>五组许可证：</p>\n<p>JA0W8-AX216-08E19-A995H-1PHH2</p>\n<p>JU45H-6PHD4-481T1-5C37P-1FKQ2</p>\n<p>1U25H-DV05N-H81Y8-7LA7P-8P0N4</p>\n<p>HV49K-8G013-H8528-P09X6-A220A</p>\n<p>1G6DU-4LJ1K-48451-3T0X6-3G2MD</p>\n<p>5U4TK-DML1M-M8550-XK1QP-1A052</p>\n</blockquote>\n<h3 id=\"硬件转码\"><a href=\"#硬件转码\" class=\"headerlink\" title=\"硬件转码\"></a>硬件转码</h3><p><a href=\"https://blog.csdn.net/aoeii/article/details/125834294\">N5105 软路由安装 ESXi 7 直通核显给 Debian &#x2F; Ubuntu 虚拟机通过 Docker 实现 jellyfin 硬件转码视频文件（硬解&#x2F;编码）_aoeii的博客-CSDN博客_esxi直通核显</a></p>\n<h3 id=\"ikuai安装配置\"><a href=\"#ikuai安装配置\" class=\"headerlink\" title=\"ikuai安装配置\"></a>ikuai安装配置</h3><p><a href=\"https://www.bilibili.com/read/cv8888842/\">ESXi安装爱快iKuai OS路由 - 哔哩哔哩 (bilibili.com)</a></p>\n<h4 id=\"adguard\"><a href=\"#adguard\" class=\"headerlink\" title=\"adguard\"></a>adguard</h4><p>clash 附带拦截作用，clash订阅合理不应单独装</p>\n<p><a href=\"https://www.jianshu.com/p/2d0eb05d42a2\">爱快软路由使用docker安装AdGuardHome去广告 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.kejiwanjia.com/jiaocheng/48952.html/comment-page-5\">清爽无广告—Adguardhome应用篇（12月5日更新IPv6远程访问爱快-群晖docker） - 科技玩家 (kejiwanjia.com)</a>包含自定义规则</p>\n<h3 id=\"无线路由设置\"><a href=\"#无线路由设置\" class=\"headerlink\" title=\"无线路由设置\"></a>无线路由设置</h3><p>无线路由设置“有线中继”模式，wan 连接上级网络 lan 口，上级网络配置DHCP服务</p>\n<h3 id=\"虚拟机间网络\"><a href=\"#虚拟机间网络\" class=\"headerlink\" title=\"虚拟机间网络\"></a>虚拟机间网络</h3><p>虚拟机间需要配置虚拟网络<code>VM Network</code>,来互相连接，提前定好各个虚拟设备ip，一般网关为<code>x.x.x.1</code></p>\n","excerpt":"","more":"<h3 id=\"点心云\"><a href=\"#点心云\" class=\"headerlink\" title=\"点心云\"></a>点心云</h3><p><a href=\"https://zhuanlan.zhihu.com/p/501752702\">闲置带宽赚网费实现睡后收入？你的软路由还只是软路由么（当软路由遇上点心云~） - 知乎 (zhihu.com)</a></p>\n<h3 id=\"甜糖\"><a href=\"#甜糖\" class=\"headerlink\" title=\"甜糖\"></a>甜糖</h3><p><a href=\"https://www.right.com.cn/forum/thread-4063192-1-1.html\">[2021-03-05]软路由赚钱之ESXi+PVE&#x2F;上跑X86甜糖docker&#x2F;一键导入，小白懒人专属-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><a href=\"http://blog.kdyzm.cn/post/122\">倍控N5105软路由安装Exsi7.0+Openwrt+ikuai - 一枝梅的技术收录 (kdyzm.cn)</a></p>\n<h3 id=\"Esxi安装\"><a href=\"#Esxi安装\" class=\"headerlink\" title=\"Esxi安装\"></a>Esxi安装</h3><p><a href=\"https://blog.qiaohewei.cc/2020/07/29/esxi7_install_disk/\">vSphere ESXI 7.0镜像 Rufus U盘安装盘制作(Windows)含镜像下载 - Hewitt Blog (qiaohewei.cc)</a></p>\n<p><a href=\"https://www.wanuse.com/2022/08/vmware-esxi-n5105i22525gesxi-70u3e.html\">安装VMware ESXi 软路由N5105小主机I225四个2.5G网口ESXI-7.0U3E-19898904-i225.iso (wanuse.com)</a></p>\n<p>许可</p>\n<blockquote>\n<p>五组许可证：</p>\n<p>JA0W8-AX216-08E19-A995H-1PHH2</p>\n<p>JU45H-6PHD4-481T1-5C37P-1FKQ2</p>\n<p>1U25H-DV05N-H81Y8-7LA7P-8P0N4</p>\n<p>HV49K-8G013-H8528-P09X6-A220A</p>\n<p>1G6DU-4LJ1K-48451-3T0X6-3G2MD</p>\n<p>5U4TK-DML1M-M8550-XK1QP-1A052</p>\n</blockquote>\n<h3 id=\"硬件转码\"><a href=\"#硬件转码\" class=\"headerlink\" title=\"硬件转码\"></a>硬件转码</h3><p><a href=\"https://blog.csdn.net/aoeii/article/details/125834294\">N5105 软路由安装 ESXi 7 直通核显给 Debian &#x2F; Ubuntu 虚拟机通过 Docker 实现 jellyfin 硬件转码视频文件（硬解&#x2F;编码）_aoeii的博客-CSDN博客_esxi直通核显</a></p>\n<h3 id=\"ikuai安装配置\"><a href=\"#ikuai安装配置\" class=\"headerlink\" title=\"ikuai安装配置\"></a>ikuai安装配置</h3><p><a href=\"https://www.bilibili.com/read/cv8888842/\">ESXi安装爱快iKuai OS路由 - 哔哩哔哩 (bilibili.com)</a></p>\n<h4 id=\"adguard\"><a href=\"#adguard\" class=\"headerlink\" title=\"adguard\"></a>adguard</h4><p>clash 附带拦截作用，clash订阅合理不应单独装</p>\n<p><a href=\"https://www.jianshu.com/p/2d0eb05d42a2\">爱快软路由使用docker安装AdGuardHome去广告 - 简书 (jianshu.com)</a></p>\n<p><a href=\"https://www.kejiwanjia.com/jiaocheng/48952.html/comment-page-5\">清爽无广告—Adguardhome应用篇（12月5日更新IPv6远程访问爱快-群晖docker） - 科技玩家 (kejiwanjia.com)</a>包含自定义规则</p>\n<h3 id=\"无线路由设置\"><a href=\"#无线路由设置\" class=\"headerlink\" title=\"无线路由设置\"></a>无线路由设置</h3><p>无线路由设置“有线中继”模式，wan 连接上级网络 lan 口，上级网络配置DHCP服务</p>\n<h3 id=\"虚拟机间网络\"><a href=\"#虚拟机间网络\" class=\"headerlink\" title=\"虚拟机间网络\"></a>虚拟机间网络</h3><p>虚拟机间需要配置虚拟网络<code>VM Network</code>,来互相连接，提前定好各个虚拟设备ip，一般网关为<code>x.x.x.1</code></p>\n"},{"title":"openclash","date":"2024-06-19T17:09:22.000Z","_content":"\n安装包时curl会遇到问题，需要禁用源下载配置的crul\n\n修复问题：\n\n```shell\nopkg update\nopkg install libcurl4\n```\n\n\n[luci-app-openclash 使用说明，配置指南 - 爱一枝梅 (iyzm.net)](https://iyzm.net/openwrt/1445.html)","source":"_posts/软路由/openclash.md","raw":"---\ntitle: openclash\ndate: 2024-06-20 01:09:22\ncategories:\n  - 软路由\ntags:\n  - clash\n---\n\n安装包时curl会遇到问题，需要禁用源下载配置的crul\n\n修复问题：\n\n```shell\nopkg update\nopkg install libcurl4\n```\n\n\n[luci-app-openclash 使用说明，配置指南 - 爱一枝梅 (iyzm.net)](https://iyzm.net/openwrt/1445.html)","slug":"软路由/openclash","published":1,"updated":"2024-06-19T17:10:07.281Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo4000z7guyfvjmd2lu","content":"<p>安装包时curl会遇到问题，需要禁用源下载配置的crul</p>\n<p>修复问题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install libcurl4</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://iyzm.net/openwrt/1445.html\">luci-app-openclash 使用说明，配置指南 - 爱一枝梅 (iyzm.net)</a></p>\n","excerpt":"","more":"<p>安装包时curl会遇到问题，需要禁用源下载配置的crul</p>\n<p>修复问题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install libcurl4</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://iyzm.net/openwrt/1445.html\">luci-app-openclash 使用说明，配置指南 - 爱一枝梅 (iyzm.net)</a></p>\n"},{"title":"网易云解锁","date":"2024-06-19T16:51:01.000Z","_content":"\nhttps://github.com/maxlicheng/luci-app-unblockmusic\n\n[maxlicheng/luci-app-unblockmusic: 用于解锁网易云灰色歌曲的OpenWRT/LEDE路由器插件 (openwrt/lede luci support for unblock neteasecloudmusic) (github.com)](https://github.com/maxlicheng/luci-app-unblockmusic)","source":"_posts/软路由/网易云解锁.md","raw":"---\ntitle: 网易云解锁\ndate: 2024-06-20 00:51:01\ncategories:\n  - 软路由\ntags:\n  - 破解\n---\n\nhttps://github.com/maxlicheng/luci-app-unblockmusic\n\n[maxlicheng/luci-app-unblockmusic: 用于解锁网易云灰色歌曲的OpenWRT/LEDE路由器插件 (openwrt/lede luci support for unblock neteasecloudmusic) (github.com)](https://github.com/maxlicheng/luci-app-unblockmusic)","slug":"软路由/网易云解锁","published":1,"updated":"2024-06-19T16:51:46.080Z","comments":1,"layout":"post","photos":[],"_id":"clxm54wo500137guyax67awe4","content":"<p><a href=\"https://github.com/maxlicheng/luci-app-unblockmusic\">https://github.com/maxlicheng/luci-app-unblockmusic</a></p>\n<p><a href=\"https://github.com/maxlicheng/luci-app-unblockmusic\">maxlicheng&#x2F;luci-app-unblockmusic: 用于解锁网易云灰色歌曲的OpenWRT&#x2F;LEDE路由器插件 (openwrt&#x2F;lede luci support for unblock neteasecloudmusic) (github.com)</a></p>\n","excerpt":"","more":"<p><a href=\"https://github.com/maxlicheng/luci-app-unblockmusic\">https://github.com/maxlicheng/luci-app-unblockmusic</a></p>\n<p><a href=\"https://github.com/maxlicheng/luci-app-unblockmusic\">maxlicheng&#x2F;luci-app-unblockmusic: 用于解锁网易云灰色歌曲的OpenWRT&#x2F;LEDE路由器插件 (openwrt&#x2F;lede luci support for unblock neteasecloudmusic) (github.com)</a></p>\n"},{"title":"笔记本电脑","date":"2024-06-19T17:54:53.000Z","_content":"\n### 类别\n\n1. 台式机\n\n   传统机箱笔记本\n\n   优点：\n\n    1. 拓展性最好，可单独对不同的场景进行针对性升级\n    2. 性价比最高，自己组装尤其性价比高\n    3. 性能表现好\n\n   缺点：\n\n   移动不方便\n2. 轻薄本\n\n   注重便携性，续航时间通常在4h以上，可以不使用电源续航较长时间，重量较低，通常为13-15英寸小屏幕，外观精致\n3. 商务本\n\n   续航时间较长，重量较低，性能略高于轻薄本，通常配备较大存储空间（1T固态），一般外出使用仍需要携带充电器\n4. 游戏本\n\n   性能较好，通常配备高刷屏幕（144盒子以上）\n\n   续航时间较短，通常2h以下，需要插电源使用，较重，通常配备15英寸以上屏幕，一般使用较大双肩背包容纳\n5. 超极本（更为注重便携性的轻薄本）\n\n   近似拥有平板效用的笔记本，功耗最低，体积最小，通常配备色域较广的屏幕\n\n\n性价比由高到低（便携性由低到高）：\n\n台式机->游戏本->商务本->轻薄本->超极本\n\n\n### 常见品牌\n\n1. 联想\n\n   国内型号被诟病加价减料，不过拯救者、小新系列口碑还好\n2. 小米\n\n   周围先后有过五六台轻薄本、游戏本，品控都还可以\n3. 华为\n4. 惠普、戴尔\n\n   老牌，口碑极佳\n5. 神州，清华同方\n\n   性价比较高，品控一般，喜好折腾可以试试\n6. surface\n\n   微软自家品牌，设计感很强，推出了很多创新的东西，好像维修不太方便，有闲钱可以尝鲜\n7. Mac\n\n   只能说用了都说好，是不是嘴硬不好说","source":"_posts/商品知识/笔记本电脑.md","raw":"---\ntitle: 笔记本电脑\ndate: 2024-06-20 01:54:53\ncategories:\n   - 商品知识\ntags:\n---\n\n### 类别\n\n1. 台式机\n\n   传统机箱笔记本\n\n   优点：\n\n    1. 拓展性最好，可单独对不同的场景进行针对性升级\n    2. 性价比最高，自己组装尤其性价比高\n    3. 性能表现好\n\n   缺点：\n\n   移动不方便\n2. 轻薄本\n\n   注重便携性，续航时间通常在4h以上，可以不使用电源续航较长时间，重量较低，通常为13-15英寸小屏幕，外观精致\n3. 商务本\n\n   续航时间较长，重量较低，性能略高于轻薄本，通常配备较大存储空间（1T固态），一般外出使用仍需要携带充电器\n4. 游戏本\n\n   性能较好，通常配备高刷屏幕（144盒子以上）\n\n   续航时间较短，通常2h以下，需要插电源使用，较重，通常配备15英寸以上屏幕，一般使用较大双肩背包容纳\n5. 超极本（更为注重便携性的轻薄本）\n\n   近似拥有平板效用的笔记本，功耗最低，体积最小，通常配备色域较广的屏幕\n\n\n性价比由高到低（便携性由低到高）：\n\n台式机->游戏本->商务本->轻薄本->超极本\n\n\n### 常见品牌\n\n1. 联想\n\n   国内型号被诟病加价减料，不过拯救者、小新系列口碑还好\n2. 小米\n\n   周围先后有过五六台轻薄本、游戏本，品控都还可以\n3. 华为\n4. 惠普、戴尔\n\n   老牌，口碑极佳\n5. 神州，清华同方\n\n   性价比较高，品控一般，喜好折腾可以试试\n6. surface\n\n   微软自家品牌，设计感很强，推出了很多创新的东西，好像维修不太方便，有闲钱可以尝鲜\n7. Mac\n\n   只能说用了都说好，是不是嘴硬不好说","slug":"商品知识/笔记本电脑","published":1,"updated":"2024-06-19T18:05:21.547Z","comments":1,"layout":"post","photos":[],"_id":"clxm59gjq000064uy3t9m8i5f","content":"<h3 id=\"类别\"><a href=\"#类别\" class=\"headerlink\" title=\"类别\"></a>类别</h3><ol>\n<li><p>台式机</p>\n<p>传统机箱笔记本</p>\n<p>优点：</p>\n<ol>\n<li>拓展性最好，可单独对不同的场景进行针对性升级</li>\n<li>性价比最高，自己组装尤其性价比高</li>\n<li>性能表现好</li>\n</ol>\n<p>缺点：</p>\n<p>移动不方便</p>\n</li>\n<li><p>轻薄本</p>\n<p>注重便携性，续航时间通常在4h以上，可以不使用电源续航较长时间，重量较低，通常为13-15英寸小屏幕，外观精致</p>\n</li>\n<li><p>商务本</p>\n<p>续航时间较长，重量较低，性能略高于轻薄本，通常配备较大存储空间（1T固态），一般外出使用仍需要携带充电器</p>\n</li>\n<li><p>游戏本</p>\n<p>性能较好，通常配备高刷屏幕（144盒子以上）</p>\n<p>续航时间较短，通常2h以下，需要插电源使用，较重，通常配备15英寸以上屏幕，一般使用较大双肩背包容纳</p>\n</li>\n<li><p>超极本（更为注重便携性的轻薄本）</p>\n<p>近似拥有平板效用的笔记本，功耗最低，体积最小，通常配备色域较广的屏幕</p>\n</li>\n</ol>\n<p>性价比由高到低（便携性由低到高）：</p>\n<p>台式机-&gt;游戏本-&gt;商务本-&gt;轻薄本-&gt;超极本</p>\n<h3 id=\"常见品牌\"><a href=\"#常见品牌\" class=\"headerlink\" title=\"常见品牌\"></a>常见品牌</h3><ol>\n<li><p>联想</p>\n<p>国内型号被诟病加价减料，不过拯救者、小新系列口碑还好</p>\n</li>\n<li><p>小米</p>\n<p>周围先后有过五六台轻薄本、游戏本，品控都还可以</p>\n</li>\n<li><p>华为</p>\n</li>\n<li><p>惠普、戴尔</p>\n<p>老牌，口碑极佳</p>\n</li>\n<li><p>神州，清华同方</p>\n<p>性价比较高，品控一般，喜好折腾可以试试</p>\n</li>\n<li><p>surface</p>\n<p>微软自家品牌，设计感很强，推出了很多创新的东西，好像维修不太方便，有闲钱可以尝鲜</p>\n</li>\n<li><p>Mac</p>\n<p>只能说用了都说好，是不是嘴硬不好说</p>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"类别\"><a href=\"#类别\" class=\"headerlink\" title=\"类别\"></a>类别</h3><ol>\n<li><p>台式机</p>\n<p>传统机箱笔记本</p>\n<p>优点：</p>\n<ol>\n<li>拓展性最好，可单独对不同的场景进行针对性升级</li>\n<li>性价比最高，自己组装尤其性价比高</li>\n<li>性能表现好</li>\n</ol>\n<p>缺点：</p>\n<p>移动不方便</p>\n</li>\n<li><p>轻薄本</p>\n<p>注重便携性，续航时间通常在4h以上，可以不使用电源续航较长时间，重量较低，通常为13-15英寸小屏幕，外观精致</p>\n</li>\n<li><p>商务本</p>\n<p>续航时间较长，重量较低，性能略高于轻薄本，通常配备较大存储空间（1T固态），一般外出使用仍需要携带充电器</p>\n</li>\n<li><p>游戏本</p>\n<p>性能较好，通常配备高刷屏幕（144盒子以上）</p>\n<p>续航时间较短，通常2h以下，需要插电源使用，较重，通常配备15英寸以上屏幕，一般使用较大双肩背包容纳</p>\n</li>\n<li><p>超极本（更为注重便携性的轻薄本）</p>\n<p>近似拥有平板效用的笔记本，功耗最低，体积最小，通常配备色域较广的屏幕</p>\n</li>\n</ol>\n<p>性价比由高到低（便携性由低到高）：</p>\n<p>台式机-&gt;游戏本-&gt;商务本-&gt;轻薄本-&gt;超极本</p>\n<h3 id=\"常见品牌\"><a href=\"#常见品牌\" class=\"headerlink\" title=\"常见品牌\"></a>常见品牌</h3><ol>\n<li><p>联想</p>\n<p>国内型号被诟病加价减料，不过拯救者、小新系列口碑还好</p>\n</li>\n<li><p>小米</p>\n<p>周围先后有过五六台轻薄本、游戏本，品控都还可以</p>\n</li>\n<li><p>华为</p>\n</li>\n<li><p>惠普、戴尔</p>\n<p>老牌，口碑极佳</p>\n</li>\n<li><p>神州，清华同方</p>\n<p>性价比较高，品控一般，喜好折腾可以试试</p>\n</li>\n<li><p>surface</p>\n<p>微软自家品牌，设计感很强，推出了很多创新的东西，好像维修不太方便，有闲钱可以尝鲜</p>\n</li>\n<li><p>Mac</p>\n<p>只能说用了都说好，是不是嘴硬不好说</p>\n</li>\n</ol>\n"},{"title":"显示器","date":"2024-06-19T17:56:10.000Z","_content":"\n分辨率、色域sRGB、响应时间、曲面、IPS屏、有害蓝光、接口、\n\n屏幕类型：TN屏、IPS屏、PLS屏、VA屏\n\n### 验货\n\n* 屏幕四周飞边\n\n* 亮点、坏点检测\n\n\n### 分辨率\n\n京东链接\n\n* [3840*2160](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_82016%5E) （4K）\n* [2560*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91851%5E) （2K）\n* [1920*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_4749%5E)（1080P，全高清)\n* [5120*2160](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177867%5E)\n* [5120*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177868%5E)\n* [3840*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177866%5E)\n* [3440*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91835%5E)\n* [2560*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91834%5E)\n* [1920*1200](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_162391%5E)\n* [1536*2048](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177849%5E)\n\n### 响应时间\n\n> 优先选Nano-IPS屏和1ms灰阶响应时间\n\n\n产品介绍中充斥着多种响应时间：**灰阶响应时间、MPRT响应时间、调整灰阶响应时间**\n\n---\n\n**画质和响应时间的矛盾，导致了乱象出现**\n\n在游戏过程中，特别是战斗比较激烈的场景中，电竞显示器响应时间的高低就决定着画面是否有拖影、残影出现，这不仅影响到视觉体验，也关系到操作。电竞显示器的响应时间当然是越低越好，可是之前很长时间都存在着画质和响应时间的矛盾：TN屏响应时间虽然能做到1ms但画质一般；IPS、VA、PLS等广视角屏画质更好，但响应时间的主流水准为5ms，部分做得好的产品能达到4ms。\n\n为了解决这个问题，除了改进面板提升产品的灰阶响应时间之外，就催生出了MPRT响应时间、调整灰阶响应时间等。\n\n\n注意看红圈位置，1ms响应时间还是要清晰一些\n\n**MPRT响应时间容易导致眼睛疲劳**\n\nMPRT（Moving Picture Response Time运动图像响应时间）响应时间。MPRT时间只是一种降低画面模糊的技术手段，比如在屏幕转换色彩的过程中暂时关闭背光，色彩变换之后再将背光开启。有了这个技术之后，通过缩减每帧画面在屏幕上的显示时间，降低了屏幕画面的暂留效果，这样一来玩家所看到的画面拖影、残影等现象也就大为减少了，视觉感官自然就流畅了。\n\n从理论上来看，MPRT时间是降低视觉拖影、残影的不错的补充解决方案，但是在实际使用中，其问题也是非常的明显。首先，MPRT技术在使用中会对背光和画面的刷新进行一定的控制，就相当于又多了一个处理环节，自然会产生一定的延迟；其次前面提到为了降低画面模糊，会在屏幕转换色彩的过程中暂时关闭背光，背光频繁地开关就会产生频闪的结果。我们知道显示器之所以将PWM调光换成DC直流调光（通常所说的不闪屏），就是为了消除频闪，这下引入MPRT技术频闪又回来了，屏幕看久了眼睛更容易疲劳。\n\n总的来说，MPRT时间对于灰阶响应时间高导致的画面问题无解不说，还会导致一系列更多的问题，所以MPRT时间其实实用性非常有限。\n\n**Over Driving有一定作用但可能导致画质下降**\n\nOver Driving也有厂商成称为调整灰阶响应时间，这也算是比较常见的解决方案，原理是为面板液晶分子“加压”（用更高的电压驱动液晶或者使用脉冲加快这一部分液晶的变换），实现更快的翻转速度，从而缩短响应时间，部分产品会提供多挡调节。\n\n各档Over Driving画质区别\n\nOver Driving虽然会极大的提升响应速度，但是如果开启最高档的话很可能带来一定程度拖影的问题，尤其是启用了极限模式，拖影、鬼影会非常的明显，甚至会影响到使用。\n\n**1ms灰阶响应时间才是正解**\n\n真正的1ms响应时间其实应该是灰阶响应时间，又叫**GTG响应时间**。液晶显示器的响应时间刚开始说的是黑白响应时间，但屏幕上的图像都是灰阶变化的结果，所以现在我们所说的响应时间指的都是灰阶响应时间（GTG）。受液晶显示器原理的制约，画面变化时，每个像素点的色彩变化是需要时间的，这就导致早期的液晶显示器响应时间较高，动不动就是24ms、32ms之类的，在激烈的游戏中，画面中满满的都是拖影、残影。而CRT显示器则直接用电子束打击荧光粉，发光快，就没有这些问题。所以在液晶显示器出现很长一段时间之后，不少游戏发烧友依然用的是CRT 显示器，图的就是较低的响应时间。\n\n虽说之前IPS屏的灰阶响应时间只能做到5ms、4ms，但是出现了Nano-IPS屏和Fast-IPS，响应时间也能做到1ms的灰阶响应时间，画质和响应时间终于能够兼顾了。那些对响应时间特别重视的玩家来说，购买时一定要认准了Nano-IPS屏和1ms灰阶响应时间，肯定就没错。\n\n### IPS屏与LED屏\n\nIPS是英文In-Plane Switching的缩写，英文含义为平面转换屏幕技术，由日立公司于2001推出的液晶面板技术，俗称“Super TFT”，是目前世界上最先进的液晶面板技术，目前已经广泛使用于液晶显显示器与手机屏幕等显示面板中。\n\n先进的液晶面板技术，如今很多旗舰手机或者一些品牌液晶显示器都采用的是IPS屏幕，比如三星Note4、iPhone6等知名机型，均采用的是顶级IPS面板屏幕。\n\n![image.png](./img/ips-led.png)\n\n**可视角度大**\nIPS屏幕面板的视角可达到178度，正面观看与不同角度观看时所产生的颜色变化程度成为色彩扭曲率，所得的数值几乎用肉眼分辨不出来。意味着从正面还是侧面观看画面的效果是相同的。\n**色彩真实**\n这也是IPS屏幕色彩抱枕特点的全面展现。IPS屏幕由于的色彩翻转与亮度转换等性能，让您无论从哪个角度欣赏，都可以看到色彩鲜明、饱和自然的优质画面。\n\n\n**动态画质出色**\nIPS屏幕屏幕能够出现的表现动态高清画面，特别适合运动图像重现，无残影和拖尾，是观看数字高清视频以及快速运动画面，如比赛、竞赛游戏盒动作电影的不错载体。\n**节能环保**\nIPS屏幕技术在核能结束方面也有重大突破，IPS屏幕耗电量进一步下降，更为节能环保。并且由于对液晶分子进行了更合理的排列，减少了液晶层厚度，从而百变了液晶屏的透光率，增祥了显示效果，也可以让显示面板更薄、更省电。\n色彩准确\nIPS屏幕技术受到专业人士的亲睐，以满足设计、印刷、航天等行业专业人士对色彩的较为苛刻要求。\nIPS屏幕缺点\n\n**iPS屏幕有哪些缺点**\n\n\n\n由于IPS屏幕采用横向液晶分子排列，增加了可视角度的同时却减少了光线的穿透性，为了更好的展示亮色就要增加背光的发光度，所以漏光现象在IPS屏幕是极为普遍的，随着屏幕的加大，大面积的**边缘漏光**问题一直是IPS的诟病。\n由于IPS屏幕无法改善穿透性而提升背光的做法也让它失去了高对比度的竞争优势，一般IPS的静态对比度在2000:1--3000:1之间。而AV屏幕的静态对比度可以轻松达到5000:1，因此**对比度不高**，也是其一个不足。\n\n### 色域\n\n**色域是什么？**\n\n色域其实也可以叫做色彩空间（Color Space），而域有是一个数学概念，可以更好的说明色彩是有一定的范围。色域是对一种颜色进行编码的方法，也指一个技术系统能够产生颜色的总和。在计算机图形处理中色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况，例如一个给定的空间或是某个输出装置的呈色范围。色域是显示器屏幕所能够表达的颜色数量所构成的范围区域，在现实世界中自然界中可见光谱的颜色组成了最大的色域空间，该色域空间中包含了人眼所能见到的所有颜色。\n\nCIE国际照明协会为了更好的让用户轻易的理解色域，制定了一个用于描述色域的方法，那就是CIE-xy色度图。在这个坐标系中，各种显示设备能表现的色域范围用RGB（红、绿、蓝）三点连线组成的三角形区域来表示，三角形的面积越大，就表示这种显示设备的色域范围越大。\n\n![色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普](./img/色域.png)\n\nCIE-xy色度图\n\n**常见的屏幕色域三种标准：**\n\n目前常见的屏幕色域标准有三种，分别是sRGB、NTSC、Adobe RGB。\n\n**1、sRGB**\n\nsRGB色域是微软和HP在1996年共同开发的色彩空间，也是目前的微软旗下的Windows系统和众多原生软件默认支持的色彩空间。\n\n**2、NTSC**\n\nNTSC色域是NTSC电视标准下的色彩空间，NTSC是美国国家电视标准委员会，他们所推出的NTSC电视标准是一套广播电视传输协议，被运用在美国、日本等国家的广播电视系统中。当然这也就意味着，NTSC色彩空间更多被运用在电视行业。\n\n**3、Adobe RGB**\n\nAdobe RGB是专业软件生产商Adobe在1998年推出的色彩空间，初衷是为了同时囊括sRGB（电脑常用的色彩空间）和CMYK（印刷常用的色彩空间），这样拍出的数码照片不仅能在电脑上正常显示和编辑，也能印刷出颜色无损而正确的相片。Adobe RGB相比sRGB囊括的色彩范围更广，受到设计师的青睐，因此在专业的摄影和后期领域被广泛使用。\n\n通过下图可以得知，Adobe RGB的色域几乎和NTSC1953年标准比较相近一些，而sRGB所能表示的色彩最少，sRGB色彩空间范围要小于前两者，近似相当于 sRGB ≈ 72% NTSC，Adobe RGB≈95% NTSC，不过sRGB是世界上最为广泛使用的色彩空间，大多数的显示器，都只支持sRGB的色域范围。AdobeRGB相比sRGB，能表示出更加细腻的青色和绿色，而NTSC的色域范围是最广的。\n\n![色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普](./img/色域2.png)\n\n不少用户会认为100%sRGB=72%NTSC，其实这是错误的观念，其实从上图中，我们可以发现NTSC并不能完全覆盖住sRGB，所以如果以严谨的方式来说，sRGB是不能换算为NTSC，只能说**100%sRGB的覆盖面积近似于72%NTSC**。\n\n就以笔记本屏幕最常见的色域来说，45%NTSC、72%NTSC以及100%sRGB，无疑是45%NTSC的色彩表现丰富度最低，此外72%NTSC和100%sRGB并不能直接来判断谁的色彩表现更好，因为存在一个屏幕调教的问题，如果屏幕调教不好，就算是色彩表现丰富度再高，也未必会显示出最好的效果，非要做出一个判断的话，个人建议购买100%sRGB屏幕可能会更稳妥一些。\n\n**如何通过色域选择屏幕？**\n\nAdobe RGB是由Adobe公司推出的色域标准，针对修图的人，可以多关注Adobe RGB数值；\n\nsRGB色域的标准是针对计算机外部设备提出的定义，那么对于普通工作、或者日常打印的话，买sRGB色域的设备就可以了；\n\nNTSC作为电视标准，也是三者中色域最广的，那么显示器用户中的电影爱好者就可以主要参考它的数值。","source":"_posts/商品知识/显示器.md","raw":"---\ntitle: 显示器\ndate: 2024-06-20 01:56:10\ncategories:\n  - 商品知识\ntags:\n---\n\n分辨率、色域sRGB、响应时间、曲面、IPS屏、有害蓝光、接口、\n\n屏幕类型：TN屏、IPS屏、PLS屏、VA屏\n\n### 验货\n\n* 屏幕四周飞边\n\n* 亮点、坏点检测\n\n\n### 分辨率\n\n京东链接\n\n* [3840*2160](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_82016%5E) （4K）\n* [2560*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91851%5E) （2K）\n* [1920*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_4749%5E)（1080P，全高清)\n* [5120*2160](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177867%5E)\n* [5120*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177868%5E)\n* [3840*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177866%5E)\n* [3440*1440](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91835%5E)\n* [2560*1080](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91834%5E)\n* [1920*1200](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_162391%5E)\n* [1536*2048](https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177849%5E)\n\n### 响应时间\n\n> 优先选Nano-IPS屏和1ms灰阶响应时间\n\n\n产品介绍中充斥着多种响应时间：**灰阶响应时间、MPRT响应时间、调整灰阶响应时间**\n\n---\n\n**画质和响应时间的矛盾，导致了乱象出现**\n\n在游戏过程中，特别是战斗比较激烈的场景中，电竞显示器响应时间的高低就决定着画面是否有拖影、残影出现，这不仅影响到视觉体验，也关系到操作。电竞显示器的响应时间当然是越低越好，可是之前很长时间都存在着画质和响应时间的矛盾：TN屏响应时间虽然能做到1ms但画质一般；IPS、VA、PLS等广视角屏画质更好，但响应时间的主流水准为5ms，部分做得好的产品能达到4ms。\n\n为了解决这个问题，除了改进面板提升产品的灰阶响应时间之外，就催生出了MPRT响应时间、调整灰阶响应时间等。\n\n\n注意看红圈位置，1ms响应时间还是要清晰一些\n\n**MPRT响应时间容易导致眼睛疲劳**\n\nMPRT（Moving Picture Response Time运动图像响应时间）响应时间。MPRT时间只是一种降低画面模糊的技术手段，比如在屏幕转换色彩的过程中暂时关闭背光，色彩变换之后再将背光开启。有了这个技术之后，通过缩减每帧画面在屏幕上的显示时间，降低了屏幕画面的暂留效果，这样一来玩家所看到的画面拖影、残影等现象也就大为减少了，视觉感官自然就流畅了。\n\n从理论上来看，MPRT时间是降低视觉拖影、残影的不错的补充解决方案，但是在实际使用中，其问题也是非常的明显。首先，MPRT技术在使用中会对背光和画面的刷新进行一定的控制，就相当于又多了一个处理环节，自然会产生一定的延迟；其次前面提到为了降低画面模糊，会在屏幕转换色彩的过程中暂时关闭背光，背光频繁地开关就会产生频闪的结果。我们知道显示器之所以将PWM调光换成DC直流调光（通常所说的不闪屏），就是为了消除频闪，这下引入MPRT技术频闪又回来了，屏幕看久了眼睛更容易疲劳。\n\n总的来说，MPRT时间对于灰阶响应时间高导致的画面问题无解不说，还会导致一系列更多的问题，所以MPRT时间其实实用性非常有限。\n\n**Over Driving有一定作用但可能导致画质下降**\n\nOver Driving也有厂商成称为调整灰阶响应时间，这也算是比较常见的解决方案，原理是为面板液晶分子“加压”（用更高的电压驱动液晶或者使用脉冲加快这一部分液晶的变换），实现更快的翻转速度，从而缩短响应时间，部分产品会提供多挡调节。\n\n各档Over Driving画质区别\n\nOver Driving虽然会极大的提升响应速度，但是如果开启最高档的话很可能带来一定程度拖影的问题，尤其是启用了极限模式，拖影、鬼影会非常的明显，甚至会影响到使用。\n\n**1ms灰阶响应时间才是正解**\n\n真正的1ms响应时间其实应该是灰阶响应时间，又叫**GTG响应时间**。液晶显示器的响应时间刚开始说的是黑白响应时间，但屏幕上的图像都是灰阶变化的结果，所以现在我们所说的响应时间指的都是灰阶响应时间（GTG）。受液晶显示器原理的制约，画面变化时，每个像素点的色彩变化是需要时间的，这就导致早期的液晶显示器响应时间较高，动不动就是24ms、32ms之类的，在激烈的游戏中，画面中满满的都是拖影、残影。而CRT显示器则直接用电子束打击荧光粉，发光快，就没有这些问题。所以在液晶显示器出现很长一段时间之后，不少游戏发烧友依然用的是CRT 显示器，图的就是较低的响应时间。\n\n虽说之前IPS屏的灰阶响应时间只能做到5ms、4ms，但是出现了Nano-IPS屏和Fast-IPS，响应时间也能做到1ms的灰阶响应时间，画质和响应时间终于能够兼顾了。那些对响应时间特别重视的玩家来说，购买时一定要认准了Nano-IPS屏和1ms灰阶响应时间，肯定就没错。\n\n### IPS屏与LED屏\n\nIPS是英文In-Plane Switching的缩写，英文含义为平面转换屏幕技术，由日立公司于2001推出的液晶面板技术，俗称“Super TFT”，是目前世界上最先进的液晶面板技术，目前已经广泛使用于液晶显显示器与手机屏幕等显示面板中。\n\n先进的液晶面板技术，如今很多旗舰手机或者一些品牌液晶显示器都采用的是IPS屏幕，比如三星Note4、iPhone6等知名机型，均采用的是顶级IPS面板屏幕。\n\n![image.png](./img/ips-led.png)\n\n**可视角度大**\nIPS屏幕面板的视角可达到178度，正面观看与不同角度观看时所产生的颜色变化程度成为色彩扭曲率，所得的数值几乎用肉眼分辨不出来。意味着从正面还是侧面观看画面的效果是相同的。\n**色彩真实**\n这也是IPS屏幕色彩抱枕特点的全面展现。IPS屏幕由于的色彩翻转与亮度转换等性能，让您无论从哪个角度欣赏，都可以看到色彩鲜明、饱和自然的优质画面。\n\n\n**动态画质出色**\nIPS屏幕屏幕能够出现的表现动态高清画面，特别适合运动图像重现，无残影和拖尾，是观看数字高清视频以及快速运动画面，如比赛、竞赛游戏盒动作电影的不错载体。\n**节能环保**\nIPS屏幕技术在核能结束方面也有重大突破，IPS屏幕耗电量进一步下降，更为节能环保。并且由于对液晶分子进行了更合理的排列，减少了液晶层厚度，从而百变了液晶屏的透光率，增祥了显示效果，也可以让显示面板更薄、更省电。\n色彩准确\nIPS屏幕技术受到专业人士的亲睐，以满足设计、印刷、航天等行业专业人士对色彩的较为苛刻要求。\nIPS屏幕缺点\n\n**iPS屏幕有哪些缺点**\n\n\n\n由于IPS屏幕采用横向液晶分子排列，增加了可视角度的同时却减少了光线的穿透性，为了更好的展示亮色就要增加背光的发光度，所以漏光现象在IPS屏幕是极为普遍的，随着屏幕的加大，大面积的**边缘漏光**问题一直是IPS的诟病。\n由于IPS屏幕无法改善穿透性而提升背光的做法也让它失去了高对比度的竞争优势，一般IPS的静态对比度在2000:1--3000:1之间。而AV屏幕的静态对比度可以轻松达到5000:1，因此**对比度不高**，也是其一个不足。\n\n### 色域\n\n**色域是什么？**\n\n色域其实也可以叫做色彩空间（Color Space），而域有是一个数学概念，可以更好的说明色彩是有一定的范围。色域是对一种颜色进行编码的方法，也指一个技术系统能够产生颜色的总和。在计算机图形处理中色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况，例如一个给定的空间或是某个输出装置的呈色范围。色域是显示器屏幕所能够表达的颜色数量所构成的范围区域，在现实世界中自然界中可见光谱的颜色组成了最大的色域空间，该色域空间中包含了人眼所能见到的所有颜色。\n\nCIE国际照明协会为了更好的让用户轻易的理解色域，制定了一个用于描述色域的方法，那就是CIE-xy色度图。在这个坐标系中，各种显示设备能表现的色域范围用RGB（红、绿、蓝）三点连线组成的三角形区域来表示，三角形的面积越大，就表示这种显示设备的色域范围越大。\n\n![色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普](./img/色域.png)\n\nCIE-xy色度图\n\n**常见的屏幕色域三种标准：**\n\n目前常见的屏幕色域标准有三种，分别是sRGB、NTSC、Adobe RGB。\n\n**1、sRGB**\n\nsRGB色域是微软和HP在1996年共同开发的色彩空间，也是目前的微软旗下的Windows系统和众多原生软件默认支持的色彩空间。\n\n**2、NTSC**\n\nNTSC色域是NTSC电视标准下的色彩空间，NTSC是美国国家电视标准委员会，他们所推出的NTSC电视标准是一套广播电视传输协议，被运用在美国、日本等国家的广播电视系统中。当然这也就意味着，NTSC色彩空间更多被运用在电视行业。\n\n**3、Adobe RGB**\n\nAdobe RGB是专业软件生产商Adobe在1998年推出的色彩空间，初衷是为了同时囊括sRGB（电脑常用的色彩空间）和CMYK（印刷常用的色彩空间），这样拍出的数码照片不仅能在电脑上正常显示和编辑，也能印刷出颜色无损而正确的相片。Adobe RGB相比sRGB囊括的色彩范围更广，受到设计师的青睐，因此在专业的摄影和后期领域被广泛使用。\n\n通过下图可以得知，Adobe RGB的色域几乎和NTSC1953年标准比较相近一些，而sRGB所能表示的色彩最少，sRGB色彩空间范围要小于前两者，近似相当于 sRGB ≈ 72% NTSC，Adobe RGB≈95% NTSC，不过sRGB是世界上最为广泛使用的色彩空间，大多数的显示器，都只支持sRGB的色域范围。AdobeRGB相比sRGB，能表示出更加细腻的青色和绿色，而NTSC的色域范围是最广的。\n\n![色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普](./img/色域2.png)\n\n不少用户会认为100%sRGB=72%NTSC，其实这是错误的观念，其实从上图中，我们可以发现NTSC并不能完全覆盖住sRGB，所以如果以严谨的方式来说，sRGB是不能换算为NTSC，只能说**100%sRGB的覆盖面积近似于72%NTSC**。\n\n就以笔记本屏幕最常见的色域来说，45%NTSC、72%NTSC以及100%sRGB，无疑是45%NTSC的色彩表现丰富度最低，此外72%NTSC和100%sRGB并不能直接来判断谁的色彩表现更好，因为存在一个屏幕调教的问题，如果屏幕调教不好，就算是色彩表现丰富度再高，也未必会显示出最好的效果，非要做出一个判断的话，个人建议购买100%sRGB屏幕可能会更稳妥一些。\n\n**如何通过色域选择屏幕？**\n\nAdobe RGB是由Adobe公司推出的色域标准，针对修图的人，可以多关注Adobe RGB数值；\n\nsRGB色域的标准是针对计算机外部设备提出的定义，那么对于普通工作、或者日常打印的话，买sRGB色域的设备就可以了；\n\nNTSC作为电视标准，也是三者中色域最广的，那么显示器用户中的电影爱好者就可以主要参考它的数值。","slug":"商品知识/显示器","published":1,"updated":"2024-06-19T18:05:21.542Z","comments":1,"layout":"post","photos":[],"_id":"clxm59gk9000364uy3y6n8hq9","content":"<p>分辨率、色域sRGB、响应时间、曲面、IPS屏、有害蓝光、接口、</p>\n<p>屏幕类型：TN屏、IPS屏、PLS屏、VA屏</p>\n<h3 id=\"验货\"><a href=\"#验货\" class=\"headerlink\" title=\"验货\"></a>验货</h3><ul>\n<li><p>屏幕四周飞边</p>\n</li>\n<li><p>亮点、坏点检测</p>\n</li>\n</ul>\n<h3 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h3><p>京东链接</p>\n<ul>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_82016%5E\">3840*2160</a> （4K）</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91851%5E\">2560*1440</a> （2K）</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_4749%5E\">1920*1080</a>（1080P，全高清)</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177867%5E\">5120*2160</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177868%5E\">5120*1440</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177866%5E\">3840*1080</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91835%5E\">3440*1440</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91834%5E\">2560*1080</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_162391%5E\">1920*1200</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177849%5E\">1536*2048</a></li>\n</ul>\n<h3 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h3><blockquote>\n<p>优先选Nano-IPS屏和1ms灰阶响应时间</p>\n</blockquote>\n<p>产品介绍中充斥着多种响应时间：<strong>灰阶响应时间、MPRT响应时间、调整灰阶响应时间</strong></p>\n<hr>\n<p><strong>画质和响应时间的矛盾，导致了乱象出现</strong></p>\n<p>在游戏过程中，特别是战斗比较激烈的场景中，电竞显示器响应时间的高低就决定着画面是否有拖影、残影出现，这不仅影响到视觉体验，也关系到操作。电竞显示器的响应时间当然是越低越好，可是之前很长时间都存在着画质和响应时间的矛盾：TN屏响应时间虽然能做到1ms但画质一般；IPS、VA、PLS等广视角屏画质更好，但响应时间的主流水准为5ms，部分做得好的产品能达到4ms。</p>\n<p>为了解决这个问题，除了改进面板提升产品的灰阶响应时间之外，就催生出了MPRT响应时间、调整灰阶响应时间等。</p>\n<p>注意看红圈位置，1ms响应时间还是要清晰一些</p>\n<p><strong>MPRT响应时间容易导致眼睛疲劳</strong></p>\n<p>MPRT（Moving Picture Response Time运动图像响应时间）响应时间。MPRT时间只是一种降低画面模糊的技术手段，比如在屏幕转换色彩的过程中暂时关闭背光，色彩变换之后再将背光开启。有了这个技术之后，通过缩减每帧画面在屏幕上的显示时间，降低了屏幕画面的暂留效果，这样一来玩家所看到的画面拖影、残影等现象也就大为减少了，视觉感官自然就流畅了。</p>\n<p>从理论上来看，MPRT时间是降低视觉拖影、残影的不错的补充解决方案，但是在实际使用中，其问题也是非常的明显。首先，MPRT技术在使用中会对背光和画面的刷新进行一定的控制，就相当于又多了一个处理环节，自然会产生一定的延迟；其次前面提到为了降低画面模糊，会在屏幕转换色彩的过程中暂时关闭背光，背光频繁地开关就会产生频闪的结果。我们知道显示器之所以将PWM调光换成DC直流调光（通常所说的不闪屏），就是为了消除频闪，这下引入MPRT技术频闪又回来了，屏幕看久了眼睛更容易疲劳。</p>\n<p>总的来说，MPRT时间对于灰阶响应时间高导致的画面问题无解不说，还会导致一系列更多的问题，所以MPRT时间其实实用性非常有限。</p>\n<p><strong>Over Driving有一定作用但可能导致画质下降</strong></p>\n<p>Over Driving也有厂商成称为调整灰阶响应时间，这也算是比较常见的解决方案，原理是为面板液晶分子“加压”（用更高的电压驱动液晶或者使用脉冲加快这一部分液晶的变换），实现更快的翻转速度，从而缩短响应时间，部分产品会提供多挡调节。</p>\n<p>各档Over Driving画质区别</p>\n<p>Over Driving虽然会极大的提升响应速度，但是如果开启最高档的话很可能带来一定程度拖影的问题，尤其是启用了极限模式，拖影、鬼影会非常的明显，甚至会影响到使用。</p>\n<p><strong>1ms灰阶响应时间才是正解</strong></p>\n<p>真正的1ms响应时间其实应该是灰阶响应时间，又叫<strong>GTG响应时间</strong>。液晶显示器的响应时间刚开始说的是黑白响应时间，但屏幕上的图像都是灰阶变化的结果，所以现在我们所说的响应时间指的都是灰阶响应时间（GTG）。受液晶显示器原理的制约，画面变化时，每个像素点的色彩变化是需要时间的，这就导致早期的液晶显示器响应时间较高，动不动就是24ms、32ms之类的，在激烈的游戏中，画面中满满的都是拖影、残影。而CRT显示器则直接用电子束打击荧光粉，发光快，就没有这些问题。所以在液晶显示器出现很长一段时间之后，不少游戏发烧友依然用的是CRT 显示器，图的就是较低的响应时间。</p>\n<p>虽说之前IPS屏的灰阶响应时间只能做到5ms、4ms，但是出现了Nano-IPS屏和Fast-IPS，响应时间也能做到1ms的灰阶响应时间，画质和响应时间终于能够兼顾了。那些对响应时间特别重视的玩家来说，购买时一定要认准了Nano-IPS屏和1ms灰阶响应时间，肯定就没错。</p>\n<h3 id=\"IPS屏与LED屏\"><a href=\"#IPS屏与LED屏\" class=\"headerlink\" title=\"IPS屏与LED屏\"></a>IPS屏与LED屏</h3><p>IPS是英文In-Plane Switching的缩写，英文含义为平面转换屏幕技术，由日立公司于2001推出的液晶面板技术，俗称“Super TFT”，是目前世界上最先进的液晶面板技术，目前已经广泛使用于液晶显显示器与手机屏幕等显示面板中。</p>\n<p>先进的液晶面板技术，如今很多旗舰手机或者一些品牌液晶显示器都采用的是IPS屏幕，比如三星Note4、iPhone6等知名机型，均采用的是顶级IPS面板屏幕。</p>\n<p><img src=\"/hexo-blog/./img/ips-led.png\" alt=\"image.png\"></p>\n<p><strong>可视角度大</strong><br>IPS屏幕面板的视角可达到178度，正面观看与不同角度观看时所产生的颜色变化程度成为色彩扭曲率，所得的数值几乎用肉眼分辨不出来。意味着从正面还是侧面观看画面的效果是相同的。<br><strong>色彩真实</strong><br>这也是IPS屏幕色彩抱枕特点的全面展现。IPS屏幕由于的色彩翻转与亮度转换等性能，让您无论从哪个角度欣赏，都可以看到色彩鲜明、饱和自然的优质画面。</p>\n<p><strong>动态画质出色</strong><br>IPS屏幕屏幕能够出现的表现动态高清画面，特别适合运动图像重现，无残影和拖尾，是观看数字高清视频以及快速运动画面，如比赛、竞赛游戏盒动作电影的不错载体。<br><strong>节能环保</strong><br>IPS屏幕技术在核能结束方面也有重大突破，IPS屏幕耗电量进一步下降，更为节能环保。并且由于对液晶分子进行了更合理的排列，减少了液晶层厚度，从而百变了液晶屏的透光率，增祥了显示效果，也可以让显示面板更薄、更省电。<br>色彩准确<br>IPS屏幕技术受到专业人士的亲睐，以满足设计、印刷、航天等行业专业人士对色彩的较为苛刻要求。<br>IPS屏幕缺点</p>\n<p><strong>iPS屏幕有哪些缺点</strong></p>\n<p>由于IPS屏幕采用横向液晶分子排列，增加了可视角度的同时却减少了光线的穿透性，为了更好的展示亮色就要增加背光的发光度，所以漏光现象在IPS屏幕是极为普遍的，随着屏幕的加大，大面积的<strong>边缘漏光</strong>问题一直是IPS的诟病。<br>由于IPS屏幕无法改善穿透性而提升背光的做法也让它失去了高对比度的竞争优势，一般IPS的静态对比度在2000:1–3000:1之间。而AV屏幕的静态对比度可以轻松达到5000:1，因此<strong>对比度不高</strong>，也是其一个不足。</p>\n<h3 id=\"色域\"><a href=\"#色域\" class=\"headerlink\" title=\"色域\"></a>色域</h3><p><strong>色域是什么？</strong></p>\n<p>色域其实也可以叫做色彩空间（Color Space），而域有是一个数学概念，可以更好的说明色彩是有一定的范围。色域是对一种颜色进行编码的方法，也指一个技术系统能够产生颜色的总和。在计算机图形处理中色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况，例如一个给定的空间或是某个输出装置的呈色范围。色域是显示器屏幕所能够表达的颜色数量所构成的范围区域，在现实世界中自然界中可见光谱的颜色组成了最大的色域空间，该色域空间中包含了人眼所能见到的所有颜色。</p>\n<p>CIE国际照明协会为了更好的让用户轻易的理解色域，制定了一个用于描述色域的方法，那就是CIE-xy色度图。在这个坐标系中，各种显示设备能表现的色域范围用RGB（红、绿、蓝）三点连线组成的三角形区域来表示，三角形的面积越大，就表示这种显示设备的色域范围越大。</p>\n<p><img src=\"/hexo-blog/./img/%E8%89%B2%E5%9F%9F.png\" alt=\"色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普\"></p>\n<p>CIE-xy色度图</p>\n<p><strong>常见的屏幕色域三种标准：</strong></p>\n<p>目前常见的屏幕色域标准有三种，分别是sRGB、NTSC、Adobe RGB。</p>\n<p><strong>1、sRGB</strong></p>\n<p>sRGB色域是微软和HP在1996年共同开发的色彩空间，也是目前的微软旗下的Windows系统和众多原生软件默认支持的色彩空间。</p>\n<p><strong>2、NTSC</strong></p>\n<p>NTSC色域是NTSC电视标准下的色彩空间，NTSC是美国国家电视标准委员会，他们所推出的NTSC电视标准是一套广播电视传输协议，被运用在美国、日本等国家的广播电视系统中。当然这也就意味着，NTSC色彩空间更多被运用在电视行业。</p>\n<p><strong>3、Adobe RGB</strong></p>\n<p>Adobe RGB是专业软件生产商Adobe在1998年推出的色彩空间，初衷是为了同时囊括sRGB（电脑常用的色彩空间）和CMYK（印刷常用的色彩空间），这样拍出的数码照片不仅能在电脑上正常显示和编辑，也能印刷出颜色无损而正确的相片。Adobe RGB相比sRGB囊括的色彩范围更广，受到设计师的青睐，因此在专业的摄影和后期领域被广泛使用。</p>\n<p>通过下图可以得知，Adobe RGB的色域几乎和NTSC1953年标准比较相近一些，而sRGB所能表示的色彩最少，sRGB色彩空间范围要小于前两者，近似相当于 sRGB ≈ 72% NTSC，Adobe RGB≈95% NTSC，不过sRGB是世界上最为广泛使用的色彩空间，大多数的显示器，都只支持sRGB的色域范围。AdobeRGB相比sRGB，能表示出更加细腻的青色和绿色，而NTSC的色域范围是最广的。</p>\n<p><img src=\"/hexo-blog/./img/%E8%89%B2%E5%9F%9F2.png\" alt=\"色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普\"></p>\n<p>不少用户会认为100%sRGB&#x3D;72%NTSC，其实这是错误的观念，其实从上图中，我们可以发现NTSC并不能完全覆盖住sRGB，所以如果以严谨的方式来说，sRGB是不能换算为NTSC，只能说<strong>100%sRGB的覆盖面积近似于72%NTSC</strong>。</p>\n<p>就以笔记本屏幕最常见的色域来说，45%NTSC、72%NTSC以及100%sRGB，无疑是45%NTSC的色彩表现丰富度最低，此外72%NTSC和100%sRGB并不能直接来判断谁的色彩表现更好，因为存在一个屏幕调教的问题，如果屏幕调教不好，就算是色彩表现丰富度再高，也未必会显示出最好的效果，非要做出一个判断的话，个人建议购买100%sRGB屏幕可能会更稳妥一些。</p>\n<p><strong>如何通过色域选择屏幕？</strong></p>\n<p>Adobe RGB是由Adobe公司推出的色域标准，针对修图的人，可以多关注Adobe RGB数值；</p>\n<p>sRGB色域的标准是针对计算机外部设备提出的定义，那么对于普通工作、或者日常打印的话，买sRGB色域的设备就可以了；</p>\n<p>NTSC作为电视标准，也是三者中色域最广的，那么显示器用户中的电影爱好者就可以主要参考它的数值。</p>\n","excerpt":"","more":"<p>分辨率、色域sRGB、响应时间、曲面、IPS屏、有害蓝光、接口、</p>\n<p>屏幕类型：TN屏、IPS屏、PLS屏、VA屏</p>\n<h3 id=\"验货\"><a href=\"#验货\" class=\"headerlink\" title=\"验货\"></a>验货</h3><ul>\n<li><p>屏幕四周飞边</p>\n</li>\n<li><p>亮点、坏点检测</p>\n</li>\n</ul>\n<h3 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h3><p>京东链接</p>\n<ul>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_82016%5E\">3840*2160</a> （4K）</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91851%5E\">2560*1440</a> （2K）</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_4749%5E\">1920*1080</a>（1080P，全高清)</li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177867%5E\">5120*2160</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177868%5E\">5120*1440</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177866%5E\">3840*1080</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91835%5E\">3440*1440</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_91834%5E\">2560*1080</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_162391%5E\">1920*1200</a></li>\n<li><a href=\"https://search.jd.com/search?keyword=%E5%B1%8F%E5%B9%95&suggest=1.his.0.0&wq=%E5%B1%8F%E5%B9%95&ev=3613_177849%5E\">1536*2048</a></li>\n</ul>\n<h3 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h3><blockquote>\n<p>优先选Nano-IPS屏和1ms灰阶响应时间</p>\n</blockquote>\n<p>产品介绍中充斥着多种响应时间：<strong>灰阶响应时间、MPRT响应时间、调整灰阶响应时间</strong></p>\n<hr>\n<p><strong>画质和响应时间的矛盾，导致了乱象出现</strong></p>\n<p>在游戏过程中，特别是战斗比较激烈的场景中，电竞显示器响应时间的高低就决定着画面是否有拖影、残影出现，这不仅影响到视觉体验，也关系到操作。电竞显示器的响应时间当然是越低越好，可是之前很长时间都存在着画质和响应时间的矛盾：TN屏响应时间虽然能做到1ms但画质一般；IPS、VA、PLS等广视角屏画质更好，但响应时间的主流水准为5ms，部分做得好的产品能达到4ms。</p>\n<p>为了解决这个问题，除了改进面板提升产品的灰阶响应时间之外，就催生出了MPRT响应时间、调整灰阶响应时间等。</p>\n<p>注意看红圈位置，1ms响应时间还是要清晰一些</p>\n<p><strong>MPRT响应时间容易导致眼睛疲劳</strong></p>\n<p>MPRT（Moving Picture Response Time运动图像响应时间）响应时间。MPRT时间只是一种降低画面模糊的技术手段，比如在屏幕转换色彩的过程中暂时关闭背光，色彩变换之后再将背光开启。有了这个技术之后，通过缩减每帧画面在屏幕上的显示时间，降低了屏幕画面的暂留效果，这样一来玩家所看到的画面拖影、残影等现象也就大为减少了，视觉感官自然就流畅了。</p>\n<p>从理论上来看，MPRT时间是降低视觉拖影、残影的不错的补充解决方案，但是在实际使用中，其问题也是非常的明显。首先，MPRT技术在使用中会对背光和画面的刷新进行一定的控制，就相当于又多了一个处理环节，自然会产生一定的延迟；其次前面提到为了降低画面模糊，会在屏幕转换色彩的过程中暂时关闭背光，背光频繁地开关就会产生频闪的结果。我们知道显示器之所以将PWM调光换成DC直流调光（通常所说的不闪屏），就是为了消除频闪，这下引入MPRT技术频闪又回来了，屏幕看久了眼睛更容易疲劳。</p>\n<p>总的来说，MPRT时间对于灰阶响应时间高导致的画面问题无解不说，还会导致一系列更多的问题，所以MPRT时间其实实用性非常有限。</p>\n<p><strong>Over Driving有一定作用但可能导致画质下降</strong></p>\n<p>Over Driving也有厂商成称为调整灰阶响应时间，这也算是比较常见的解决方案，原理是为面板液晶分子“加压”（用更高的电压驱动液晶或者使用脉冲加快这一部分液晶的变换），实现更快的翻转速度，从而缩短响应时间，部分产品会提供多挡调节。</p>\n<p>各档Over Driving画质区别</p>\n<p>Over Driving虽然会极大的提升响应速度，但是如果开启最高档的话很可能带来一定程度拖影的问题，尤其是启用了极限模式，拖影、鬼影会非常的明显，甚至会影响到使用。</p>\n<p><strong>1ms灰阶响应时间才是正解</strong></p>\n<p>真正的1ms响应时间其实应该是灰阶响应时间，又叫<strong>GTG响应时间</strong>。液晶显示器的响应时间刚开始说的是黑白响应时间，但屏幕上的图像都是灰阶变化的结果，所以现在我们所说的响应时间指的都是灰阶响应时间（GTG）。受液晶显示器原理的制约，画面变化时，每个像素点的色彩变化是需要时间的，这就导致早期的液晶显示器响应时间较高，动不动就是24ms、32ms之类的，在激烈的游戏中，画面中满满的都是拖影、残影。而CRT显示器则直接用电子束打击荧光粉，发光快，就没有这些问题。所以在液晶显示器出现很长一段时间之后，不少游戏发烧友依然用的是CRT 显示器，图的就是较低的响应时间。</p>\n<p>虽说之前IPS屏的灰阶响应时间只能做到5ms、4ms，但是出现了Nano-IPS屏和Fast-IPS，响应时间也能做到1ms的灰阶响应时间，画质和响应时间终于能够兼顾了。那些对响应时间特别重视的玩家来说，购买时一定要认准了Nano-IPS屏和1ms灰阶响应时间，肯定就没错。</p>\n<h3 id=\"IPS屏与LED屏\"><a href=\"#IPS屏与LED屏\" class=\"headerlink\" title=\"IPS屏与LED屏\"></a>IPS屏与LED屏</h3><p>IPS是英文In-Plane Switching的缩写，英文含义为平面转换屏幕技术，由日立公司于2001推出的液晶面板技术，俗称“Super TFT”，是目前世界上最先进的液晶面板技术，目前已经广泛使用于液晶显显示器与手机屏幕等显示面板中。</p>\n<p>先进的液晶面板技术，如今很多旗舰手机或者一些品牌液晶显示器都采用的是IPS屏幕，比如三星Note4、iPhone6等知名机型，均采用的是顶级IPS面板屏幕。</p>\n<p><img src=\"/hexo-blog/./img/ips-led.png\" alt=\"image.png\"></p>\n<p><strong>可视角度大</strong><br>IPS屏幕面板的视角可达到178度，正面观看与不同角度观看时所产生的颜色变化程度成为色彩扭曲率，所得的数值几乎用肉眼分辨不出来。意味着从正面还是侧面观看画面的效果是相同的。<br><strong>色彩真实</strong><br>这也是IPS屏幕色彩抱枕特点的全面展现。IPS屏幕由于的色彩翻转与亮度转换等性能，让您无论从哪个角度欣赏，都可以看到色彩鲜明、饱和自然的优质画面。</p>\n<p><strong>动态画质出色</strong><br>IPS屏幕屏幕能够出现的表现动态高清画面，特别适合运动图像重现，无残影和拖尾，是观看数字高清视频以及快速运动画面，如比赛、竞赛游戏盒动作电影的不错载体。<br><strong>节能环保</strong><br>IPS屏幕技术在核能结束方面也有重大突破，IPS屏幕耗电量进一步下降，更为节能环保。并且由于对液晶分子进行了更合理的排列，减少了液晶层厚度，从而百变了液晶屏的透光率，增祥了显示效果，也可以让显示面板更薄、更省电。<br>色彩准确<br>IPS屏幕技术受到专业人士的亲睐，以满足设计、印刷、航天等行业专业人士对色彩的较为苛刻要求。<br>IPS屏幕缺点</p>\n<p><strong>iPS屏幕有哪些缺点</strong></p>\n<p>由于IPS屏幕采用横向液晶分子排列，增加了可视角度的同时却减少了光线的穿透性，为了更好的展示亮色就要增加背光的发光度，所以漏光现象在IPS屏幕是极为普遍的，随着屏幕的加大，大面积的<strong>边缘漏光</strong>问题一直是IPS的诟病。<br>由于IPS屏幕无法改善穿透性而提升背光的做法也让它失去了高对比度的竞争优势，一般IPS的静态对比度在2000:1–3000:1之间。而AV屏幕的静态对比度可以轻松达到5000:1，因此<strong>对比度不高</strong>，也是其一个不足。</p>\n<h3 id=\"色域\"><a href=\"#色域\" class=\"headerlink\" title=\"色域\"></a>色域</h3><p><strong>色域是什么？</strong></p>\n<p>色域其实也可以叫做色彩空间（Color Space），而域有是一个数学概念，可以更好的说明色彩是有一定的范围。色域是对一种颜色进行编码的方法，也指一个技术系统能够产生颜色的总和。在计算机图形处理中色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况，例如一个给定的空间或是某个输出装置的呈色范围。色域是显示器屏幕所能够表达的颜色数量所构成的范围区域，在现实世界中自然界中可见光谱的颜色组成了最大的色域空间，该色域空间中包含了人眼所能见到的所有颜色。</p>\n<p>CIE国际照明协会为了更好的让用户轻易的理解色域，制定了一个用于描述色域的方法，那就是CIE-xy色度图。在这个坐标系中，各种显示设备能表现的色域范围用RGB（红、绿、蓝）三点连线组成的三角形区域来表示，三角形的面积越大，就表示这种显示设备的色域范围越大。</p>\n<p><img src=\"/hexo-blog/./img/%E8%89%B2%E5%9F%9F.png\" alt=\"色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普\"></p>\n<p>CIE-xy色度图</p>\n<p><strong>常见的屏幕色域三种标准：</strong></p>\n<p>目前常见的屏幕色域标准有三种，分别是sRGB、NTSC、Adobe RGB。</p>\n<p><strong>1、sRGB</strong></p>\n<p>sRGB色域是微软和HP在1996年共同开发的色彩空间，也是目前的微软旗下的Windows系统和众多原生软件默认支持的色彩空间。</p>\n<p><strong>2、NTSC</strong></p>\n<p>NTSC色域是NTSC电视标准下的色彩空间，NTSC是美国国家电视标准委员会，他们所推出的NTSC电视标准是一套广播电视传输协议，被运用在美国、日本等国家的广播电视系统中。当然这也就意味着，NTSC色彩空间更多被运用在电视行业。</p>\n<p><strong>3、Adobe RGB</strong></p>\n<p>Adobe RGB是专业软件生产商Adobe在1998年推出的色彩空间，初衷是为了同时囊括sRGB（电脑常用的色彩空间）和CMYK（印刷常用的色彩空间），这样拍出的数码照片不仅能在电脑上正常显示和编辑，也能印刷出颜色无损而正确的相片。Adobe RGB相比sRGB囊括的色彩范围更广，受到设计师的青睐，因此在专业的摄影和后期领域被广泛使用。</p>\n<p>通过下图可以得知，Adobe RGB的色域几乎和NTSC1953年标准比较相近一些，而sRGB所能表示的色彩最少，sRGB色彩空间范围要小于前两者，近似相当于 sRGB ≈ 72% NTSC，Adobe RGB≈95% NTSC，不过sRGB是世界上最为广泛使用的色彩空间，大多数的显示器，都只支持sRGB的色域范围。AdobeRGB相比sRGB，能表示出更加细腻的青色和绿色，而NTSC的色域范围是最广的。</p>\n<p><img src=\"/hexo-blog/./img/%E8%89%B2%E5%9F%9F2.png\" alt=\"色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普\"></p>\n<p>不少用户会认为100%sRGB&#x3D;72%NTSC，其实这是错误的观念，其实从上图中，我们可以发现NTSC并不能完全覆盖住sRGB，所以如果以严谨的方式来说，sRGB是不能换算为NTSC，只能说<strong>100%sRGB的覆盖面积近似于72%NTSC</strong>。</p>\n<p>就以笔记本屏幕最常见的色域来说，45%NTSC、72%NTSC以及100%sRGB，无疑是45%NTSC的色彩表现丰富度最低，此外72%NTSC和100%sRGB并不能直接来判断谁的色彩表现更好，因为存在一个屏幕调教的问题，如果屏幕调教不好，就算是色彩表现丰富度再高，也未必会显示出最好的效果，非要做出一个判断的话，个人建议购买100%sRGB屏幕可能会更稳妥一些。</p>\n<p><strong>如何通过色域选择屏幕？</strong></p>\n<p>Adobe RGB是由Adobe公司推出的色域标准，针对修图的人，可以多关注Adobe RGB数值；</p>\n<p>sRGB色域的标准是针对计算机外部设备提出的定义，那么对于普通工作、或者日常打印的话，买sRGB色域的设备就可以了；</p>\n<p>NTSC作为电视标准，也是三者中色域最广的，那么显示器用户中的电影爱好者就可以主要参考它的数值。</p>\n"},{"title":"Junit测试","date":"2024-07-02T15:15:25.000Z","_content":"\n建议：\n\n* 测试类名：测试类名+Test命名\n* 包名：xxxx.xxx.xx.test\n* 方法名：test+\"_\"+测试方法名+\"_\"+case名 如 test_add_null_param\n* 无返回值，无入参\n\n> 1. 添加Junit依赖\n>\n> 2. 给方法加**@Test**注解运行\n\n\n注解：\n\n* @Test\n\n  测试方法注解\n* @Before\n\n  每次测试前\n* @After\n\n  每次测试后\n* @BeforeClass\n\n  测试类准备\n* @AfterClass\n\n  测试类清理\n\n\n\n```java\npackage com.javalearn.junit;\n\n\nimport org.junit.*;\n\npublic class MyMathTest {\n\n    @BeforeClass\n    public static void  beforeClass(){\n        System.out.println(\"@BeforeClass\");\n    }\n\n    @AfterClass\n    public static void afterClass(){\n        System.out.println(\"@AfterClass\");\n    }\n\n\n    @Before\n    public void beforeTest()\n    {\n        System.out.println(\"@Before\");\n    }\n\n    @After\n    public void after(){\n        System.out.println(\"@After\");\n    }\n\n    @Test\n    public void test_1() {\n        System.out.println(\"测试一\");\n    }\n\n    @Test\n    public void test_2() {\n        System.out.println(\"测试二\");\n    }\n}\n```\n\n\n输出：\n\n> @BeforeClass\n> @Before\n> 测试一\n> @After\n> @Before\n> 测试二\n> @After\n> @AfterClass\n","source":"_posts/java/Junit测试.md","raw":"---\ntitle: Junit测试\ndate: 2024-07-02 23:15:25\ncategories:\n  - java\ntags:\n  - java\n---\n\n建议：\n\n* 测试类名：测试类名+Test命名\n* 包名：xxxx.xxx.xx.test\n* 方法名：test+\"_\"+测试方法名+\"_\"+case名 如 test_add_null_param\n* 无返回值，无入参\n\n> 1. 添加Junit依赖\n>\n> 2. 给方法加**@Test**注解运行\n\n\n注解：\n\n* @Test\n\n  测试方法注解\n* @Before\n\n  每次测试前\n* @After\n\n  每次测试后\n* @BeforeClass\n\n  测试类准备\n* @AfterClass\n\n  测试类清理\n\n\n\n```java\npackage com.javalearn.junit;\n\n\nimport org.junit.*;\n\npublic class MyMathTest {\n\n    @BeforeClass\n    public static void  beforeClass(){\n        System.out.println(\"@BeforeClass\");\n    }\n\n    @AfterClass\n    public static void afterClass(){\n        System.out.println(\"@AfterClass\");\n    }\n\n\n    @Before\n    public void beforeTest()\n    {\n        System.out.println(\"@Before\");\n    }\n\n    @After\n    public void after(){\n        System.out.println(\"@After\");\n    }\n\n    @Test\n    public void test_1() {\n        System.out.println(\"测试一\");\n    }\n\n    @Test\n    public void test_2() {\n        System.out.println(\"测试二\");\n    }\n}\n```\n\n\n输出：\n\n> @BeforeClass\n> @Before\n> 测试一\n> @After\n> @Before\n> 测试二\n> @After\n> @AfterClass\n","slug":"java/Junit测试","published":1,"updated":"2024-07-02T15:15:48.879Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19ur00000ouy96sg2819","content":"<p>建议：</p>\n<ul>\n<li>测试类名：测试类名+Test命名</li>\n<li>包名：xxxx.xxx.xx.test</li>\n<li>方法名：test+”<em>“+测试方法名+”</em>“+case名 如 test_add_null_param</li>\n<li>无返回值，无入参</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>添加Junit依赖</p>\n</li>\n<li><p>给方法加**@Test**注解运行</p>\n</li>\n</ol>\n</blockquote>\n<p>注解：</p>\n<ul>\n<li><p>@Test</p>\n<p>测试方法注解</p>\n</li>\n<li><p>@Before</p>\n<p>每次测试前</p>\n</li>\n<li><p>@After</p>\n<p>每次测试后</p>\n</li>\n<li><p>@BeforeClass</p>\n<p>测试类准备</p>\n</li>\n<li><p>@AfterClass</p>\n<p>测试类清理</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.javalearn.junit;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMathTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">beforeClass</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@BeforeClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterClass</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterClass</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@AfterClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeTest</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@Before&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@After&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试一&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试二&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>输出：</p>\n<blockquote>\n<p>@BeforeClass<br>@Before<br>测试一<br>@After<br>@Before<br>测试二<br>@After<br>@AfterClass</p>\n</blockquote>\n","excerpt":"","more":"<p>建议：</p>\n<ul>\n<li>测试类名：测试类名+Test命名</li>\n<li>包名：xxxx.xxx.xx.test</li>\n<li>方法名：test+”<em>“+测试方法名+”</em>“+case名 如 test_add_null_param</li>\n<li>无返回值，无入参</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>添加Junit依赖</p>\n</li>\n<li><p>给方法加**@Test**注解运行</p>\n</li>\n</ol>\n</blockquote>\n<p>注解：</p>\n<ul>\n<li><p>@Test</p>\n<p>测试方法注解</p>\n</li>\n<li><p>@Before</p>\n<p>每次测试前</p>\n</li>\n<li><p>@After</p>\n<p>每次测试后</p>\n</li>\n<li><p>@BeforeClass</p>\n<p>测试类准备</p>\n</li>\n<li><p>@AfterClass</p>\n<p>测试类清理</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.javalearn.junit;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMathTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">beforeClass</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@BeforeClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterClass</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterClass</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@AfterClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeTest</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@Before&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;@After&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试一&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试二&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>输出：</p>\n<blockquote>\n<p>@BeforeClass<br>@Before<br>测试一<br>@After<br>@Before<br>测试二<br>@After<br>@AfterClass</p>\n</blockquote>\n"},{"title":"序列化","date":"2024-07-02T14:21:56.000Z","_content":"\n# `serialVersionUID`作用\n\n引用：[Java serialVersionUID 有什么作用？ - 简书 (jianshu.com)](https://www.jianshu.com/p/91fa3d2ac892)\n\n[java.io.Serializable](http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html) doc 文档，给出了一个相对详细解释:\n\nserialVersionUID 是 Java 为每个序列化类产生的版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。序列化的类可显式声明 serialVersionUID 的值，如下:\n\n```java\nANY-ACCESS-MODIFIER static final long serialVersionUID = 1L;\n```\n\n\n```java\npublic class Person implements Serializable {\n    // 序列化标识\n    private static final long serialVersionUID = 1L;\n\n    private String name;\n    private Integer age;\n    private String address;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n```\n\n\n```java\n@Test\npublic void testversion1L() throws Exception {\n    File file = new File(\"person.out\");\n    // 序列化\n    ObjectOutputStream oout = new ObjectOutputStream(new FileOutputStream(file));\n    Person person = new Person(\"Haozi\", 22, \"上海\");\n    oout.writeObject(person);\n    oout.close();\n    // 反序列化\n    // 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化识别\n    ObjectInputStream oin = new ObjectInputStream(new FileInputStream(file));\n    Object newPerson = oin.readObject();\n    oin.close();\n    System.out.println(newPerson);\n}\n```\n\n> 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化失败，serialVersionUID 在不被定义时会在序列化时根据类内容生成\n\n\n# json 序列化为什么要实现`Serializable `\n\njson 序列化不必实现 `Serializable`，个别库需要实现可能因为自定义的合规校验，或其他原因。","source":"_posts/java/序列化.md","raw":"---\ntitle: 序列化\ndate: 2024-07-02 22:21:56\ncategories:\n  - java\ntags:\n  - java\n  - 序列化\n---\n\n# `serialVersionUID`作用\n\n引用：[Java serialVersionUID 有什么作用？ - 简书 (jianshu.com)](https://www.jianshu.com/p/91fa3d2ac892)\n\n[java.io.Serializable](http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html) doc 文档，给出了一个相对详细解释:\n\nserialVersionUID 是 Java 为每个序列化类产生的版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。序列化的类可显式声明 serialVersionUID 的值，如下:\n\n```java\nANY-ACCESS-MODIFIER static final long serialVersionUID = 1L;\n```\n\n\n```java\npublic class Person implements Serializable {\n    // 序列化标识\n    private static final long serialVersionUID = 1L;\n\n    private String name;\n    private Integer age;\n    private String address;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n```\n\n\n```java\n@Test\npublic void testversion1L() throws Exception {\n    File file = new File(\"person.out\");\n    // 序列化\n    ObjectOutputStream oout = new ObjectOutputStream(new FileOutputStream(file));\n    Person person = new Person(\"Haozi\", 22, \"上海\");\n    oout.writeObject(person);\n    oout.close();\n    // 反序列化\n    // 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化识别\n    ObjectInputStream oin = new ObjectInputStream(new FileInputStream(file));\n    Object newPerson = oin.readObject();\n    oin.close();\n    System.out.println(newPerson);\n}\n```\n\n> 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化失败，serialVersionUID 在不被定义时会在序列化时根据类内容生成\n\n\n# json 序列化为什么要实现`Serializable `\n\njson 序列化不必实现 `Serializable`，个别库需要实现可能因为自定义的合规校验，或其他原因。","slug":"java/序列化","published":1,"updated":"2024-07-02T14:23:23.708Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19uu00010ouy8p362l2q","content":"<h1 id=\"serialVersionUID作用\"><a href=\"#serialVersionUID作用\" class=\"headerlink\" title=\"serialVersionUID作用\"></a><code>serialVersionUID</code>作用</h1><p>引用：<a href=\"https://www.jianshu.com/p/91fa3d2ac892\">Java serialVersionUID 有什么作用？ - 简书 (jianshu.com)</a></p>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">java.io.Serializable</a> doc 文档，给出了一个相对详细解释:</p>\n<p>serialVersionUID 是 Java 为每个序列化类产生的版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。序列化的类可显式声明 serialVersionUID 的值，如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANY-ACCESS-MODIFIER <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 序列化标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age, String address)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, address=&#x27;&quot;</span> + address + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testversion1L</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oout</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file));</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Haozi&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">    oout.writeObject(person);</span><br><span class=\"line\">    oout.close();</span><br><span class=\"line\">    <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">    <span class=\"comment\">// 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化识别</span></span><br><span class=\"line\">    <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">oin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file));</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">newPerson</span> <span class=\"operator\">=</span> oin.readObject();</span><br><span class=\"line\">    oin.close();</span><br><span class=\"line\">    System.out.println(newPerson);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在不定义 serialVersionUID 时，修改 Person 类会导致反序列化失败，serialVersionUID 在不被定义时会在序列化时根据类内容生成</p>\n</blockquote>\n<h1 id=\"json-序列化为什么要实现Serializable\"><a href=\"#json-序列化为什么要实现Serializable\" class=\"headerlink\" title=\"json 序列化为什么要实现Serializable \"></a>json 序列化为什么要实现<code>Serializable </code></h1><p>json 序列化不必实现 <code>Serializable</code>，个别库需要实现可能因为自定义的合规校验，或其他原因。</p>\n","excerpt":"","more":"<h1 id=\"serialVersionUID作用\"><a href=\"#serialVersionUID作用\" class=\"headerlink\" title=\"serialVersionUID作用\"></a><code>serialVersionUID</code>作用</h1><p>引用：<a href=\"https://www.jianshu.com/p/91fa3d2ac892\">Java serialVersionUID 有什么作用？ - 简书 (jianshu.com)</a></p>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">java.io.Serializable</a> doc 文档，给出了一个相对详细解释:</p>\n<p>serialVersionUID 是 Java 为每个序列化类产生的版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。序列化的类可显式声明 serialVersionUID 的值，如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANY-ACCESS-MODIFIER <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 序列化标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, Integer age, String address)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, address=&#x27;&quot;</span> + address + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testversion1L</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;person.out&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oout</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file));</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Haozi&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">    oout.writeObject(person);</span><br><span class=\"line\">    oout.close();</span><br><span class=\"line\">    <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">    <span class=\"comment\">// 在不定义 serialVersionUID 时，修改 Person 类会导致反序列化识别</span></span><br><span class=\"line\">    <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">oin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file));</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">newPerson</span> <span class=\"operator\">=</span> oin.readObject();</span><br><span class=\"line\">    oin.close();</span><br><span class=\"line\">    System.out.println(newPerson);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在不定义 serialVersionUID 时，修改 Person 类会导致反序列化失败，serialVersionUID 在不被定义时会在序列化时根据类内容生成</p>\n</blockquote>\n<h1 id=\"json-序列化为什么要实现Serializable\"><a href=\"#json-序列化为什么要实现Serializable\" class=\"headerlink\" title=\"json 序列化为什么要实现Serializable \"></a>json 序列化为什么要实现<code>Serializable </code></h1><p>json 序列化不必实现 <code>Serializable</code>，个别库需要实现可能因为自定义的合规校验，或其他原因。</p>\n"},{"title":"JDBC(Java Database Connectify)","date":"2024-07-02T15:04:55.000Z","_content":"\n概念：java数据库连接\n\n本质：官方定义的一套操作关系型数据库的规则（接口），各个厂商去实现这些接口，提供数据驱动的jar包。\n\n![image.png](./img/jdbc.png)\n\n## 快速入门\n\n步骤：\n\n1. 导入jar包\n\n   msql5后，目前可以省略，引用包中存在services文件，包含驱动类会自动加载\n\n   ![image.png](./img/java.sql.Driver.png)\n2. 注册驱动\n3. 获取数据库连接对象Connection\n4. 定义SQL\n5. 获取执行SQL语句的对象statement\n6. 执行SQL，接收返回结果\n7. 处理结果\n8. 释放资源\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException, SQLException {\n\t// 自动加载，一般省略加载驱动类\n\t// Class.forName(\"com.mysql.cj.jdbc.Driver\");\n\tConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db1\", \"***\", \"***\");\n\tString sql = \"update student set score = 3 where id = 1\";\n\tStatement statement = conn.createStatement();\n\tint i = statement.executeUpdate(sql);\n\tSystem.out.println(i);\n\tstatement.close(); // 示例代码，正常应当在finally中结束\n\tconn.close();\n\n}\n\n```\n\n### 详解各个对象\n\n1. DriverManager：驱动管理对象\n\n   功能\n\n    1. 注册驱动\n\n       DiriverManager中注册驱动方法\n\n        ```java\n        public static synchronized void registerDriver(java.sql.Driver driver)\n        ```\n\n       驱动实现类中的静态块，加载类时会直接执行\n\n        ```java\n            static {\n                try {\n                    DriverManager.registerDriver(new Driver());\n                } catch (SQLException var1) {\n                    throw new RuntimeException(\"Can't register driver!\");\n                }\n            }\n        ```\n    2. 获取数据库连接\n\n       方法：\n\n        ```java\n        static Connection getConnection(String url,\n                String user, String password) throws SQLException\n        ```\n\n       参数：\n\n        * URL：指定连接路径\n\n          语法：` jdbc:mysql://<ip>:<端口>/<数据库名>`\n\n          连接本机可以省略ip\n        * user：用户名\n        * password：密码\n2. Connection：数据库连接对象\n\n    1. close ：使用后释放\n    2. 获取执行SQL对象\n\n        ```java\n        Statement createStatement() throws SQLException;\n        ```\n\n\n        ```java\n        PreparedStatement prepareStatement(String sql)\n            throws SQLException;\n        ```\n    3. 管理事务\n\n        **注：也可以直接在SQL中控制事务**\n\n        * 开启事务：setAutoCommit(boolean autocommit)；设置为false即为开启事务\n        * 提交事务：commit()\n        * 回滚事务：rollback()\n3. Statement：执行SQL对象\n\n    1. close ：使用后释放\n    2. boolean execute(String sql)：可以执行任意SQL\n    3. int excuteUpdate(String sql)：执行DML（增删改）.DDL（create,alter,drop）\n\n       返回值：影响行数\n    4. ResultSet executeQuery(String sql)：执行DQL\n4. ResultSet：结果集对象\n\n    * close ：使用后释放\n    * boolean next()\n\n      游标移动到下一行\n\n      移动到结束位置返回false\n\n      ```java\n      while(rs.next()){\n      ... rs.getXxx(...);\n      }\n      ```\n    * getXxx(...)\n\n      参数为列号或者列名\n\n      返回游标目前指向的特定行\n5. PreparedStatement：执行SQL对象\n\n    1. SQL注入\n\n       输入密码为 `a' or 'a' = 'a`，造成SQL拼接错误\n\n       使用PrepareStatement可以解决SQL注入问题\n    2. 预编译SQL：参数使用`?`作为占位符\n    3. 使用\n\n        1. 定义SQL\n\n            ```sql\n            select * from user where name = ? and password = ?\n            ```\n        2. 获取PreparedStatement\n\n            ```sql\n            PreparedStatement prepareStatement(String sql)\n                throws SQLException;\n            ```\n        3. 给参数赋值\n\n           setXxx(参数1，参数2)\n\n            1. 参数1：参数位置，从1开始\n            2. 参数值\n        4. 执行语句\n\n   *注：PreparedStatement更安全且效率更高*","source":"_posts/java/JDBC-Java-Database-Connectify.md","raw":"---\ntitle: JDBC(Java Database Connectify)\ndate: 2024-07-02 23:04:55\ncategories:\n  - java\ntags:\n  - java\n---\n\n概念：java数据库连接\n\n本质：官方定义的一套操作关系型数据库的规则（接口），各个厂商去实现这些接口，提供数据驱动的jar包。\n\n![image.png](./img/jdbc.png)\n\n## 快速入门\n\n步骤：\n\n1. 导入jar包\n\n   msql5后，目前可以省略，引用包中存在services文件，包含驱动类会自动加载\n\n   ![image.png](./img/java.sql.Driver.png)\n2. 注册驱动\n3. 获取数据库连接对象Connection\n4. 定义SQL\n5. 获取执行SQL语句的对象statement\n6. 执行SQL，接收返回结果\n7. 处理结果\n8. 释放资源\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException, SQLException {\n\t// 自动加载，一般省略加载驱动类\n\t// Class.forName(\"com.mysql.cj.jdbc.Driver\");\n\tConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db1\", \"***\", \"***\");\n\tString sql = \"update student set score = 3 where id = 1\";\n\tStatement statement = conn.createStatement();\n\tint i = statement.executeUpdate(sql);\n\tSystem.out.println(i);\n\tstatement.close(); // 示例代码，正常应当在finally中结束\n\tconn.close();\n\n}\n\n```\n\n### 详解各个对象\n\n1. DriverManager：驱动管理对象\n\n   功能\n\n    1. 注册驱动\n\n       DiriverManager中注册驱动方法\n\n        ```java\n        public static synchronized void registerDriver(java.sql.Driver driver)\n        ```\n\n       驱动实现类中的静态块，加载类时会直接执行\n\n        ```java\n            static {\n                try {\n                    DriverManager.registerDriver(new Driver());\n                } catch (SQLException var1) {\n                    throw new RuntimeException(\"Can't register driver!\");\n                }\n            }\n        ```\n    2. 获取数据库连接\n\n       方法：\n\n        ```java\n        static Connection getConnection(String url,\n                String user, String password) throws SQLException\n        ```\n\n       参数：\n\n        * URL：指定连接路径\n\n          语法：` jdbc:mysql://<ip>:<端口>/<数据库名>`\n\n          连接本机可以省略ip\n        * user：用户名\n        * password：密码\n2. Connection：数据库连接对象\n\n    1. close ：使用后释放\n    2. 获取执行SQL对象\n\n        ```java\n        Statement createStatement() throws SQLException;\n        ```\n\n\n        ```java\n        PreparedStatement prepareStatement(String sql)\n            throws SQLException;\n        ```\n    3. 管理事务\n\n        **注：也可以直接在SQL中控制事务**\n\n        * 开启事务：setAutoCommit(boolean autocommit)；设置为false即为开启事务\n        * 提交事务：commit()\n        * 回滚事务：rollback()\n3. Statement：执行SQL对象\n\n    1. close ：使用后释放\n    2. boolean execute(String sql)：可以执行任意SQL\n    3. int excuteUpdate(String sql)：执行DML（增删改）.DDL（create,alter,drop）\n\n       返回值：影响行数\n    4. ResultSet executeQuery(String sql)：执行DQL\n4. ResultSet：结果集对象\n\n    * close ：使用后释放\n    * boolean next()\n\n      游标移动到下一行\n\n      移动到结束位置返回false\n\n      ```java\n      while(rs.next()){\n      ... rs.getXxx(...);\n      }\n      ```\n    * getXxx(...)\n\n      参数为列号或者列名\n\n      返回游标目前指向的特定行\n5. PreparedStatement：执行SQL对象\n\n    1. SQL注入\n\n       输入密码为 `a' or 'a' = 'a`，造成SQL拼接错误\n\n       使用PrepareStatement可以解决SQL注入问题\n    2. 预编译SQL：参数使用`?`作为占位符\n    3. 使用\n\n        1. 定义SQL\n\n            ```sql\n            select * from user where name = ? and password = ?\n            ```\n        2. 获取PreparedStatement\n\n            ```sql\n            PreparedStatement prepareStatement(String sql)\n                throws SQLException;\n            ```\n        3. 给参数赋值\n\n           setXxx(参数1，参数2)\n\n            1. 参数1：参数位置，从1开始\n            2. 参数值\n        4. 执行语句\n\n   *注：PreparedStatement更安全且效率更高*","slug":"java/JDBC-Java-Database-Connectify","published":1,"updated":"2024-07-02T15:07:20.124Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19v300040ouy21kjd0lb","content":"<p>概念：java数据库连接</p>\n<p>本质：官方定义的一套操作关系型数据库的规则（接口），各个厂商去实现这些接口，提供数据驱动的jar包。</p>\n<p><img src=\"/hexo-blog/./img/jdbc.png\" alt=\"image.png\"></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>步骤：</p>\n<ol>\n<li><p>导入jar包</p>\n<p>msql5后，目前可以省略，引用包中存在services文件，包含驱动类会自动加载</p>\n<p><img src=\"/hexo-blog/./img/java.sql.Driver.png\" alt=\"image.png\"></p>\n</li>\n<li><p>注册驱动</p>\n</li>\n<li><p>获取数据库连接对象Connection</p>\n</li>\n<li><p>定义SQL</p>\n</li>\n<li><p>获取执行SQL语句的对象statement</p>\n</li>\n<li><p>执行SQL，接收返回结果</p>\n</li>\n<li><p>处理结果</p>\n</li>\n<li><p>释放资源</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 自动加载，一般省略加载驱动类</span></span><br><span class=\"line\">\t<span class=\"comment\">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class=\"line\">\t<span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>, <span class=\"string\">&quot;***&quot;</span>, <span class=\"string\">&quot;***&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;update student set score = 3 where id = 1&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> statement.executeUpdate(sql);</span><br><span class=\"line\">\tSystem.out.println(i);</span><br><span class=\"line\">\tstatement.close(); <span class=\"comment\">// 示例代码，正常应当在finally中结束</span></span><br><span class=\"line\">\tconn.close();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"详解各个对象\"><a href=\"#详解各个对象\" class=\"headerlink\" title=\"详解各个对象\"></a>详解各个对象</h3><ol>\n<li><p>DriverManager：驱动管理对象</p>\n<p>功能</p>\n<ol>\n<li><p>注册驱动</p>\n<p>DiriverManager中注册驱动方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDriver</span><span class=\"params\">(java.sql.Driver driver)</span></span><br></pre></td></tr></table></figure>\n\n<p>驱动实现类中的静态块，加载类时会直接执行</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        DriverManager.registerDriver(<span class=\"keyword\">new</span> <span class=\"title class_\">Driver</span>());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException var1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>获取数据库连接</p>\n<p>方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">(String url,</span></span><br><span class=\"line\"><span class=\"params\">        String user, String password)</span> <span class=\"keyword\">throws</span> SQLException</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<ul>\n<li><p>URL：指定连接路径</p>\n<p>语法：<code> jdbc:mysql://&lt;ip&gt;:&lt;端口&gt;/&lt;数据库名&gt;</code></p>\n<p>连接本机可以省略ip</p>\n</li>\n<li><p>user：用户名</p>\n</li>\n<li><p>password：密码</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Connection：数据库连接对象</p>\n<ol>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>获取执行SQL对象</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Statement <span class=\"title function_\">createStatement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br></pre></td></tr></table></figure>\n\n\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> SQLException;</span><br></pre></td></tr></table></figure></li>\n<li><p>管理事务</p>\n<p> <strong>注：也可以直接在SQL中控制事务</strong></p>\n<ul>\n<li>开启事务：setAutoCommit(boolean autocommit)；设置为false即为开启事务</li>\n<li>提交事务：commit()</li>\n<li>回滚事务：rollback()</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Statement：执行SQL对象</p>\n<ol>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>boolean execute(String sql)：可以执行任意SQL</p>\n</li>\n<li><p>int excuteUpdate(String sql)：执行DML（增删改）.DDL（create,alter,drop）</p>\n<p>返回值：影响行数</p>\n</li>\n<li><p>ResultSet executeQuery(String sql)：执行DQL</p>\n</li>\n</ol>\n</li>\n<li><p>ResultSet：结果集对象</p>\n<ul>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>boolean next()</p>\n<p>游标移动到下一行</p>\n<p>移动到结束位置返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">... rs.getXxx(...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>getXxx(…)</p>\n<p>参数为列号或者列名</p>\n<p>返回游标目前指向的特定行</p>\n</li>\n</ul>\n</li>\n<li><p>PreparedStatement：执行SQL对象</p>\n<ol>\n<li><p>SQL注入</p>\n<p>输入密码为 <code>a&#39; or &#39;a&#39; = &#39;a</code>，造成SQL拼接错误</p>\n<p>使用PrepareStatement可以解决SQL注入问题</p>\n</li>\n<li><p>预编译SQL：参数使用<code>?</code>作为占位符</p>\n</li>\n<li><p>使用</p>\n<ol>\n<li><p>定义SQL</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> ? <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> ?</span><br></pre></td></tr></table></figure></li>\n<li><p>获取PreparedStatement</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement prepareStatement(String <span class=\"keyword\">sql</span>)</span><br><span class=\"line\">    throws <span class=\"keyword\">SQLException</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>给参数赋值</p>\n<p>setXxx(参数1，参数2)</p>\n<ol>\n<li>参数1：参数位置，从1开始</li>\n<li>参数值</li>\n</ol>\n</li>\n<li><p>执行语句</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><em>注：PreparedStatement更安全且效率更高</em></p>\n</li>\n</ol>\n","excerpt":"","more":"<p>概念：java数据库连接</p>\n<p>本质：官方定义的一套操作关系型数据库的规则（接口），各个厂商去实现这些接口，提供数据驱动的jar包。</p>\n<p><img src=\"/hexo-blog/./img/jdbc.png\" alt=\"image.png\"></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>步骤：</p>\n<ol>\n<li><p>导入jar包</p>\n<p>msql5后，目前可以省略，引用包中存在services文件，包含驱动类会自动加载</p>\n<p><img src=\"/hexo-blog/./img/java.sql.Driver.png\" alt=\"image.png\"></p>\n</li>\n<li><p>注册驱动</p>\n</li>\n<li><p>获取数据库连接对象Connection</p>\n</li>\n<li><p>定义SQL</p>\n</li>\n<li><p>获取执行SQL语句的对象statement</p>\n</li>\n<li><p>执行SQL，接收返回结果</p>\n</li>\n<li><p>处理结果</p>\n</li>\n<li><p>释放资源</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 自动加载，一般省略加载驱动类</span></span><br><span class=\"line\">\t<span class=\"comment\">// Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class=\"line\">\t<span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>, <span class=\"string\">&quot;***&quot;</span>, <span class=\"string\">&quot;***&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;update student set score = 3 where id = 1&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> statement.executeUpdate(sql);</span><br><span class=\"line\">\tSystem.out.println(i);</span><br><span class=\"line\">\tstatement.close(); <span class=\"comment\">// 示例代码，正常应当在finally中结束</span></span><br><span class=\"line\">\tconn.close();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"详解各个对象\"><a href=\"#详解各个对象\" class=\"headerlink\" title=\"详解各个对象\"></a>详解各个对象</h3><ol>\n<li><p>DriverManager：驱动管理对象</p>\n<p>功能</p>\n<ol>\n<li><p>注册驱动</p>\n<p>DiriverManager中注册驱动方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDriver</span><span class=\"params\">(java.sql.Driver driver)</span></span><br></pre></td></tr></table></figure>\n\n<p>驱动实现类中的静态块，加载类时会直接执行</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        DriverManager.registerDriver(<span class=\"keyword\">new</span> <span class=\"title class_\">Driver</span>());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException var1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>获取数据库连接</p>\n<p>方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">(String url,</span></span><br><span class=\"line\"><span class=\"params\">        String user, String password)</span> <span class=\"keyword\">throws</span> SQLException</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<ul>\n<li><p>URL：指定连接路径</p>\n<p>语法：<code> jdbc:mysql://&lt;ip&gt;:&lt;端口&gt;/&lt;数据库名&gt;</code></p>\n<p>连接本机可以省略ip</p>\n</li>\n<li><p>user：用户名</p>\n</li>\n<li><p>password：密码</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Connection：数据库连接对象</p>\n<ol>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>获取执行SQL对象</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Statement <span class=\"title function_\">createStatement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br></pre></td></tr></table></figure>\n\n\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> SQLException;</span><br></pre></td></tr></table></figure></li>\n<li><p>管理事务</p>\n<p> <strong>注：也可以直接在SQL中控制事务</strong></p>\n<ul>\n<li>开启事务：setAutoCommit(boolean autocommit)；设置为false即为开启事务</li>\n<li>提交事务：commit()</li>\n<li>回滚事务：rollback()</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Statement：执行SQL对象</p>\n<ol>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>boolean execute(String sql)：可以执行任意SQL</p>\n</li>\n<li><p>int excuteUpdate(String sql)：执行DML（增删改）.DDL（create,alter,drop）</p>\n<p>返回值：影响行数</p>\n</li>\n<li><p>ResultSet executeQuery(String sql)：执行DQL</p>\n</li>\n</ol>\n</li>\n<li><p>ResultSet：结果集对象</p>\n<ul>\n<li><p>close ：使用后释放</p>\n</li>\n<li><p>boolean next()</p>\n<p>游标移动到下一行</p>\n<p>移动到结束位置返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">... rs.getXxx(...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>getXxx(…)</p>\n<p>参数为列号或者列名</p>\n<p>返回游标目前指向的特定行</p>\n</li>\n</ul>\n</li>\n<li><p>PreparedStatement：执行SQL对象</p>\n<ol>\n<li><p>SQL注入</p>\n<p>输入密码为 <code>a&#39; or &#39;a&#39; = &#39;a</code>，造成SQL拼接错误</p>\n<p>使用PrepareStatement可以解决SQL注入问题</p>\n</li>\n<li><p>预编译SQL：参数使用<code>?</code>作为占位符</p>\n</li>\n<li><p>使用</p>\n<ol>\n<li><p>定义SQL</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> ? <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> ?</span><br></pre></td></tr></table></figure></li>\n<li><p>获取PreparedStatement</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement prepareStatement(String <span class=\"keyword\">sql</span>)</span><br><span class=\"line\">    throws <span class=\"keyword\">SQLException</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>给参数赋值</p>\n<p>setXxx(参数1，参数2)</p>\n<ol>\n<li>参数1：参数位置，从1开始</li>\n<li>参数值</li>\n</ol>\n</li>\n<li><p>执行语句</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><em>注：PreparedStatement更安全且效率更高</em></p>\n</li>\n</ol>\n"},{"title":"java","date":"2024-07-02T14:25:05.000Z","_content":"### 内存分区\n\nString 是否使用new关键字是使用内存区别\n\n1. 静态区\n2. 堆\n\n### 集合框架\n\n继承关系了解，每种实现了解\n\n### 并发\n\n![image.png](./img/java并发.png)\n\n### IO框架\n\n![image.png](./img/java_io.png)\n\n\n\n# 时间格式化\n\n\n\n```sql\n// https://blog.csdn.net/qq_27093465/article/details/53034427\n    private static void formatDataTest() {\n        /*\n         * 日期转期望格式的字符串\n         */\n        //HH 和 hh 的差别：前者是24小时制，后者是12小时制。\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"yyyy年MM月dd日 HH:mm:ss\")\n                .append(\" 上下午标志 a\")\n                .append(\" E\")\n                .append(\" 一年中的第D天\")\n                .append(\" 一月中的第F个星期\")\n                .append(\" 一年中的第w个星期\")\n                .append(\" 一月中的第W个星期\")\n                .append(\" Z\")\n                .append(\" z\");\n        SimpleDateFormat sdf = new SimpleDateFormat(sb.toString());\n        String dateString = sdf.format(new Date());\n        System.out.println(dateString);\n        /*\n         * 字符串转日期\n         */\n        Date date;\n        try {\n            date = sdf.parse(dateString);\n            System.out.println(date);\n        } catch (ParseException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n```\n","source":"_posts/java/java.md","raw":"---\ntitle: java\ndate: 2024-07-02 22:25:05\ncategories:\n  - java\ntags:\n  - java\n---\n### 内存分区\n\nString 是否使用new关键字是使用内存区别\n\n1. 静态区\n2. 堆\n\n### 集合框架\n\n继承关系了解，每种实现了解\n\n### 并发\n\n![image.png](./img/java并发.png)\n\n### IO框架\n\n![image.png](./img/java_io.png)\n\n\n\n# 时间格式化\n\n\n\n```sql\n// https://blog.csdn.net/qq_27093465/article/details/53034427\n    private static void formatDataTest() {\n        /*\n         * 日期转期望格式的字符串\n         */\n        //HH 和 hh 的差别：前者是24小时制，后者是12小时制。\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"yyyy年MM月dd日 HH:mm:ss\")\n                .append(\" 上下午标志 a\")\n                .append(\" E\")\n                .append(\" 一年中的第D天\")\n                .append(\" 一月中的第F个星期\")\n                .append(\" 一年中的第w个星期\")\n                .append(\" 一月中的第W个星期\")\n                .append(\" Z\")\n                .append(\" z\");\n        SimpleDateFormat sdf = new SimpleDateFormat(sb.toString());\n        String dateString = sdf.format(new Date());\n        System.out.println(dateString);\n        /*\n         * 字符串转日期\n         */\n        Date date;\n        try {\n            date = sdf.parse(dateString);\n            System.out.println(date);\n        } catch (ParseException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n```\n","slug":"java/java","published":1,"updated":"2024-07-02T14:27:06.717Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19v400050ouy0g1mbcq8","content":"<h3 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h3><p>String 是否使用new关键字是使用内存区别</p>\n<ol>\n<li>静态区</li>\n<li>堆</li>\n</ol>\n<h3 id=\"集合框架\"><a href=\"#集合框架\" class=\"headerlink\" title=\"集合框架\"></a>集合框架</h3><p>继承关系了解，每种实现了解</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p><img src=\"/hexo-blog/./img/java%E5%B9%B6%E5%8F%91.png\" alt=\"image.png\"></p>\n<h3 id=\"IO框架\"><a href=\"#IO框架\" class=\"headerlink\" title=\"IO框架\"></a>IO框架</h3><p><img src=\"/hexo-blog/./img/java_io.png\" alt=\"image.png\"></p>\n<h1 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> https:<span class=\"operator\">/</span><span class=\"operator\">/</span>blog.csdn.net<span class=\"operator\">/</span>qq_27093465<span class=\"operator\">/</span>article<span class=\"operator\">/</span>details<span class=\"operator\">/</span><span class=\"number\">53034427</span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> void formatDataTest() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 日期转期望格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"operator\">/</span><span class=\"operator\">/</span>HH 和 hh 的差别：前者是<span class=\"number\">24</span>小时制，后者是<span class=\"number\">12</span>小时制。</span><br><span class=\"line\">        StringBuilder sb <span class=\"operator\">=</span> <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(&quot;yyyy年MM月dd日 HH:mm:ss&quot;)</span><br><span class=\"line\">                .append(&quot; 上下午标志 a&quot;)</span><br><span class=\"line\">                .append(&quot; E&quot;)</span><br><span class=\"line\">                .append(&quot; 一年中的第D天&quot;)</span><br><span class=\"line\">                .append(&quot; 一月中的第F个星期&quot;)</span><br><span class=\"line\">                .append(&quot; 一年中的第w个星期&quot;)</span><br><span class=\"line\">                .append(&quot; 一月中的第W个星期&quot;)</span><br><span class=\"line\">                .append(&quot; Z&quot;)</span><br><span class=\"line\">                .append(&quot; z&quot;);</span><br><span class=\"line\">        SimpleDateFormat sdf <span class=\"operator\">=</span> <span class=\"keyword\">new</span> SimpleDateFormat(sb.toString());</span><br><span class=\"line\">        String dateString <span class=\"operator\">=</span> sdf.format(<span class=\"keyword\">new</span> <span class=\"type\">Date</span>());</span><br><span class=\"line\">        System.out.println(dateString);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 字符串转日期</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"type\">date</span>;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            <span class=\"type\">date</span> <span class=\"operator\">=</span> sdf.parse(dateString);</span><br><span class=\"line\">            System.out.println(<span class=\"type\">date</span>);</span><br><span class=\"line\">        &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h3><p>String 是否使用new关键字是使用内存区别</p>\n<ol>\n<li>静态区</li>\n<li>堆</li>\n</ol>\n<h3 id=\"集合框架\"><a href=\"#集合框架\" class=\"headerlink\" title=\"集合框架\"></a>集合框架</h3><p>继承关系了解，每种实现了解</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p><img src=\"/hexo-blog/./img/java%E5%B9%B6%E5%8F%91.png\" alt=\"image.png\"></p>\n<h3 id=\"IO框架\"><a href=\"#IO框架\" class=\"headerlink\" title=\"IO框架\"></a>IO框架</h3><p><img src=\"/hexo-blog/./img/java_io.png\" alt=\"image.png\"></p>\n<h1 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> https:<span class=\"operator\">/</span><span class=\"operator\">/</span>blog.csdn.net<span class=\"operator\">/</span>qq_27093465<span class=\"operator\">/</span>article<span class=\"operator\">/</span>details<span class=\"operator\">/</span><span class=\"number\">53034427</span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> void formatDataTest() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 日期转期望格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"operator\">/</span><span class=\"operator\">/</span>HH 和 hh 的差别：前者是<span class=\"number\">24</span>小时制，后者是<span class=\"number\">12</span>小时制。</span><br><span class=\"line\">        StringBuilder sb <span class=\"operator\">=</span> <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(&quot;yyyy年MM月dd日 HH:mm:ss&quot;)</span><br><span class=\"line\">                .append(&quot; 上下午标志 a&quot;)</span><br><span class=\"line\">                .append(&quot; E&quot;)</span><br><span class=\"line\">                .append(&quot; 一年中的第D天&quot;)</span><br><span class=\"line\">                .append(&quot; 一月中的第F个星期&quot;)</span><br><span class=\"line\">                .append(&quot; 一年中的第w个星期&quot;)</span><br><span class=\"line\">                .append(&quot; 一月中的第W个星期&quot;)</span><br><span class=\"line\">                .append(&quot; Z&quot;)</span><br><span class=\"line\">                .append(&quot; z&quot;);</span><br><span class=\"line\">        SimpleDateFormat sdf <span class=\"operator\">=</span> <span class=\"keyword\">new</span> SimpleDateFormat(sb.toString());</span><br><span class=\"line\">        String dateString <span class=\"operator\">=</span> sdf.format(<span class=\"keyword\">new</span> <span class=\"type\">Date</span>());</span><br><span class=\"line\">        System.out.println(dateString);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 字符串转日期</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"type\">date</span>;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            <span class=\"type\">date</span> <span class=\"operator\">=</span> sdf.parse(dateString);</span><br><span class=\"line\">            System.out.println(<span class=\"type\">date</span>);</span><br><span class=\"line\">        &#125; catch (ParseException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"反射","date":"2024-07-02T15:09:11.000Z","_content":"![image.png](./img/反射.png)\n\n\n机制：将类的各个组成部分封装为其他的对象\n\n优势：\n\n1. 灵活。可以在程序运行过程中操作这些对象\n2. 解耦。提高了程序的可扩展性\n\n\n###### 获取Class对象方式：\n\n1. Class.forName(\"类完全限定名\")\n2. 类名.class\n3. 对象.getClass()\n\n   getClass()方法来自Object类\n\n\n###### Class对象功能：\n\n1. 获取成员变量\n\n    * Field[] getFields()\n\n      返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象\n    * Fidld getField(String name)\n\n      返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象\n    * Field[] getDeclaredFields()\n\n      返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象\n    * Field getDeclaredField(String name)\n\n      返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象\n\n2. 获取构造方法\n\n    * Constructor<T> getConstructor(Class<?>... parameterTypes)\n\n      返回一个 Constructor对象，该对象反映 Constructor对象表示的类的指定的公共 类函数。\n    * Constructor<?>[] getConstructors()\n\n      返回包含一个数组 Constructor对象反射由此表示的类的所有公共构造 类对象。\n    * Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)\n\n      getDeclaredConstructor返回一个Constructor对象，该对象反映 Constructor对象表示的类或接口的指定 类函数\n    * Constructor<?> getDeclaredConstructors()\n      返回一个反映 Constructor对象表示的类声明的所有 Constructor对象的数组类 。\n3. 获取成员方法\n\n    * Method getMethod(String name, Class<?>... parameterTypes)\n\n      返回一个 方法对象，它反映此表示的类或接口的指定公共成员方法 类对象。\n    * Method[]  getMethods()\n\n      返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明\n    * Method getDeclaredMethod(String name, Class<?>... parameterTypes)\n\n      返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 类对象\n    * Method[] getDeclaredMethods()\n\n      返回包含一个数组 方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法\n\n4. 获类名\n\n   String getName();\n5. newInstance()\n\n   类空入参构造器\n\n\nField对象常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. Object get(Object obj)\n\n   返回该所表示的字段的值 Field ，指定的对象上\n3. void set(Object obj, Object value)\n\n   将指定对象参数上的此 Field对象表示的字段设置为指定的新值\n\n\n**获取字段及修改内容**代码示例：\n\n```java\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        System.out.println(\"getFields----------\");\n        Field[] fields = Person.class.getFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n        System.out.println(\"getField----------\");\n        Field testPub1 = Person.class.getField(\"testPub1\");\n        System.out.println(testPub1);\n\n        System.out.println(\"getDeclaredFields----------\");\n        fields = Person.class.getDeclaredFields();\n        Arrays.stream(fields).forEach(System.out::println);\n\n        System.out.println(\"getDeclaredField----------\");\n        Field name = Person.class.getDeclaredField(\"name\");\n        System.out.println(name);\n\n\n        System.out.println(\"Field操作----------\");\n        Person person = new Person();\n        Object o = testPub1.get(person);\n        System.out.println(\"o:\" + o);\n        testPub1.set(person, \"fieldSetTest\");\n        o = testPub1.get(person);\n        System.out.println(\"o:\" + o);\n\n\n        System.out.println(\"私有Field操作----------\");\n        name.setAccessible(true);\n        System.out.println(name.get(person));\n        name.set(person, \"privateSetTest\");\n        System.out.println(name.get(person));\n\n    }\n```\n\n运行结果：\n\n> getFields----------\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> public java.lang.String com.javalearn.reflect.Person.testPub2\n> getField----------\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> getDeclaredFields----------\n> private java.lang.String com.javalearn.reflect.Person.name\n> private java.lang.String com.javalearn.reflect.Person.age\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> public java.lang.String com.javalearn.reflect.Person.testPub2\n> getDeclaredField----------\n> private java.lang.String com.javalearn.reflect.Person.name\n> Field操作----------\n> o:null\n> o:fieldSetTest\n> 私有Field操作----------\n> null\n> privateSetTest\n>\n> Process finished with exit code 0\n\nConstructor常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. T newInstance(Object... initargs)\n\n   使用此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例\n\n\n```java\n public void test_constructor() throws NoSuchMethodException, InvocationTargetException\n            , InstantiationException, IllegalAccessException {\n\n        System.out.println(\"getConstructors--------------------------\");\n        Constructor<?>[] constructors = Person.class.getConstructors();\n        Arrays.stream(constructors).forEach(System.out::println);\n\n        System.out.println(\"getConstructor-----------\");\n        Constructor<Person> constructor = Person.class.getConstructor(String.class, int.class);\n        System.out.println(constructor);\n\n        System.out.println(\"getDeclaredConstructors-----------\");\n        Constructor<?>[] declaredConstructors = Person.class.getDeclaredConstructors();\n        Arrays.stream(declaredConstructors).forEach(System.out::println);\n\n        System.out.println(\"getDeclaredConstructor-----------\");\n        Constructor<Person> declaredConstructor = Person.class.getDeclaredConstructor(String.class);\n        System.out.println(declaredConstructor);\n        declaredConstructor.setAccessible(true);\n        Person san = declaredConstructor.newInstance(\"张三\");\n        System.out.println(san);\n    }\n```\n\n运行结果：\n\n> getConstructors--------------------------\n> public com.javalearn.reflect.Person()\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getConstructor-----------\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getDeclaredConstructors-----------\n> private com.javalearn.reflect.Person(java.lang.String)\n> public com.javalearn.reflect.Person()\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getDeclaredConstructor-----------\n> private com.javalearn.reflect.Person(java.lang.String)\n> Person{name='张三', age=0, testPub1='null', testPub2='null'}\n\nMethod常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. Object invoke(Object obj, Object... args) 静态方法第一个入参可以为null\n\n   在具有指定参数的 方法对象上调用此 方法对象表示的底层方法\n\n```java\n    public void testMethod() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        System.out.println(\"getMethod------------\");\n        Method staticTest = Person.class.getMethod(\"staticTest\"); // 静态方法\n        Object invoke = staticTest.invoke(null);\n\n        System.out.println(\"getMethods------------\");\n        Method[] methods = Person.class.getMethods();\n        for (Method method : methods) {\n            System.out.println(method);\n        }\n    }\n```\n\n运行结果：\n\n> getMethod------------\n> staticTest\n> getMethods------------\n> public java.lang.String com.javalearn.reflect.Person.toString()\n> public java.lang.String com.javalearn.reflect.Person.getName()\n> public void com.javalearn.reflect.Person.setName(java.lang.String)\n> public static void com.javalearn.reflect.Person.staticTest()\n> public void com.javalearn.reflect.Person.setAge(int)\n> public int com.javalearn.reflect.Person.getAge()\n> public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\n> public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\n> public final void java.lang.Object.wait() throws java.lang.InterruptedException\n> public boolean java.lang.Object.equals(java.lang.Object)\n> public native int java.lang.Object.hashCode()\n> public final native java.lang.Class java.lang.Object.getClass()\n> public final native void java.lang.Object.notify()\n> public final native void java.lang.Object.notifyAll()","source":"_posts/java/反射.md","raw":"---\ntitle: 反射\ndate: 2024-07-02 23:09:11\ncategories:\n  - java\ntags:\n  - java\n---\n![image.png](./img/反射.png)\n\n\n机制：将类的各个组成部分封装为其他的对象\n\n优势：\n\n1. 灵活。可以在程序运行过程中操作这些对象\n2. 解耦。提高了程序的可扩展性\n\n\n###### 获取Class对象方式：\n\n1. Class.forName(\"类完全限定名\")\n2. 类名.class\n3. 对象.getClass()\n\n   getClass()方法来自Object类\n\n\n###### Class对象功能：\n\n1. 获取成员变量\n\n    * Field[] getFields()\n\n      返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象\n    * Fidld getField(String name)\n\n      返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象\n    * Field[] getDeclaredFields()\n\n      返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象\n    * Field getDeclaredField(String name)\n\n      返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象\n\n2. 获取构造方法\n\n    * Constructor<T> getConstructor(Class<?>... parameterTypes)\n\n      返回一个 Constructor对象，该对象反映 Constructor对象表示的类的指定的公共 类函数。\n    * Constructor<?>[] getConstructors()\n\n      返回包含一个数组 Constructor对象反射由此表示的类的所有公共构造 类对象。\n    * Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)\n\n      getDeclaredConstructor返回一个Constructor对象，该对象反映 Constructor对象表示的类或接口的指定 类函数\n    * Constructor<?> getDeclaredConstructors()\n      返回一个反映 Constructor对象表示的类声明的所有 Constructor对象的数组类 。\n3. 获取成员方法\n\n    * Method getMethod(String name, Class<?>... parameterTypes)\n\n      返回一个 方法对象，它反映此表示的类或接口的指定公共成员方法 类对象。\n    * Method[]  getMethods()\n\n      返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明\n    * Method getDeclaredMethod(String name, Class<?>... parameterTypes)\n\n      返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 类对象\n    * Method[] getDeclaredMethods()\n\n      返回包含一个数组 方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法\n\n4. 获类名\n\n   String getName();\n5. newInstance()\n\n   类空入参构造器\n\n\nField对象常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. Object get(Object obj)\n\n   返回该所表示的字段的值 Field ，指定的对象上\n3. void set(Object obj, Object value)\n\n   将指定对象参数上的此 Field对象表示的字段设置为指定的新值\n\n\n**获取字段及修改内容**代码示例：\n\n```java\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        System.out.println(\"getFields----------\");\n        Field[] fields = Person.class.getFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n        System.out.println(\"getField----------\");\n        Field testPub1 = Person.class.getField(\"testPub1\");\n        System.out.println(testPub1);\n\n        System.out.println(\"getDeclaredFields----------\");\n        fields = Person.class.getDeclaredFields();\n        Arrays.stream(fields).forEach(System.out::println);\n\n        System.out.println(\"getDeclaredField----------\");\n        Field name = Person.class.getDeclaredField(\"name\");\n        System.out.println(name);\n\n\n        System.out.println(\"Field操作----------\");\n        Person person = new Person();\n        Object o = testPub1.get(person);\n        System.out.println(\"o:\" + o);\n        testPub1.set(person, \"fieldSetTest\");\n        o = testPub1.get(person);\n        System.out.println(\"o:\" + o);\n\n\n        System.out.println(\"私有Field操作----------\");\n        name.setAccessible(true);\n        System.out.println(name.get(person));\n        name.set(person, \"privateSetTest\");\n        System.out.println(name.get(person));\n\n    }\n```\n\n运行结果：\n\n> getFields----------\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> public java.lang.String com.javalearn.reflect.Person.testPub2\n> getField----------\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> getDeclaredFields----------\n> private java.lang.String com.javalearn.reflect.Person.name\n> private java.lang.String com.javalearn.reflect.Person.age\n> public java.lang.String com.javalearn.reflect.Person.testPub1\n> public java.lang.String com.javalearn.reflect.Person.testPub2\n> getDeclaredField----------\n> private java.lang.String com.javalearn.reflect.Person.name\n> Field操作----------\n> o:null\n> o:fieldSetTest\n> 私有Field操作----------\n> null\n> privateSetTest\n>\n> Process finished with exit code 0\n\nConstructor常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. T newInstance(Object... initargs)\n\n   使用此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例\n\n\n```java\n public void test_constructor() throws NoSuchMethodException, InvocationTargetException\n            , InstantiationException, IllegalAccessException {\n\n        System.out.println(\"getConstructors--------------------------\");\n        Constructor<?>[] constructors = Person.class.getConstructors();\n        Arrays.stream(constructors).forEach(System.out::println);\n\n        System.out.println(\"getConstructor-----------\");\n        Constructor<Person> constructor = Person.class.getConstructor(String.class, int.class);\n        System.out.println(constructor);\n\n        System.out.println(\"getDeclaredConstructors-----------\");\n        Constructor<?>[] declaredConstructors = Person.class.getDeclaredConstructors();\n        Arrays.stream(declaredConstructors).forEach(System.out::println);\n\n        System.out.println(\"getDeclaredConstructor-----------\");\n        Constructor<Person> declaredConstructor = Person.class.getDeclaredConstructor(String.class);\n        System.out.println(declaredConstructor);\n        declaredConstructor.setAccessible(true);\n        Person san = declaredConstructor.newInstance(\"张三\");\n        System.out.println(san);\n    }\n```\n\n运行结果：\n\n> getConstructors--------------------------\n> public com.javalearn.reflect.Person()\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getConstructor-----------\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getDeclaredConstructors-----------\n> private com.javalearn.reflect.Person(java.lang.String)\n> public com.javalearn.reflect.Person()\n> public com.javalearn.reflect.Person(java.lang.String,int)\n> getDeclaredConstructor-----------\n> private com.javalearn.reflect.Person(java.lang.String)\n> Person{name='张三', age=0, testPub1='null', testPub2='null'}\n\nMethod常用方法：\n\n1. void setAccessible(boolean flag) throws SecurityException\n\n   方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性\n2. Object invoke(Object obj, Object... args) 静态方法第一个入参可以为null\n\n   在具有指定参数的 方法对象上调用此 方法对象表示的底层方法\n\n```java\n    public void testMethod() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        System.out.println(\"getMethod------------\");\n        Method staticTest = Person.class.getMethod(\"staticTest\"); // 静态方法\n        Object invoke = staticTest.invoke(null);\n\n        System.out.println(\"getMethods------------\");\n        Method[] methods = Person.class.getMethods();\n        for (Method method : methods) {\n            System.out.println(method);\n        }\n    }\n```\n\n运行结果：\n\n> getMethod------------\n> staticTest\n> getMethods------------\n> public java.lang.String com.javalearn.reflect.Person.toString()\n> public java.lang.String com.javalearn.reflect.Person.getName()\n> public void com.javalearn.reflect.Person.setName(java.lang.String)\n> public static void com.javalearn.reflect.Person.staticTest()\n> public void com.javalearn.reflect.Person.setAge(int)\n> public int com.javalearn.reflect.Person.getAge()\n> public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\n> public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\n> public final void java.lang.Object.wait() throws java.lang.InterruptedException\n> public boolean java.lang.Object.equals(java.lang.Object)\n> public native int java.lang.Object.hashCode()\n> public final native java.lang.Class java.lang.Object.getClass()\n> public final native void java.lang.Object.notify()\n> public final native void java.lang.Object.notifyAll()","slug":"java/反射","published":1,"updated":"2024-07-02T15:10:49.434Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19v500060ouy6uip39kr","content":"<p><img src=\"/hexo-blog/./img/%E5%8F%8D%E5%B0%84.png\" alt=\"image.png\"></p>\n<p>机制：将类的各个组成部分封装为其他的对象</p>\n<p>优势：</p>\n<ol>\n<li>灵活。可以在程序运行过程中操作这些对象</li>\n<li>解耦。提高了程序的可扩展性</li>\n</ol>\n<h6 id=\"获取Class对象方式：\"><a href=\"#获取Class对象方式：\" class=\"headerlink\" title=\"获取Class对象方式：\"></a>获取Class对象方式：</h6><ol>\n<li><p>Class.forName(“类完全限定名”)</p>\n</li>\n<li><p>类名.class</p>\n</li>\n<li><p>对象.getClass()</p>\n<p>getClass()方法来自Object类</p>\n</li>\n</ol>\n<h6 id=\"Class对象功能：\"><a href=\"#Class对象功能：\" class=\"headerlink\" title=\"Class对象功能：\"></a>Class对象功能：</h6><ol>\n<li><p>获取成员变量</p>\n<ul>\n<li><p>Field[] getFields()</p>\n<p>返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象</p>\n</li>\n<li><p>Fidld getField(String name)</p>\n<p>返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象</p>\n</li>\n<li><p>Field[] getDeclaredFields()</p>\n<p>返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象</p>\n</li>\n<li><p>Field getDeclaredField(String name)</p>\n<p>返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象</p>\n</li>\n</ul>\n</li>\n<li><p>获取构造方法</p>\n<ul>\n<li><p>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 Constructor对象，该对象反映 Constructor对象表示的类的指定的公共 类函数。</p>\n</li>\n<li><p>Constructor&lt;?&gt;[] getConstructors()</p>\n<p>返回包含一个数组 Constructor对象反射由此表示的类的所有公共构造 类对象。</p>\n</li>\n<li><p>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</p>\n<p>getDeclaredConstructor返回一个Constructor对象，该对象反映 Constructor对象表示的类或接口的指定 类函数</p>\n</li>\n<li><p>Constructor&lt;?&gt; getDeclaredConstructors()<br>返回一个反映 Constructor对象表示的类声明的所有 Constructor对象的数组类 。</p>\n</li>\n</ul>\n</li>\n<li><p>获取成员方法</p>\n<ul>\n<li><p>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 方法对象，它反映此表示的类或接口的指定公共成员方法 类对象。</p>\n</li>\n<li><p>Method[]  getMethods()</p>\n<p>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</p>\n</li>\n<li><p>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 类对象</p>\n</li>\n<li><p>Method[] getDeclaredMethods()</p>\n<p>返回包含一个数组 方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</p>\n</li>\n</ul>\n</li>\n<li><p>获类名</p>\n<p>String getName();</p>\n</li>\n<li><p>newInstance()</p>\n<p>类空入参构造器</p>\n</li>\n</ol>\n<p>Field对象常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>Object get(Object obj)</p>\n<p>返回该所表示的字段的值 Field ，指定的对象上</p>\n</li>\n<li><p>void set(Object obj, Object value)</p>\n<p>将指定对象参数上的此 Field对象表示的字段设置为指定的新值</p>\n</li>\n</ol>\n<p><strong>获取字段及修改内容</strong>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getFields----------&quot;</span>);</span><br><span class=\"line\">    Field[] fields = Person.class.getFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">        System.out.println(field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getField----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">testPub1</span> <span class=\"operator\">=</span> Person.class.getField(<span class=\"string\">&quot;testPub1&quot;</span>);</span><br><span class=\"line\">    System.out.println(testPub1);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getDeclaredFields----------&quot;</span>);</span><br><span class=\"line\">    fields = Person.class.getDeclaredFields();</span><br><span class=\"line\">    Arrays.stream(fields).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getDeclaredField----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Person.class.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Field操作----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> testPub1.get(person);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;o:&quot;</span> + o);</span><br><span class=\"line\">    testPub1.set(person, <span class=\"string\">&quot;fieldSetTest&quot;</span>);</span><br><span class=\"line\">    o = testPub1.get(person);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;o:&quot;</span> + o);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;私有Field操作----------&quot;</span>);</span><br><span class=\"line\">    name.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    System.out.println(name.get(person));</span><br><span class=\"line\">    name.set(person, <span class=\"string\">&quot;privateSetTest&quot;</span>);</span><br><span class=\"line\">    System.out.println(name.get(person));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getFields———-<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>public java.lang.String com.javalearn.reflect.Person.testPub2<br>getField———-<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>getDeclaredFields———-<br>private java.lang.String com.javalearn.reflect.Person.name<br>private java.lang.String com.javalearn.reflect.Person.age<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>public java.lang.String com.javalearn.reflect.Person.testPub2<br>getDeclaredField———-<br>private java.lang.String com.javalearn.reflect.Person.name<br>Field操作———-<br>o:null<br>o:fieldSetTest<br>私有Field操作———-<br>null<br>privateSetTest</p>\n<p>Process finished with exit code 0</p>\n</blockquote>\n<p>Constructor常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>T newInstance(Object… initargs)</p>\n<p>使用此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_constructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException</span><br><span class=\"line\">           , InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getConstructors--------------------------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;?&gt;[] constructors = Person.class.getConstructors();</span><br><span class=\"line\">       Arrays.stream(constructors).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getConstructor-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;Person&gt; constructor = Person.class.getConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">       System.out.println(constructor);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getDeclaredConstructors-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;?&gt;[] declaredConstructors = Person.class.getDeclaredConstructors();</span><br><span class=\"line\">       Arrays.stream(declaredConstructors).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getDeclaredConstructor-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;Person&gt; declaredConstructor = Person.class.getDeclaredConstructor(String.class);</span><br><span class=\"line\">       System.out.println(declaredConstructor);</span><br><span class=\"line\">       declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">       <span class=\"type\">Person</span> <span class=\"variable\">san</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">       System.out.println(san);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getConstructors————————–<br>public com.javalearn.reflect.Person()<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getConstructor———–<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getDeclaredConstructors———–<br>private com.javalearn.reflect.Person(java.lang.String)<br>public com.javalearn.reflect.Person()<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getDeclaredConstructor———–<br>private com.javalearn.reflect.Person(java.lang.String)<br>Person{name&#x3D;’张三’, age&#x3D;0, testPub1&#x3D;’null’, testPub2&#x3D;’null’}</p>\n</blockquote>\n<p>Method常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>Object invoke(Object obj, Object… args) 静态方法第一个入参可以为null</p>\n<p>在具有指定参数的 方法对象上调用此 方法对象表示的底层方法</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getMethod------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">staticTest</span> <span class=\"operator\">=</span> Person.class.getMethod(<span class=\"string\">&quot;staticTest&quot;</span>); <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> staticTest.invoke(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getMethods------------&quot;</span>);</span><br><span class=\"line\">    Method[] methods = Person.class.getMethods();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">        System.out.println(method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getMethod————<br>staticTest<br>getMethods————<br>public java.lang.String com.javalearn.reflect.Person.toString()<br>public java.lang.String com.javalearn.reflect.Person.getName()<br>public void com.javalearn.reflect.Person.setName(java.lang.String)<br>public static void com.javalearn.reflect.Person.staticTest()<br>public void com.javalearn.reflect.Person.setAge(int)<br>public int com.javalearn.reflect.Person.getAge()<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public boolean java.lang.Object.equals(java.lang.Object)<br>public native int java.lang.Object.hashCode()<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()</p>\n</blockquote>\n","excerpt":"","more":"<p><img src=\"/hexo-blog/./img/%E5%8F%8D%E5%B0%84.png\" alt=\"image.png\"></p>\n<p>机制：将类的各个组成部分封装为其他的对象</p>\n<p>优势：</p>\n<ol>\n<li>灵活。可以在程序运行过程中操作这些对象</li>\n<li>解耦。提高了程序的可扩展性</li>\n</ol>\n<h6 id=\"获取Class对象方式：\"><a href=\"#获取Class对象方式：\" class=\"headerlink\" title=\"获取Class对象方式：\"></a>获取Class对象方式：</h6><ol>\n<li><p>Class.forName(“类完全限定名”)</p>\n</li>\n<li><p>类名.class</p>\n</li>\n<li><p>对象.getClass()</p>\n<p>getClass()方法来自Object类</p>\n</li>\n</ol>\n<h6 id=\"Class对象功能：\"><a href=\"#Class对象功能：\" class=\"headerlink\" title=\"Class对象功能：\"></a>Class对象功能：</h6><ol>\n<li><p>获取成员变量</p>\n<ul>\n<li><p>Field[] getFields()</p>\n<p>返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象</p>\n</li>\n<li><p>Fidld getField(String name)</p>\n<p>返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象</p>\n</li>\n<li><p>Field[] getDeclaredFields()</p>\n<p>返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象</p>\n</li>\n<li><p>Field getDeclaredField(String name)</p>\n<p>返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象</p>\n</li>\n</ul>\n</li>\n<li><p>获取构造方法</p>\n<ul>\n<li><p>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 Constructor对象，该对象反映 Constructor对象表示的类的指定的公共 类函数。</p>\n</li>\n<li><p>Constructor&lt;?&gt;[] getConstructors()</p>\n<p>返回包含一个数组 Constructor对象反射由此表示的类的所有公共构造 类对象。</p>\n</li>\n<li><p>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</p>\n<p>getDeclaredConstructor返回一个Constructor对象，该对象反映 Constructor对象表示的类或接口的指定 类函数</p>\n</li>\n<li><p>Constructor&lt;?&gt; getDeclaredConstructors()<br>返回一个反映 Constructor对象表示的类声明的所有 Constructor对象的数组类 。</p>\n</li>\n</ul>\n</li>\n<li><p>获取成员方法</p>\n<ul>\n<li><p>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 方法对象，它反映此表示的类或接口的指定公共成员方法 类对象。</p>\n</li>\n<li><p>Method[]  getMethods()</p>\n<p>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</p>\n</li>\n<li><p>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</p>\n<p>返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 类对象</p>\n</li>\n<li><p>Method[] getDeclaredMethods()</p>\n<p>返回包含一个数组 方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</p>\n</li>\n</ul>\n</li>\n<li><p>获类名</p>\n<p>String getName();</p>\n</li>\n<li><p>newInstance()</p>\n<p>类空入参构造器</p>\n</li>\n</ol>\n<p>Field对象常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>Object get(Object obj)</p>\n<p>返回该所表示的字段的值 Field ，指定的对象上</p>\n</li>\n<li><p>void set(Object obj, Object value)</p>\n<p>将指定对象参数上的此 Field对象表示的字段设置为指定的新值</p>\n</li>\n</ol>\n<p><strong>获取字段及修改内容</strong>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getFields----------&quot;</span>);</span><br><span class=\"line\">    Field[] fields = Person.class.getFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">        System.out.println(field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getField----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">testPub1</span> <span class=\"operator\">=</span> Person.class.getField(<span class=\"string\">&quot;testPub1&quot;</span>);</span><br><span class=\"line\">    System.out.println(testPub1);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getDeclaredFields----------&quot;</span>);</span><br><span class=\"line\">    fields = Person.class.getDeclaredFields();</span><br><span class=\"line\">    Arrays.stream(fields).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getDeclaredField----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Person.class.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Field操作----------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> testPub1.get(person);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;o:&quot;</span> + o);</span><br><span class=\"line\">    testPub1.set(person, <span class=\"string\">&quot;fieldSetTest&quot;</span>);</span><br><span class=\"line\">    o = testPub1.get(person);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;o:&quot;</span> + o);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;私有Field操作----------&quot;</span>);</span><br><span class=\"line\">    name.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    System.out.println(name.get(person));</span><br><span class=\"line\">    name.set(person, <span class=\"string\">&quot;privateSetTest&quot;</span>);</span><br><span class=\"line\">    System.out.println(name.get(person));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getFields———-<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>public java.lang.String com.javalearn.reflect.Person.testPub2<br>getField———-<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>getDeclaredFields———-<br>private java.lang.String com.javalearn.reflect.Person.name<br>private java.lang.String com.javalearn.reflect.Person.age<br>public java.lang.String com.javalearn.reflect.Person.testPub1<br>public java.lang.String com.javalearn.reflect.Person.testPub2<br>getDeclaredField———-<br>private java.lang.String com.javalearn.reflect.Person.name<br>Field操作———-<br>o:null<br>o:fieldSetTest<br>私有Field操作———-<br>null<br>privateSetTest</p>\n<p>Process finished with exit code 0</p>\n</blockquote>\n<p>Constructor常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>T newInstance(Object… initargs)</p>\n<p>使用此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_constructor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException</span><br><span class=\"line\">           , InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getConstructors--------------------------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;?&gt;[] constructors = Person.class.getConstructors();</span><br><span class=\"line\">       Arrays.stream(constructors).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getConstructor-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;Person&gt; constructor = Person.class.getConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">       System.out.println(constructor);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getDeclaredConstructors-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;?&gt;[] declaredConstructors = Person.class.getDeclaredConstructors();</span><br><span class=\"line\">       Arrays.stream(declaredConstructors).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;getDeclaredConstructor-----------&quot;</span>);</span><br><span class=\"line\">       Constructor&lt;Person&gt; declaredConstructor = Person.class.getDeclaredConstructor(String.class);</span><br><span class=\"line\">       System.out.println(declaredConstructor);</span><br><span class=\"line\">       declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">       <span class=\"type\">Person</span> <span class=\"variable\">san</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">       System.out.println(san);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getConstructors————————–<br>public com.javalearn.reflect.Person()<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getConstructor———–<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getDeclaredConstructors———–<br>private com.javalearn.reflect.Person(java.lang.String)<br>public com.javalearn.reflect.Person()<br>public com.javalearn.reflect.Person(java.lang.String,int)<br>getDeclaredConstructor———–<br>private com.javalearn.reflect.Person(java.lang.String)<br>Person{name&#x3D;’张三’, age&#x3D;0, testPub1&#x3D;’null’, testPub2&#x3D;’null’}</p>\n</blockquote>\n<p>Method常用方法：</p>\n<ol>\n<li><p>void setAccessible(boolean flag) throws SecurityException</p>\n<p>方便的方法来设置accessible标志的一系列对象的安全检查，在Field中可以通过更改flag标识来控制非公有成员或方法的可见性</p>\n</li>\n<li><p>Object invoke(Object obj, Object… args) 静态方法第一个入参可以为null</p>\n<p>在具有指定参数的 方法对象上调用此 方法对象表示的底层方法</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getMethod------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">staticTest</span> <span class=\"operator\">=</span> Person.class.getMethod(<span class=\"string\">&quot;staticTest&quot;</span>); <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> staticTest.invoke(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;getMethods------------&quot;</span>);</span><br><span class=\"line\">    Method[] methods = Person.class.getMethods();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">        System.out.println(method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>getMethod————<br>staticTest<br>getMethods————<br>public java.lang.String com.javalearn.reflect.Person.toString()<br>public java.lang.String com.javalearn.reflect.Person.getName()<br>public void com.javalearn.reflect.Person.setName(java.lang.String)<br>public static void com.javalearn.reflect.Person.staticTest()<br>public void com.javalearn.reflect.Person.setAge(int)<br>public int com.javalearn.reflect.Person.getAge()<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public boolean java.lang.Object.equals(java.lang.Object)<br>public native int java.lang.Object.hashCode()<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()</p>\n</blockquote>\n"},{"title":"桥接方法","date":"2024-07-02T15:10:58.000Z","_content":"\n[java中的桥接方法 - Yungyu - 博客园 (cnblogs.com)](https://www.cnblogs.com/yungyu16/p/13253836.html)\n\n# 什么是桥接方法\n\n桥接方法是 JDK 1.5 引入泛型后，为了使Java的泛型方法生成的字节码和 1.5 版本前的字节码相兼容，由编译器自动生成的方法。\n\n我们可以通过`Method.isBridge()`方法来判断一个方法是否是桥接方法，在字节码中桥接方法会被标记为`ACC_BRIDGE`和`ACC_SYNTHETIC`，其中`ACC_BRIDGE`用于说明这个方法是由编译生成的桥接方法，`ACC_SYNTHETIC`说明这个方法是由编译器生成，并且不会在源代码中出现。可以查看jvm规范中对[这两个access_flag的解释](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6)。\n\n有如下3个问题：\n\n* 什么时候会生成桥接方法\n* 为什么要生成桥接方法\n* 如何通过桥接方法获取实际的方法\n\n# 什么时候会生成桥接方法\n\n那什么时候编译器会生成桥接方法呢？可以查看[JLS中的描述](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.5)。\n\n就是说一个子类在继承（或实现）一个父类（或接口）的泛型方法时，在子类中明确指定了泛型类型，那么在编译时编译器会自动生成桥接方法（当然还有其他情况会生成桥接方法，这里只是列举了其中一种情况）。如下所示：\n\n```java\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-05 16:22\n */\npublic interface SuperClass<T> {\n\n    T method(T param);\n\n}\n\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-05 17:05\n */\npublic class SubClass implements SuperClass<String> {\n    public String method(String param) {\n        return param;\n    }\n}\n```\n\n来看一下SubClass的字节码：\n\n```\nlocalhost:mikan mikan$ javap -c SubClass.class\nCompiled from \"SubClass.java\"\npublic class com.mikan.SubClass implements com.mikan.SuperClass<java.lang.String> {\n  public com.mikan.SubClass();\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       5     0  this   Lcom/mikan/SubClass;\n\n  public java.lang.String method(java.lang.String);\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=2, args_size=2\n         0: aload_1\n         1: areturn\n      LineNumberTable:\n        line 11: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       2     0  this   Lcom/mikan/SubClass;\n               0       2     1 param   Ljava/lang/String;\n\n  public java.lang.Object method(java.lang.Object);\n    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n    Code:\n      stack=2, locals=2, args_size=2\n         0: aload_0\n         1: aload_1\n         2: checkcast     #2                  // class java/lang/String\n         5: invokevirtual #3                  // Method method:(Ljava/lang/String;)Ljava/lang/String;\n         8: areturn\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       9     0  this   Lcom/mikan/SubClass;\n               0       9     1    x0   Ljava/lang/Object;\n}\nlocalhost:mikan mikan$\n```\n\n`SubClass`只声明了一个方法，而从字节码可以看到有三个方法，第一个是无参的构造方法（代码中虽然没有明确声明，但是编译器会自动生成），第二个是我们实现的接口中的方法，第三个就是编译器自动生成的桥接方法。可以看到flags包括了`ACC_BRIDGE`和`ACC_SYNTHETIC`，表示是编译器自动生成的方法，参数类型和返回值类型都是`Object`。再看这个方法的字节码，它把`Object`类型的参数强制转换成了`String`类型，再调用在`SubClass`类中声明的方法，转换过来其实就是：\n\n```java\npublic Object method(Object param) {\n    return this.method(((String) param));\n}\n```\n\n也就是说，桥接方法实际是是调用了实际的泛型方法，来看看下面的测试代码：\n\n```java\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-07 16:33\n */\npublic class BridgeMethodTest {\n\n    public static void main(String[] args) throws Exception {\n        SuperClass superClass = new SubClass();\n        System.out.println(superClass.method(\"abc123\"));// 调用的是实际的方法\n        System.out.println(superClass.method(new Object()));// 调用的是桥接方法\n    }\n\n}\n```\n\n这里声明了`SuperClass`类型的变量指向`SubClass`类型的实例，典型的多态。在声明`SuperClass`类型的变量时，不指定泛型类型，那么在方法调用时就可以传任何类型的参数，因为`SuperClass`中的方法参数实际上是`Object`类型，而且编译器也不能发现错误。在运行时当参数类型不是`SubClass`声明的类型时，会抛出类型转换异常，因为这时调用的是桥接方法，而在桥接方法中会进行强制类型转换，所以才会抛出类型转换异常。上面的代码输出结果如下：\n\n```mipsasm\nabc123\nException in thread \"main\" java.lang.ClassCastException: java.lang.Object cannot be cast to java.lang.String\n\tat com.mikan.SubClass.method(SubClass.java:7)\n\tat com.mikan.BridgeMethodTest.main(BridgeMethodTest.java:27)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\n```\n\n如果我们在声明`SuperClass`类型的变量就指定了泛型类型：\n\n```java\nSuperClass<String> superClass = new SubClass();\n```\n\n当然这里类型只能是`String`，因为`SubClass`的泛型类型声明是`String`类型的，如果指定其他类型，那么在编译时就会错误，这样就把类型检查从运行时提前到了编译时。这就是泛型的好处。\n为什么要生成桥接方法\n上面看到了编译器在什么时候会生成桥接方法，那为什么要生成桥接方法呢？\n\n在java1.5以前，比如声明一个集合类型：\n\n```java\nList list = new ArrayList();\n```\n\n那么往list中可以添加任何类型的对象，但是在从集合中获取对象时，无法确定获取到的对象是什么具体的类型，所以在1.5的时候引入了泛型，在声明集合的时候就指定集合中存放的是什么类型的对象：\n\n```java\nList<String> list = new ArrayList<String>();\n```\n\n那么在获取时就不必担心类型的问题，因为泛型在编译时编译器会检查往集合中添加的对象的类型是否匹配泛型类型，如果不正确会在编译时就会发现错误，而不必等到运行时才发现错误。因为泛型是在1.5引入的，为了向前兼容，所以会在编译时去掉泛型（泛型擦除），但是我们还是可以通过反射API来获取泛型的信息，在编译时可以通过泛型来保证类型的正确性，而不必等到运行时才发现类型不正确。由于java泛型的擦除特性，如果不生成桥接方法，那么与1.5之前的字节码就不兼容了。如前面的`SuperClass`中的方法，实际在编译后的字节码如下：\n\n```\nlocalhost:mikan mikan$ javap -c -v SuperClass.class\nClassfile /Users/mikan/Documents/workspace/project/algorithm/target/classes/com/mikan/SuperClass.class\n  Last modified 2015-8-7; size 251 bytes\n  MD5 checksum 2e2530041f1f83aaf416a2ca3af9b7e3\n  Compiled from \"SuperClass.java\"\npublic interface com.mikan.SuperClass<T extends java.lang.Object>\n  Signature: #7                           // <T:Ljava/lang/Object;>Ljava/lang/Object;\n  SourceFile: \"SuperClass.java\"\n  minor version: 0\n  major version: 51\n  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT\nConstant pool:\n   #1 = Class              #10            //  com/mikan/SuperClass\n   #2 = Class              #11            //  java/lang/Object\n   #3 = Utf8               method\n   #4 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n   #5 = Utf8               Signature\n   #6 = Utf8               (TT;)TT;\n   #7 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;\n   #8 = Utf8               SourceFile\n   #9 = Utf8               SuperClass.java\n  #10 = Utf8               com/mikan/SuperClass\n  #11 = Utf8               java/lang/Object\n{\n  public abstract T method(T);\n    flags: ACC_PUBLIC, ACC_ABSTRACT\n    Signature: #6                           // (TT;)TT;\n}\nlocalhost:mikan mikan$\n```\n\n通过`Signature: #7 // <T:Ljava/lang/Object;>Ljava/lang/Object;`可以看到，在编译完成后泛型实际上就成了`Object`了，所以方法实际上成了\n\n```java\npublic abstract Object method(Object param);\n```\n\n而`SubClass`实现了`SuperClass`这个接口，如果不生成桥接方法，那么`SubClass`就没有实现接口中声明的方法，语义就不正确了，所以编译器才会自动生成桥接方法，来保证兼容性。\n\n# 如何通过桥接方法获取实际的方法\n\n我们在通过反射进行方法调用时，如果获取到桥接方法对应的实际的方法呢？可以查看spring中`org.springframework.core.BridgeMethodResolver`类的源码。实际上是通过判断方法名、参数的个数以及泛型类型参数来获取的。\n","source":"_posts/java/桥接方法.md","raw":"---\ntitle: 桥接方法\ndate: 2024-07-02 23:10:58\ncategories:\n  - java\ntags:\n  - java\n---\n\n[java中的桥接方法 - Yungyu - 博客园 (cnblogs.com)](https://www.cnblogs.com/yungyu16/p/13253836.html)\n\n# 什么是桥接方法\n\n桥接方法是 JDK 1.5 引入泛型后，为了使Java的泛型方法生成的字节码和 1.5 版本前的字节码相兼容，由编译器自动生成的方法。\n\n我们可以通过`Method.isBridge()`方法来判断一个方法是否是桥接方法，在字节码中桥接方法会被标记为`ACC_BRIDGE`和`ACC_SYNTHETIC`，其中`ACC_BRIDGE`用于说明这个方法是由编译生成的桥接方法，`ACC_SYNTHETIC`说明这个方法是由编译器生成，并且不会在源代码中出现。可以查看jvm规范中对[这两个access_flag的解释](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6)。\n\n有如下3个问题：\n\n* 什么时候会生成桥接方法\n* 为什么要生成桥接方法\n* 如何通过桥接方法获取实际的方法\n\n# 什么时候会生成桥接方法\n\n那什么时候编译器会生成桥接方法呢？可以查看[JLS中的描述](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.5)。\n\n就是说一个子类在继承（或实现）一个父类（或接口）的泛型方法时，在子类中明确指定了泛型类型，那么在编译时编译器会自动生成桥接方法（当然还有其他情况会生成桥接方法，这里只是列举了其中一种情况）。如下所示：\n\n```java\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-05 16:22\n */\npublic interface SuperClass<T> {\n\n    T method(T param);\n\n}\n\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-05 17:05\n */\npublic class SubClass implements SuperClass<String> {\n    public String method(String param) {\n        return param;\n    }\n}\n```\n\n来看一下SubClass的字节码：\n\n```\nlocalhost:mikan mikan$ javap -c SubClass.class\nCompiled from \"SubClass.java\"\npublic class com.mikan.SubClass implements com.mikan.SuperClass<java.lang.String> {\n  public com.mikan.SubClass();\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       5     0  this   Lcom/mikan/SubClass;\n\n  public java.lang.String method(java.lang.String);\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=2, args_size=2\n         0: aload_1\n         1: areturn\n      LineNumberTable:\n        line 11: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       2     0  this   Lcom/mikan/SubClass;\n               0       2     1 param   Ljava/lang/String;\n\n  public java.lang.Object method(java.lang.Object);\n    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n    Code:\n      stack=2, locals=2, args_size=2\n         0: aload_0\n         1: aload_1\n         2: checkcast     #2                  // class java/lang/String\n         5: invokevirtual #3                  // Method method:(Ljava/lang/String;)Ljava/lang/String;\n         8: areturn\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n               0       9     0  this   Lcom/mikan/SubClass;\n               0       9     1    x0   Ljava/lang/Object;\n}\nlocalhost:mikan mikan$\n```\n\n`SubClass`只声明了一个方法，而从字节码可以看到有三个方法，第一个是无参的构造方法（代码中虽然没有明确声明，但是编译器会自动生成），第二个是我们实现的接口中的方法，第三个就是编译器自动生成的桥接方法。可以看到flags包括了`ACC_BRIDGE`和`ACC_SYNTHETIC`，表示是编译器自动生成的方法，参数类型和返回值类型都是`Object`。再看这个方法的字节码，它把`Object`类型的参数强制转换成了`String`类型，再调用在`SubClass`类中声明的方法，转换过来其实就是：\n\n```java\npublic Object method(Object param) {\n    return this.method(((String) param));\n}\n```\n\n也就是说，桥接方法实际是是调用了实际的泛型方法，来看看下面的测试代码：\n\n```java\npackage com.mikan;\n\n/**\n * @author Mikan\n * @date 2015-08-07 16:33\n */\npublic class BridgeMethodTest {\n\n    public static void main(String[] args) throws Exception {\n        SuperClass superClass = new SubClass();\n        System.out.println(superClass.method(\"abc123\"));// 调用的是实际的方法\n        System.out.println(superClass.method(new Object()));// 调用的是桥接方法\n    }\n\n}\n```\n\n这里声明了`SuperClass`类型的变量指向`SubClass`类型的实例，典型的多态。在声明`SuperClass`类型的变量时，不指定泛型类型，那么在方法调用时就可以传任何类型的参数，因为`SuperClass`中的方法参数实际上是`Object`类型，而且编译器也不能发现错误。在运行时当参数类型不是`SubClass`声明的类型时，会抛出类型转换异常，因为这时调用的是桥接方法，而在桥接方法中会进行强制类型转换，所以才会抛出类型转换异常。上面的代码输出结果如下：\n\n```mipsasm\nabc123\nException in thread \"main\" java.lang.ClassCastException: java.lang.Object cannot be cast to java.lang.String\n\tat com.mikan.SubClass.method(SubClass.java:7)\n\tat com.mikan.BridgeMethodTest.main(BridgeMethodTest.java:27)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\n```\n\n如果我们在声明`SuperClass`类型的变量就指定了泛型类型：\n\n```java\nSuperClass<String> superClass = new SubClass();\n```\n\n当然这里类型只能是`String`，因为`SubClass`的泛型类型声明是`String`类型的，如果指定其他类型，那么在编译时就会错误，这样就把类型检查从运行时提前到了编译时。这就是泛型的好处。\n为什么要生成桥接方法\n上面看到了编译器在什么时候会生成桥接方法，那为什么要生成桥接方法呢？\n\n在java1.5以前，比如声明一个集合类型：\n\n```java\nList list = new ArrayList();\n```\n\n那么往list中可以添加任何类型的对象，但是在从集合中获取对象时，无法确定获取到的对象是什么具体的类型，所以在1.5的时候引入了泛型，在声明集合的时候就指定集合中存放的是什么类型的对象：\n\n```java\nList<String> list = new ArrayList<String>();\n```\n\n那么在获取时就不必担心类型的问题，因为泛型在编译时编译器会检查往集合中添加的对象的类型是否匹配泛型类型，如果不正确会在编译时就会发现错误，而不必等到运行时才发现错误。因为泛型是在1.5引入的，为了向前兼容，所以会在编译时去掉泛型（泛型擦除），但是我们还是可以通过反射API来获取泛型的信息，在编译时可以通过泛型来保证类型的正确性，而不必等到运行时才发现类型不正确。由于java泛型的擦除特性，如果不生成桥接方法，那么与1.5之前的字节码就不兼容了。如前面的`SuperClass`中的方法，实际在编译后的字节码如下：\n\n```\nlocalhost:mikan mikan$ javap -c -v SuperClass.class\nClassfile /Users/mikan/Documents/workspace/project/algorithm/target/classes/com/mikan/SuperClass.class\n  Last modified 2015-8-7; size 251 bytes\n  MD5 checksum 2e2530041f1f83aaf416a2ca3af9b7e3\n  Compiled from \"SuperClass.java\"\npublic interface com.mikan.SuperClass<T extends java.lang.Object>\n  Signature: #7                           // <T:Ljava/lang/Object;>Ljava/lang/Object;\n  SourceFile: \"SuperClass.java\"\n  minor version: 0\n  major version: 51\n  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT\nConstant pool:\n   #1 = Class              #10            //  com/mikan/SuperClass\n   #2 = Class              #11            //  java/lang/Object\n   #3 = Utf8               method\n   #4 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n   #5 = Utf8               Signature\n   #6 = Utf8               (TT;)TT;\n   #7 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;\n   #8 = Utf8               SourceFile\n   #9 = Utf8               SuperClass.java\n  #10 = Utf8               com/mikan/SuperClass\n  #11 = Utf8               java/lang/Object\n{\n  public abstract T method(T);\n    flags: ACC_PUBLIC, ACC_ABSTRACT\n    Signature: #6                           // (TT;)TT;\n}\nlocalhost:mikan mikan$\n```\n\n通过`Signature: #7 // <T:Ljava/lang/Object;>Ljava/lang/Object;`可以看到，在编译完成后泛型实际上就成了`Object`了，所以方法实际上成了\n\n```java\npublic abstract Object method(Object param);\n```\n\n而`SubClass`实现了`SuperClass`这个接口，如果不生成桥接方法，那么`SubClass`就没有实现接口中声明的方法，语义就不正确了，所以编译器才会自动生成桥接方法，来保证兼容性。\n\n# 如何通过桥接方法获取实际的方法\n\n我们在通过反射进行方法调用时，如果获取到桥接方法对应的实际的方法呢？可以查看spring中`org.springframework.core.BridgeMethodResolver`类的源码。实际上是通过判断方法名、参数的个数以及泛型类型参数来获取的。\n","slug":"java/桥接方法","published":1,"updated":"2024-07-02T15:12:19.484Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19v8000a0ouybcgqfrtc","content":"<p><a href=\"https://www.cnblogs.com/yungyu16/p/13253836.html\">java中的桥接方法 - Yungyu - 博客园 (cnblogs.com)</a></p>\n<h1 id=\"什么是桥接方法\"><a href=\"#什么是桥接方法\" class=\"headerlink\" title=\"什么是桥接方法\"></a>什么是桥接方法</h1><p>桥接方法是 JDK 1.5 引入泛型后，为了使Java的泛型方法生成的字节码和 1.5 版本前的字节码相兼容，由编译器自动生成的方法。</p>\n<p>我们可以通过<code>Method.isBridge()</code>方法来判断一个方法是否是桥接方法，在字节码中桥接方法会被标记为<code>ACC_BRIDGE</code>和<code>ACC_SYNTHETIC</code>，其中<code>ACC_BRIDGE</code>用于说明这个方法是由编译生成的桥接方法，<code>ACC_SYNTHETIC</code>说明这个方法是由编译器生成，并且不会在源代码中出现。可以查看jvm规范中对<a href=\"http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6\">这两个access_flag的解释</a>。</p>\n<p>有如下3个问题：</p>\n<ul>\n<li>什么时候会生成桥接方法</li>\n<li>为什么要生成桥接方法</li>\n<li>如何通过桥接方法获取实际的方法</li>\n</ul>\n<h1 id=\"什么时候会生成桥接方法\"><a href=\"#什么时候会生成桥接方法\" class=\"headerlink\" title=\"什么时候会生成桥接方法\"></a>什么时候会生成桥接方法</h1><p>那什么时候编译器会生成桥接方法呢？可以查看<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.5\">JLS中的描述</a>。</p>\n<p>就是说一个子类在继承（或实现）一个父类（或接口）的泛型方法时，在子类中明确指定了泛型类型，那么在编译时编译器会自动生成桥接方法（当然还有其他情况会生成桥接方法，这里只是列举了其中一种情况）。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-05 16:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SuperClass</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    T <span class=\"title function_\">method</span><span class=\"params\">(T param)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-05 17:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SuperClass</span>&lt;String&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">method</span><span class=\"params\">(String param)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看一下SubClass的字节码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:mikan mikan$ javap -c SubClass.class</span><br><span class=\"line\">Compiled from &quot;SubClass.java&quot;</span><br><span class=\"line\">public class com.mikan.SubClass implements com.mikan.SuperClass&lt;java.lang.String&gt; &#123;</span><br><span class=\"line\">  public com.mikan.SubClass();</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       5     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.String method(java.lang.String);</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=2, args_size=2</span><br><span class=\"line\">         0: aload_1</span><br><span class=\"line\">         1: areturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 11: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       2     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\">               0       2     1 param   Ljava/lang/String;</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.Object method(java.lang.Object);</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=2</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: aload_1</span><br><span class=\"line\">         2: checkcast     #2                  // class java/lang/String</span><br><span class=\"line\">         5: invokevirtual #3                  // Method method:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class=\"line\">         8: areturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       9     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\">               0       9     1    x0   Ljava/lang/Object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localhost:mikan mikan$</span><br></pre></td></tr></table></figure>\n\n<p><code>SubClass</code>只声明了一个方法，而从字节码可以看到有三个方法，第一个是无参的构造方法（代码中虽然没有明确声明，但是编译器会自动生成），第二个是我们实现的接口中的方法，第三个就是编译器自动生成的桥接方法。可以看到flags包括了<code>ACC_BRIDGE</code>和<code>ACC_SYNTHETIC</code>，表示是编译器自动生成的方法，参数类型和返回值类型都是<code>Object</code>。再看这个方法的字节码，它把<code>Object</code>类型的参数强制转换成了<code>String</code>类型，再调用在<code>SubClass</code>类中声明的方法，转换过来其实就是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">method</span><span class=\"params\">(Object param)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.method(((String) param));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，桥接方法实际是是调用了实际的泛型方法，来看看下面的测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-07 16:33</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BridgeMethodTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">SuperClass</span> <span class=\"variable\">superClass</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">        System.out.println(superClass.method(<span class=\"string\">&quot;abc123&quot;</span>));<span class=\"comment\">// 调用的是实际的方法</span></span><br><span class=\"line\">        System.out.println(superClass.method(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()));<span class=\"comment\">// 调用的是桥接方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里声明了<code>SuperClass</code>类型的变量指向<code>SubClass</code>类型的实例，典型的多态。在声明<code>SuperClass</code>类型的变量时，不指定泛型类型，那么在方法调用时就可以传任何类型的参数，因为<code>SuperClass</code>中的方法参数实际上是<code>Object</code>类型，而且编译器也不能发现错误。在运行时当参数类型不是<code>SubClass</code>声明的类型时，会抛出类型转换异常，因为这时调用的是桥接方法，而在桥接方法中会进行强制类型转换，所以才会抛出类型转换异常。上面的代码输出结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc123</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> <span class=\"keyword\">java.lang.ClassCastException: </span><span class=\"keyword\">java.lang.Object </span>cannot <span class=\"keyword\">be </span>cast to <span class=\"keyword\">java.lang.String</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.mikan.<span class=\"keyword\">SubClass.method(SubClass.java:7)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.mikan.<span class=\"keyword\">BridgeMethodTest.main(BridgeMethodTest.java:27)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.<span class=\"keyword\">java:57)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.<span class=\"keyword\">java:43)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> <span class=\"keyword\">java.lang.reflect.Method.invoke(Method.java:606)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.intellij.rt.execution.application.AppMain.main(AppMain.<span class=\"keyword\">java:140)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们在声明<code>SuperClass</code>类型的变量就指定了泛型类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SuperClass&lt;String&gt; superClass = <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br></pre></td></tr></table></figure>\n\n<p>当然这里类型只能是<code>String</code>，因为<code>SubClass</code>的泛型类型声明是<code>String</code>类型的，如果指定其他类型，那么在编译时就会错误，这样就把类型检查从运行时提前到了编译时。这就是泛型的好处。<br>为什么要生成桥接方法<br>上面看到了编译器在什么时候会生成桥接方法，那为什么要生成桥接方法呢？</p>\n<p>在java1.5以前，比如声明一个集合类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>\n\n<p>那么往list中可以添加任何类型的对象，但是在从集合中获取对象时，无法确定获取到的对象是什么具体的类型，所以在1.5的时候引入了泛型，在声明集合的时候就指定集合中存放的是什么类型的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>那么在获取时就不必担心类型的问题，因为泛型在编译时编译器会检查往集合中添加的对象的类型是否匹配泛型类型，如果不正确会在编译时就会发现错误，而不必等到运行时才发现错误。因为泛型是在1.5引入的，为了向前兼容，所以会在编译时去掉泛型（泛型擦除），但是我们还是可以通过反射API来获取泛型的信息，在编译时可以通过泛型来保证类型的正确性，而不必等到运行时才发现类型不正确。由于java泛型的擦除特性，如果不生成桥接方法，那么与1.5之前的字节码就不兼容了。如前面的<code>SuperClass</code>中的方法，实际在编译后的字节码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:mikan mikan$ javap -c -v SuperClass.class</span><br><span class=\"line\">Classfile /Users/mikan/Documents/workspace/project/algorithm/target/classes/com/mikan/SuperClass.class</span><br><span class=\"line\">  Last modified 2015-8-7; size 251 bytes</span><br><span class=\"line\">  MD5 checksum 2e2530041f1f83aaf416a2ca3af9b7e3</span><br><span class=\"line\">  Compiled from &quot;SuperClass.java&quot;</span><br><span class=\"line\">public interface com.mikan.SuperClass&lt;T extends java.lang.Object&gt;</span><br><span class=\"line\">  Signature: #7                           // &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class=\"line\">  SourceFile: &quot;SuperClass.java&quot;</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 51</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Class              #10            //  com/mikan/SuperClass</span><br><span class=\"line\">   #2 = Class              #11            //  java/lang/Object</span><br><span class=\"line\">   #3 = Utf8               method</span><br><span class=\"line\">   #4 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">   #5 = Utf8               Signature</span><br><span class=\"line\">   #6 = Utf8               (TT;)TT;</span><br><span class=\"line\">   #7 = Utf8               &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class=\"line\">   #8 = Utf8               SourceFile</span><br><span class=\"line\">   #9 = Utf8               SuperClass.java</span><br><span class=\"line\">  #10 = Utf8               com/mikan/SuperClass</span><br><span class=\"line\">  #11 = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public abstract T method(T);</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_ABSTRACT</span><br><span class=\"line\">    Signature: #6                           // (TT;)TT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localhost:mikan mikan$</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>Signature: #7 // &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</code>可以看到，在编译完成后泛型实际上就成了<code>Object</code>了，所以方法实际上成了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title function_\">method</span><span class=\"params\">(Object param)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>SubClass</code>实现了<code>SuperClass</code>这个接口，如果不生成桥接方法，那么<code>SubClass</code>就没有实现接口中声明的方法，语义就不正确了，所以编译器才会自动生成桥接方法，来保证兼容性。</p>\n<h1 id=\"如何通过桥接方法获取实际的方法\"><a href=\"#如何通过桥接方法获取实际的方法\" class=\"headerlink\" title=\"如何通过桥接方法获取实际的方法\"></a>如何通过桥接方法获取实际的方法</h1><p>我们在通过反射进行方法调用时，如果获取到桥接方法对应的实际的方法呢？可以查看spring中<code>org.springframework.core.BridgeMethodResolver</code>类的源码。实际上是通过判断方法名、参数的个数以及泛型类型参数来获取的。</p>\n","excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/yungyu16/p/13253836.html\">java中的桥接方法 - Yungyu - 博客园 (cnblogs.com)</a></p>\n<h1 id=\"什么是桥接方法\"><a href=\"#什么是桥接方法\" class=\"headerlink\" title=\"什么是桥接方法\"></a>什么是桥接方法</h1><p>桥接方法是 JDK 1.5 引入泛型后，为了使Java的泛型方法生成的字节码和 1.5 版本前的字节码相兼容，由编译器自动生成的方法。</p>\n<p>我们可以通过<code>Method.isBridge()</code>方法来判断一个方法是否是桥接方法，在字节码中桥接方法会被标记为<code>ACC_BRIDGE</code>和<code>ACC_SYNTHETIC</code>，其中<code>ACC_BRIDGE</code>用于说明这个方法是由编译生成的桥接方法，<code>ACC_SYNTHETIC</code>说明这个方法是由编译器生成，并且不会在源代码中出现。可以查看jvm规范中对<a href=\"http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6\">这两个access_flag的解释</a>。</p>\n<p>有如下3个问题：</p>\n<ul>\n<li>什么时候会生成桥接方法</li>\n<li>为什么要生成桥接方法</li>\n<li>如何通过桥接方法获取实际的方法</li>\n</ul>\n<h1 id=\"什么时候会生成桥接方法\"><a href=\"#什么时候会生成桥接方法\" class=\"headerlink\" title=\"什么时候会生成桥接方法\"></a>什么时候会生成桥接方法</h1><p>那什么时候编译器会生成桥接方法呢？可以查看<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.5\">JLS中的描述</a>。</p>\n<p>就是说一个子类在继承（或实现）一个父类（或接口）的泛型方法时，在子类中明确指定了泛型类型，那么在编译时编译器会自动生成桥接方法（当然还有其他情况会生成桥接方法，这里只是列举了其中一种情况）。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-05 16:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SuperClass</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    T <span class=\"title function_\">method</span><span class=\"params\">(T param)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-05 17:05</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SuperClass</span>&lt;String&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">method</span><span class=\"params\">(String param)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看一下SubClass的字节码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:mikan mikan$ javap -c SubClass.class</span><br><span class=\"line\">Compiled from &quot;SubClass.java&quot;</span><br><span class=\"line\">public class com.mikan.SubClass implements com.mikan.SuperClass&lt;java.lang.String&gt; &#123;</span><br><span class=\"line\">  public com.mikan.SubClass();</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       5     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.String method(java.lang.String);</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=2, args_size=2</span><br><span class=\"line\">         0: aload_1</span><br><span class=\"line\">         1: areturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 11: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       2     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\">               0       2     1 param   Ljava/lang/String;</span><br><span class=\"line\"></span><br><span class=\"line\">  public java.lang.Object method(java.lang.Object);</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=2</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: aload_1</span><br><span class=\"line\">         2: checkcast     #2                  // class java/lang/String</span><br><span class=\"line\">         5: invokevirtual #3                  // Method method:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class=\"line\">         8: areturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">               0       9     0  this   Lcom/mikan/SubClass;</span><br><span class=\"line\">               0       9     1    x0   Ljava/lang/Object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localhost:mikan mikan$</span><br></pre></td></tr></table></figure>\n\n<p><code>SubClass</code>只声明了一个方法，而从字节码可以看到有三个方法，第一个是无参的构造方法（代码中虽然没有明确声明，但是编译器会自动生成），第二个是我们实现的接口中的方法，第三个就是编译器自动生成的桥接方法。可以看到flags包括了<code>ACC_BRIDGE</code>和<code>ACC_SYNTHETIC</code>，表示是编译器自动生成的方法，参数类型和返回值类型都是<code>Object</code>。再看这个方法的字节码，它把<code>Object</code>类型的参数强制转换成了<code>String</code>类型，再调用在<code>SubClass</code>类中声明的方法，转换过来其实就是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">method</span><span class=\"params\">(Object param)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.method(((String) param));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，桥接方法实际是是调用了实际的泛型方法，来看看下面的测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mikan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mikan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2015-08-07 16:33</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BridgeMethodTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">SuperClass</span> <span class=\"variable\">superClass</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">        System.out.println(superClass.method(<span class=\"string\">&quot;abc123&quot;</span>));<span class=\"comment\">// 调用的是实际的方法</span></span><br><span class=\"line\">        System.out.println(superClass.method(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()));<span class=\"comment\">// 调用的是桥接方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里声明了<code>SuperClass</code>类型的变量指向<code>SubClass</code>类型的实例，典型的多态。在声明<code>SuperClass</code>类型的变量时，不指定泛型类型，那么在方法调用时就可以传任何类型的参数，因为<code>SuperClass</code>中的方法参数实际上是<code>Object</code>类型，而且编译器也不能发现错误。在运行时当参数类型不是<code>SubClass</code>声明的类型时，会抛出类型转换异常，因为这时调用的是桥接方法，而在桥接方法中会进行强制类型转换，所以才会抛出类型转换异常。上面的代码输出结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc123</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> <span class=\"keyword\">java.lang.ClassCastException: </span><span class=\"keyword\">java.lang.Object </span>cannot <span class=\"keyword\">be </span>cast to <span class=\"keyword\">java.lang.String</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.mikan.<span class=\"keyword\">SubClass.method(SubClass.java:7)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.mikan.<span class=\"keyword\">BridgeMethodTest.main(BridgeMethodTest.java:27)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\t<span class=\"built_in\">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.<span class=\"keyword\">java:57)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.<span class=\"keyword\">java:43)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> <span class=\"keyword\">java.lang.reflect.Method.invoke(Method.java:606)</span></span><br><span class=\"line\"><span class=\"keyword\"></span>\t<span class=\"built_in\">at</span> com.intellij.rt.execution.application.AppMain.main(AppMain.<span class=\"keyword\">java:140)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们在声明<code>SuperClass</code>类型的变量就指定了泛型类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SuperClass&lt;String&gt; superClass = <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br></pre></td></tr></table></figure>\n\n<p>当然这里类型只能是<code>String</code>，因为<code>SubClass</code>的泛型类型声明是<code>String</code>类型的，如果指定其他类型，那么在编译时就会错误，这样就把类型检查从运行时提前到了编译时。这就是泛型的好处。<br>为什么要生成桥接方法<br>上面看到了编译器在什么时候会生成桥接方法，那为什么要生成桥接方法呢？</p>\n<p>在java1.5以前，比如声明一个集合类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br></pre></td></tr></table></figure>\n\n<p>那么往list中可以添加任何类型的对象，但是在从集合中获取对象时，无法确定获取到的对象是什么具体的类型，所以在1.5的时候引入了泛型，在声明集合的时候就指定集合中存放的是什么类型的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>那么在获取时就不必担心类型的问题，因为泛型在编译时编译器会检查往集合中添加的对象的类型是否匹配泛型类型，如果不正确会在编译时就会发现错误，而不必等到运行时才发现错误。因为泛型是在1.5引入的，为了向前兼容，所以会在编译时去掉泛型（泛型擦除），但是我们还是可以通过反射API来获取泛型的信息，在编译时可以通过泛型来保证类型的正确性，而不必等到运行时才发现类型不正确。由于java泛型的擦除特性，如果不生成桥接方法，那么与1.5之前的字节码就不兼容了。如前面的<code>SuperClass</code>中的方法，实际在编译后的字节码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:mikan mikan$ javap -c -v SuperClass.class</span><br><span class=\"line\">Classfile /Users/mikan/Documents/workspace/project/algorithm/target/classes/com/mikan/SuperClass.class</span><br><span class=\"line\">  Last modified 2015-8-7; size 251 bytes</span><br><span class=\"line\">  MD5 checksum 2e2530041f1f83aaf416a2ca3af9b7e3</span><br><span class=\"line\">  Compiled from &quot;SuperClass.java&quot;</span><br><span class=\"line\">public interface com.mikan.SuperClass&lt;T extends java.lang.Object&gt;</span><br><span class=\"line\">  Signature: #7                           // &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class=\"line\">  SourceFile: &quot;SuperClass.java&quot;</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 51</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Class              #10            //  com/mikan/SuperClass</span><br><span class=\"line\">   #2 = Class              #11            //  java/lang/Object</span><br><span class=\"line\">   #3 = Utf8               method</span><br><span class=\"line\">   #4 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">   #5 = Utf8               Signature</span><br><span class=\"line\">   #6 = Utf8               (TT;)TT;</span><br><span class=\"line\">   #7 = Utf8               &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class=\"line\">   #8 = Utf8               SourceFile</span><br><span class=\"line\">   #9 = Utf8               SuperClass.java</span><br><span class=\"line\">  #10 = Utf8               com/mikan/SuperClass</span><br><span class=\"line\">  #11 = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public abstract T method(T);</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_ABSTRACT</span><br><span class=\"line\">    Signature: #6                           // (TT;)TT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localhost:mikan mikan$</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>Signature: #7 // &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</code>可以看到，在编译完成后泛型实际上就成了<code>Object</code>了，所以方法实际上成了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title function_\">method</span><span class=\"params\">(Object param)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>SubClass</code>实现了<code>SuperClass</code>这个接口，如果不生成桥接方法，那么<code>SubClass</code>就没有实现接口中声明的方法，语义就不正确了，所以编译器才会自动生成桥接方法，来保证兼容性。</p>\n<h1 id=\"如何通过桥接方法获取实际的方法\"><a href=\"#如何通过桥接方法获取实际的方法\" class=\"headerlink\" title=\"如何通过桥接方法获取实际的方法\"></a>如何通过桥接方法获取实际的方法</h1><p>我们在通过反射进行方法调用时，如果获取到桥接方法对应的实际的方法呢？可以查看spring中<code>org.springframework.core.BridgeMethodResolver</code>类的源码。实际上是通过判断方法名、参数的个数以及泛型类型参数来获取的。</p>\n"},{"title":"注解Annotation","date":"2024-07-02T15:08:41.000Z","_content":"\n说明程序的，给计算机看的\n\n注解，也交元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举在同一层次。可以声明在报、类、字段、局部变量、方法参数等前面，用与对象相关元素进行说明。\n\n\n作用分类：\n\n1. 编写文档：通过相关元数据生成doc文档\n2. 代码分析：通过相关元数据对代码进行分析【使用反射】\n3. 编译检查：编译器识别相关元数据进行编译检查【如Override】\n\n# JDK预定义注解\n\n* @Override：编译检查，标识方法来自父类或接口定义\n* @Deprecated：标识被标识元素以过时，不建议使用被标识元素\n* @SuppressWarning：压制警告\n\n\n# 自定义注解\n\n格式：\n\npublic @interface 注解名\n\n注解实际上是继承自java.lang.annotation.Annotation 的接口<br />\n\n如：\n\n```java\npublic @interface MyAnno {\n}\n```\n\n实际为\n\n```java\npublic interface com.javalearn.annotation.MyAnno extends java.lang.annotation.Annotation {\n}\n```\n\n* 属性： 注解的抽象方法\n\n    1. 要求属性的返回值必须为以下之一：\n\n        * 基本数据类型\n        * String\n        * 枚举\n        * 注解\n        * 以上类型的数组\n    2. 在使用属性时需要给属性赋值，或在定义时设置默认值\n    3. 仅有一个属性需要赋值且属性名为**value**，可以省略赋值时的属性名\n    4. **数组**赋值使用大括号{}，数组中仅有一个元素可以省略括号\n\n\n# 元注解\n\n* @Target\n\n  描述注解能够作用的位置\n\n  ElementType取值：\n\n    * TYPE：可以作用于类上\n    * METHOD：方法\n    * FIELD：成员变量\n    * PARAMETER\n    * CONSTRUCTOR\n    * LOCAL_VARIABLE\n    * ANNOTATION_TYPE\n    * PACKAGE\n    * TYPE_PARAMETER\n    * TYPE_USE\n* @Retention\n\n  描述注解被保留的阶段\n\n  RetentionPolicy取值：\n\n    * SOURCE：仅在源代码保留，编译时抛弃\n    * CLASS：编译是保留，运行时不载入\n    * RUNTIME：保留至运行时，自定义注解一般使用此注解\n* @Documented\n\n  描述注解是否被抽取到api文档中\n* @Inherited\n\n  描述注解是否被子类继承\n\n# 解析注解\n\n1. 获取注解定义的位置的对象 （Class, Method, Field)\n2. 获取指定注解\n3. 调用注解方法获取相应值\n\n代码示例：\n\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface InvokeInfo {\n    String className();\n    String methodName();\n}\n\n\npublic class AnnoReflectorFrame {\n\n    @InvokeInfo(className = \"com.javalearn.reflect.Person\", methodName = \"staticTest\")\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        // 读取配置文件\n/*        Properties properties = new Properties();\n\n        ClassLoader classLoader = AnnoReflectorFrame.class.getClassLoader();\n        InputStream inputStream = classLoader.getResourceAsStream(\"reflect\" + File.separator + \"reflect.properties\");\n        properties.load(inputStream);\n\n        String className = properties.getProperty(\"class\");\n        String methodName = properties.getProperty(\"method\");*/\n\n        Method main = AnnoReflectorFrame.class.getMethod(\"main\", String[].class);\n        InvokeInfo annotation = main.getAnnotation(InvokeInfo.class);\n        System.out.println(annotation);\n\n        String className = annotation.className();\n        String methodName = annotation.methodName();\n        // 加载类并执行方法\n        Class<?> cls = Class.forName(className);\n        Method declaredMethod = cls.getDeclaredMethod(methodName);\n        declaredMethod.invoke(null);\n\n    }\n}\n```","source":"_posts/java/注解Annotation.md","raw":"---\ntitle: 注解Annotation\ndate: 2024-07-02 23:08:41\ncategories:\n  - java\ntags:\n  - java\n---\n\n说明程序的，给计算机看的\n\n注解，也交元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举在同一层次。可以声明在报、类、字段、局部变量、方法参数等前面，用与对象相关元素进行说明。\n\n\n作用分类：\n\n1. 编写文档：通过相关元数据生成doc文档\n2. 代码分析：通过相关元数据对代码进行分析【使用反射】\n3. 编译检查：编译器识别相关元数据进行编译检查【如Override】\n\n# JDK预定义注解\n\n* @Override：编译检查，标识方法来自父类或接口定义\n* @Deprecated：标识被标识元素以过时，不建议使用被标识元素\n* @SuppressWarning：压制警告\n\n\n# 自定义注解\n\n格式：\n\npublic @interface 注解名\n\n注解实际上是继承自java.lang.annotation.Annotation 的接口<br />\n\n如：\n\n```java\npublic @interface MyAnno {\n}\n```\n\n实际为\n\n```java\npublic interface com.javalearn.annotation.MyAnno extends java.lang.annotation.Annotation {\n}\n```\n\n* 属性： 注解的抽象方法\n\n    1. 要求属性的返回值必须为以下之一：\n\n        * 基本数据类型\n        * String\n        * 枚举\n        * 注解\n        * 以上类型的数组\n    2. 在使用属性时需要给属性赋值，或在定义时设置默认值\n    3. 仅有一个属性需要赋值且属性名为**value**，可以省略赋值时的属性名\n    4. **数组**赋值使用大括号{}，数组中仅有一个元素可以省略括号\n\n\n# 元注解\n\n* @Target\n\n  描述注解能够作用的位置\n\n  ElementType取值：\n\n    * TYPE：可以作用于类上\n    * METHOD：方法\n    * FIELD：成员变量\n    * PARAMETER\n    * CONSTRUCTOR\n    * LOCAL_VARIABLE\n    * ANNOTATION_TYPE\n    * PACKAGE\n    * TYPE_PARAMETER\n    * TYPE_USE\n* @Retention\n\n  描述注解被保留的阶段\n\n  RetentionPolicy取值：\n\n    * SOURCE：仅在源代码保留，编译时抛弃\n    * CLASS：编译是保留，运行时不载入\n    * RUNTIME：保留至运行时，自定义注解一般使用此注解\n* @Documented\n\n  描述注解是否被抽取到api文档中\n* @Inherited\n\n  描述注解是否被子类继承\n\n# 解析注解\n\n1. 获取注解定义的位置的对象 （Class, Method, Field)\n2. 获取指定注解\n3. 调用注解方法获取相应值\n\n代码示例：\n\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface InvokeInfo {\n    String className();\n    String methodName();\n}\n\n\npublic class AnnoReflectorFrame {\n\n    @InvokeInfo(className = \"com.javalearn.reflect.Person\", methodName = \"staticTest\")\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        // 读取配置文件\n/*        Properties properties = new Properties();\n\n        ClassLoader classLoader = AnnoReflectorFrame.class.getClassLoader();\n        InputStream inputStream = classLoader.getResourceAsStream(\"reflect\" + File.separator + \"reflect.properties\");\n        properties.load(inputStream);\n\n        String className = properties.getProperty(\"class\");\n        String methodName = properties.getProperty(\"method\");*/\n\n        Method main = AnnoReflectorFrame.class.getMethod(\"main\", String[].class);\n        InvokeInfo annotation = main.getAnnotation(InvokeInfo.class);\n        System.out.println(annotation);\n\n        String className = annotation.className();\n        String methodName = annotation.methodName();\n        // 加载类并执行方法\n        Class<?> cls = Class.forName(className);\n        Method declaredMethod = cls.getDeclaredMethod(methodName);\n        declaredMethod.invoke(null);\n\n    }\n}\n```","slug":"java/注解Annotation","published":1,"updated":"2024-07-02T15:09:00.538Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19va000c0ouy20saf8vb","content":"<p>说明程序的，给计算机看的</p>\n<p>注解，也交元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举在同一层次。可以声明在报、类、字段、局部变量、方法参数等前面，用与对象相关元素进行说明。</p>\n<p>作用分类：</p>\n<ol>\n<li>编写文档：通过相关元数据生成doc文档</li>\n<li>代码分析：通过相关元数据对代码进行分析【使用反射】</li>\n<li>编译检查：编译器识别相关元数据进行编译检查【如Override】</li>\n</ol>\n<h1 id=\"JDK预定义注解\"><a href=\"#JDK预定义注解\" class=\"headerlink\" title=\"JDK预定义注解\"></a>JDK预定义注解</h1><ul>\n<li>@Override：编译检查，标识方法来自父类或接口定义</li>\n<li>@Deprecated：标识被标识元素以过时，不建议使用被标识元素</li>\n<li>@SuppressWarning：压制警告</li>\n</ul>\n<h1 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h1><p>格式：</p>\n<p>public @interface 注解名</p>\n<p>注解实际上是继承自java.lang.annotation.Annotation 的接口<br /></p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnno &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">com</span>.javalearn.annotation.MyAnno <span class=\"keyword\">extends</span> <span class=\"title class_\">java</span>.lang.annotation.Annotation &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>属性： 注解的抽象方法</p>\n<ol>\n<li><p>要求属性的返回值必须为以下之一：</p>\n<ul>\n<li>基本数据类型</li>\n<li>String</li>\n<li>枚举</li>\n<li>注解</li>\n<li>以上类型的数组</li>\n</ul>\n</li>\n<li><p>在使用属性时需要给属性赋值，或在定义时设置默认值</p>\n</li>\n<li><p>仅有一个属性需要赋值且属性名为<strong>value</strong>，可以省略赋值时的属性名</p>\n</li>\n<li><p><strong>数组</strong>赋值使用大括号{}，数组中仅有一个元素可以省略括号</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h1><ul>\n<li><p>@Target</p>\n<p>描述注解能够作用的位置</p>\n<p>ElementType取值：</p>\n<ul>\n<li>TYPE：可以作用于类上</li>\n<li>METHOD：方法</li>\n<li>FIELD：成员变量</li>\n<li>PARAMETER</li>\n<li>CONSTRUCTOR</li>\n<li>LOCAL_VARIABLE</li>\n<li>ANNOTATION_TYPE</li>\n<li>PACKAGE</li>\n<li>TYPE_PARAMETER</li>\n<li>TYPE_USE</li>\n</ul>\n</li>\n<li><p>@Retention</p>\n<p>描述注解被保留的阶段</p>\n<p>RetentionPolicy取值：</p>\n<ul>\n<li>SOURCE：仅在源代码保留，编译时抛弃</li>\n<li>CLASS：编译是保留，运行时不载入</li>\n<li>RUNTIME：保留至运行时，自定义注解一般使用此注解</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n<p>描述注解是否被抽取到api文档中</p>\n</li>\n<li><p>@Inherited</p>\n<p>描述注解是否被子类继承</p>\n</li>\n</ul>\n<h1 id=\"解析注解\"><a href=\"#解析注解\" class=\"headerlink\" title=\"解析注解\"></a>解析注解</h1><ol>\n<li>获取注解定义的位置的对象 （Class, Method, Field)</li>\n<li>获取指定注解</li>\n<li>调用注解方法获取相应值</li>\n</ol>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> InvokeInfo &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">className</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    String <span class=\"title function_\">methodName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnoReflectorFrame</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@InvokeInfo(className = &quot;com.javalearn.reflect.Person&quot;, methodName = &quot;staticTest&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/*        Properties properties = new Properties();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        ClassLoader classLoader = AnnoReflectorFrame.class.getClassLoader();</span></span><br><span class=\"line\"><span class=\"comment\">        InputStream inputStream = classLoader.getResourceAsStream(&quot;reflect&quot; + File.separator + &quot;reflect.properties&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        properties.load(inputStream);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        String className = properties.getProperty(&quot;class&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        String methodName = properties.getProperty(&quot;method&quot;);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">main</span> <span class=\"operator\">=</span> AnnoReflectorFrame.class.getMethod(<span class=\"string\">&quot;main&quot;</span>, String[].class);</span><br><span class=\"line\">        <span class=\"type\">InvokeInfo</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> main.getAnnotation(InvokeInfo.class);</span><br><span class=\"line\">        System.out.println(annotation);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> annotation.className();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> annotation.methodName();</span><br><span class=\"line\">        <span class=\"comment\">// 加载类并执行方法</span></span><br><span class=\"line\">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">declaredMethod</span> <span class=\"operator\">=</span> cls.getDeclaredMethod(methodName);</span><br><span class=\"line\">        declaredMethod.invoke(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>说明程序的，给计算机看的</p>\n<p>注解，也交元数据。一种代码级别的说明，在JDK1.5之后引入的特性，与类、接口、枚举在同一层次。可以声明在报、类、字段、局部变量、方法参数等前面，用与对象相关元素进行说明。</p>\n<p>作用分类：</p>\n<ol>\n<li>编写文档：通过相关元数据生成doc文档</li>\n<li>代码分析：通过相关元数据对代码进行分析【使用反射】</li>\n<li>编译检查：编译器识别相关元数据进行编译检查【如Override】</li>\n</ol>\n<h1 id=\"JDK预定义注解\"><a href=\"#JDK预定义注解\" class=\"headerlink\" title=\"JDK预定义注解\"></a>JDK预定义注解</h1><ul>\n<li>@Override：编译检查，标识方法来自父类或接口定义</li>\n<li>@Deprecated：标识被标识元素以过时，不建议使用被标识元素</li>\n<li>@SuppressWarning：压制警告</li>\n</ul>\n<h1 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h1><p>格式：</p>\n<p>public @interface 注解名</p>\n<p>注解实际上是继承自java.lang.annotation.Annotation 的接口<br /></p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnno &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">com</span>.javalearn.annotation.MyAnno <span class=\"keyword\">extends</span> <span class=\"title class_\">java</span>.lang.annotation.Annotation &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>属性： 注解的抽象方法</p>\n<ol>\n<li><p>要求属性的返回值必须为以下之一：</p>\n<ul>\n<li>基本数据类型</li>\n<li>String</li>\n<li>枚举</li>\n<li>注解</li>\n<li>以上类型的数组</li>\n</ul>\n</li>\n<li><p>在使用属性时需要给属性赋值，或在定义时设置默认值</p>\n</li>\n<li><p>仅有一个属性需要赋值且属性名为<strong>value</strong>，可以省略赋值时的属性名</p>\n</li>\n<li><p><strong>数组</strong>赋值使用大括号{}，数组中仅有一个元素可以省略括号</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h1><ul>\n<li><p>@Target</p>\n<p>描述注解能够作用的位置</p>\n<p>ElementType取值：</p>\n<ul>\n<li>TYPE：可以作用于类上</li>\n<li>METHOD：方法</li>\n<li>FIELD：成员变量</li>\n<li>PARAMETER</li>\n<li>CONSTRUCTOR</li>\n<li>LOCAL_VARIABLE</li>\n<li>ANNOTATION_TYPE</li>\n<li>PACKAGE</li>\n<li>TYPE_PARAMETER</li>\n<li>TYPE_USE</li>\n</ul>\n</li>\n<li><p>@Retention</p>\n<p>描述注解被保留的阶段</p>\n<p>RetentionPolicy取值：</p>\n<ul>\n<li>SOURCE：仅在源代码保留，编译时抛弃</li>\n<li>CLASS：编译是保留，运行时不载入</li>\n<li>RUNTIME：保留至运行时，自定义注解一般使用此注解</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n<p>描述注解是否被抽取到api文档中</p>\n</li>\n<li><p>@Inherited</p>\n<p>描述注解是否被子类继承</p>\n</li>\n</ul>\n<h1 id=\"解析注解\"><a href=\"#解析注解\" class=\"headerlink\" title=\"解析注解\"></a>解析注解</h1><ol>\n<li>获取注解定义的位置的对象 （Class, Method, Field)</li>\n<li>获取指定注解</li>\n<li>调用注解方法获取相应值</li>\n</ol>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> InvokeInfo &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">className</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    String <span class=\"title function_\">methodName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnoReflectorFrame</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@InvokeInfo(className = &quot;com.javalearn.reflect.Person&quot;, methodName = &quot;staticTest&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/*        Properties properties = new Properties();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        ClassLoader classLoader = AnnoReflectorFrame.class.getClassLoader();</span></span><br><span class=\"line\"><span class=\"comment\">        InputStream inputStream = classLoader.getResourceAsStream(&quot;reflect&quot; + File.separator + &quot;reflect.properties&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        properties.load(inputStream);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        String className = properties.getProperty(&quot;class&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        String methodName = properties.getProperty(&quot;method&quot;);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">main</span> <span class=\"operator\">=</span> AnnoReflectorFrame.class.getMethod(<span class=\"string\">&quot;main&quot;</span>, String[].class);</span><br><span class=\"line\">        <span class=\"type\">InvokeInfo</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> main.getAnnotation(InvokeInfo.class);</span><br><span class=\"line\">        System.out.println(annotation);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> annotation.className();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> annotation.methodName();</span><br><span class=\"line\">        <span class=\"comment\">// 加载类并执行方法</span></span><br><span class=\"line\">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">declaredMethod</span> <span class=\"operator\">=</span> cls.getDeclaredMethod(methodName);</span><br><span class=\"line\">        declaredMethod.invoke(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据库连接池","date":"2024-07-02T15:07:38.000Z","_content":"\n概念：存放数据库连接对象的容器，有需要从容器中获取连接，使用完毕后归还\n\n优点：\n\n1. 节约资源\n2. 高效\n\n### 标准接口：\n\n```java\npublic interface DataSource extends CommonDataSource, Wrapper\n```\n\n方法：\n\n1. `getConnection()`\n\n   获取连接\n2. `connection.close()`\n\n   从连接池中获取的连接将不会被直接关闭，而是被归还\n\n实现：\n\n1. C3P0\n2. Druid\n\n## C3P0\n\n使用步骤\n\n1. 导入jar包/引用依赖\n\n   c3p0-x.x.x.jar\n\n   mchange-commons-java-x.x.x.jar\n\n   **maven**\n\n    ```xml\n        <dependencies>\n            <dependency>\n                <groupId>com.mchange</groupId>\n                <artifactId>c3p0</artifactId>\n                <version>0.9.5.5</version>\n            </dependency>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>8.0.28</version>\n            </dependency>\n        </dependencies>\n    ```\n2. 配置文件\n\n   文件名应为`c3p0.properties`或者`c3p0-config.xml`，位于classpath下（项目直接目录）\n\n   配置示例\n\n    ```xml\n    <c3p0-config>\n        <!-- 默认配置 -->\n        <default-config>\n            <!-- 连接参数 -->\n            <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n            <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/db1</property>\n            <property name=\"user\">root</property>\n            <property name=\"password\">12321</property>\n            <!-- 连接池参数 -->\n            <property name=\"initialPoolSize\">5</property>\n            <property name=\"maxPoolSize\">10</property>\n            <property name=\"checkoutTimeout\">3000</property>\n        </default-config>\n\n        <named-config name=\"otherc3p0\">\n            <!-- 连接参数 -->\n            <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n            <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/db1</property>\n            <property name=\"user\">root</property>\n            <property name=\"password\">12321</property>\n            <!-- 连接池参数 -->\n            <property name=\"initialPoolSize\">5</property>\n            <property name=\"maxPoolSize\">11</property>\n            <property name=\"checkoutTimeout\">1000</property>\n        </named-config>\n    </c3p0-config>\n    ```\n3. 创建核心对象`ComboPooledDataSource`\n4. 获取连接`getConnection()`\n\n5. 使用示例\n\n    ```java\n    public class C3P0Demo {\n        public static void main(String[] args) throws SQLException {\n            demo2();\n        }\n\n        private static void demo2() throws SQLException {\n            DataSource dataSource= new ComboPooledDataSource(\"otherc3p0\");\n            for (int i = 0; i < 11; i++) {\n                Connection connection =  .getConnection();\n                System.out.println(i +  \":\" + connection);\n            }\n        }\n\n        private static void demo1() {\n            DataSource dataSource = new ComboPooledDataSource();\n            Connection connection = null;\n            try {\n                connection = dataSource.getConnection();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            System.out.println(connection);\n        }\n    }\n    ```\n\n\n## Druid\n\n使用步骤：\n\n1. 导入jar包 druid-x.xx.x.jar\n\n   maven\n\n    ```xml\n            <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>druid</artifactId>\n                <version>1.2.8</version>\n            </dependency>\n    ```\n2. 定义配置文件\n\n    ```properties\n    driverClassName=com.mysql.cj.jdbc.Driver\n    url=jdbc:mysql://localhost:3306/db1\n    username=root\n    password=12321\n\n    initialSize=5\n    maxActive=10\n    maxWait=3000\n    ```\n3. 加载配置\n4. 获取连接池对象\n\n    ```java\n    DruidDataSourceFactory.createDataSource(properties)\n    ```\n\n5. 示例\n\n    ```java\n    public class DruidDemo {\n        public static void main(String[] args) throws Exception {\n\n            ClassLoader classLoader = DruidDemo.class.getClassLoader();\n            InputStream resourceAsStream = classLoader.getResourceAsStream(\"druid.properties\");\n            Properties properties = new Properties();\n            properties.load(resourceAsStream);\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        }\n    }\n    ```\n","source":"_posts/java/数据库连接池.md","raw":"---\ntitle: 数据库连接池\ndate: 2024-07-02 23:07:38\ncategories:\n  - java\ntags:\n  - java\n  - 数据库\n  - 连接池\n---\n\n概念：存放数据库连接对象的容器，有需要从容器中获取连接，使用完毕后归还\n\n优点：\n\n1. 节约资源\n2. 高效\n\n### 标准接口：\n\n```java\npublic interface DataSource extends CommonDataSource, Wrapper\n```\n\n方法：\n\n1. `getConnection()`\n\n   获取连接\n2. `connection.close()`\n\n   从连接池中获取的连接将不会被直接关闭，而是被归还\n\n实现：\n\n1. C3P0\n2. Druid\n\n## C3P0\n\n使用步骤\n\n1. 导入jar包/引用依赖\n\n   c3p0-x.x.x.jar\n\n   mchange-commons-java-x.x.x.jar\n\n   **maven**\n\n    ```xml\n        <dependencies>\n            <dependency>\n                <groupId>com.mchange</groupId>\n                <artifactId>c3p0</artifactId>\n                <version>0.9.5.5</version>\n            </dependency>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>8.0.28</version>\n            </dependency>\n        </dependencies>\n    ```\n2. 配置文件\n\n   文件名应为`c3p0.properties`或者`c3p0-config.xml`，位于classpath下（项目直接目录）\n\n   配置示例\n\n    ```xml\n    <c3p0-config>\n        <!-- 默认配置 -->\n        <default-config>\n            <!-- 连接参数 -->\n            <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n            <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/db1</property>\n            <property name=\"user\">root</property>\n            <property name=\"password\">12321</property>\n            <!-- 连接池参数 -->\n            <property name=\"initialPoolSize\">5</property>\n            <property name=\"maxPoolSize\">10</property>\n            <property name=\"checkoutTimeout\">3000</property>\n        </default-config>\n\n        <named-config name=\"otherc3p0\">\n            <!-- 连接参数 -->\n            <property name=\"driverClass\">com.mysql.cj.jdbc.Driver</property>\n            <property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/db1</property>\n            <property name=\"user\">root</property>\n            <property name=\"password\">12321</property>\n            <!-- 连接池参数 -->\n            <property name=\"initialPoolSize\">5</property>\n            <property name=\"maxPoolSize\">11</property>\n            <property name=\"checkoutTimeout\">1000</property>\n        </named-config>\n    </c3p0-config>\n    ```\n3. 创建核心对象`ComboPooledDataSource`\n4. 获取连接`getConnection()`\n\n5. 使用示例\n\n    ```java\n    public class C3P0Demo {\n        public static void main(String[] args) throws SQLException {\n            demo2();\n        }\n\n        private static void demo2() throws SQLException {\n            DataSource dataSource= new ComboPooledDataSource(\"otherc3p0\");\n            for (int i = 0; i < 11; i++) {\n                Connection connection =  .getConnection();\n                System.out.println(i +  \":\" + connection);\n            }\n        }\n\n        private static void demo1() {\n            DataSource dataSource = new ComboPooledDataSource();\n            Connection connection = null;\n            try {\n                connection = dataSource.getConnection();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            System.out.println(connection);\n        }\n    }\n    ```\n\n\n## Druid\n\n使用步骤：\n\n1. 导入jar包 druid-x.xx.x.jar\n\n   maven\n\n    ```xml\n            <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>druid</artifactId>\n                <version>1.2.8</version>\n            </dependency>\n    ```\n2. 定义配置文件\n\n    ```properties\n    driverClassName=com.mysql.cj.jdbc.Driver\n    url=jdbc:mysql://localhost:3306/db1\n    username=root\n    password=12321\n\n    initialSize=5\n    maxActive=10\n    maxWait=3000\n    ```\n3. 加载配置\n4. 获取连接池对象\n\n    ```java\n    DruidDataSourceFactory.createDataSource(properties)\n    ```\n\n5. 示例\n\n    ```java\n    public class DruidDemo {\n        public static void main(String[] args) throws Exception {\n\n            ClassLoader classLoader = DruidDemo.class.getClassLoader();\n            InputStream resourceAsStream = classLoader.getResourceAsStream(\"druid.properties\");\n            Properties properties = new Properties();\n            properties.load(resourceAsStream);\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n\n            Connection connection = dataSource.getConnection();\n            System.out.println(connection);\n        }\n    }\n    ```\n","slug":"java/数据库连接池","published":1,"updated":"2024-07-02T15:08:27.094Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vb000h0ouyd0pgh4k2","content":"<p>概念：存放数据库连接对象的容器，有需要从容器中获取连接，使用完毕后归还</p>\n<p>优点：</p>\n<ol>\n<li>节约资源</li>\n<li>高效</li>\n</ol>\n<h3 id=\"标准接口：\"><a href=\"#标准接口：\" class=\"headerlink\" title=\"标准接口：\"></a>标准接口：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CommonDataSource</span>, Wrapper</span><br></pre></td></tr></table></figure>\n\n<p>方法：</p>\n<ol>\n<li><p><code>getConnection()</code></p>\n<p>获取连接</p>\n</li>\n<li><p><code>connection.close()</code></p>\n<p>从连接池中获取的连接将不会被直接关闭，而是被归还</p>\n</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>C3P0</li>\n<li>Druid</li>\n</ol>\n<h2 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h2><p>使用步骤</p>\n<ol>\n<li><p>导入jar包&#x2F;引用依赖</p>\n<p>c3p0-x.x.x.jar</p>\n<p>mchange-commons-java-x.x.x.jar</p>\n<p><strong>maven</strong></p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置文件</p>\n<p>文件名应为<code>c3p0.properties</code>或者<code>c3p0-config.xml</code>，位于classpath下（项目直接目录）</p>\n<p>配置示例</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c3p0-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default-config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/db1<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12321<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接池参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">default-config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">named-config</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/db1<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12321<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接池参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">named-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建核心对象<code>ComboPooledDataSource</code></p>\n</li>\n<li><p>获取连接<code>getConnection()</code></p>\n</li>\n<li><p>使用示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C3P0Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        demo2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        DataSource dataSource= <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>(<span class=\"string\">&quot;otherc3p0&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span>  .getConnection();</span><br><span class=\"line\">            System.out.println(i +  <span class=\"string\">&quot;:&quot;</span> + connection);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = dataSource.getConnection();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h2><p>使用步骤：</p>\n<ol>\n<li><p>导入jar包 druid-x.xx.x.jar</p>\n<p>maven</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>定义配置文件</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/db1</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">12321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">maxWait</span>=<span class=\"string\">3000</span></span><br></pre></td></tr></table></figure></li>\n<li><p>加载配置</p>\n</li>\n<li><p>获取连接池对象</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DruidDataSourceFactory.createDataSource(properties)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> DruidDemo.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> classLoader.getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(resourceAsStream);</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p>概念：存放数据库连接对象的容器，有需要从容器中获取连接，使用完毕后归还</p>\n<p>优点：</p>\n<ol>\n<li>节约资源</li>\n<li>高效</li>\n</ol>\n<h3 id=\"标准接口：\"><a href=\"#标准接口：\" class=\"headerlink\" title=\"标准接口：\"></a>标准接口：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CommonDataSource</span>, Wrapper</span><br></pre></td></tr></table></figure>\n\n<p>方法：</p>\n<ol>\n<li><p><code>getConnection()</code></p>\n<p>获取连接</p>\n</li>\n<li><p><code>connection.close()</code></p>\n<p>从连接池中获取的连接将不会被直接关闭，而是被归还</p>\n</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>C3P0</li>\n<li>Druid</li>\n</ol>\n<h2 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h2><p>使用步骤</p>\n<ol>\n<li><p>导入jar包&#x2F;引用依赖</p>\n<p>c3p0-x.x.x.jar</p>\n<p>mchange-commons-java-x.x.x.jar</p>\n<p><strong>maven</strong></p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置文件</p>\n<p>文件名应为<code>c3p0.properties</code>或者<code>c3p0-config.xml</code>，位于classpath下（项目直接目录）</p>\n<p>配置示例</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c3p0-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default-config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/db1<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12321<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接池参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">default-config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">named-config</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/db1<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12321<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接池参数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">named-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建核心对象<code>ComboPooledDataSource</code></p>\n</li>\n<li><p>获取连接<code>getConnection()</code></p>\n</li>\n<li><p>使用示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C3P0Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        demo2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        DataSource dataSource= <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>(<span class=\"string\">&quot;otherc3p0&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span>  .getConnection();</span><br><span class=\"line\">            System.out.println(i +  <span class=\"string\">&quot;:&quot;</span> + connection);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = dataSource.getConnection();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h2><p>使用步骤：</p>\n<ol>\n<li><p>导入jar包 druid-x.xx.x.jar</p>\n<p>maven</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>定义配置文件</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/db1</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">12321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">maxWait</span>=<span class=\"string\">3000</span></span><br></pre></td></tr></table></figure></li>\n<li><p>加载配置</p>\n</li>\n<li><p>获取连接池对象</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DruidDataSourceFactory.createDataSource(properties)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> DruidDemo.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> classLoader.getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(resourceAsStream);</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Spring JDBC","date":"2024-07-02T15:03:17.000Z","_content":"\n定义：spring对jdbc简单封装，提供了JDBCTemplate，简化JDBC开发。\n\n**使用步骤：**\n\n1. 导入jar包\n\n\n    ```xml\n            <dependency>\n                <groupId>org.springframework</groupId>\n                <artifactId>spring-jdbc</artifactId>\n                <version>5.3.17</version>\n            </dependency>\n    ```\n2. 创建JDBCTemplate对象。依赖于DataSource\n3. 调用JdbcTemplate方法完成CRUD操作\n\n   重点方法：\n\n    * `update()`\n    * `queryForMap()`\n\n      查询结果长度只能为1\n    * `queryForList()`\n\n      返回List<Map<xx,xx>>\n    * `query()`\n\n      返回List<..>，需要额外传入**RowMapper**以映射对象字段与ResultSet\n\n      字段与数据库列名相同可以使用默认实现BeanPropertyRowMapper\n    * `queryForObject()`\n\n      返回单个结果，可以用于查询总记录数等\n\n4. 示例\n\n    ```java\n    public class JdbcTemplateDemo {\n        public static void main(String[] args) throws Exception {\n\n            ClassLoader classLoader = JdbcTemplateDemo.class.getClassLoader();\n            InputStream resourceAsStream = classLoader.getResourceAsStream(\"druid.properties\");\n            Properties properties = new Properties();\n            properties.load(resourceAsStream);\n            if (resourceAsStream != null) {\n                resourceAsStream.close();\n            }\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n\n            int update = jdbcTemplate.update(\"update student set score = 99 where id = ?\", 1);\n            System.out.println(update);\n        }\n    }\n    ```\n","source":"_posts/java/Spring-JDBC.md","raw":"---\ntitle: Spring JDBC\ndate: 2024-07-02 23:03:17\ncategories:\n  - java\ntags:\n  - java\n---\n\n定义：spring对jdbc简单封装，提供了JDBCTemplate，简化JDBC开发。\n\n**使用步骤：**\n\n1. 导入jar包\n\n\n    ```xml\n            <dependency>\n                <groupId>org.springframework</groupId>\n                <artifactId>spring-jdbc</artifactId>\n                <version>5.3.17</version>\n            </dependency>\n    ```\n2. 创建JDBCTemplate对象。依赖于DataSource\n3. 调用JdbcTemplate方法完成CRUD操作\n\n   重点方法：\n\n    * `update()`\n    * `queryForMap()`\n\n      查询结果长度只能为1\n    * `queryForList()`\n\n      返回List<Map<xx,xx>>\n    * `query()`\n\n      返回List<..>，需要额外传入**RowMapper**以映射对象字段与ResultSet\n\n      字段与数据库列名相同可以使用默认实现BeanPropertyRowMapper\n    * `queryForObject()`\n\n      返回单个结果，可以用于查询总记录数等\n\n4. 示例\n\n    ```java\n    public class JdbcTemplateDemo {\n        public static void main(String[] args) throws Exception {\n\n            ClassLoader classLoader = JdbcTemplateDemo.class.getClassLoader();\n            InputStream resourceAsStream = classLoader.getResourceAsStream(\"druid.properties\");\n            Properties properties = new Properties();\n            properties.load(resourceAsStream);\n            if (resourceAsStream != null) {\n                resourceAsStream.close();\n            }\n            DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n\n            int update = jdbcTemplate.update(\"update student set score = 99 where id = ?\", 1);\n            System.out.println(update);\n        }\n    }\n    ```\n","slug":"java/Spring-JDBC","published":1,"updated":"2024-07-02T15:07:20.119Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vc000k0ouyeij8fgdj","content":"<p>定义：spring对jdbc简单封装，提供了JDBCTemplate，简化JDBC开发。</p>\n<p><strong>使用步骤：</strong></p>\n<ol>\n<li><p>导入jar包</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建JDBCTemplate对象。依赖于DataSource</p>\n</li>\n<li><p>调用JdbcTemplate方法完成CRUD操作</p>\n<p>重点方法：</p>\n<ul>\n<li><p><code>update()</code></p>\n</li>\n<li><p><code>queryForMap()</code></p>\n<p>查询结果长度只能为1</p>\n</li>\n<li><p><code>queryForList()</code></p>\n<p>返回List&lt;Map&lt;xx,xx&gt;&gt;</p>\n</li>\n<li><p><code>query()</code></p>\n<p>返回List&lt;..&gt;，需要额外传入<strong>RowMapper</strong>以映射对象字段与ResultSet</p>\n<p>字段与数据库列名相同可以使用默认实现BeanPropertyRowMapper</p>\n</li>\n<li><p><code>queryForObject()</code></p>\n<p>返回单个结果，可以用于查询总记录数等</p>\n</li>\n</ul>\n</li>\n<li><p>示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcTemplateDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> JdbcTemplateDemo.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> classLoader.getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(resourceAsStream);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resourceAsStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            resourceAsStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">        <span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>(dataSource);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> jdbcTemplate.update(<span class=\"string\">&quot;update student set score = 99 where id = ?&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p>定义：spring对jdbc简单封装，提供了JDBCTemplate，简化JDBC开发。</p>\n<p><strong>使用步骤：</strong></p>\n<ol>\n<li><p>导入jar包</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建JDBCTemplate对象。依赖于DataSource</p>\n</li>\n<li><p>调用JdbcTemplate方法完成CRUD操作</p>\n<p>重点方法：</p>\n<ul>\n<li><p><code>update()</code></p>\n</li>\n<li><p><code>queryForMap()</code></p>\n<p>查询结果长度只能为1</p>\n</li>\n<li><p><code>queryForList()</code></p>\n<p>返回List&lt;Map&lt;xx,xx&gt;&gt;</p>\n</li>\n<li><p><code>query()</code></p>\n<p>返回List&lt;..&gt;，需要额外传入<strong>RowMapper</strong>以映射对象字段与ResultSet</p>\n<p>字段与数据库列名相同可以使用默认实现BeanPropertyRowMapper</p>\n</li>\n<li><p><code>queryForObject()</code></p>\n<p>返回单个结果，可以用于查询总记录数等</p>\n</li>\n</ul>\n</li>\n<li><p>示例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcTemplateDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> JdbcTemplateDemo.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> classLoader.getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(resourceAsStream);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resourceAsStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            resourceAsStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">        <span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>(dataSource);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> jdbcTemplate.update(<span class=\"string\">&quot;update student set score = 99 where id = ?&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"命名规范","date":"2024-07-02T13:52:08.000Z","_content":"\n**一般总结：**\n\n> 手机号存储类型使用 varchar ，bigint容易造成溢出等问题，varchar便于模糊查询且可索引\n\n\n原文链接：[Mysql数据库对象命名规范-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1923882)\n\n\n\n**数据库**对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。\n\n#### 数据库对象全局命名规范\n\n1、命名使用具有意义的英文词汇，词汇中间以下划线分隔\n\n2、命名只能使用英文字母、数字、下划线，以英文字母开头\n\n3、避免用**MySQL**的保留字如：backup、call、group等\n\n4、所有数据库对象使用小写字母，实际上MySQL中是可以设置大小写是否敏感的，为了保证统一性，我们这边规范全部小写表示。\n\n#### 数据库命名规范\n\n1、数据库命名尽量不超过30个字符。\n\n2、数据库命名一般为项目名称+代表库含义的简写，比如IM项目的工作**流数据**库，可以是 im_flow。\n\n3、数据库创建时必须添加默认字符集和校对规则子句。默认字符集为UTF8（已迁移dumbo的使用utf8mb4）\n\n4、命名应使用小写。\n\n#### 表命名规范\n\n1、常规表表名以t_开头，t代表table的意思，命名规则即 t + 模块（包含模块含义的简写）+ 表（包含表含义的简写），比如用户模块的教育信息表：`t_user_eduinfo`。\n\n2、临时表（RD、QA或DBA同学用于数据临时处理的表），命名规则：temp前缀+模块+表+日期后缀：`temp_user_eduinfo_20210719`\n\n3、备份表（用于保存和归档历史数据或者作为**灾备**恢复的数据）命名规则，bak前缀+模块+表+日期后缀：`bak_user_eduinfo_20210719`\n\n4、同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义\n\n5、多个单词以下划线 _ 分隔\n\n6、常规表表名尽量不超过30个字符，temp表和bak表视情况而定，也尽量简短为宜，命名应使用小写\n\n#### 字段命名规范\n\n1、字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线 _ 进行连接，如 service_ip、service_port。\n\n2、各表之间相同意义的字段必须同名，比如a表和b表都有创建时间，应该统一为create_time，不一致会很混乱。\n\n3、多个单词以下划线 _ 分隔\n\n4、字段名尽量不超过30个字符，命名应该使用小写\n\n#### 索引命名规范\n\n1、唯一索引使用uni + 字段名 来命名：create unique index uni_uid on t_user_basic(uid) 。\n\n2、非唯一索引使用idx + 字段名 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。\n\n3、多个单词以下划线 _ 分隔。\n\n4、索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。\n\n5、多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。\n\n6、理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。\n\n#### 视图命名规范\n\n1、视图名以v开头，表示view，完整结构是v+视图内容含义缩写。","source":"_posts/数据库/命名规范.md","raw":"---\ntitle: 命名规范\ndate: 2024-07-02 21:52:08\ncategories:\n  - 数据库\ntags:\n  - 数据库\n---\n\n**一般总结：**\n\n> 手机号存储类型使用 varchar ，bigint容易造成溢出等问题，varchar便于模糊查询且可索引\n\n\n原文链接：[Mysql数据库对象命名规范-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1923882)\n\n\n\n**数据库**对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。\n\n#### 数据库对象全局命名规范\n\n1、命名使用具有意义的英文词汇，词汇中间以下划线分隔\n\n2、命名只能使用英文字母、数字、下划线，以英文字母开头\n\n3、避免用**MySQL**的保留字如：backup、call、group等\n\n4、所有数据库对象使用小写字母，实际上MySQL中是可以设置大小写是否敏感的，为了保证统一性，我们这边规范全部小写表示。\n\n#### 数据库命名规范\n\n1、数据库命名尽量不超过30个字符。\n\n2、数据库命名一般为项目名称+代表库含义的简写，比如IM项目的工作**流数据**库，可以是 im_flow。\n\n3、数据库创建时必须添加默认字符集和校对规则子句。默认字符集为UTF8（已迁移dumbo的使用utf8mb4）\n\n4、命名应使用小写。\n\n#### 表命名规范\n\n1、常规表表名以t_开头，t代表table的意思，命名规则即 t + 模块（包含模块含义的简写）+ 表（包含表含义的简写），比如用户模块的教育信息表：`t_user_eduinfo`。\n\n2、临时表（RD、QA或DBA同学用于数据临时处理的表），命名规则：temp前缀+模块+表+日期后缀：`temp_user_eduinfo_20210719`\n\n3、备份表（用于保存和归档历史数据或者作为**灾备**恢复的数据）命名规则，bak前缀+模块+表+日期后缀：`bak_user_eduinfo_20210719`\n\n4、同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义\n\n5、多个单词以下划线 _ 分隔\n\n6、常规表表名尽量不超过30个字符，temp表和bak表视情况而定，也尽量简短为宜，命名应使用小写\n\n#### 字段命名规范\n\n1、字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线 _ 进行连接，如 service_ip、service_port。\n\n2、各表之间相同意义的字段必须同名，比如a表和b表都有创建时间，应该统一为create_time，不一致会很混乱。\n\n3、多个单词以下划线 _ 分隔\n\n4、字段名尽量不超过30个字符，命名应该使用小写\n\n#### 索引命名规范\n\n1、唯一索引使用uni + 字段名 来命名：create unique index uni_uid on t_user_basic(uid) 。\n\n2、非唯一索引使用idx + 字段名 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。\n\n3、多个单词以下划线 _ 分隔。\n\n4、索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。\n\n5、多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。\n\n6、理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。\n\n#### 视图命名规范\n\n1、视图名以v开头，表示view，完整结构是v+视图内容含义缩写。","slug":"数据库/命名规范","published":1,"updated":"2024-07-02T13:55:54.156Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19ve000o0ouydqow1yah","content":"<p><strong>一般总结：</strong></p>\n<blockquote>\n<p>手机号存储类型使用 varchar ，bigint容易造成溢出等问题，varchar便于模糊查询且可索引</p>\n</blockquote>\n<p>原文链接：<a href=\"https://cloud.tencent.com/developer/article/1923882\">Mysql数据库对象命名规范-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<p><strong>数据库</strong>对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。</p>\n<h4 id=\"数据库对象全局命名规范\"><a href=\"#数据库对象全局命名规范\" class=\"headerlink\" title=\"数据库对象全局命名规范\"></a>数据库对象全局命名规范</h4><p>1、命名使用具有意义的英文词汇，词汇中间以下划线分隔</p>\n<p>2、命名只能使用英文字母、数字、下划线，以英文字母开头</p>\n<p>3、避免用<strong>MySQL</strong>的保留字如：backup、call、group等</p>\n<p>4、所有数据库对象使用小写字母，实际上MySQL中是可以设置大小写是否敏感的，为了保证统一性，我们这边规范全部小写表示。</p>\n<h4 id=\"数据库命名规范\"><a href=\"#数据库命名规范\" class=\"headerlink\" title=\"数据库命名规范\"></a>数据库命名规范</h4><p>1、数据库命名尽量不超过30个字符。</p>\n<p>2、数据库命名一般为项目名称+代表库含义的简写，比如IM项目的工作<strong>流数据</strong>库，可以是 im_flow。</p>\n<p>3、数据库创建时必须添加默认字符集和校对规则子句。默认字符集为UTF8（已迁移dumbo的使用utf8mb4）</p>\n<p>4、命名应使用小写。</p>\n<h4 id=\"表命名规范\"><a href=\"#表命名规范\" class=\"headerlink\" title=\"表命名规范\"></a>表命名规范</h4><p>1、常规表表名以t_开头，t代表table的意思，命名规则即 t + 模块（包含模块含义的简写）+ 表（包含表含义的简写），比如用户模块的教育信息表：<code>t_user_eduinfo</code>。</p>\n<p>2、临时表（RD、QA或DBA同学用于数据临时处理的表），命名规则：temp前缀+模块+表+日期后缀：<code>temp_user_eduinfo_20210719</code></p>\n<p>3、备份表（用于保存和归档历史数据或者作为<strong>灾备</strong>恢复的数据）命名规则，bak前缀+模块+表+日期后缀：<code>bak_user_eduinfo_20210719</code></p>\n<p>4、同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义</p>\n<p>5、多个单词以下划线 _ 分隔</p>\n<p>6、常规表表名尽量不超过30个字符，temp表和bak表视情况而定，也尽量简短为宜，命名应使用小写</p>\n<h4 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h4><p>1、字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线 _ 进行连接，如 service_ip、service_port。</p>\n<p>2、各表之间相同意义的字段必须同名，比如a表和b表都有创建时间，应该统一为create_time，不一致会很混乱。</p>\n<p>3、多个单词以下划线 _ 分隔</p>\n<p>4、字段名尽量不超过30个字符，命名应该使用小写</p>\n<h4 id=\"索引命名规范\"><a href=\"#索引命名规范\" class=\"headerlink\" title=\"索引命名规范\"></a>索引命名规范</h4><p>1、唯一索引使用uni + 字段名 来命名：create unique index uni_uid on t_user_basic(uid) 。</p>\n<p>2、非唯一索引使用idx + 字段名 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。</p>\n<p>3、多个单词以下划线 _ 分隔。</p>\n<p>4、索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。</p>\n<p>5、多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。</p>\n<p>6、理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</p>\n<h4 id=\"视图命名规范\"><a href=\"#视图命名规范\" class=\"headerlink\" title=\"视图命名规范\"></a>视图命名规范</h4><p>1、视图名以v开头，表示view，完整结构是v+视图内容含义缩写。</p>\n","excerpt":"","more":"<p><strong>一般总结：</strong></p>\n<blockquote>\n<p>手机号存储类型使用 varchar ，bigint容易造成溢出等问题，varchar便于模糊查询且可索引</p>\n</blockquote>\n<p>原文链接：<a href=\"https://cloud.tencent.com/developer/article/1923882\">Mysql数据库对象命名规范-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<p><strong>数据库</strong>对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。</p>\n<h4 id=\"数据库对象全局命名规范\"><a href=\"#数据库对象全局命名规范\" class=\"headerlink\" title=\"数据库对象全局命名规范\"></a>数据库对象全局命名规范</h4><p>1、命名使用具有意义的英文词汇，词汇中间以下划线分隔</p>\n<p>2、命名只能使用英文字母、数字、下划线，以英文字母开头</p>\n<p>3、避免用<strong>MySQL</strong>的保留字如：backup、call、group等</p>\n<p>4、所有数据库对象使用小写字母，实际上MySQL中是可以设置大小写是否敏感的，为了保证统一性，我们这边规范全部小写表示。</p>\n<h4 id=\"数据库命名规范\"><a href=\"#数据库命名规范\" class=\"headerlink\" title=\"数据库命名规范\"></a>数据库命名规范</h4><p>1、数据库命名尽量不超过30个字符。</p>\n<p>2、数据库命名一般为项目名称+代表库含义的简写，比如IM项目的工作<strong>流数据</strong>库，可以是 im_flow。</p>\n<p>3、数据库创建时必须添加默认字符集和校对规则子句。默认字符集为UTF8（已迁移dumbo的使用utf8mb4）</p>\n<p>4、命名应使用小写。</p>\n<h4 id=\"表命名规范\"><a href=\"#表命名规范\" class=\"headerlink\" title=\"表命名规范\"></a>表命名规范</h4><p>1、常规表表名以t_开头，t代表table的意思，命名规则即 t + 模块（包含模块含义的简写）+ 表（包含表含义的简写），比如用户模块的教育信息表：<code>t_user_eduinfo</code>。</p>\n<p>2、临时表（RD、QA或DBA同学用于数据临时处理的表），命名规则：temp前缀+模块+表+日期后缀：<code>temp_user_eduinfo_20210719</code></p>\n<p>3、备份表（用于保存和归档历史数据或者作为<strong>灾备</strong>恢复的数据）命名规则，bak前缀+模块+表+日期后缀：<code>bak_user_eduinfo_20210719</code></p>\n<p>4、同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义</p>\n<p>5、多个单词以下划线 _ 分隔</p>\n<p>6、常规表表名尽量不超过30个字符，temp表和bak表视情况而定，也尽量简短为宜，命名应使用小写</p>\n<h4 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h4><p>1、字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线 _ 进行连接，如 service_ip、service_port。</p>\n<p>2、各表之间相同意义的字段必须同名，比如a表和b表都有创建时间，应该统一为create_time，不一致会很混乱。</p>\n<p>3、多个单词以下划线 _ 分隔</p>\n<p>4、字段名尽量不超过30个字符，命名应该使用小写</p>\n<h4 id=\"索引命名规范\"><a href=\"#索引命名规范\" class=\"headerlink\" title=\"索引命名规范\"></a>索引命名规范</h4><p>1、唯一索引使用uni + 字段名 来命名：create unique index uni_uid on t_user_basic(uid) 。</p>\n<p>2、非唯一索引使用idx + 字段名 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile) 。</p>\n<p>3、多个单词以下划线 _ 分隔。</p>\n<p>4、索引名尽量不超过50个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。</p>\n<p>5、多单词组成的列名，取尽可能代表意义的缩写，如 test_contact表member_id和friend_id上的组合索引：idx_mid_fid。</p>\n<p>6、理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</p>\n<h4 id=\"视图命名规范\"><a href=\"#视图命名规范\" class=\"headerlink\" title=\"视图命名规范\"></a>视图命名规范</h4><p>1、视图名以v开头，表示view，完整结构是v+视图内容含义缩写。</p>\n"},{"title":"数据库设计模式","date":"2024-07-02T13:56:22.000Z","_content":"\n## 多表之间的关系\n\n1. 一对一\n\n   如：人和身份证号\n\n    * 通过在任意的一方建立**唯一外键**，链接到另一方主键\n    * 建立模型时处理为一张表\n2. 一对多\n\n   如：部门和员工\n\n    * 通过在多的一方建立外键，链接到另一方主键\n3. 多对多\n\n   如：学生和课程\n\n    * 多对多关系需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为该表的外键分别链接另两方的主键\n\n\n## 设计范式\n\n\n> 第一范式 -> 第二范式\n>\n> **在1NF基础上消除非主属性对主码的部分函数依赖**\n>\n> 第二范式 -> 第三范式\n>\n> **在2NF基础上消除传递依赖**\n>\n> 第三范式 -> 巴斯-科德范式\n>\n> **在3NF基础上消除对主码子集的依赖**\n>\n>> 如员工表中有采购上限字段，采购上限字段仅有采购部门可用，应当建立单独的表存储改字段\n>>\n\n\n范式来自英文Normal form，简称NF。要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。\n\n[关系数据库](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93)有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、[第四范式](https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F)(4NF）和[第五范式](https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F)（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。\n\n\n**1、第一范式（1NF）：**\n\n所谓第一范式（1NF）是指在[关系模型](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B)中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。\n\n说明：在任何一个[关系数据库](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93)中，第一范式（1NF）是对[关系模式](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F)的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的[关系模型](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B)。\n\n**2、第二范式（2NF）**\n\n![image.png](./img/2NF示例表.png)  \n![image.png](./img/2NF.png)\n\n在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）\n\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）\n\n第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。\n\n**3、第三范式（3NF）**\n\n在2NF基础上，任何非主[属性](https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7)不依赖于其它非主属性（在2NF基础上消除传递依赖）\n\n![数据库范式](./img/3NF.png \"数据库范式\")\n\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。\n\n**4、巴斯-科德范式（BCNF）**\n\nBoyce-Codd Normal Form（巴斯-科德范式）\n\n在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）\n\n巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。\n\n## 第四范式的定义\n\n设关系R（X，Y，Z），其中X，Y，Z是成对的、不相交属性的集合。若存在非平凡多值依赖，则意味着对R中的每个属性![](assets/net-img-28d477ed070c0bba533ce5a3130f6da6-20220318003035-wsdxigo.svg)\n\n存在有函数依赖![](assets/net-img-a52af6c2e682dc07079a52587d02b13f-20220318003035-ndtrggz.svg)\n\n（X必包含键）。那么![](assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-oxycayy.svg)\n\n。\n\n换句话说，当关系R的属性集合X是非平凡多值依赖的域，它就包含关系R的键。则![](assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-zfpplc4.svg)\n\n。这个定义和BCNF定义唯一的不同点是后者研究非平凡[多值依赖](https://baike.baidu.com/item/%E5%A4%9A%E5%80%BC%E4%BE%9D%E8%B5%96)的域。由于函数依赖是多值依赖的特定情况，因此，这直观地说明了4NF比BCNF更强的原因。\n\n显然，若关系属于4NF，则它必属于BCNF；而属于BCNF的关系不一定属于4NF。\n\n\n## 规范化小结\n\n在关系数据库中，对关系的最基本要求的满足第一范式。这样的关系模式是合法的，允许的。但人们发现有些关系模式存在插入、删除、修改异常、数据冗余等弊病，人们寻求解决这些问题的方法，这就是规范化的目的。\n\n规范化的基本思想是逐步消除数据依赖中不合适的部分，使关系数据库模式的各关系模式达到某种程度的“分离”，即“一事一地”的模式设计原则。\n\n让一个关系只描述一个实体或者实体间的一种联系。若多于一个实体（包括概念、联系），就把它“分离”出来。因此，所谓规范化，实质上是概念的单一化，即一个关系表示一个实体。\n\n人们认识这个原则是经历了一个过程的。是认识非主属性的部分函数依赖的危害开始，2NF，3NF，BCNF，4NF的提出是这个认识过程逐步深化的标志。规范化的过程可概括如下：\n\n（1）取原始的1NF关系投影，消去非主属性对键的部分函数依赖，从而产生一组2NF关系。\n\n（2）取2NF关系的投影，消去非主属性对键的[传递函数依赖](https://baike.baidu.com/item/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96/9816957)，产生一组3NF关系。\n\n（3）取这些3NF的投影，消去决定因素不是键的函数依赖。产生一组BCNF关系。\n\n（4）取这些BCNF关系的投影，消去其中不是函数依赖的非平多值依赖，产生一组4NF关系。\n\n规范化过程，是通过投影分解运算，把低一级范式的关系模式“分离”为若干个高一级范式的关系模式。但这种投影分解不是唯一的，要求分解“既保持[函数依赖](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96)”，又具有“无损连接性”。\n\n## 目的原则\n\n规范化目的是使结构更合理，消除存储异常，使数据冗余尽量小。便于插入、删除和更新。\n\n遵从概念单一化“一事一地”原则，即一个关系模式描述一个实体或实体间的一种联系。规范的实质就是概念的单一化。\n\n一个关系模式接着分解可以得到不同关系模式集合，也就是说分解方法不是惟一的。最小冗余的要求必须以分解后的数据库能够表达原来数据库所有信息为前提来实现。其根本目标是节省存储空问，避免数据不一致性，提高对关系的操作效率，同时满足应用需求。实际上，并不一定要求全部模式都达到BCNF不可。有时故意保留部分冗余可能更方便数据查询。尤其对于那些更新频度不高，查询频度极高的数据库系统更是如此。\n\n## 反范式\n\n规范化的优点是明显的，它避免了大量的数据冗余，节省了存储空间，保持了数据的一致性。当一个库里的数据经常发生变化时，达到3NF的库可以使用户不必在超过两个以上的地方更改同一个值。那么是不是只要把所有的表都规范为3NF后，数据库的设计就是最优的呢?这可不一定。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能采用连接表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。^","source":"_posts/数据库/数据库设计模式.md","raw":"---\ntitle: 数据库设计模式\ndate: 2024-07-02 21:56:22\ncategories:\n  - 数据库\ntags:\n  - 数据库\n  - 范式\n  - 设计模式\n---\n\n## 多表之间的关系\n\n1. 一对一\n\n   如：人和身份证号\n\n    * 通过在任意的一方建立**唯一外键**，链接到另一方主键\n    * 建立模型时处理为一张表\n2. 一对多\n\n   如：部门和员工\n\n    * 通过在多的一方建立外键，链接到另一方主键\n3. 多对多\n\n   如：学生和课程\n\n    * 多对多关系需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为该表的外键分别链接另两方的主键\n\n\n## 设计范式\n\n\n> 第一范式 -> 第二范式\n>\n> **在1NF基础上消除非主属性对主码的部分函数依赖**\n>\n> 第二范式 -> 第三范式\n>\n> **在2NF基础上消除传递依赖**\n>\n> 第三范式 -> 巴斯-科德范式\n>\n> **在3NF基础上消除对主码子集的依赖**\n>\n>> 如员工表中有采购上限字段，采购上限字段仅有采购部门可用，应当建立单独的表存储改字段\n>>\n\n\n范式来自英文Normal form，简称NF。要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。\n\n[关系数据库](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93)有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、[第四范式](https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F)(4NF）和[第五范式](https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F)（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。\n\n\n**1、第一范式（1NF）：**\n\n所谓第一范式（1NF）是指在[关系模型](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B)中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。\n\n说明：在任何一个[关系数据库](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93)中，第一范式（1NF）是对[关系模式](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F)的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的[关系模型](https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B)。\n\n**2、第二范式（2NF）**\n\n![image.png](./img/2NF示例表.png)  \n![image.png](./img/2NF.png)\n\n在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）\n\n第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）\n\n第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。\n\n**3、第三范式（3NF）**\n\n在2NF基础上，任何非主[属性](https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7)不依赖于其它非主属性（在2NF基础上消除传递依赖）\n\n![数据库范式](./img/3NF.png \"数据库范式\")\n\n第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。\n\n**4、巴斯-科德范式（BCNF）**\n\nBoyce-Codd Normal Form（巴斯-科德范式）\n\n在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）\n\n巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。\n\n## 第四范式的定义\n\n设关系R（X，Y，Z），其中X，Y，Z是成对的、不相交属性的集合。若存在非平凡多值依赖，则意味着对R中的每个属性![](assets/net-img-28d477ed070c0bba533ce5a3130f6da6-20220318003035-wsdxigo.svg)\n\n存在有函数依赖![](assets/net-img-a52af6c2e682dc07079a52587d02b13f-20220318003035-ndtrggz.svg)\n\n（X必包含键）。那么![](assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-oxycayy.svg)\n\n。\n\n换句话说，当关系R的属性集合X是非平凡多值依赖的域，它就包含关系R的键。则![](assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-zfpplc4.svg)\n\n。这个定义和BCNF定义唯一的不同点是后者研究非平凡[多值依赖](https://baike.baidu.com/item/%E5%A4%9A%E5%80%BC%E4%BE%9D%E8%B5%96)的域。由于函数依赖是多值依赖的特定情况，因此，这直观地说明了4NF比BCNF更强的原因。\n\n显然，若关系属于4NF，则它必属于BCNF；而属于BCNF的关系不一定属于4NF。\n\n\n## 规范化小结\n\n在关系数据库中，对关系的最基本要求的满足第一范式。这样的关系模式是合法的，允许的。但人们发现有些关系模式存在插入、删除、修改异常、数据冗余等弊病，人们寻求解决这些问题的方法，这就是规范化的目的。\n\n规范化的基本思想是逐步消除数据依赖中不合适的部分，使关系数据库模式的各关系模式达到某种程度的“分离”，即“一事一地”的模式设计原则。\n\n让一个关系只描述一个实体或者实体间的一种联系。若多于一个实体（包括概念、联系），就把它“分离”出来。因此，所谓规范化，实质上是概念的单一化，即一个关系表示一个实体。\n\n人们认识这个原则是经历了一个过程的。是认识非主属性的部分函数依赖的危害开始，2NF，3NF，BCNF，4NF的提出是这个认识过程逐步深化的标志。规范化的过程可概括如下：\n\n（1）取原始的1NF关系投影，消去非主属性对键的部分函数依赖，从而产生一组2NF关系。\n\n（2）取2NF关系的投影，消去非主属性对键的[传递函数依赖](https://baike.baidu.com/item/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96/9816957)，产生一组3NF关系。\n\n（3）取这些3NF的投影，消去决定因素不是键的函数依赖。产生一组BCNF关系。\n\n（4）取这些BCNF关系的投影，消去其中不是函数依赖的非平多值依赖，产生一组4NF关系。\n\n规范化过程，是通过投影分解运算，把低一级范式的关系模式“分离”为若干个高一级范式的关系模式。但这种投影分解不是唯一的，要求分解“既保持[函数依赖](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96)”，又具有“无损连接性”。\n\n## 目的原则\n\n规范化目的是使结构更合理，消除存储异常，使数据冗余尽量小。便于插入、删除和更新。\n\n遵从概念单一化“一事一地”原则，即一个关系模式描述一个实体或实体间的一种联系。规范的实质就是概念的单一化。\n\n一个关系模式接着分解可以得到不同关系模式集合，也就是说分解方法不是惟一的。最小冗余的要求必须以分解后的数据库能够表达原来数据库所有信息为前提来实现。其根本目标是节省存储空问，避免数据不一致性，提高对关系的操作效率，同时满足应用需求。实际上，并不一定要求全部模式都达到BCNF不可。有时故意保留部分冗余可能更方便数据查询。尤其对于那些更新频度不高，查询频度极高的数据库系统更是如此。\n\n## 反范式\n\n规范化的优点是明显的，它避免了大量的数据冗余，节省了存储空间，保持了数据的一致性。当一个库里的数据经常发生变化时，达到3NF的库可以使用户不必在超过两个以上的地方更改同一个值。那么是不是只要把所有的表都规范为3NF后，数据库的设计就是最优的呢?这可不一定。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能采用连接表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。^","slug":"数据库/数据库设计模式","published":1,"updated":"2024-07-02T14:04:41.119Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vf000r0ouyd2yw1qed","content":"<h2 id=\"多表之间的关系\"><a href=\"#多表之间的关系\" class=\"headerlink\" title=\"多表之间的关系\"></a>多表之间的关系</h2><ol>\n<li><p>一对一</p>\n<p>如：人和身份证号</p>\n<ul>\n<li>通过在任意的一方建立<strong>唯一外键</strong>，链接到另一方主键</li>\n<li>建立模型时处理为一张表</li>\n</ul>\n</li>\n<li><p>一对多</p>\n<p>如：部门和员工</p>\n<ul>\n<li>通过在多的一方建立外键，链接到另一方主键</li>\n</ul>\n</li>\n<li><p>多对多</p>\n<p>如：学生和课程</p>\n<ul>\n<li>多对多关系需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为该表的外键分别链接另两方的主键</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"设计范式\"><a href=\"#设计范式\" class=\"headerlink\" title=\"设计范式\"></a>设计范式</h2><blockquote>\n<p>第一范式 -&gt; 第二范式</p>\n<p><strong>在1NF基础上消除非主属性对主码的部分函数依赖</strong></p>\n<p>第二范式 -&gt; 第三范式</p>\n<p><strong>在2NF基础上消除传递依赖</strong></p>\n<p>第三范式 -&gt; 巴斯-科德范式</p>\n<p><strong>在3NF基础上消除对主码子集的依赖</strong></p>\n<blockquote>\n<p>如员工表中有采购上限字段，采购上限字段仅有采购部门可用，应当建立单独的表存储改字段</p>\n</blockquote>\n</blockquote>\n<p>范式来自英文Normal form，简称NF。要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93\">关系数据库</a>有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、<a href=\"https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F\">第四范式</a>(4NF）和<a href=\"https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F\">第五范式</a>（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。</p>\n<p><strong>1、第一范式（1NF）：</strong></p>\n<p>所谓第一范式（1NF）是指在<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B\">关系模型</a>中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。</p>\n<p>说明：在任何一个<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93\">关系数据库</a>中，第一范式（1NF）是对<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F\">关系模式</a>的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B\">关系模型</a>。</p>\n<p><strong>2、第二范式（2NF）</strong></p>\n<p><img src=\"/hexo-blog/./img/2NF%E7%A4%BA%E4%BE%8B%E8%A1%A8.png\" alt=\"image.png\"><br><img src=\"/hexo-blog/./img/2NF.png\" alt=\"image.png\"></p>\n<p>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</p>\n<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）</p>\n<p>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</p>\n<p><strong>3、第三范式（3NF）</strong></p>\n<p>在2NF基础上，任何非主<a href=\"https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7\">属性</a>不依赖于其它非主属性（在2NF基础上消除传递依赖）</p>\n<p><img src=\"/hexo-blog/./img/3NF.png\" alt=\"数据库范式\" title=\"数据库范式\"></p>\n<p>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。</p>\n<p><strong>4、巴斯-科德范式（BCNF）</strong></p>\n<p>Boyce-Codd Normal Form（巴斯-科德范式）</p>\n<p>在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）</p>\n<p>巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。</p>\n<h2 id=\"第四范式的定义\"><a href=\"#第四范式的定义\" class=\"headerlink\" title=\"第四范式的定义\"></a>第四范式的定义</h2><p>设关系R（X，Y，Z），其中X，Y，Z是成对的、不相交属性的集合。若存在非平凡多值依赖，则意味着对R中的每个属性<img src=\"/hexo-blog/assets/net-img-28d477ed070c0bba533ce5a3130f6da6-20220318003035-wsdxigo.svg\"></p>\n<p>存在有函数依赖<img src=\"/hexo-blog/assets/net-img-a52af6c2e682dc07079a52587d02b13f-20220318003035-ndtrggz.svg\"></p>\n<p>（X必包含键）。那么<img src=\"/hexo-blog/assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-oxycayy.svg\"></p>\n<p>。</p>\n<p>换句话说，当关系R的属性集合X是非平凡多值依赖的域，它就包含关系R的键。则<img src=\"/hexo-blog/assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-zfpplc4.svg\"></p>\n<p>。这个定义和BCNF定义唯一的不同点是后者研究非平凡<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%80%BC%E4%BE%9D%E8%B5%96\">多值依赖</a>的域。由于函数依赖是多值依赖的特定情况，因此，这直观地说明了4NF比BCNF更强的原因。</p>\n<p>显然，若关系属于4NF，则它必属于BCNF；而属于BCNF的关系不一定属于4NF。</p>\n<h2 id=\"规范化小结\"><a href=\"#规范化小结\" class=\"headerlink\" title=\"规范化小结\"></a>规范化小结</h2><p>在关系数据库中，对关系的最基本要求的满足第一范式。这样的关系模式是合法的，允许的。但人们发现有些关系模式存在插入、删除、修改异常、数据冗余等弊病，人们寻求解决这些问题的方法，这就是规范化的目的。</p>\n<p>规范化的基本思想是逐步消除数据依赖中不合适的部分，使关系数据库模式的各关系模式达到某种程度的“分离”，即“一事一地”的模式设计原则。</p>\n<p>让一个关系只描述一个实体或者实体间的一种联系。若多于一个实体（包括概念、联系），就把它“分离”出来。因此，所谓规范化，实质上是概念的单一化，即一个关系表示一个实体。</p>\n<p>人们认识这个原则是经历了一个过程的。是认识非主属性的部分函数依赖的危害开始，2NF，3NF，BCNF，4NF的提出是这个认识过程逐步深化的标志。规范化的过程可概括如下：</p>\n<p>（1）取原始的1NF关系投影，消去非主属性对键的部分函数依赖，从而产生一组2NF关系。</p>\n<p>（2）取2NF关系的投影，消去非主属性对键的<a href=\"https://baike.baidu.com/item/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96/9816957\">传递函数依赖</a>，产生一组3NF关系。</p>\n<p>（3）取这些3NF的投影，消去决定因素不是键的函数依赖。产生一组BCNF关系。</p>\n<p>（4）取这些BCNF关系的投影，消去其中不是函数依赖的非平多值依赖，产生一组4NF关系。</p>\n<p>规范化过程，是通过投影分解运算，把低一级范式的关系模式“分离”为若干个高一级范式的关系模式。但这种投影分解不是唯一的，要求分解“既保持<a href=\"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\">函数依赖</a>”，又具有“无损连接性”。</p>\n<h2 id=\"目的原则\"><a href=\"#目的原则\" class=\"headerlink\" title=\"目的原则\"></a>目的原则</h2><p>规范化目的是使结构更合理，消除存储异常，使数据冗余尽量小。便于插入、删除和更新。</p>\n<p>遵从概念单一化“一事一地”原则，即一个关系模式描述一个实体或实体间的一种联系。规范的实质就是概念的单一化。</p>\n<p>一个关系模式接着分解可以得到不同关系模式集合，也就是说分解方法不是惟一的。最小冗余的要求必须以分解后的数据库能够表达原来数据库所有信息为前提来实现。其根本目标是节省存储空问，避免数据不一致性，提高对关系的操作效率，同时满足应用需求。实际上，并不一定要求全部模式都达到BCNF不可。有时故意保留部分冗余可能更方便数据查询。尤其对于那些更新频度不高，查询频度极高的数据库系统更是如此。</p>\n<h2 id=\"反范式\"><a href=\"#反范式\" class=\"headerlink\" title=\"反范式\"></a>反范式</h2><p>规范化的优点是明显的，它避免了大量的数据冗余，节省了存储空间，保持了数据的一致性。当一个库里的数据经常发生变化时，达到3NF的库可以使用户不必在超过两个以上的地方更改同一个值。那么是不是只要把所有的表都规范为3NF后，数据库的设计就是最优的呢?这可不一定。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能采用连接表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。^</p>\n","excerpt":"","more":"<h2 id=\"多表之间的关系\"><a href=\"#多表之间的关系\" class=\"headerlink\" title=\"多表之间的关系\"></a>多表之间的关系</h2><ol>\n<li><p>一对一</p>\n<p>如：人和身份证号</p>\n<ul>\n<li>通过在任意的一方建立<strong>唯一外键</strong>，链接到另一方主键</li>\n<li>建立模型时处理为一张表</li>\n</ul>\n</li>\n<li><p>一对多</p>\n<p>如：部门和员工</p>\n<ul>\n<li>通过在多的一方建立外键，链接到另一方主键</li>\n</ul>\n</li>\n<li><p>多对多</p>\n<p>如：学生和课程</p>\n<ul>\n<li>多对多关系需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为该表的外键分别链接另两方的主键</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"设计范式\"><a href=\"#设计范式\" class=\"headerlink\" title=\"设计范式\"></a>设计范式</h2><blockquote>\n<p>第一范式 -&gt; 第二范式</p>\n<p><strong>在1NF基础上消除非主属性对主码的部分函数依赖</strong></p>\n<p>第二范式 -&gt; 第三范式</p>\n<p><strong>在2NF基础上消除传递依赖</strong></p>\n<p>第三范式 -&gt; 巴斯-科德范式</p>\n<p><strong>在3NF基础上消除对主码子集的依赖</strong></p>\n<blockquote>\n<p>如员工表中有采购上限字段，采购上限字段仅有采购部门可用，应当建立单独的表存储改字段</p>\n</blockquote>\n</blockquote>\n<p>范式来自英文Normal form，简称NF。要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93\">关系数据库</a>有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、<a href=\"https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F\">第四范式</a>(4NF）和<a href=\"https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F\">第五范式</a>（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。</p>\n<p><strong>1、第一范式（1NF）：</strong></p>\n<p>所谓第一范式（1NF）是指在<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B\">关系模型</a>中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。</p>\n<p>说明：在任何一个<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93\">关系数据库</a>中，第一范式（1NF）是对<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F\">关系模式</a>的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的<a href=\"https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B\">关系模型</a>。</p>\n<p><strong>2、第二范式（2NF）</strong></p>\n<p><img src=\"/hexo-blog/./img/2NF%E7%A4%BA%E4%BE%8B%E8%A1%A8.png\" alt=\"image.png\"><br><img src=\"/hexo-blog/./img/2NF.png\" alt=\"image.png\"></p>\n<p>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</p>\n<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）</p>\n<p>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</p>\n<p><strong>3、第三范式（3NF）</strong></p>\n<p>在2NF基础上，任何非主<a href=\"https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7\">属性</a>不依赖于其它非主属性（在2NF基础上消除传递依赖）</p>\n<p><img src=\"/hexo-blog/./img/3NF.png\" alt=\"数据库范式\" title=\"数据库范式\"></p>\n<p>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。</p>\n<p><strong>4、巴斯-科德范式（BCNF）</strong></p>\n<p>Boyce-Codd Normal Form（巴斯-科德范式）</p>\n<p>在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）</p>\n<p>巴斯-科德范式（BCNF）是第三范式（3NF）的一个子集，即满足巴斯-科德范式（BCNF）必须满足第三范式（3NF）。通常情况下，巴斯-科德范式被认为没有新的设计规范加入，只是对第二范式与第三范式中设计规范要求更强，因而被认为是修正第三范式，也就是说，它事实上是对第三范式的修正，使数据库冗余度更小。这也是BCNF不被称为第四范式的原因。某些书上，根据范式要求的递增性将其称之为第四范式是不规范，也是更让人不容易理解的地方。而真正的第四范式，则是在设计规范中添加了对多值及依赖的要求。</p>\n<h2 id=\"第四范式的定义\"><a href=\"#第四范式的定义\" class=\"headerlink\" title=\"第四范式的定义\"></a>第四范式的定义</h2><p>设关系R（X，Y，Z），其中X，Y，Z是成对的、不相交属性的集合。若存在非平凡多值依赖，则意味着对R中的每个属性<img src=\"/hexo-blog/assets/net-img-28d477ed070c0bba533ce5a3130f6da6-20220318003035-wsdxigo.svg\"></p>\n<p>存在有函数依赖<img src=\"/hexo-blog/assets/net-img-a52af6c2e682dc07079a52587d02b13f-20220318003035-ndtrggz.svg\"></p>\n<p>（X必包含键）。那么<img src=\"/hexo-blog/assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-oxycayy.svg\"></p>\n<p>。</p>\n<p>换句话说，当关系R的属性集合X是非平凡多值依赖的域，它就包含关系R的键。则<img src=\"/hexo-blog/assets/net-img-286faf0ae87fa7b3acfe828f483f78c3-20220318003035-zfpplc4.svg\"></p>\n<p>。这个定义和BCNF定义唯一的不同点是后者研究非平凡<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%80%BC%E4%BE%9D%E8%B5%96\">多值依赖</a>的域。由于函数依赖是多值依赖的特定情况，因此，这直观地说明了4NF比BCNF更强的原因。</p>\n<p>显然，若关系属于4NF，则它必属于BCNF；而属于BCNF的关系不一定属于4NF。</p>\n<h2 id=\"规范化小结\"><a href=\"#规范化小结\" class=\"headerlink\" title=\"规范化小结\"></a>规范化小结</h2><p>在关系数据库中，对关系的最基本要求的满足第一范式。这样的关系模式是合法的，允许的。但人们发现有些关系模式存在插入、删除、修改异常、数据冗余等弊病，人们寻求解决这些问题的方法，这就是规范化的目的。</p>\n<p>规范化的基本思想是逐步消除数据依赖中不合适的部分，使关系数据库模式的各关系模式达到某种程度的“分离”，即“一事一地”的模式设计原则。</p>\n<p>让一个关系只描述一个实体或者实体间的一种联系。若多于一个实体（包括概念、联系），就把它“分离”出来。因此，所谓规范化，实质上是概念的单一化，即一个关系表示一个实体。</p>\n<p>人们认识这个原则是经历了一个过程的。是认识非主属性的部分函数依赖的危害开始，2NF，3NF，BCNF，4NF的提出是这个认识过程逐步深化的标志。规范化的过程可概括如下：</p>\n<p>（1）取原始的1NF关系投影，消去非主属性对键的部分函数依赖，从而产生一组2NF关系。</p>\n<p>（2）取2NF关系的投影，消去非主属性对键的<a href=\"https://baike.baidu.com/item/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96/9816957\">传递函数依赖</a>，产生一组3NF关系。</p>\n<p>（3）取这些3NF的投影，消去决定因素不是键的函数依赖。产生一组BCNF关系。</p>\n<p>（4）取这些BCNF关系的投影，消去其中不是函数依赖的非平多值依赖，产生一组4NF关系。</p>\n<p>规范化过程，是通过投影分解运算，把低一级范式的关系模式“分离”为若干个高一级范式的关系模式。但这种投影分解不是唯一的，要求分解“既保持<a href=\"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\">函数依赖</a>”，又具有“无损连接性”。</p>\n<h2 id=\"目的原则\"><a href=\"#目的原则\" class=\"headerlink\" title=\"目的原则\"></a>目的原则</h2><p>规范化目的是使结构更合理，消除存储异常，使数据冗余尽量小。便于插入、删除和更新。</p>\n<p>遵从概念单一化“一事一地”原则，即一个关系模式描述一个实体或实体间的一种联系。规范的实质就是概念的单一化。</p>\n<p>一个关系模式接着分解可以得到不同关系模式集合，也就是说分解方法不是惟一的。最小冗余的要求必须以分解后的数据库能够表达原来数据库所有信息为前提来实现。其根本目标是节省存储空问，避免数据不一致性，提高对关系的操作效率，同时满足应用需求。实际上，并不一定要求全部模式都达到BCNF不可。有时故意保留部分冗余可能更方便数据查询。尤其对于那些更新频度不高，查询频度极高的数据库系统更是如此。</p>\n<h2 id=\"反范式\"><a href=\"#反范式\" class=\"headerlink\" title=\"反范式\"></a>反范式</h2><p>规范化的优点是明显的，它避免了大量的数据冗余，节省了存储空间，保持了数据的一致性。当一个库里的数据经常发生变化时，达到3NF的库可以使用户不必在超过两个以上的地方更改同一个值。那么是不是只要把所有的表都规范为3NF后，数据库的设计就是最优的呢?这可不一定。范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。当用户同时需要这些数据时只能采用连接表的形式将数据重新合并在一起。同时把多个表联接在一起的花费是巨大的，尤其是当需要连接的两张或者多张表数据非常庞大的时候，表连接操作几乎是一个噩梦，这严重地降低了系统运行性能。^</p>\n"},{"title":"SQL","date":"2024-07-02T14:06:27.000Z","_content":"Structured Query Language,结构化查询语言\n\n大部分的SQL对数据库是通用的，少部分有自定义的用法\n\n@[TOC]\n\n# MySql\n\n语句不区分大小写，关键字建议大写\n\n* 注释：\n\n    * 单行注释 使用横线+空格 或者\"#\"，如\"-- 注释内容\", \"\\#注释内容\"\n    * 多行注释 /* */\n\nSQL分类：\n\n1. 数据查询语言（DQL）\n   数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。\n\n2. 数据定义语言（DDL）\n   数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。\n\n3. 数据操纵语言（DML）\n   数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。\n\n4. 据控制语言（DCL）\n   数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。\n\n5. *指针控制语言（CCL）* **非公认分类**\n   它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。\n\n6. *事务处理语言（TPL）*非公认分类\n   它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。<br />\n\n![image.png](./img/数据库连接示意.png)\n\n\n## DDL：操作数据库\n\n**操作数据库**：CRUD\n\n1. C：Create 创建\n\n   不存在则创建数据库并指定字符集\n\n    ```sql\n    create database if not exists dbname [character set gbk]\n    ```\n2. R：Retrieve 查询\n\n    * SHOW DATABASES： 查看所有数据库\n    * show create database dbname：查看数据库建表语句\n3. U：Update 修改\n\n    * alter database 数据库名称 character set 字符集\n4. D：Delete 删除\n\n   drop database if exists dbname\n5. 使用数据库\n\n    *  select database()\n\n   查询在使用的的数据库\n    * use dbname\n\n      使用某数据库\n\n\n**操作表**\n\n1. C：Create 创建\n\n    1. 语法：\n\n        ```sql\n        CREATE TABLE 表名（\n         列名1 数据类型1，\n         列名2 数据类型2，\n        ...\n        );\n\n        ```\n    2. 数据类型：\n\n       > 1. int 整数类型\n            >\n            >     age int\n       > 2. double 小数类型\n            >\n            >     score double(5, 2) -- 共5位，小数后2位\n       > 3. date 日期类型， 格式 yyyy-MM-dd\n       > 4. datetime 日期，格式 yyyy-MMdd HH:mm:ss\n       > 5. timestamp 时间戳，格式 yyyy-MMdd HH:mm:ss，不赋值默认为当前系统时间\n       > 6. varchar 字符串\n            >\n            >     name varchar(20)\n            >\n            >     -- 张三 2字符 ， zhangsan 5字符\n    >\n    3. 示例\n\n        ```sql\n        CREATE TABLE student(\n         id int,\n         name varchar(32),\n         age int,\n         score double(4,1),\n         birthday date,\n         insert_time timestamp\n        );\n        ```\n    4. 复制表\n\n        ```sql\n         create table stu like student;\n        ```\n2. R：Retrieve 查询\n\n    * SHOW TABLES： 查询所有表\n    * desc <table_name>：查看表详情\n    * **show create table <table_name>**\n3. U：Update 修改\n\n    1. 修改表名\n\n        ```sql\n        alter table <table_name> rename to <new_table_name>;\n        ```\n    2. 修改表字符集\n\n        ```sql\n        alter table <table_name> character set <字符集名称>;\n        ```\n    3. 添加列\n\n        ```sql\n        alter table <table_name> add <列名> <数据类型>;\n        ```\n    4. 修改列名称、类型\n\n        ```sql\n        alter table <table_name> change <列名> <新列名> <新数据类型>;\n        alter table <table_name> modify <列名> <新数据类型>;\n        ```\n\n       上面可以发现modify和change都可以修改表的定义，但是change却需要写两次列名，不是很方便。但是change的优点是可以修改列名称，modify则不能\n    5. 删除列\n\n        ```sql\n        alter table <table_name> drop <列名>;\n        ```\n4. D：Delete 删除\n\n    ```sql\n    drop table if exist <table_name> ;\n    ```\n5. 使用数据库\n\n**代码示例：**\n\n* 查询所有数据库\n\n  ```sql\n  mysql> SHOW DATABASES;\n  +--------------------+\n  | Database           |\n  +--------------------+\n  | information_schema | // 存储视图等\n  | mysql              | // 数据库核心数据\n  | performance_schema | // 新能数据\n  | sakila             |\n  | sys                |\n  | world              |\n  +--------------------+\n  ```\n\n* 查询建表语句\n\n  ```sql\n  mysql> show create database mysql\n      -> ;\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  | Database | Create Database                                                                                                                 |\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  | mysql    | CREATE DATABASE `mysql` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */ |\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  1 row in set (0.00 sec)\n  ```\n\n* 不存在则创建数据库\n\n  ```sql\n  create database if not exists dbname\n  ```\n\n* 创建数据库并设置**字符集**\n\n  ```sql\n  create database if not exists dbname character set gbk\n  ```\n\n### 约束\n\n概念：对表中的数据进行限定，保证数据的正确性、有效性、完整性。\n\n分类：\n\n1. 主键约束：primary key\n2. 非空约束：not null\n3. 唯一约束：unique\n4. 外检约束：foreign key\n\n\n#### 非空约束：not null\n\n1. 创建表时添加约束\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT,\n    \tname VARCHAR(20) NOT NULL -- name非空\n    );\n    ```\n2. 添加约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20) NOT NULL;\n    ```\n3. 删除约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20);\n    ```\n\n\n#### 唯一约束： unique，列值不能重复\n\n1. 创建表是添加唯一约束\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT,\n    \tphone_number VARCHAR(20) UNIQUE -- 唯一\n    );\n    ```\n2. 添加约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20) UNIQUE;\n    ```\n3. **删除唯一约束**，即删除唯一索引\n\n    ```sql\n    ALTER TABLE stu DROP INDEX phone_number;\n    ```\n\n4. **注意：唯一约束可以插入null，但该列中仅能有一个null**\n\n#### 主键约束：primary key\n\n1. 注意：\n\n    1. 主键非空且唯一\n    2. 一张表只可以定义一个主键\n    3. 主键即表中记录的唯一标识\n2. 创建表时添加主键\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT PRIMARY KEY, -- 主键\n    \tname VARCHAR(20)\n    );\n\n    CREATE TABLE stu(\n    \tid INT , -- 主键\n    \tname VARCHAR(20), \n    \tPRIMARY KEY (id, name) -- 联合主键\n    );\n    ```\n\n   l\n3. 添加主键\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> INT PRIMARY KEY;\n    ```\n4. 删除主键\n\n    ```sql\n    ALTER TABLE stu DROP PRIMARY KEY; -- 删除主键\n    ```\n5. 自动增长\n\n   概念：如果某一列是数值类型的，使用**auto_increment**可以实现自动增长\n\n    1. 在创建表时实现主键自动增长\n\n        ```sql\n        CREATE TABLE stu(\n        \tid INT PRIMARY KEY AUTO_INCREMENT, -- 主键\n        \tname VARCHAR(20)\n        );\n        ```\n    2. 删除自增\n\n        ```sql\n        ALTER TABLE stu MODIFY id INT; -- 不能跟着PRIMARY KEY，会报多主键错误\n        ```\n    3. 添加自增\n\n        ```sql\n        ALTER TABLE stu MODIFY id INT AUTO_INCREMENT; \n        ```\n\n#### 外键约束：foreign key\n\n1. 在创建表时，添加外键\n\n    ```sql\n    CREATE TABLE 表名（\n    \t...\n    \t外键列名称\n    \t[constraint 外键名称] foreign key (外键列名称) references 主表名称(主表列名称)\n    );\n    示例：\n    CREATE TABLE employee (\n    \tid INT PRIMARY KEY AUTO_INCREMENT, -- 主键\n    \tname VARCHAR(20),\n    \tdep_id INT, -- 部门id\n    \tCONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id)\n    );\n    ```\n2. 删除外键\n\n    ```sql\n    ALTER TABLE employee DROP FOREIGN KEY employee_dep_fk;\n    ```\n3. 添加外键\n\n    ```sql\n    ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id)\n    ```\n\n4. 级联操作\n\n    1. 级联更新\n\n        ```sql\n        ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) \n        REFERENCES department(id) ON UPDATE CASCADE; -- 主键更新，外键跟随更新\n        ```\n\n    2. 级联更新+级联删除\n\n        ```sql\n        ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) \n        REFERENCES department(id) \n        ON UPDATE CASCADE ON DELETE CASCADE; -- 主键更新，外键跟随更新,主键删除，外键跟随删除\n        ```\n\n## DCL: 管理用户，授权\n\n### 管理用户\n\n1. 查询用户\n\n    ```sql\n    use mysql;\n    select * from user;\n    ```\n2. 添加用户\n\n   **host通配符：%表示可以在任意主机登录**\n\n    ```sql\n    create user <用户名>@<主机名> identified by <密码>;\n    ```\n3. 删除用户\n\n    ```sql\n    drop user <用户名>@<主机名>;\n    ```\n4. 修改用户密码\n\n    ```sql\n    update user set password = Password(<密码>) where user = <用户名> and host = <主机名>; -- 旧版\n    set password for <用户名>@<主机名> = password(<密码>); -- 通用\n    ```\n\n   MySQL忘记root密码：\n\n   > 1. 停止MySQL服务\n        >\n        >     ```shell\n    >     # 关闭服务\n    >     net stop <数据库服务名>\n    >     ```\n   > 2. 使用无验证方式启动MySQL\n        >\n        >     ```shell\n    >     mysqld --skip-grand-tables;\n    >     ```\n   > 3. 无密码登录\n        >\n        >     ```shell\n    >     mysql  # 无验证则直接登录\n    >     ```\n>\n\n\n### 授权\n\n1. 查询权限\n\n    ```sql\n    show grants for <用户名>@<主机名>\n    ```\n2. 授予权限\n\n    ```sql\n    grant <权限列表> on 数据库名.表名 to <用户名>@<主机名>\n    ```\n3. 撤销权限\n\n    ```sql\n    revoke <权限列表> on 数据库名.表名 from <用户名>@<主机名>\n    ```\n4. 权限列表\n\n    * SELECT\n    * UPDATE\n    * INSERT\n    * DELETE\n    * CREATE\n    * DROP\n    * REFERENCES\n    * INDEX\n    * ALTER\n    * CREATE VIEW\n    * SHOW VIEW\n    * TRIGGER\n\n    * ALL\n\n      所有权限\n\n   *注：上述权权限为部分内容，许多部分系统操作权限未列出*\n5. 数据库、表名通配符\n\n   \\*.\\*：表示所有表、所有数据库\n\n## DML：增删改查数据\n\n1. 添加数据\n\n    * 语法\n\n      ```sql\n      insert into 表名(列名1, 列名2...) values (值1, 值2...);\n      ```\n    * 注意：\n\n        1. 列名与值一一对应\n        2. 表名后无列名，根据定义顺序给所有列赋值\n        3. **除数字类型**，其他类型均用引号（单双引号均可）引起来\n2. 删除数据\n\n    ```sql\n    delete from 表名 [where 条件]\n\n    truncate table 表名 -- 删除表，并创建相同表结构的表，删除较为高效\n    ```\n3. 修改数据\n\n   语法\n\n    ```sql\n    update 表名 set 列名1 = 值1, 列名2 = 值2 ... [where 条件];\n    ```\n\n\n## DQL：查询表中的数据\n\n1. 语法\n\n    ```sql\n    select\n    \t字段列表\n    from\n    \t标名列表\n    [where\n    \t条件列表]\n    [group by\n    \t分组字段]\n    [having\n    \t分组后的条件]\n    [order by\n    \t排序字段]\n    [limit\n    \t分页限定]\n    ```\n\n2. 基础查询\n\n    1. 去重 distinct\n\n        ```sql\n        select distinct 字段1,字段2 from 表名 -- 记录结果集相同则会被去重\n        ```\n    2. 计算列\n\n        * 可以使用四则运算计算列值\n        * null操作函数  **ifnull** 字段为空的返回默认值\n\n          ```sql\n          ifnull(字段名，默认值) --\n          ```\n    3. 别名\n\n       列名后加 “as 别名” ，as可省略\n\n3. 条件查询\n\n    1. where 后接条件\n    2. 运算符\n\n        * \\> , < , >=,  <= , = , <>\n        * BETEWEEN .. AND ..\n        * IN (集合)\n        * LIKE\n\n          > 占位符\n          >\n          > * _：单个字符\n          > * %：多个字符\n          >\n          > 部分可匹配\n          >\n          > 马%  ：马云，马化腾\n          >\n          > _化%  ：马化腾\n          >\n          > ___ : 马化腾 （三个字）\n        >\n        * IS NULL\n        * AND 或 &&\n        * OR 或 ||\n        * not 或 !\n\n   部分等价SQL：\n\n    ```sql\n    select * from student where age >= 20 and age <= 30;\n    select * from student where age >= 20 && age <= 30;\n    select * from student where age between 20 and 30;\n\n    select * from student where age = 18 or age = 19;\n    select * from student where age in (18, 19);\n\n\n\n\n    ```\n\n   查询空\n\n    ```sql\n    select * from student where english is null;\n    select * from student where english is not null;\n    ```\n\n4. 排序查询\n\n    * 语法： order by + 子句\n\n      ```sql\n      order by 排序字段1 排序方式1，排序方式2 排序方式2\n      ```\n    * 排序方式\n\n      ASC：升序，默认\n\n      DESC ：降序\n\n   注意：多个排序条件时，前边条件相同，后边才生效\n5. 聚合查询：将一列作为一个整体，进行纵向计算\n\n    1. count：计算数量\n\n        1. 一般选择非空列：主键\n        2. count(*)\n    2. max：计算最大值\n    3. min：计算最小值\n    4. sum：计算和\n    5. avg：计算平均值\n\n   注意：聚合函数会排除null值，如**count中不会包含null值**，**avg不会平均null**\n\n   解决方式：\n\n    1. 选择非空的列\n\n    2. ifnull函数处理null值\n6. 分组查询\n\n    1. 语法：group by + 分组字段\n    2. 注意：\n\n        1. 分组后查询的字段仅可以为分组字段、聚合函数，其他字段MySQL不会报错，但没有意义\n        2. where和having区别\n\n            1. where在分组前进行限定，不满足条件则不参与分组；having在分组之后进行限定不满足条件则不会被查询到；\n            2. where 后不可以跟聚合函数，having可以进行聚合函数的判断\n\n   示例代码：\n\n    ```sql\n    select sex, avg(math), count(id) 人数\n    from student \n    where math > 70\n    group by sex\n    having 人数> 2;\n    ```\n7. 分页查询\n\n    1. 语法 **limit****方法为MySQL特有**\n\n        ```sql\n        limit 开始索引，每页条数\n        ```\n\n       > 开始索引 = （当前页码 - 1） *  每页条数\n>\n\n\n### 多表查询\n\n笛卡尔积：有两个集合A，B，去两集合的所有组成情况的集合，称之为笛卡尔积\n\n多表查询：\n\n1. 内连接查询\n\n    1. 隐式内连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        \t,t2\n        WHERE\n        \tt1.t2_id = t2.id;\n        ```\n    2. 显示内连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        [INNER] JOIN t2 ON t2.id = t1.t2_id; -- INNER关键字可省略，默认即为内连接\n        ```\n2. 外连接查询\n\n    1. 左外连接\n\n       查询左表所有数据，连接右表\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        LEFT [OUTER] JOIN t2 ON t2.id = t1.t2_id; -- OUTER关键字可省略\n        ```\n    2. 右外连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        RIGHT [OUTER] JOIN t2 ON t2.id = t1.t2_id; -- OUTER关键字可省略\n        ```\n3. 子查询\n\n   概念：查询中嵌套查询，成嵌套查询为子查询\n\n    ```sql\n    -- 例如查询最高工资员工信息\n    SELECT \n    \t* \n    FROM \n    \temp \n    WHERE\n    \temp.salary = (\n    \t\tSELECT MAX(salary) FROM emp\n    \t);\n    ```\n\n   **子查询不同情况**\n\n    1. 子查询结果是单行单列\n\n       子查询可以作为条件，使用运算符直接判断：>, >=, <, <=, =\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        where ti.t2_c > (SELECT ...)\n        ```\n    2. 结果是多行单列\n\n       子查询可以使用IN操作符处理\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        where ti.t2_c IN (SELECT ...)\n        ```\n    3. 结果是多行多列\n\n       子查询为多行多列可以被看作**虚拟表**，可以参与查询\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        \t,(SELECT ...) t2\n        where t1.c1 = t2.c2;\n        ```\n\n\n## 事务\n\n概念：一个包含多个步骤的业务操作被事务管理，要么同时成功，要么同时失败，不会成功一部分。\n\n### 操作：\n\n1. 开启事务： start transaction;\n2. 回滚：rollback;\n3. 提交：commit；\n4. MySQL数据库中事务默认自动提交\n\n   一调DML语句会自动提交一次事务\n\n   事务提交两种方式\n\n    * 自动提交\n\n      默认执行即自动提交\n    * 手动提交\n\n      先开启事务，则需要手动提交\n\n   **事务的默认提交方式：**\n\n    * 查看\n\n      ```sql\n      SELECT @@autocommit; -- 1 为默认自动提交\n      ```\n    * 修改\n\n      ```sql\n      SET  @@autocommit = 0; -- 修改为默认不提交\n      ```\n\n### 事务的四大特征\n\n1. 原子性（Atomicity）\n\n   是不可分割的最小操作单位，要么同时成功，要么同时失败\n2. 一致性（Consistency）\n\n   事务操作前后数据库中的数据都是一致的、正确的\n3. 隔离性（Isolation）\n4. 持久性（Durability）\n\n   事务提交活回滚后，数据库会持久的保存数据，无论断电还是重启，数据库都不会丢失提交操作\n\n### 事务的隔离级别\n\n概念：多个事务之间是隔离的，相互独立的。如果多个书屋操作同一批数据会引发冲突，通过设置不同的事务隔离级别来解决这些冲突。\n\n**事务冲突的类型：**\n\n1. 脏读\n\n   a事务读取到了b事务未提交的数据，b事务可能会将未提交的数据回滚\n2. 不可重复读（虚读）\n\n   a事务读取某些数据，b事务操作了该数据并提交了修改，a事务再次读取时与第一次结果不一致\n3. 幻读\n\n   不可重复读相似，a事务读取了某个范围内的数据，b事务插入了新的符合a事务选取条件的数据并提交，a事务再次读时发现与第一次读取时结果集不一致；\n\n   通常演示时为a事务修改某表中某范围内数据，b事务插入符合a表筛选条件的数据并提交，a事务再次查询时返现修改范围内仍有数据\n\n**隔离级别：**\n\n1. read uncommitted （读未提交）\n\n   会产生问题：脏读，不可重复读，幻读\n2. read committed（读已提交）（Oracle默认）\n\n   会产生问题：不可重复读，幻读\n3. repeatable read（可重复度） （MySQL默认）\n\n   会产生问题：幻读\n4. serializable（串行化）\n\n   不会产生问题\n\n*注意*：上述隔离级别依次安全性越来越高，效率越来越低\n\n**查询隔离级别：**\n\n```sql\nselect @@tx_isolation; -- 旧版\nselect @@transaction_isolation; -- 新版\n```\n\n**设置隔离级别：**\n\n```sql\nset global transaction isolation level <隔离级别>; -- 断开连接重新连接才会生效\n\nset session transaction isolatin level <隔离级别>; -- 设置当前会话隔离级别\n```\n","source":"_posts/数据库/SQL.md","raw":"---\ntitle: SQL\ndate: 2024-07-02 22:06:27\ncategories:\n  - 数据库\ntags:\n  - SQL\n---\nStructured Query Language,结构化查询语言\n\n大部分的SQL对数据库是通用的，少部分有自定义的用法\n\n@[TOC]\n\n# MySql\n\n语句不区分大小写，关键字建议大写\n\n* 注释：\n\n    * 单行注释 使用横线+空格 或者\"#\"，如\"-- 注释内容\", \"\\#注释内容\"\n    * 多行注释 /* */\n\nSQL分类：\n\n1. 数据查询语言（DQL）\n   数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。\n\n2. 数据定义语言（DDL）\n   数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。\n\n3. 数据操纵语言（DML）\n   数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。\n\n4. 据控制语言（DCL）\n   数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。\n\n5. *指针控制语言（CCL）* **非公认分类**\n   它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。\n\n6. *事务处理语言（TPL）*非公认分类\n   它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。<br />\n\n![image.png](./img/数据库连接示意.png)\n\n\n## DDL：操作数据库\n\n**操作数据库**：CRUD\n\n1. C：Create 创建\n\n   不存在则创建数据库并指定字符集\n\n    ```sql\n    create database if not exists dbname [character set gbk]\n    ```\n2. R：Retrieve 查询\n\n    * SHOW DATABASES： 查看所有数据库\n    * show create database dbname：查看数据库建表语句\n3. U：Update 修改\n\n    * alter database 数据库名称 character set 字符集\n4. D：Delete 删除\n\n   drop database if exists dbname\n5. 使用数据库\n\n    *  select database()\n\n   查询在使用的的数据库\n    * use dbname\n\n      使用某数据库\n\n\n**操作表**\n\n1. C：Create 创建\n\n    1. 语法：\n\n        ```sql\n        CREATE TABLE 表名（\n         列名1 数据类型1，\n         列名2 数据类型2，\n        ...\n        );\n\n        ```\n    2. 数据类型：\n\n       > 1. int 整数类型\n            >\n            >     age int\n       > 2. double 小数类型\n            >\n            >     score double(5, 2) -- 共5位，小数后2位\n       > 3. date 日期类型， 格式 yyyy-MM-dd\n       > 4. datetime 日期，格式 yyyy-MMdd HH:mm:ss\n       > 5. timestamp 时间戳，格式 yyyy-MMdd HH:mm:ss，不赋值默认为当前系统时间\n       > 6. varchar 字符串\n            >\n            >     name varchar(20)\n            >\n            >     -- 张三 2字符 ， zhangsan 5字符\n    >\n    3. 示例\n\n        ```sql\n        CREATE TABLE student(\n         id int,\n         name varchar(32),\n         age int,\n         score double(4,1),\n         birthday date,\n         insert_time timestamp\n        );\n        ```\n    4. 复制表\n\n        ```sql\n         create table stu like student;\n        ```\n2. R：Retrieve 查询\n\n    * SHOW TABLES： 查询所有表\n    * desc <table_name>：查看表详情\n    * **show create table <table_name>**\n3. U：Update 修改\n\n    1. 修改表名\n\n        ```sql\n        alter table <table_name> rename to <new_table_name>;\n        ```\n    2. 修改表字符集\n\n        ```sql\n        alter table <table_name> character set <字符集名称>;\n        ```\n    3. 添加列\n\n        ```sql\n        alter table <table_name> add <列名> <数据类型>;\n        ```\n    4. 修改列名称、类型\n\n        ```sql\n        alter table <table_name> change <列名> <新列名> <新数据类型>;\n        alter table <table_name> modify <列名> <新数据类型>;\n        ```\n\n       上面可以发现modify和change都可以修改表的定义，但是change却需要写两次列名，不是很方便。但是change的优点是可以修改列名称，modify则不能\n    5. 删除列\n\n        ```sql\n        alter table <table_name> drop <列名>;\n        ```\n4. D：Delete 删除\n\n    ```sql\n    drop table if exist <table_name> ;\n    ```\n5. 使用数据库\n\n**代码示例：**\n\n* 查询所有数据库\n\n  ```sql\n  mysql> SHOW DATABASES;\n  +--------------------+\n  | Database           |\n  +--------------------+\n  | information_schema | // 存储视图等\n  | mysql              | // 数据库核心数据\n  | performance_schema | // 新能数据\n  | sakila             |\n  | sys                |\n  | world              |\n  +--------------------+\n  ```\n\n* 查询建表语句\n\n  ```sql\n  mysql> show create database mysql\n      -> ;\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  | Database | Create Database                                                                                                                 |\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  | mysql    | CREATE DATABASE `mysql` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */ |\n  +----------+---------------------------------------------------------------------------------------------------------------------------------+\n  1 row in set (0.00 sec)\n  ```\n\n* 不存在则创建数据库\n\n  ```sql\n  create database if not exists dbname\n  ```\n\n* 创建数据库并设置**字符集**\n\n  ```sql\n  create database if not exists dbname character set gbk\n  ```\n\n### 约束\n\n概念：对表中的数据进行限定，保证数据的正确性、有效性、完整性。\n\n分类：\n\n1. 主键约束：primary key\n2. 非空约束：not null\n3. 唯一约束：unique\n4. 外检约束：foreign key\n\n\n#### 非空约束：not null\n\n1. 创建表时添加约束\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT,\n    \tname VARCHAR(20) NOT NULL -- name非空\n    );\n    ```\n2. 添加约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20) NOT NULL;\n    ```\n3. 删除约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20);\n    ```\n\n\n#### 唯一约束： unique，列值不能重复\n\n1. 创建表是添加唯一约束\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT,\n    \tphone_number VARCHAR(20) UNIQUE -- 唯一\n    );\n    ```\n2. 添加约束\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> VARCHAR(20) UNIQUE;\n    ```\n3. **删除唯一约束**，即删除唯一索引\n\n    ```sql\n    ALTER TABLE stu DROP INDEX phone_number;\n    ```\n\n4. **注意：唯一约束可以插入null，但该列中仅能有一个null**\n\n#### 主键约束：primary key\n\n1. 注意：\n\n    1. 主键非空且唯一\n    2. 一张表只可以定义一个主键\n    3. 主键即表中记录的唯一标识\n2. 创建表时添加主键\n\n    ```sql\n    CREATE TABLE stu(\n    \tid INT PRIMARY KEY, -- 主键\n    \tname VARCHAR(20)\n    );\n\n    CREATE TABLE stu(\n    \tid INT , -- 主键\n    \tname VARCHAR(20), \n    \tPRIMARY KEY (id, name) -- 联合主键\n    );\n    ```\n\n   l\n3. 添加主键\n\n    ```sql\n    ALTER TABLE stu MODIFY <列名> INT PRIMARY KEY;\n    ```\n4. 删除主键\n\n    ```sql\n    ALTER TABLE stu DROP PRIMARY KEY; -- 删除主键\n    ```\n5. 自动增长\n\n   概念：如果某一列是数值类型的，使用**auto_increment**可以实现自动增长\n\n    1. 在创建表时实现主键自动增长\n\n        ```sql\n        CREATE TABLE stu(\n        \tid INT PRIMARY KEY AUTO_INCREMENT, -- 主键\n        \tname VARCHAR(20)\n        );\n        ```\n    2. 删除自增\n\n        ```sql\n        ALTER TABLE stu MODIFY id INT; -- 不能跟着PRIMARY KEY，会报多主键错误\n        ```\n    3. 添加自增\n\n        ```sql\n        ALTER TABLE stu MODIFY id INT AUTO_INCREMENT; \n        ```\n\n#### 外键约束：foreign key\n\n1. 在创建表时，添加外键\n\n    ```sql\n    CREATE TABLE 表名（\n    \t...\n    \t外键列名称\n    \t[constraint 外键名称] foreign key (外键列名称) references 主表名称(主表列名称)\n    );\n    示例：\n    CREATE TABLE employee (\n    \tid INT PRIMARY KEY AUTO_INCREMENT, -- 主键\n    \tname VARCHAR(20),\n    \tdep_id INT, -- 部门id\n    \tCONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id)\n    );\n    ```\n2. 删除外键\n\n    ```sql\n    ALTER TABLE employee DROP FOREIGN KEY employee_dep_fk;\n    ```\n3. 添加外键\n\n    ```sql\n    ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) REFERENCES department(id)\n    ```\n\n4. 级联操作\n\n    1. 级联更新\n\n        ```sql\n        ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) \n        REFERENCES department(id) ON UPDATE CASCADE; -- 主键更新，外键跟随更新\n        ```\n\n    2. 级联更新+级联删除\n\n        ```sql\n        ALTER TABLE employee ADD CONSTRAINT employee_dep_fk FOREIGN KEY (dep_id) \n        REFERENCES department(id) \n        ON UPDATE CASCADE ON DELETE CASCADE; -- 主键更新，外键跟随更新,主键删除，外键跟随删除\n        ```\n\n## DCL: 管理用户，授权\n\n### 管理用户\n\n1. 查询用户\n\n    ```sql\n    use mysql;\n    select * from user;\n    ```\n2. 添加用户\n\n   **host通配符：%表示可以在任意主机登录**\n\n    ```sql\n    create user <用户名>@<主机名> identified by <密码>;\n    ```\n3. 删除用户\n\n    ```sql\n    drop user <用户名>@<主机名>;\n    ```\n4. 修改用户密码\n\n    ```sql\n    update user set password = Password(<密码>) where user = <用户名> and host = <主机名>; -- 旧版\n    set password for <用户名>@<主机名> = password(<密码>); -- 通用\n    ```\n\n   MySQL忘记root密码：\n\n   > 1. 停止MySQL服务\n        >\n        >     ```shell\n    >     # 关闭服务\n    >     net stop <数据库服务名>\n    >     ```\n   > 2. 使用无验证方式启动MySQL\n        >\n        >     ```shell\n    >     mysqld --skip-grand-tables;\n    >     ```\n   > 3. 无密码登录\n        >\n        >     ```shell\n    >     mysql  # 无验证则直接登录\n    >     ```\n>\n\n\n### 授权\n\n1. 查询权限\n\n    ```sql\n    show grants for <用户名>@<主机名>\n    ```\n2. 授予权限\n\n    ```sql\n    grant <权限列表> on 数据库名.表名 to <用户名>@<主机名>\n    ```\n3. 撤销权限\n\n    ```sql\n    revoke <权限列表> on 数据库名.表名 from <用户名>@<主机名>\n    ```\n4. 权限列表\n\n    * SELECT\n    * UPDATE\n    * INSERT\n    * DELETE\n    * CREATE\n    * DROP\n    * REFERENCES\n    * INDEX\n    * ALTER\n    * CREATE VIEW\n    * SHOW VIEW\n    * TRIGGER\n\n    * ALL\n\n      所有权限\n\n   *注：上述权权限为部分内容，许多部分系统操作权限未列出*\n5. 数据库、表名通配符\n\n   \\*.\\*：表示所有表、所有数据库\n\n## DML：增删改查数据\n\n1. 添加数据\n\n    * 语法\n\n      ```sql\n      insert into 表名(列名1, 列名2...) values (值1, 值2...);\n      ```\n    * 注意：\n\n        1. 列名与值一一对应\n        2. 表名后无列名，根据定义顺序给所有列赋值\n        3. **除数字类型**，其他类型均用引号（单双引号均可）引起来\n2. 删除数据\n\n    ```sql\n    delete from 表名 [where 条件]\n\n    truncate table 表名 -- 删除表，并创建相同表结构的表，删除较为高效\n    ```\n3. 修改数据\n\n   语法\n\n    ```sql\n    update 表名 set 列名1 = 值1, 列名2 = 值2 ... [where 条件];\n    ```\n\n\n## DQL：查询表中的数据\n\n1. 语法\n\n    ```sql\n    select\n    \t字段列表\n    from\n    \t标名列表\n    [where\n    \t条件列表]\n    [group by\n    \t分组字段]\n    [having\n    \t分组后的条件]\n    [order by\n    \t排序字段]\n    [limit\n    \t分页限定]\n    ```\n\n2. 基础查询\n\n    1. 去重 distinct\n\n        ```sql\n        select distinct 字段1,字段2 from 表名 -- 记录结果集相同则会被去重\n        ```\n    2. 计算列\n\n        * 可以使用四则运算计算列值\n        * null操作函数  **ifnull** 字段为空的返回默认值\n\n          ```sql\n          ifnull(字段名，默认值) --\n          ```\n    3. 别名\n\n       列名后加 “as 别名” ，as可省略\n\n3. 条件查询\n\n    1. where 后接条件\n    2. 运算符\n\n        * \\> , < , >=,  <= , = , <>\n        * BETEWEEN .. AND ..\n        * IN (集合)\n        * LIKE\n\n          > 占位符\n          >\n          > * _：单个字符\n          > * %：多个字符\n          >\n          > 部分可匹配\n          >\n          > 马%  ：马云，马化腾\n          >\n          > _化%  ：马化腾\n          >\n          > ___ : 马化腾 （三个字）\n        >\n        * IS NULL\n        * AND 或 &&\n        * OR 或 ||\n        * not 或 !\n\n   部分等价SQL：\n\n    ```sql\n    select * from student where age >= 20 and age <= 30;\n    select * from student where age >= 20 && age <= 30;\n    select * from student where age between 20 and 30;\n\n    select * from student where age = 18 or age = 19;\n    select * from student where age in (18, 19);\n\n\n\n\n    ```\n\n   查询空\n\n    ```sql\n    select * from student where english is null;\n    select * from student where english is not null;\n    ```\n\n4. 排序查询\n\n    * 语法： order by + 子句\n\n      ```sql\n      order by 排序字段1 排序方式1，排序方式2 排序方式2\n      ```\n    * 排序方式\n\n      ASC：升序，默认\n\n      DESC ：降序\n\n   注意：多个排序条件时，前边条件相同，后边才生效\n5. 聚合查询：将一列作为一个整体，进行纵向计算\n\n    1. count：计算数量\n\n        1. 一般选择非空列：主键\n        2. count(*)\n    2. max：计算最大值\n    3. min：计算最小值\n    4. sum：计算和\n    5. avg：计算平均值\n\n   注意：聚合函数会排除null值，如**count中不会包含null值**，**avg不会平均null**\n\n   解决方式：\n\n    1. 选择非空的列\n\n    2. ifnull函数处理null值\n6. 分组查询\n\n    1. 语法：group by + 分组字段\n    2. 注意：\n\n        1. 分组后查询的字段仅可以为分组字段、聚合函数，其他字段MySQL不会报错，但没有意义\n        2. where和having区别\n\n            1. where在分组前进行限定，不满足条件则不参与分组；having在分组之后进行限定不满足条件则不会被查询到；\n            2. where 后不可以跟聚合函数，having可以进行聚合函数的判断\n\n   示例代码：\n\n    ```sql\n    select sex, avg(math), count(id) 人数\n    from student \n    where math > 70\n    group by sex\n    having 人数> 2;\n    ```\n7. 分页查询\n\n    1. 语法 **limit****方法为MySQL特有**\n\n        ```sql\n        limit 开始索引，每页条数\n        ```\n\n       > 开始索引 = （当前页码 - 1） *  每页条数\n>\n\n\n### 多表查询\n\n笛卡尔积：有两个集合A，B，去两集合的所有组成情况的集合，称之为笛卡尔积\n\n多表查询：\n\n1. 内连接查询\n\n    1. 隐式内连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        \t,t2\n        WHERE\n        \tt1.t2_id = t2.id;\n        ```\n    2. 显示内连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        [INNER] JOIN t2 ON t2.id = t1.t2_id; -- INNER关键字可省略，默认即为内连接\n        ```\n2. 外连接查询\n\n    1. 左外连接\n\n       查询左表所有数据，连接右表\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        LEFT [OUTER] JOIN t2 ON t2.id = t1.t2_id; -- OUTER关键字可省略\n        ```\n    2. 右外连接\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        \t,t2.id\n        \t,t2.name\n        FROM\n        \tt1\n        RIGHT [OUTER] JOIN t2 ON t2.id = t1.t2_id; -- OUTER关键字可省略\n        ```\n3. 子查询\n\n   概念：查询中嵌套查询，成嵌套查询为子查询\n\n    ```sql\n    -- 例如查询最高工资员工信息\n    SELECT \n    \t* \n    FROM \n    \temp \n    WHERE\n    \temp.salary = (\n    \t\tSELECT MAX(salary) FROM emp\n    \t);\n    ```\n\n   **子查询不同情况**\n\n    1. 子查询结果是单行单列\n\n       子查询可以作为条件，使用运算符直接判断：>, >=, <, <=, =\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        where ti.t2_c > (SELECT ...)\n        ```\n    2. 结果是多行单列\n\n       子查询可以使用IN操作符处理\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        where ti.t2_c IN (SELECT ...)\n        ```\n    3. 结果是多行多列\n\n       子查询为多行多列可以被看作**虚拟表**，可以参与查询\n\n        ```sql\n        SELECT\n        \tti.id\n        \t,ti.name\n        FROM\n        \tt1\n        \t,(SELECT ...) t2\n        where t1.c1 = t2.c2;\n        ```\n\n\n## 事务\n\n概念：一个包含多个步骤的业务操作被事务管理，要么同时成功，要么同时失败，不会成功一部分。\n\n### 操作：\n\n1. 开启事务： start transaction;\n2. 回滚：rollback;\n3. 提交：commit；\n4. MySQL数据库中事务默认自动提交\n\n   一调DML语句会自动提交一次事务\n\n   事务提交两种方式\n\n    * 自动提交\n\n      默认执行即自动提交\n    * 手动提交\n\n      先开启事务，则需要手动提交\n\n   **事务的默认提交方式：**\n\n    * 查看\n\n      ```sql\n      SELECT @@autocommit; -- 1 为默认自动提交\n      ```\n    * 修改\n\n      ```sql\n      SET  @@autocommit = 0; -- 修改为默认不提交\n      ```\n\n### 事务的四大特征\n\n1. 原子性（Atomicity）\n\n   是不可分割的最小操作单位，要么同时成功，要么同时失败\n2. 一致性（Consistency）\n\n   事务操作前后数据库中的数据都是一致的、正确的\n3. 隔离性（Isolation）\n4. 持久性（Durability）\n\n   事务提交活回滚后，数据库会持久的保存数据，无论断电还是重启，数据库都不会丢失提交操作\n\n### 事务的隔离级别\n\n概念：多个事务之间是隔离的，相互独立的。如果多个书屋操作同一批数据会引发冲突，通过设置不同的事务隔离级别来解决这些冲突。\n\n**事务冲突的类型：**\n\n1. 脏读\n\n   a事务读取到了b事务未提交的数据，b事务可能会将未提交的数据回滚\n2. 不可重复读（虚读）\n\n   a事务读取某些数据，b事务操作了该数据并提交了修改，a事务再次读取时与第一次结果不一致\n3. 幻读\n\n   不可重复读相似，a事务读取了某个范围内的数据，b事务插入了新的符合a事务选取条件的数据并提交，a事务再次读时发现与第一次读取时结果集不一致；\n\n   通常演示时为a事务修改某表中某范围内数据，b事务插入符合a表筛选条件的数据并提交，a事务再次查询时返现修改范围内仍有数据\n\n**隔离级别：**\n\n1. read uncommitted （读未提交）\n\n   会产生问题：脏读，不可重复读，幻读\n2. read committed（读已提交）（Oracle默认）\n\n   会产生问题：不可重复读，幻读\n3. repeatable read（可重复度） （MySQL默认）\n\n   会产生问题：幻读\n4. serializable（串行化）\n\n   不会产生问题\n\n*注意*：上述隔离级别依次安全性越来越高，效率越来越低\n\n**查询隔离级别：**\n\n```sql\nselect @@tx_isolation; -- 旧版\nselect @@transaction_isolation; -- 新版\n```\n\n**设置隔离级别：**\n\n```sql\nset global transaction isolation level <隔离级别>; -- 断开连接重新连接才会生效\n\nset session transaction isolatin level <隔离级别>; -- 设置当前会话隔离级别\n```\n","slug":"数据库/SQL","published":1,"updated":"2024-07-02T14:09:31.080Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vg000w0ouy4lms3cog","content":"<p>Structured Query Language,结构化查询语言</p>\n<p>大部分的SQL对数据库是通用的，少部分有自定义的用法</p>\n<p>@[TOC]</p>\n<h1 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h1><p>语句不区分大小写，关键字建议大写</p>\n<ul>\n<li><p>注释：</p>\n<ul>\n<li>单行注释 使用横线+空格 或者”#”，如”– 注释内容”, “#注释内容”</li>\n<li>多行注释 &#x2F;* *&#x2F;</li>\n</ul>\n</li>\n</ul>\n<p>SQL分类：</p>\n<ol>\n<li><p>数据查询语言（DQL）<br>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</p>\n</li>\n<li><p>数据定义语言（DDL）<br>数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</p>\n</li>\n<li><p>数据操纵语言（DML）<br>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</p>\n</li>\n<li><p>据控制语言（DCL）<br>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</p>\n</li>\n<li><p><em>指针控制语言（CCL）</em> <strong>非公认分类</strong><br>它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>\n</li>\n<li><p><em>事务处理语言（TPL）</em>非公认分类<br>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。<br /></p>\n</li>\n</ol>\n<p><img src=\"/hexo-blog/./img/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%A4%BA%E6%84%8F.png\" alt=\"image.png\"></p>\n<h2 id=\"DDL：操作数据库\"><a href=\"#DDL：操作数据库\" class=\"headerlink\" title=\"DDL：操作数据库\"></a>DDL：操作数据库</h2><p><strong>操作数据库</strong>：CRUD</p>\n<ol>\n<li><p>C：Create 创建</p>\n<p>不存在则创建数据库并指定字符集</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname [<span class=\"type\">character</span> <span class=\"keyword\">set</span> gbk]</span><br></pre></td></tr></table></figure></li>\n<li><p>R：Retrieve 查询</p>\n<ul>\n<li>SHOW DATABASES： 查看所有数据库</li>\n<li>show create database dbname：查看数据库建表语句</li>\n</ul>\n</li>\n<li><p>U：Update 修改</p>\n<ul>\n<li>alter database 数据库名称 character set 字符集</li>\n</ul>\n</li>\n<li><p>D：Delete 删除</p>\n<p>drop database if exists dbname</p>\n</li>\n<li><p>使用数据库</p>\n<ul>\n<li>select database()</li>\n</ul>\n<p>查询在使用的的数据库</p>\n<ul>\n<li><p>use dbname</p>\n<p>使用某数据库</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>操作表</strong></p>\n<ol>\n<li><p>C：Create 创建</p>\n<ol>\n<li><p>语法：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名（</span><br><span class=\"line\"> 列名<span class=\"number\">1</span> 数据类型<span class=\"number\">1</span>，</span><br><span class=\"line\"> 列名<span class=\"number\">2</span> 数据类型<span class=\"number\">2</span>，</span><br><span class=\"line\">...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>数据类型：</p>\n<blockquote>\n<ol>\n<li><p>int 整数类型</p>\n<p> age int</p>\n</li>\n<li><p>double 小数类型</p>\n<p> score double(5, 2) – 共5位，小数后2位</p>\n</li>\n<li><p>date 日期类型， 格式 yyyy-MM-dd</p>\n</li>\n<li><p>datetime 日期，格式 yyyy-MMdd HH:mm:ss</p>\n</li>\n<li><p>timestamp 时间戳，格式 yyyy-MMdd HH:mm:ss，不赋值默认为当前系统时间</p>\n</li>\n<li><p>varchar 字符串</p>\n<p> name varchar(20)</p>\n<p> – 张三 2字符 ， zhangsan 5字符</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"3\">\n<li><p>示例</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(</span><br><span class=\"line\"> id <span class=\"type\">int</span>,</span><br><span class=\"line\"> name <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\"> age <span class=\"type\">int</span>,</span><br><span class=\"line\"> score <span class=\"keyword\">double</span>(<span class=\"number\">4</span>,<span class=\"number\">1</span>),</span><br><span class=\"line\"> birthday <span class=\"type\">date</span>,</span><br><span class=\"line\"> insert_time <span class=\"type\">timestamp</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>复制表</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> stu <span class=\"keyword\">like</span> student;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>R：Retrieve 查询</p>\n<ul>\n<li>SHOW TABLES： 查询所有表</li>\n<li>desc <table_name>：查看表详情</li>\n<li><strong>show create table <table_name></strong></li>\n</ul>\n</li>\n<li><p>U：Update 修改</p>\n<ol>\n<li><p>修改表名</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> rename <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>new_table_name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改表字符集</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span> <span class=\"operator\">&lt;</span>字符集名称<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加列</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"keyword\">add</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改列名称、类型</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> change <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新数据类型<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> modify <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新数据类型<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面可以发现modify和change都可以修改表的定义，但是change却需要写两次列名，不是很方便。但是change的优点是可以修改列名称，modify则不能</p>\n</li>\n<li><p>删除列</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"keyword\">drop</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>D：Delete 删除</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if exist <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> ;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用数据库</p>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<ul>\n<li><p>查询所有数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SHOW</span> DATABASES;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Database           <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> information_schema <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 存储视图等</span><br><span class=\"line\"><span class=\"operator\">|</span> mysql              <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 数据库核心数据</span><br><span class=\"line\"><span class=\"operator\">|</span> performance_schema <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 新能数据</span><br><span class=\"line\"><span class=\"operator\">|</span> sakila             <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> sys                <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> world              <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询建表语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> database mysql</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> ;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Database <span class=\"operator\">|</span> <span class=\"keyword\">Create</span> Database                                                                                                                 <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> mysql    <span class=\"operator\">|</span> <span class=\"keyword\">CREATE</span> DATABASE `mysql` <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span> <span class=\"comment\">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不存在则创建数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建数据库并设置<strong>字符集</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname <span class=\"type\">character</span> <span class=\"keyword\">set</span> gbk</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><p>概念：对表中的数据进行限定，保证数据的正确性、有效性、完整性。</p>\n<p>分类：</p>\n<ol>\n<li>主键约束：primary key</li>\n<li>非空约束：not null</li>\n<li>唯一约束：unique</li>\n<li>外检约束：foreign key</li>\n</ol>\n<h4 id=\"非空约束：not-null\"><a href=\"#非空约束：not-null\" class=\"headerlink\" title=\"非空约束：not null\"></a>非空约束：not null</h4><ol>\n<li><p>创建表时添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span>,</span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"comment\">-- name非空</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"唯一约束：-unique，列值不能重复\"><a href=\"#唯一约束：-unique，列值不能重复\" class=\"headerlink\" title=\"唯一约束： unique，列值不能重复\"></a>唯一约束： unique，列值不能重复</h4><ol>\n<li><p>创建表是添加唯一约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span>,</span><br><span class=\"line\">\tphone_number <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span> <span class=\"comment\">-- 唯一</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>删除唯一约束</strong>，即删除唯一索引</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu <span class=\"keyword\">DROP</span> INDEX phone_number;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注意：唯一约束可以插入null，但该列中仅能有一个null</strong></p>\n</li>\n</ol>\n<h4 id=\"主键约束：primary-key\"><a href=\"#主键约束：primary-key\" class=\"headerlink\" title=\"主键约束：primary key\"></a>主键约束：primary key</h4><ol>\n<li><p>注意：</p>\n<ol>\n<li>主键非空且唯一</li>\n<li>一张表只可以定义一个主键</li>\n<li>主键即表中记录的唯一标识</li>\n</ol>\n</li>\n<li><p>创建表时添加主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> , <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>), </span><br><span class=\"line\">\t<span class=\"keyword\">PRIMARY</span> KEY (id, name) <span class=\"comment\">-- 联合主键</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>l</p>\n</li>\n<li><p>添加主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY; <span class=\"comment\">-- 删除主键</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自动增长</p>\n<p>概念：如果某一列是数值类型的，使用<strong>auto_increment</strong>可以实现自动增长</p>\n<ol>\n<li><p>在创建表时实现主键自动增长</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除自增</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY id <span class=\"type\">INT</span>; <span class=\"comment\">-- 不能跟着PRIMARY KEY，会报多主键错误</span></span><br></pre></td></tr></table></figure></li>\n<li><p>添加自增</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY id <span class=\"type\">INT</span> AUTO_INCREMENT; </span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"外键约束：foreign-key\"><a href=\"#外键约束：foreign-key\" class=\"headerlink\" title=\"外键约束：foreign key\"></a>外键约束：foreign key</h4><ol>\n<li><p>在创建表时，添加外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名（</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t外键列名称</span><br><span class=\"line\">\t[<span class=\"keyword\">constraint</span> 外键名称] <span class=\"keyword\">foreign</span> key (外键列名称) <span class=\"keyword\">references</span> 主表名称(主表列名称)</span><br><span class=\"line\">);</span><br><span class=\"line\">示例：</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\tdep_id <span class=\"type\">INT</span>, <span class=\"comment\">-- 部门id</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) <span class=\"keyword\">REFERENCES</span> department(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">DROP</span> <span class=\"keyword\">FOREIGN</span> KEY employee_dep_fk;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) <span class=\"keyword\">REFERENCES</span> department(id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>级联操作</p>\n<ol>\n<li><p>级联更新</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) </span><br><span class=\"line\"><span class=\"keyword\">REFERENCES</span> department(id) <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE; <span class=\"comment\">-- 主键更新，外键跟随更新</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>级联更新+级联删除</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) </span><br><span class=\"line\"><span class=\"keyword\">REFERENCES</span> department(id) </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> CASCADE; <span class=\"comment\">-- 主键更新，外键跟随更新,主键删除，外键跟随删除</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"DCL-管理用户，授权\"><a href=\"#DCL-管理用户，授权\" class=\"headerlink\" title=\"DCL: 管理用户，授权\"></a>DCL: 管理用户，授权</h2><h3 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h3><ol>\n<li><p>查询用户</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加用户</p>\n<p><strong>host通配符：%表示可以在任意主机登录</strong></p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span> identified <span class=\"keyword\">by</span> <span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除用户</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改用户密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> password <span class=\"operator\">=</span> Password(<span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>) <span class=\"keyword\">where</span> <span class=\"keyword\">user</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span> <span class=\"keyword\">and</span> host <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 旧版</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> password <span class=\"keyword\">for</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> password(<span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>); <span class=\"comment\">-- 通用</span></span><br></pre></td></tr></table></figure>\n\n<p>MySQL忘记root密码：</p>\n<blockquote>\n<ol>\n<li><p>停止MySQL服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭服务</span></span><br><span class=\"line\">net stop &lt;数据库服务名&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用无验证方式启动MySQL</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-grand-tables;</span><br></pre></td></tr></table></figure></li>\n<li><p>无密码登录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql  # 无验证则直接登录</span><br></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><ol>\n<li><p>查询权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>授予权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"operator\">&lt;</span>权限列表<span class=\"operator\">&gt;</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>撤销权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"operator\">&lt;</span>权限列表<span class=\"operator\">&gt;</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">from</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>权限列表</p>\n<ul>\n<li><p>SELECT</p>\n</li>\n<li><p>UPDATE</p>\n</li>\n<li><p>INSERT</p>\n</li>\n<li><p>DELETE</p>\n</li>\n<li><p>CREATE</p>\n</li>\n<li><p>DROP</p>\n</li>\n<li><p>REFERENCES</p>\n</li>\n<li><p>INDEX</p>\n</li>\n<li><p>ALTER</p>\n</li>\n<li><p>CREATE VIEW</p>\n</li>\n<li><p>SHOW VIEW</p>\n</li>\n<li><p>TRIGGER</p>\n</li>\n<li><p>ALL</p>\n<p>所有权限</p>\n</li>\n</ul>\n<p><em>注：上述权权限为部分内容，许多部分系统操作权限未列出</em></p>\n</li>\n<li><p>数据库、表名通配符</p>\n<p>*.*：表示所有表、所有数据库</p>\n</li>\n</ol>\n<h2 id=\"DML：增删改查数据\"><a href=\"#DML：增删改查数据\" class=\"headerlink\" title=\"DML：增删改查数据\"></a>DML：增删改查数据</h2><ol>\n<li><p>添加数据</p>\n<ul>\n<li><p>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列名<span class=\"number\">1</span>, 列名<span class=\"number\">2.</span>..) <span class=\"keyword\">values</span> (值<span class=\"number\">1</span>, 值<span class=\"number\">2.</span>..);</span><br></pre></td></tr></table></figure></li>\n<li><p>注意：</p>\n<ol>\n<li>列名与值一一对应</li>\n<li>表名后无列名，根据定义顺序给所有列赋值</li>\n<li><strong>除数字类型</strong>，其他类型均用引号（单双引号均可）引起来</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>删除数据</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名 <span class=\"comment\">-- 删除表，并创建相同表结构的表，删除较为高效</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改数据</p>\n<p>语法</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名 <span class=\"keyword\">set</span> 列名<span class=\"number\">1</span> <span class=\"operator\">=</span> 值<span class=\"number\">1</span>, 列名<span class=\"number\">2</span> <span class=\"operator\">=</span> 值<span class=\"number\">2</span> ... [<span class=\"keyword\">where</span> 条件];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"DQL：查询表中的数据\"><a href=\"#DQL：查询表中的数据\" class=\"headerlink\" title=\"DQL：查询表中的数据\"></a>DQL：查询表中的数据</h2><ol>\n<li><p>语法</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\t标名列表</span><br><span class=\"line\">[<span class=\"keyword\">where</span></span><br><span class=\"line\">\t条件列表]</span><br><span class=\"line\">[<span class=\"keyword\">group</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t分组字段]</span><br><span class=\"line\">[<span class=\"keyword\">having</span></span><br><span class=\"line\">\t分组后的条件]</span><br><span class=\"line\">[<span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t排序字段]</span><br><span class=\"line\">[limit</span><br><span class=\"line\">\t分页限定]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基础查询</p>\n<ol>\n<li><p>去重 distinct</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> 字段<span class=\"number\">1</span>,字段<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名 <span class=\"comment\">-- 记录结果集相同则会被去重</span></span><br></pre></td></tr></table></figure></li>\n<li><p>计算列</p>\n<ul>\n<li><p>可以使用四则运算计算列值</p>\n</li>\n<li><p>null操作函数  <strong>ifnull</strong> 字段为空的返回默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifnull(字段名，默认值) <span class=\"comment\">--</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>别名</p>\n<p>列名后加 “as 别名” ，as可省略</p>\n</li>\n</ol>\n</li>\n<li><p>条件查询</p>\n<ol>\n<li><p>where 后接条件</p>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>&gt; , &lt; , &gt;&#x3D;,  &lt;&#x3D; , &#x3D; , &lt;&gt;</p>\n</li>\n<li><p>BETEWEEN .. AND ..</p>\n</li>\n<li><p>IN (集合)</p>\n</li>\n<li><p>LIKE</p>\n<blockquote>\n<p>占位符</p>\n<ul>\n<li>_：单个字符</li>\n<li>%：多个字符</li>\n</ul>\n<p>部分可匹配</p>\n<p>马%  ：马云，马化腾</p>\n<p>_化%  ：马化腾</p>\n<p>___ : 马化腾 （三个字）</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<ul>\n<li>IS NULL</li>\n<li>AND 或 &amp;&amp;</li>\n<li>OR 或 ||</li>\n<li>not 或 !</li>\n</ul>\n</li>\n</ol>\n<p>部分等价SQL：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">20</span> <span class=\"operator\">&amp;&amp;</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"keyword\">between</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">=</span> <span class=\"number\">18</span> <span class=\"keyword\">or</span> age <span class=\"operator\">=</span> <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"keyword\">in</span> (<span class=\"number\">18</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查询空</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> english <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> english <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>排序查询</p>\n<ul>\n<li><p>语法： order by + 子句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 排序字段<span class=\"number\">1</span> 排序方式<span class=\"number\">1</span>，排序方式<span class=\"number\">2</span> 排序方式<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n<li><p>排序方式</p>\n<p>ASC：升序，默认</p>\n<p>DESC ：降序</p>\n</li>\n</ul>\n<p>注意：多个排序条件时，前边条件相同，后边才生效</p>\n</li>\n<li><p>聚合查询：将一列作为一个整体，进行纵向计算</p>\n<ol>\n<li><p>count：计算数量</p>\n<ol>\n<li>一般选择非空列：主键</li>\n<li>count(*)</li>\n</ol>\n</li>\n<li><p>max：计算最大值</p>\n</li>\n<li><p>min：计算最小值</p>\n</li>\n<li><p>sum：计算和</p>\n</li>\n<li><p>avg：计算平均值</p>\n</li>\n</ol>\n<p>注意：聚合函数会排除null值，如<strong>count中不会包含null值</strong>，<strong>avg不会平均null</strong></p>\n<p>解决方式：</p>\n<ol>\n<li><p>选择非空的列</p>\n</li>\n<li><p>ifnull函数处理null值</p>\n</li>\n</ol>\n</li>\n<li><p>分组查询</p>\n<ol>\n<li><p>语法：group by + 分组字段</p>\n</li>\n<li><p>注意：</p>\n<ol>\n<li><p>分组后查询的字段仅可以为分组字段、聚合函数，其他字段MySQL不会报错，但没有意义</p>\n</li>\n<li><p>where和having区别</p>\n<ol>\n<li>where在分组前进行限定，不满足条件则不参与分组；having在分组之后进行限定不满足条件则不会被查询到；</li>\n<li>where 后不可以跟聚合函数，having可以进行聚合函数的判断</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">avg</span>(math), <span class=\"built_in\">count</span>(id) 人数</span><br><span class=\"line\"><span class=\"keyword\">from</span> student </span><br><span class=\"line\"><span class=\"keyword\">where</span> math <span class=\"operator\">&gt;</span> <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex</span><br><span class=\"line\"><span class=\"keyword\">having</span> 人数<span class=\"operator\">&gt;</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>分页查询</p>\n<ol>\n<li><p>语法 <strong>limit****方法为MySQL特有</strong></p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit 开始索引，每页条数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>开始索引 &#x3D; （当前页码 - 1） *  每页条数</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p>笛卡尔积：有两个集合A，B，去两集合的所有组成情况的集合，称之为笛卡尔积</p>\n<p>多表查询：</p>\n<ol>\n<li><p>内连接查询</p>\n<ol>\n<li><p>隐式内连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">\t,t2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\tt1.t2_id <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure></li>\n<li><p>显示内连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">[<span class=\"keyword\">INNER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- INNER关键字可省略，默认即为内连接</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>外连接查询</p>\n<ol>\n<li><p>左外连接</p>\n<p>查询左表所有数据，连接右表</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> [<span class=\"keyword\">OUTER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- OUTER关键字可省略</span></span><br></pre></td></tr></table></figure></li>\n<li><p>右外连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> [<span class=\"keyword\">OUTER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- OUTER关键字可省略</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>子查询</p>\n<p>概念：查询中嵌套查询，成嵌套查询为子查询</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例如查询最高工资员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\t<span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\temp.salary <span class=\"operator\">=</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(salary) <span class=\"keyword\">FROM</span> emp</span><br><span class=\"line\">\t);</span><br></pre></td></tr></table></figure>\n\n<p><strong>子查询不同情况</strong></p>\n<ol>\n<li><p>子查询结果是单行单列</p>\n<p>子查询可以作为条件，使用运算符直接判断：&gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, &#x3D;</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">where</span> ti.t2_c <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>结果是多行单列</p>\n<p>子查询可以使用IN操作符处理</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">where</span> ti.t2_c <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>结果是多行多列</p>\n<p>子查询为多行多列可以被看作<strong>虚拟表</strong>，可以参与查询</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">\t,(<span class=\"keyword\">SELECT</span> ...) t2</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.c1 <span class=\"operator\">=</span> t2.c2;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>概念：一个包含多个步骤的业务操作被事务管理，要么同时成功，要么同时失败，不会成功一部分。</p>\n<h3 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><ol>\n<li><p>开启事务： start transaction;</p>\n</li>\n<li><p>回滚：rollback;</p>\n</li>\n<li><p>提交：commit；</p>\n</li>\n<li><p>MySQL数据库中事务默认自动提交</p>\n<p>一调DML语句会自动提交一次事务</p>\n<p>事务提交两种方式</p>\n<ul>\n<li><p>自动提交</p>\n<p>默认执行即自动提交</p>\n</li>\n<li><p>手动提交</p>\n<p>先开启事务，则需要手动提交</p>\n</li>\n</ul>\n<p><strong>事务的默认提交方式：</strong></p>\n<ul>\n<li><p>查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> @<span class=\"variable\">@autocommit</span>; <span class=\"comment\">-- 1 为默认自动提交</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>  @<span class=\"variable\">@autocommit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">-- 修改为默认不提交</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"事务的四大特征\"><a href=\"#事务的四大特征\" class=\"headerlink\" title=\"事务的四大特征\"></a>事务的四大特征</h3><ol>\n<li><p>原子性（Atomicity）</p>\n<p>是不可分割的最小操作单位，要么同时成功，要么同时失败</p>\n</li>\n<li><p>一致性（Consistency）</p>\n<p>事务操作前后数据库中的数据都是一致的、正确的</p>\n</li>\n<li><p>隔离性（Isolation）</p>\n</li>\n<li><p>持久性（Durability）</p>\n<p>事务提交活回滚后，数据库会持久的保存数据，无论断电还是重启，数据库都不会丢失提交操作</p>\n</li>\n</ol>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><p>概念：多个事务之间是隔离的，相互独立的。如果多个书屋操作同一批数据会引发冲突，通过设置不同的事务隔离级别来解决这些冲突。</p>\n<p><strong>事务冲突的类型：</strong></p>\n<ol>\n<li><p>脏读</p>\n<p>a事务读取到了b事务未提交的数据，b事务可能会将未提交的数据回滚</p>\n</li>\n<li><p>不可重复读（虚读）</p>\n<p>a事务读取某些数据，b事务操作了该数据并提交了修改，a事务再次读取时与第一次结果不一致</p>\n</li>\n<li><p>幻读</p>\n<p>不可重复读相似，a事务读取了某个范围内的数据，b事务插入了新的符合a事务选取条件的数据并提交，a事务再次读时发现与第一次读取时结果集不一致；</p>\n<p>通常演示时为a事务修改某表中某范围内数据，b事务插入符合a表筛选条件的数据并提交，a事务再次查询时返现修改范围内仍有数据</p>\n</li>\n</ol>\n<p><strong>隔离级别：</strong></p>\n<ol>\n<li><p>read uncommitted （读未提交）</p>\n<p>会产生问题：脏读，不可重复读，幻读</p>\n</li>\n<li><p>read committed（读已提交）（Oracle默认）</p>\n<p>会产生问题：不可重复读，幻读</p>\n</li>\n<li><p>repeatable read（可重复度） （MySQL默认）</p>\n<p>会产生问题：幻读</p>\n</li>\n<li><p>serializable（串行化）</p>\n<p>不会产生问题</p>\n</li>\n</ol>\n<p><em>注意</em>：上述隔离级别依次安全性越来越高，效率越来越低</p>\n<p><strong>查询隔离级别：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@tx_isolation</span>; <span class=\"comment\">-- 旧版</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@transaction_isolation</span>; <span class=\"comment\">-- 新版</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>设置隔离级别：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> transaction isolation level <span class=\"operator\">&lt;</span>隔离级别<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 断开连接重新连接才会生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> session transaction isolatin level <span class=\"operator\">&lt;</span>隔离级别<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 设置当前会话隔离级别</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Structured Query Language,结构化查询语言</p>\n<p>大部分的SQL对数据库是通用的，少部分有自定义的用法</p>\n<p>@[TOC]</p>\n<h1 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h1><p>语句不区分大小写，关键字建议大写</p>\n<ul>\n<li><p>注释：</p>\n<ul>\n<li>单行注释 使用横线+空格 或者”#”，如”– 注释内容”, “#注释内容”</li>\n<li>多行注释 &#x2F;* *&#x2F;</li>\n</ul>\n</li>\n</ul>\n<p>SQL分类：</p>\n<ol>\n<li><p>数据查询语言（DQL）<br>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</p>\n</li>\n<li><p>数据定义语言（DDL）<br>数据定义语言 (Data Definition Language, DDL) 是SQL语言集中，负责数据结构定义与数据库对象定义的语言，由CREATE、ALTER与DROP三个语法所组成，最早是由 Codasyl (Conference on Data Systems Languages) 数据模型开始，现在被纳入 SQL 指令中作为其中一个子集。</p>\n</li>\n<li><p>数据操纵语言（DML）<br>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</p>\n</li>\n<li><p>据控制语言（DCL）<br>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。DCL以控制用户的访问权限为主，GRANT为授权语句，对应的REVOKE是撤销授权语句。</p>\n</li>\n<li><p><em>指针控制语言（CCL）</em> <strong>非公认分类</strong><br>它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>\n</li>\n<li><p><em>事务处理语言（TPL）</em>非公认分类<br>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。<br /></p>\n</li>\n</ol>\n<p><img src=\"/hexo-blog/./img/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%A4%BA%E6%84%8F.png\" alt=\"image.png\"></p>\n<h2 id=\"DDL：操作数据库\"><a href=\"#DDL：操作数据库\" class=\"headerlink\" title=\"DDL：操作数据库\"></a>DDL：操作数据库</h2><p><strong>操作数据库</strong>：CRUD</p>\n<ol>\n<li><p>C：Create 创建</p>\n<p>不存在则创建数据库并指定字符集</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname [<span class=\"type\">character</span> <span class=\"keyword\">set</span> gbk]</span><br></pre></td></tr></table></figure></li>\n<li><p>R：Retrieve 查询</p>\n<ul>\n<li>SHOW DATABASES： 查看所有数据库</li>\n<li>show create database dbname：查看数据库建表语句</li>\n</ul>\n</li>\n<li><p>U：Update 修改</p>\n<ul>\n<li>alter database 数据库名称 character set 字符集</li>\n</ul>\n</li>\n<li><p>D：Delete 删除</p>\n<p>drop database if exists dbname</p>\n</li>\n<li><p>使用数据库</p>\n<ul>\n<li>select database()</li>\n</ul>\n<p>查询在使用的的数据库</p>\n<ul>\n<li><p>use dbname</p>\n<p>使用某数据库</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>操作表</strong></p>\n<ol>\n<li><p>C：Create 创建</p>\n<ol>\n<li><p>语法：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名（</span><br><span class=\"line\"> 列名<span class=\"number\">1</span> 数据类型<span class=\"number\">1</span>，</span><br><span class=\"line\"> 列名<span class=\"number\">2</span> 数据类型<span class=\"number\">2</span>，</span><br><span class=\"line\">...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>数据类型：</p>\n<blockquote>\n<ol>\n<li><p>int 整数类型</p>\n<p> age int</p>\n</li>\n<li><p>double 小数类型</p>\n<p> score double(5, 2) – 共5位，小数后2位</p>\n</li>\n<li><p>date 日期类型， 格式 yyyy-MM-dd</p>\n</li>\n<li><p>datetime 日期，格式 yyyy-MMdd HH:mm:ss</p>\n</li>\n<li><p>timestamp 时间戳，格式 yyyy-MMdd HH:mm:ss，不赋值默认为当前系统时间</p>\n</li>\n<li><p>varchar 字符串</p>\n<p> name varchar(20)</p>\n<p> – 张三 2字符 ， zhangsan 5字符</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"3\">\n<li><p>示例</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(</span><br><span class=\"line\"> id <span class=\"type\">int</span>,</span><br><span class=\"line\"> name <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\"> age <span class=\"type\">int</span>,</span><br><span class=\"line\"> score <span class=\"keyword\">double</span>(<span class=\"number\">4</span>,<span class=\"number\">1</span>),</span><br><span class=\"line\"> birthday <span class=\"type\">date</span>,</span><br><span class=\"line\"> insert_time <span class=\"type\">timestamp</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>复制表</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> stu <span class=\"keyword\">like</span> student;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>R：Retrieve 查询</p>\n<ul>\n<li>SHOW TABLES： 查询所有表</li>\n<li>desc <table_name>：查看表详情</li>\n<li><strong>show create table <table_name></strong></li>\n</ul>\n</li>\n<li><p>U：Update 修改</p>\n<ol>\n<li><p>修改表名</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> rename <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>new_table_name<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改表字符集</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"type\">character</span> <span class=\"keyword\">set</span> <span class=\"operator\">&lt;</span>字符集名称<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加列</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"keyword\">add</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改列名称、类型</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> change <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新数据类型<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> modify <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新数据类型<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面可以发现modify和change都可以修改表的定义，但是change却需要写两次列名，不是很方便。但是change的优点是可以修改列名称，modify则不能</p>\n</li>\n<li><p>删除列</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> <span class=\"keyword\">drop</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>D：Delete 删除</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if exist <span class=\"operator\">&lt;</span>table_name<span class=\"operator\">&gt;</span> ;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用数据库</p>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<ul>\n<li><p>查询所有数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SHOW</span> DATABASES;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Database           <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> information_schema <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 存储视图等</span><br><span class=\"line\"><span class=\"operator\">|</span> mysql              <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 数据库核心数据</span><br><span class=\"line\"><span class=\"operator\">|</span> performance_schema <span class=\"operator\">|</span> <span class=\"operator\">/</span><span class=\"operator\">/</span> 新能数据</span><br><span class=\"line\"><span class=\"operator\">|</span> sakila             <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> sys                <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> world              <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------+</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询建表语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> database mysql</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> ;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Database <span class=\"operator\">|</span> <span class=\"keyword\">Create</span> Database                                                                                                                 <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> mysql    <span class=\"operator\">|</span> <span class=\"keyword\">CREATE</span> DATABASE `mysql` <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span> <span class=\"comment\">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span> <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不存在则创建数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建数据库并设置<strong>字符集</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> dbname <span class=\"type\">character</span> <span class=\"keyword\">set</span> gbk</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><p>概念：对表中的数据进行限定，保证数据的正确性、有效性、完整性。</p>\n<p>分类：</p>\n<ol>\n<li>主键约束：primary key</li>\n<li>非空约束：not null</li>\n<li>唯一约束：unique</li>\n<li>外检约束：foreign key</li>\n</ol>\n<h4 id=\"非空约束：not-null\"><a href=\"#非空约束：not-null\" class=\"headerlink\" title=\"非空约束：not null\"></a>非空约束：not null</h4><ol>\n<li><p>创建表时添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span>,</span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"comment\">-- name非空</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"唯一约束：-unique，列值不能重复\"><a href=\"#唯一约束：-unique，列值不能重复\" class=\"headerlink\" title=\"唯一约束： unique，列值不能重复\"></a>唯一约束： unique，列值不能重复</h4><ol>\n<li><p>创建表是添加唯一约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span>,</span><br><span class=\"line\">\tphone_number <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span> <span class=\"comment\">-- 唯一</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>添加约束</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>删除唯一约束</strong>，即删除唯一索引</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu <span class=\"keyword\">DROP</span> INDEX phone_number;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注意：唯一约束可以插入null，但该列中仅能有一个null</strong></p>\n</li>\n</ol>\n<h4 id=\"主键约束：primary-key\"><a href=\"#主键约束：primary-key\" class=\"headerlink\" title=\"主键约束：primary key\"></a>主键约束：primary key</h4><ol>\n<li><p>注意：</p>\n<ol>\n<li>主键非空且唯一</li>\n<li>一张表只可以定义一个主键</li>\n<li>主键即表中记录的唯一标识</li>\n</ol>\n</li>\n<li><p>创建表时添加主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> , <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>), </span><br><span class=\"line\">\t<span class=\"keyword\">PRIMARY</span> KEY (id, name) <span class=\"comment\">-- 联合主键</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>l</p>\n</li>\n<li><p>添加主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除主键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY; <span class=\"comment\">-- 删除主键</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自动增长</p>\n<p>概念：如果某一列是数值类型的，使用<strong>auto_increment</strong>可以实现自动增长</p>\n<ol>\n<li><p>在创建表时实现主键自动增长</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stu(</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除自增</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY id <span class=\"type\">INT</span>; <span class=\"comment\">-- 不能跟着PRIMARY KEY，会报多主键错误</span></span><br></pre></td></tr></table></figure></li>\n<li><p>添加自增</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stu MODIFY id <span class=\"type\">INT</span> AUTO_INCREMENT; </span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"外键约束：foreign-key\"><a href=\"#外键约束：foreign-key\" class=\"headerlink\" title=\"外键约束：foreign key\"></a>外键约束：foreign key</h4><ol>\n<li><p>在创建表时，添加外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名（</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t外键列名称</span><br><span class=\"line\">\t[<span class=\"keyword\">constraint</span> 外键名称] <span class=\"keyword\">foreign</span> key (外键列名称) <span class=\"keyword\">references</span> 主表名称(主表列名称)</span><br><span class=\"line\">);</span><br><span class=\"line\">示例：</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">\tid <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, <span class=\"comment\">-- 主键</span></span><br><span class=\"line\">\tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\tdep_id <span class=\"type\">INT</span>, <span class=\"comment\">-- 部门id</span></span><br><span class=\"line\">\t<span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) <span class=\"keyword\">REFERENCES</span> department(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">DROP</span> <span class=\"keyword\">FOREIGN</span> KEY employee_dep_fk;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加外键</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) <span class=\"keyword\">REFERENCES</span> department(id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>级联操作</p>\n<ol>\n<li><p>级联更新</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) </span><br><span class=\"line\"><span class=\"keyword\">REFERENCES</span> department(id) <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE; <span class=\"comment\">-- 主键更新，外键跟随更新</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>级联更新+级联删除</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employee <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> employee_dep_fk <span class=\"keyword\">FOREIGN</span> KEY (dep_id) </span><br><span class=\"line\"><span class=\"keyword\">REFERENCES</span> department(id) </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> CASCADE; <span class=\"comment\">-- 主键更新，外键跟随更新,主键删除，外键跟随删除</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"DCL-管理用户，授权\"><a href=\"#DCL-管理用户，授权\" class=\"headerlink\" title=\"DCL: 管理用户，授权\"></a>DCL: 管理用户，授权</h2><h3 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h3><ol>\n<li><p>查询用户</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加用户</p>\n<p><strong>host通配符：%表示可以在任意主机登录</strong></p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span> identified <span class=\"keyword\">by</span> <span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除用户</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改用户密码</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> password <span class=\"operator\">=</span> Password(<span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>) <span class=\"keyword\">where</span> <span class=\"keyword\">user</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span> <span class=\"keyword\">and</span> host <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 旧版</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> password <span class=\"keyword\">for</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> password(<span class=\"operator\">&lt;</span>密码<span class=\"operator\">&gt;</span>); <span class=\"comment\">-- 通用</span></span><br></pre></td></tr></table></figure>\n\n<p>MySQL忘记root密码：</p>\n<blockquote>\n<ol>\n<li><p>停止MySQL服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭服务</span></span><br><span class=\"line\">net stop &lt;数据库服务名&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用无验证方式启动MySQL</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-grand-tables;</span><br></pre></td></tr></table></figure></li>\n<li><p>无密码登录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql  # 无验证则直接登录</span><br></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><ol>\n<li><p>查询权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>授予权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"operator\">&lt;</span>权限列表<span class=\"operator\">&gt;</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>撤销权限</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"operator\">&lt;</span>权限列表<span class=\"operator\">&gt;</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">from</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>@<span class=\"operator\">&lt;</span>主机名<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>权限列表</p>\n<ul>\n<li><p>SELECT</p>\n</li>\n<li><p>UPDATE</p>\n</li>\n<li><p>INSERT</p>\n</li>\n<li><p>DELETE</p>\n</li>\n<li><p>CREATE</p>\n</li>\n<li><p>DROP</p>\n</li>\n<li><p>REFERENCES</p>\n</li>\n<li><p>INDEX</p>\n</li>\n<li><p>ALTER</p>\n</li>\n<li><p>CREATE VIEW</p>\n</li>\n<li><p>SHOW VIEW</p>\n</li>\n<li><p>TRIGGER</p>\n</li>\n<li><p>ALL</p>\n<p>所有权限</p>\n</li>\n</ul>\n<p><em>注：上述权权限为部分内容，许多部分系统操作权限未列出</em></p>\n</li>\n<li><p>数据库、表名通配符</p>\n<p>*.*：表示所有表、所有数据库</p>\n</li>\n</ol>\n<h2 id=\"DML：增删改查数据\"><a href=\"#DML：增删改查数据\" class=\"headerlink\" title=\"DML：增删改查数据\"></a>DML：增删改查数据</h2><ol>\n<li><p>添加数据</p>\n<ul>\n<li><p>语法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名(列名<span class=\"number\">1</span>, 列名<span class=\"number\">2.</span>..) <span class=\"keyword\">values</span> (值<span class=\"number\">1</span>, 值<span class=\"number\">2.</span>..);</span><br></pre></td></tr></table></figure></li>\n<li><p>注意：</p>\n<ol>\n<li>列名与值一一对应</li>\n<li>表名后无列名，根据定义顺序给所有列赋值</li>\n<li><strong>除数字类型</strong>，其他类型均用引号（单双引号均可）引起来</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>删除数据</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名 <span class=\"comment\">-- 删除表，并创建相同表结构的表，删除较为高效</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改数据</p>\n<p>语法</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名 <span class=\"keyword\">set</span> 列名<span class=\"number\">1</span> <span class=\"operator\">=</span> 值<span class=\"number\">1</span>, 列名<span class=\"number\">2</span> <span class=\"operator\">=</span> 值<span class=\"number\">2</span> ... [<span class=\"keyword\">where</span> 条件];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"DQL：查询表中的数据\"><a href=\"#DQL：查询表中的数据\" class=\"headerlink\" title=\"DQL：查询表中的数据\"></a>DQL：查询表中的数据</h2><ol>\n<li><p>语法</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\t标名列表</span><br><span class=\"line\">[<span class=\"keyword\">where</span></span><br><span class=\"line\">\t条件列表]</span><br><span class=\"line\">[<span class=\"keyword\">group</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t分组字段]</span><br><span class=\"line\">[<span class=\"keyword\">having</span></span><br><span class=\"line\">\t分组后的条件]</span><br><span class=\"line\">[<span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\t排序字段]</span><br><span class=\"line\">[limit</span><br><span class=\"line\">\t分页限定]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基础查询</p>\n<ol>\n<li><p>去重 distinct</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> 字段<span class=\"number\">1</span>,字段<span class=\"number\">2</span> <span class=\"keyword\">from</span> 表名 <span class=\"comment\">-- 记录结果集相同则会被去重</span></span><br></pre></td></tr></table></figure></li>\n<li><p>计算列</p>\n<ul>\n<li><p>可以使用四则运算计算列值</p>\n</li>\n<li><p>null操作函数  <strong>ifnull</strong> 字段为空的返回默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifnull(字段名，默认值) <span class=\"comment\">--</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>别名</p>\n<p>列名后加 “as 别名” ，as可省略</p>\n</li>\n</ol>\n</li>\n<li><p>条件查询</p>\n<ol>\n<li><p>where 后接条件</p>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>&gt; , &lt; , &gt;&#x3D;,  &lt;&#x3D; , &#x3D; , &lt;&gt;</p>\n</li>\n<li><p>BETEWEEN .. AND ..</p>\n</li>\n<li><p>IN (集合)</p>\n</li>\n<li><p>LIKE</p>\n<blockquote>\n<p>占位符</p>\n<ul>\n<li>_：单个字符</li>\n<li>%：多个字符</li>\n</ul>\n<p>部分可匹配</p>\n<p>马%  ：马云，马化腾</p>\n<p>_化%  ：马化腾</p>\n<p>___ : 马化腾 （三个字）</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<ul>\n<li>IS NULL</li>\n<li>AND 或 &amp;&amp;</li>\n<li>OR 或 ||</li>\n<li>not 或 !</li>\n</ul>\n</li>\n</ol>\n<p>部分等价SQL：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">&gt;=</span> <span class=\"number\">20</span> <span class=\"operator\">&amp;&amp;</span> age <span class=\"operator\">&lt;=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"keyword\">between</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"operator\">=</span> <span class=\"number\">18</span> <span class=\"keyword\">or</span> age <span class=\"operator\">=</span> <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> age <span class=\"keyword\">in</span> (<span class=\"number\">18</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查询空</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> english <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> english <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>排序查询</p>\n<ul>\n<li><p>语法： order by + 子句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 排序字段<span class=\"number\">1</span> 排序方式<span class=\"number\">1</span>，排序方式<span class=\"number\">2</span> 排序方式<span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n<li><p>排序方式</p>\n<p>ASC：升序，默认</p>\n<p>DESC ：降序</p>\n</li>\n</ul>\n<p>注意：多个排序条件时，前边条件相同，后边才生效</p>\n</li>\n<li><p>聚合查询：将一列作为一个整体，进行纵向计算</p>\n<ol>\n<li><p>count：计算数量</p>\n<ol>\n<li>一般选择非空列：主键</li>\n<li>count(*)</li>\n</ol>\n</li>\n<li><p>max：计算最大值</p>\n</li>\n<li><p>min：计算最小值</p>\n</li>\n<li><p>sum：计算和</p>\n</li>\n<li><p>avg：计算平均值</p>\n</li>\n</ol>\n<p>注意：聚合函数会排除null值，如<strong>count中不会包含null值</strong>，<strong>avg不会平均null</strong></p>\n<p>解决方式：</p>\n<ol>\n<li><p>选择非空的列</p>\n</li>\n<li><p>ifnull函数处理null值</p>\n</li>\n</ol>\n</li>\n<li><p>分组查询</p>\n<ol>\n<li><p>语法：group by + 分组字段</p>\n</li>\n<li><p>注意：</p>\n<ol>\n<li><p>分组后查询的字段仅可以为分组字段、聚合函数，其他字段MySQL不会报错，但没有意义</p>\n</li>\n<li><p>where和having区别</p>\n<ol>\n<li>where在分组前进行限定，不满足条件则不参与分组；having在分组之后进行限定不满足条件则不会被查询到；</li>\n<li>where 后不可以跟聚合函数，having可以进行聚合函数的判断</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sex, <span class=\"built_in\">avg</span>(math), <span class=\"built_in\">count</span>(id) 人数</span><br><span class=\"line\"><span class=\"keyword\">from</span> student </span><br><span class=\"line\"><span class=\"keyword\">where</span> math <span class=\"operator\">&gt;</span> <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sex</span><br><span class=\"line\"><span class=\"keyword\">having</span> 人数<span class=\"operator\">&gt;</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>分页查询</p>\n<ol>\n<li><p>语法 <strong>limit****方法为MySQL特有</strong></p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit 开始索引，每页条数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>开始索引 &#x3D; （当前页码 - 1） *  每页条数</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p>笛卡尔积：有两个集合A，B，去两集合的所有组成情况的集合，称之为笛卡尔积</p>\n<p>多表查询：</p>\n<ol>\n<li><p>内连接查询</p>\n<ol>\n<li><p>隐式内连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">\t,t2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\tt1.t2_id <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure></li>\n<li><p>显示内连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">[<span class=\"keyword\">INNER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- INNER关键字可省略，默认即为内连接</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>外连接查询</p>\n<ol>\n<li><p>左外连接</p>\n<p>查询左表所有数据，连接右表</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> [<span class=\"keyword\">OUTER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- OUTER关键字可省略</span></span><br></pre></td></tr></table></figure></li>\n<li><p>右外连接</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\">\t,t2.id</span><br><span class=\"line\">\t,t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> [<span class=\"keyword\">OUTER</span>] <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t2.id <span class=\"operator\">=</span> t1.t2_id; <span class=\"comment\">-- OUTER关键字可省略</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>子查询</p>\n<p>概念：查询中嵌套查询，成嵌套查询为子查询</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例如查询最高工资员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\t<span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\temp.salary <span class=\"operator\">=</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(salary) <span class=\"keyword\">FROM</span> emp</span><br><span class=\"line\">\t);</span><br></pre></td></tr></table></figure>\n\n<p><strong>子查询不同情况</strong></p>\n<ol>\n<li><p>子查询结果是单行单列</p>\n<p>子查询可以作为条件，使用运算符直接判断：&gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, &#x3D;</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">where</span> ti.t2_c <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>结果是多行单列</p>\n<p>子查询可以使用IN操作符处理</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\"><span class=\"keyword\">where</span> ti.t2_c <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> ...)</span><br></pre></td></tr></table></figure></li>\n<li><p>结果是多行多列</p>\n<p>子查询为多行多列可以被看作<strong>虚拟表</strong>，可以参与查询</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\tti.id</span><br><span class=\"line\">\t,ti.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tt1</span><br><span class=\"line\">\t,(<span class=\"keyword\">SELECT</span> ...) t2</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.c1 <span class=\"operator\">=</span> t2.c2;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>概念：一个包含多个步骤的业务操作被事务管理，要么同时成功，要么同时失败，不会成功一部分。</p>\n<h3 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><ol>\n<li><p>开启事务： start transaction;</p>\n</li>\n<li><p>回滚：rollback;</p>\n</li>\n<li><p>提交：commit；</p>\n</li>\n<li><p>MySQL数据库中事务默认自动提交</p>\n<p>一调DML语句会自动提交一次事务</p>\n<p>事务提交两种方式</p>\n<ul>\n<li><p>自动提交</p>\n<p>默认执行即自动提交</p>\n</li>\n<li><p>手动提交</p>\n<p>先开启事务，则需要手动提交</p>\n</li>\n</ul>\n<p><strong>事务的默认提交方式：</strong></p>\n<ul>\n<li><p>查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> @<span class=\"variable\">@autocommit</span>; <span class=\"comment\">-- 1 为默认自动提交</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>  @<span class=\"variable\">@autocommit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">-- 修改为默认不提交</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"事务的四大特征\"><a href=\"#事务的四大特征\" class=\"headerlink\" title=\"事务的四大特征\"></a>事务的四大特征</h3><ol>\n<li><p>原子性（Atomicity）</p>\n<p>是不可分割的最小操作单位，要么同时成功，要么同时失败</p>\n</li>\n<li><p>一致性（Consistency）</p>\n<p>事务操作前后数据库中的数据都是一致的、正确的</p>\n</li>\n<li><p>隔离性（Isolation）</p>\n</li>\n<li><p>持久性（Durability）</p>\n<p>事务提交活回滚后，数据库会持久的保存数据，无论断电还是重启，数据库都不会丢失提交操作</p>\n</li>\n</ol>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><p>概念：多个事务之间是隔离的，相互独立的。如果多个书屋操作同一批数据会引发冲突，通过设置不同的事务隔离级别来解决这些冲突。</p>\n<p><strong>事务冲突的类型：</strong></p>\n<ol>\n<li><p>脏读</p>\n<p>a事务读取到了b事务未提交的数据，b事务可能会将未提交的数据回滚</p>\n</li>\n<li><p>不可重复读（虚读）</p>\n<p>a事务读取某些数据，b事务操作了该数据并提交了修改，a事务再次读取时与第一次结果不一致</p>\n</li>\n<li><p>幻读</p>\n<p>不可重复读相似，a事务读取了某个范围内的数据，b事务插入了新的符合a事务选取条件的数据并提交，a事务再次读时发现与第一次读取时结果集不一致；</p>\n<p>通常演示时为a事务修改某表中某范围内数据，b事务插入符合a表筛选条件的数据并提交，a事务再次查询时返现修改范围内仍有数据</p>\n</li>\n</ol>\n<p><strong>隔离级别：</strong></p>\n<ol>\n<li><p>read uncommitted （读未提交）</p>\n<p>会产生问题：脏读，不可重复读，幻读</p>\n</li>\n<li><p>read committed（读已提交）（Oracle默认）</p>\n<p>会产生问题：不可重复读，幻读</p>\n</li>\n<li><p>repeatable read（可重复度） （MySQL默认）</p>\n<p>会产生问题：幻读</p>\n</li>\n<li><p>serializable（串行化）</p>\n<p>不会产生问题</p>\n</li>\n</ol>\n<p><em>注意</em>：上述隔离级别依次安全性越来越高，效率越来越低</p>\n<p><strong>查询隔离级别：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@tx_isolation</span>; <span class=\"comment\">-- 旧版</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@transaction_isolation</span>; <span class=\"comment\">-- 新版</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>设置隔离级别：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> transaction isolation level <span class=\"operator\">&lt;</span>隔离级别<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 断开连接重新连接才会生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> session transaction isolatin level <span class=\"operator\">&lt;</span>隔离级别<span class=\"operator\">&gt;</span>; <span class=\"comment\">-- 设置当前会话隔离级别</span></span><br></pre></td></tr></table></figure>\n"},{"title":"MySQL问题记录","date":"2024-07-02T14:10:53.000Z","_content":"# 时间查询与设置时间不同\n\n时区问题\n\n解决方法：\n\n1. 临时更改服务\n\n```sql\nset global time_zone = '+8:00'; ##修改mysql全局时区为北京时间，即我们所在的东8区\nset time_zone = '+8:00'; ##修改当前会话时区\nflush privileges; #立即生效\n```\n\n2. 更改配置\n\n```sql\nvim /etc/my.cnf  在[mysqld]区域中加上\n\ndefault-time_zone = '+8:00'\n\n/etc/init.d/mysqld restart ##重启mysql使新时区生效\n```\n\n3.\n\n这里，以php为例，在mysql_connect()下使用:\n\nmysql_query(\"SET time_zone = '+8:00'\")","source":"_posts/数据库/MySQL问题记录.md","raw":"---\ntitle: MySQL问题记录\ndate: 2024-07-02 22:10:53\ncategories:\n  - 数据库\ntags:\n  - MySQL\n---\n# 时间查询与设置时间不同\n\n时区问题\n\n解决方法：\n\n1. 临时更改服务\n\n```sql\nset global time_zone = '+8:00'; ##修改mysql全局时区为北京时间，即我们所在的东8区\nset time_zone = '+8:00'; ##修改当前会话时区\nflush privileges; #立即生效\n```\n\n2. 更改配置\n\n```sql\nvim /etc/my.cnf  在[mysqld]区域中加上\n\ndefault-time_zone = '+8:00'\n\n/etc/init.d/mysqld restart ##重启mysql使新时区生效\n```\n\n3.\n\n这里，以php为例，在mysql_connect()下使用:\n\nmysql_query(\"SET time_zone = '+8:00'\")","slug":"数据库/MySQL问题记录","published":1,"updated":"2024-07-02T14:11:21.254Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vh000z0ouyc8gnexve","content":"<h1 id=\"时间查询与设置时间不同\"><a href=\"#时间查询与设置时间不同\" class=\"headerlink\" title=\"时间查询与设置时间不同\"></a>时间查询与设置时间不同</h1><p>时区问题</p>\n<p>解决方法：</p>\n<ol>\n<li>临时更改服务</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span>; ##修改mysql全局时区为北京时间，即我们所在的东<span class=\"number\">8</span>区</span><br><span class=\"line\"><span class=\"keyword\">set</span> time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span>; ##修改当前会话时区</span><br><span class=\"line\">flush privileges; #立即生效</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更改配置</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"operator\">/</span>etc<span class=\"operator\">/</span>my.cnf  在[mysqld]区域中加上</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span><span class=\"operator\">-</span>time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span>etc<span class=\"operator\">/</span>init.d<span class=\"operator\">/</span>mysqld restart ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>这里，以php为例，在mysql_connect()下使用:</p>\n<p>mysql_query(“SET time_zone &#x3D; ‘+8:00’”)</p>\n","excerpt":"","more":"<h1 id=\"时间查询与设置时间不同\"><a href=\"#时间查询与设置时间不同\" class=\"headerlink\" title=\"时间查询与设置时间不同\"></a>时间查询与设置时间不同</h1><p>时区问题</p>\n<p>解决方法：</p>\n<ol>\n<li>临时更改服务</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span>; ##修改mysql全局时区为北京时间，即我们所在的东<span class=\"number\">8</span>区</span><br><span class=\"line\"><span class=\"keyword\">set</span> time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span>; ##修改当前会话时区</span><br><span class=\"line\">flush privileges; #立即生效</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更改配置</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"operator\">/</span>etc<span class=\"operator\">/</span>my.cnf  在[mysqld]区域中加上</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span><span class=\"operator\">-</span>time_zone <span class=\"operator\">=</span> <span class=\"string\">&#x27;+8:00&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span>etc<span class=\"operator\">/</span>init.d<span class=\"operator\">/</span>mysqld restart ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>这里，以php为例，在mysql_connect()下使用:</p>\n<p>mysql_query(“SET time_zone &#x3D; ‘+8:00’”)</p>\n"},{"title":"Navicat快捷键","date":"2024-07-02T14:05:18.000Z","_content":"\n##### 快捷键\n\n> 1.ctrl+q           打开查询窗口\n>\n> 2.ctrl+/            注释sql语句\n>\n> 3.ctrl+shift +/  解除注释\n>\n> 4.ctrl+r           运行查询窗口的sql语句\n>\n> 5.ctrl+shift+r   只运行选中的sql语句\n>\n> 6.F6               打开一个mysql命令行窗口\n>\n> 7.ctrl+l            删除一行\n>\n> 8.ctrl+n           打开一个新的查询窗口\n>\n> 9.ctrl+w          关闭一个查询窗口\n\n选择当前行\n\n> 当前行行首：Home\n\n> 当前行行尾：End\n\n> 当前文档首行：ctrl+Home\n\n> 当前文档尾行：ctrl+End\n\n选中当前行：\n\n> ① 按Home（定位到行首）然后按Shift+Dnd（行尾）   {从行首连选到行尾}\n>\n> ②按Home（定位到行首）然后按Shift+↓（向下箭头）\n\n选中上一行或多行：\n\n> 按Home（定位到行首）然后按Shift+↑\n\n作者：氨基钠\n链接：https://www.jianshu.com/p/3d3ec3983000\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/数据库/Navicat快捷键.md","raw":"---\ntitle: Navicat快捷键\ndate: 2024-07-02 22:05:18\ncategories:\n  - 数据库\ntags:\n  - 数据库客户端\n---\n\n##### 快捷键\n\n> 1.ctrl+q           打开查询窗口\n>\n> 2.ctrl+/            注释sql语句\n>\n> 3.ctrl+shift +/  解除注释\n>\n> 4.ctrl+r           运行查询窗口的sql语句\n>\n> 5.ctrl+shift+r   只运行选中的sql语句\n>\n> 6.F6               打开一个mysql命令行窗口\n>\n> 7.ctrl+l            删除一行\n>\n> 8.ctrl+n           打开一个新的查询窗口\n>\n> 9.ctrl+w          关闭一个查询窗口\n\n选择当前行\n\n> 当前行行首：Home\n\n> 当前行行尾：End\n\n> 当前文档首行：ctrl+Home\n\n> 当前文档尾行：ctrl+End\n\n选中当前行：\n\n> ① 按Home（定位到行首）然后按Shift+Dnd（行尾）   {从行首连选到行尾}\n>\n> ②按Home（定位到行首）然后按Shift+↓（向下箭头）\n\n选中上一行或多行：\n\n> 按Home（定位到行首）然后按Shift+↑\n\n作者：氨基钠\n链接：https://www.jianshu.com/p/3d3ec3983000\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"数据库/Navicat快捷键","published":1,"updated":"2024-07-02T14:05:59.911Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vi00130ouycwdkbzd5","content":"<h5 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h5><blockquote>\n<p>1.ctrl+q           打开查询窗口</p>\n<p>2.ctrl+&#x2F;            注释sql语句</p>\n<p>3.ctrl+shift +&#x2F;  解除注释</p>\n<p>4.ctrl+r           运行查询窗口的sql语句</p>\n<p>5.ctrl+shift+r   只运行选中的sql语句</p>\n<p>6.F6               打开一个mysql命令行窗口</p>\n<p>7.ctrl+l            删除一行</p>\n<p>8.ctrl+n           打开一个新的查询窗口</p>\n<p>9.ctrl+w          关闭一个查询窗口</p>\n</blockquote>\n<p>选择当前行</p>\n<blockquote>\n<p>当前行行首：Home</p>\n</blockquote>\n<blockquote>\n<p>当前行行尾：End</p>\n</blockquote>\n<blockquote>\n<p>当前文档首行：ctrl+Home</p>\n</blockquote>\n<blockquote>\n<p>当前文档尾行：ctrl+End</p>\n</blockquote>\n<p>选中当前行：</p>\n<blockquote>\n<p>① 按Home（定位到行首）然后按Shift+Dnd（行尾）   {从行首连选到行尾}</p>\n<p>②按Home（定位到行首）然后按Shift+↓（向下箭头）</p>\n</blockquote>\n<p>选中上一行或多行：</p>\n<blockquote>\n<p>按Home（定位到行首）然后按Shift+↑</p>\n</blockquote>\n<p>作者：氨基钠<br>链接：<a href=\"https://www.jianshu.com/p/3d3ec3983000\">https://www.jianshu.com/p/3d3ec3983000</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","excerpt":"","more":"<h5 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h5><blockquote>\n<p>1.ctrl+q           打开查询窗口</p>\n<p>2.ctrl+&#x2F;            注释sql语句</p>\n<p>3.ctrl+shift +&#x2F;  解除注释</p>\n<p>4.ctrl+r           运行查询窗口的sql语句</p>\n<p>5.ctrl+shift+r   只运行选中的sql语句</p>\n<p>6.F6               打开一个mysql命令行窗口</p>\n<p>7.ctrl+l            删除一行</p>\n<p>8.ctrl+n           打开一个新的查询窗口</p>\n<p>9.ctrl+w          关闭一个查询窗口</p>\n</blockquote>\n<p>选择当前行</p>\n<blockquote>\n<p>当前行行首：Home</p>\n</blockquote>\n<blockquote>\n<p>当前行行尾：End</p>\n</blockquote>\n<blockquote>\n<p>当前文档首行：ctrl+Home</p>\n</blockquote>\n<blockquote>\n<p>当前文档尾行：ctrl+End</p>\n</blockquote>\n<p>选中当前行：</p>\n<blockquote>\n<p>① 按Home（定位到行首）然后按Shift+Dnd（行尾）   {从行首连选到行尾}</p>\n<p>②按Home（定位到行首）然后按Shift+↓（向下箭头）</p>\n</blockquote>\n<p>选中上一行或多行：</p>\n<blockquote>\n<p>按Home（定位到行首）然后按Shift+↑</p>\n</blockquote>\n<p>作者：氨基钠<br>链接：<a href=\"https://www.jianshu.com/p/3d3ec3983000\">https://www.jianshu.com/p/3d3ec3983000</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"HTTP","date":"2024-07-02T14:30:25.000Z","_content":"### 特点：\n\n1. 基于TCP/IP协议\n2. 默认端口80\n3. 基于请求/相应模型：一次请求对应一次相应\n4. 无状态通信，每次请求间相互独立，不能交互数据\n\n### 版本\n\n1.0：每次请求完成后断开连接，下次请求建立新连接\n\n1.1：复用连接\n\n\n### 请求消息数据格式\n\n1. 请求行\n\n   > 请求方式    请求URL   请求协议/版本\n   >\n   > 如\n   >\n   > POST /login.html HTTP/1.1\n>\n2. 请求头\n\n   > 请求头名称：请求头值\n   >\n\n   常见头：\n\n    1. User-Agent: 标识浏览器信息\n    2. Regerer: 标识跳转来源\n    3. Accept: 可接收内容类型\n    4. Connection: 连接类型\n3. 请求空行\n\n   > 空行，用于分隔请求头和请求体\n>\n4. 请求体\n\n   规定Post类型请求允许请求体，实际可自行操作（部分框架不支持）\n\n\n## 请求与相应\n\n1. Request和Response对象是由服务器创建的，框架封装后提供给开发人员使用\n2. request对象获取请求消息，response对象来设置相应消息\n\n### 请求体Request\n\n1. 请求体体系：\n\n   ServletRequest    -- 接口\n\n        |\n\n   HttpServletRequest -- 接口\n\n        |\n\n   org.apache.catalina.connector.RequestFacede  -- 类（tomcat）\n2. 功能\n\n    1. 获取请求数据\n\n        1. 请求行数据\n\n           请求行\n\n           `GET /day14/demo1?name=lisi HTTP/1.1`\n\n            1. 获取请求方式`GET`\n\n               `String getMethod()`\n            2. 获取虚拟目录 `/day14`\n\n               `String getContextPath()`\n            3. 获取Servlet路径 `/demo1`\n\n               `String getServletPath()`\n            4. 获取get方式请求参数 `name=lisi`\n\n               `String getQueryString()`\n            5. 获取请求URI\n\n                * `String getRequestURI()`  `/day14/demo1`\n                * `StringBuffer getRequesURL()`  `http://locahost/day14/demo1`\n            6. 获取协议版本\n\n               `String getProtocol()`\n            7. 获取客户机IP\n\n               `String getRemoteAddr()`\n        2. 请求头数据\n\n            1. `String getHeader(String name) `\n\n               通过头名称获取值\n            2. `Enumeration<String> getHeaderNames()`\n\n               获取所有请求头名称\n        3. 请求体数据\n\n           步骤：\n\n            1. 获取流对象   **一般读取完毕不关闭流****，由容器控制**\n\n                * BufferReader getReader() : 获取字符输入流 ，只能操作字符数据\n                * ServletInputStream getInputStream() : 获取字节数据，可以操作所有类型数据\n            2. 从流对象中读取数据\n    2. 其他\n\n       中文乱码：以HTML编码标识类型进行解码\n\n       `request.setCharacterEncoding(\"utf-8\")`\n\n        1. 获取请求参数通用方式   **同时适用于get和post方式**\n\n            1. `String getParamter(String name)`\n\n               根据参数名称获取参数值\n            2. `String[] getParameterValues(String name)`\n\n               根据参数名称获取参数值，多用于复选框\n            3. `Enumeration<String> getParameterNames()`\n\n               获取所有请求的参数名称\n            4. `Map<String, String[]> getParameterMap()`\n\n               获取参数map\n        2. 请求转发\n\n           Servlet访问其他Servlet\n\n           步骤：\n\n            1. 通过request对象获取请求转发器对象\n\n               `RequestDispatcher getRequestDispatcher(String path)`\n            2. 使用dispatcher进行转发\n\n               `void forward(ServletRequest request, ServletResponse response)`\n\n           特点：\n\n            1. 浏览器地址栏路径不发生变化\n            2. 浏览器只进行了一次请求\n            3. 只能转发到容器内部资源中\n        3. 共享数据\n\n            * **域对象**：一个有作用范围的对象，可以在范围内共享数据\n            * requst域：代表一次请求的范围，一般用于请求转发的资源共享处理\n            * 方法：\n\n                1. `void setAttribute(String name, Object obj)`\n                2. `void getAttribute(String name)`\n                3. `void removeAttribute(String name)`\n        4. 获取ServletContext\n\n           request获取servletContext方法\n\n           `ServletContext getServletcontext()`\n","source":"_posts/java/web服务器/HTTP.md","raw":"---\ntitle: HTTP\ndate: 2024-07-02 22:30:25\ncategories:\n  - java\n  - web服务器\ntags:\n  - java\n  - http\n---\n### 特点：\n\n1. 基于TCP/IP协议\n2. 默认端口80\n3. 基于请求/相应模型：一次请求对应一次相应\n4. 无状态通信，每次请求间相互独立，不能交互数据\n\n### 版本\n\n1.0：每次请求完成后断开连接，下次请求建立新连接\n\n1.1：复用连接\n\n\n### 请求消息数据格式\n\n1. 请求行\n\n   > 请求方式    请求URL   请求协议/版本\n   >\n   > 如\n   >\n   > POST /login.html HTTP/1.1\n>\n2. 请求头\n\n   > 请求头名称：请求头值\n   >\n\n   常见头：\n\n    1. User-Agent: 标识浏览器信息\n    2. Regerer: 标识跳转来源\n    3. Accept: 可接收内容类型\n    4. Connection: 连接类型\n3. 请求空行\n\n   > 空行，用于分隔请求头和请求体\n>\n4. 请求体\n\n   规定Post类型请求允许请求体，实际可自行操作（部分框架不支持）\n\n\n## 请求与相应\n\n1. Request和Response对象是由服务器创建的，框架封装后提供给开发人员使用\n2. request对象获取请求消息，response对象来设置相应消息\n\n### 请求体Request\n\n1. 请求体体系：\n\n   ServletRequest    -- 接口\n\n        |\n\n   HttpServletRequest -- 接口\n\n        |\n\n   org.apache.catalina.connector.RequestFacede  -- 类（tomcat）\n2. 功能\n\n    1. 获取请求数据\n\n        1. 请求行数据\n\n           请求行\n\n           `GET /day14/demo1?name=lisi HTTP/1.1`\n\n            1. 获取请求方式`GET`\n\n               `String getMethod()`\n            2. 获取虚拟目录 `/day14`\n\n               `String getContextPath()`\n            3. 获取Servlet路径 `/demo1`\n\n               `String getServletPath()`\n            4. 获取get方式请求参数 `name=lisi`\n\n               `String getQueryString()`\n            5. 获取请求URI\n\n                * `String getRequestURI()`  `/day14/demo1`\n                * `StringBuffer getRequesURL()`  `http://locahost/day14/demo1`\n            6. 获取协议版本\n\n               `String getProtocol()`\n            7. 获取客户机IP\n\n               `String getRemoteAddr()`\n        2. 请求头数据\n\n            1. `String getHeader(String name) `\n\n               通过头名称获取值\n            2. `Enumeration<String> getHeaderNames()`\n\n               获取所有请求头名称\n        3. 请求体数据\n\n           步骤：\n\n            1. 获取流对象   **一般读取完毕不关闭流****，由容器控制**\n\n                * BufferReader getReader() : 获取字符输入流 ，只能操作字符数据\n                * ServletInputStream getInputStream() : 获取字节数据，可以操作所有类型数据\n            2. 从流对象中读取数据\n    2. 其他\n\n       中文乱码：以HTML编码标识类型进行解码\n\n       `request.setCharacterEncoding(\"utf-8\")`\n\n        1. 获取请求参数通用方式   **同时适用于get和post方式**\n\n            1. `String getParamter(String name)`\n\n               根据参数名称获取参数值\n            2. `String[] getParameterValues(String name)`\n\n               根据参数名称获取参数值，多用于复选框\n            3. `Enumeration<String> getParameterNames()`\n\n               获取所有请求的参数名称\n            4. `Map<String, String[]> getParameterMap()`\n\n               获取参数map\n        2. 请求转发\n\n           Servlet访问其他Servlet\n\n           步骤：\n\n            1. 通过request对象获取请求转发器对象\n\n               `RequestDispatcher getRequestDispatcher(String path)`\n            2. 使用dispatcher进行转发\n\n               `void forward(ServletRequest request, ServletResponse response)`\n\n           特点：\n\n            1. 浏览器地址栏路径不发生变化\n            2. 浏览器只进行了一次请求\n            3. 只能转发到容器内部资源中\n        3. 共享数据\n\n            * **域对象**：一个有作用范围的对象，可以在范围内共享数据\n            * requst域：代表一次请求的范围，一般用于请求转发的资源共享处理\n            * 方法：\n\n                1. `void setAttribute(String name, Object obj)`\n                2. `void getAttribute(String name)`\n                3. `void removeAttribute(String name)`\n        4. 获取ServletContext\n\n           request获取servletContext方法\n\n           `ServletContext getServletcontext()`\n","slug":"java/web服务器/HTTP","published":1,"updated":"2024-07-02T14:59:36.724Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vi00160ouyhdn1fwrn","content":"<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><ol>\n<li>基于TCP&#x2F;IP协议</li>\n<li>默认端口80</li>\n<li>基于请求&#x2F;相应模型：一次请求对应一次相应</li>\n<li>无状态通信，每次请求间相互独立，不能交互数据</li>\n</ol>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>1.0：每次请求完成后断开连接，下次请求建立新连接</p>\n<p>1.1：复用连接</p>\n<h3 id=\"请求消息数据格式\"><a href=\"#请求消息数据格式\" class=\"headerlink\" title=\"请求消息数据格式\"></a>请求消息数据格式</h3><ol>\n<li><p>请求行</p>\n<blockquote>\n<p>请求方式    请求URL   请求协议&#x2F;版本</p>\n<p>如</p>\n<p>POST &#x2F;login.html HTTP&#x2F;1.1</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"2\">\n<li><p>请求头</p>\n<blockquote>\n<p>请求头名称：请求头值</p>\n</blockquote>\n<p>常见头：</p>\n<ol>\n<li>User-Agent: 标识浏览器信息</li>\n<li>Regerer: 标识跳转来源</li>\n<li>Accept: 可接收内容类型</li>\n<li>Connection: 连接类型</li>\n</ol>\n</li>\n<li><p>请求空行</p>\n<blockquote>\n<p>空行，用于分隔请求头和请求体</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"4\">\n<li><p>请求体</p>\n<p>规定Post类型请求允许请求体，实际可自行操作（部分框架不支持）</p>\n</li>\n</ol>\n<h2 id=\"请求与相应\"><a href=\"#请求与相应\" class=\"headerlink\" title=\"请求与相应\"></a>请求与相应</h2><ol>\n<li>Request和Response对象是由服务器创建的，框架封装后提供给开发人员使用</li>\n<li>request对象获取请求消息，response对象来设置相应消息</li>\n</ol>\n<h3 id=\"请求体Request\"><a href=\"#请求体Request\" class=\"headerlink\" title=\"请求体Request\"></a>请求体Request</h3><ol>\n<li><p>请求体体系：</p>\n<p>ServletRequest    – 接口</p>\n<pre><code> |\n</code></pre>\n<p>HttpServletRequest – 接口</p>\n<pre><code> |\n</code></pre>\n<p>org.apache.catalina.connector.RequestFacede  – 类（tomcat）</p>\n</li>\n<li><p>功能</p>\n<ol>\n<li><p>获取请求数据</p>\n<ol>\n<li><p>请求行数据</p>\n<p>请求行</p>\n<p><code>GET /day14/demo1?name=lisi HTTP/1.1</code></p>\n<ol>\n<li><p>获取请求方式<code>GET</code></p>\n<p><code>String getMethod()</code></p>\n</li>\n<li><p>获取虚拟目录 <code>/day14</code></p>\n<p><code>String getContextPath()</code></p>\n</li>\n<li><p>获取Servlet路径 <code>/demo1</code></p>\n<p><code>String getServletPath()</code></p>\n</li>\n<li><p>获取get方式请求参数 <code>name=lisi</code></p>\n<p><code>String getQueryString()</code></p>\n</li>\n<li><p>获取请求URI</p>\n<ul>\n<li><code>String getRequestURI()</code>  <code>/day14/demo1</code></li>\n<li><code>StringBuffer getRequesURL()</code>  <code>http://locahost/day14/demo1</code></li>\n</ul>\n</li>\n<li><p>获取协议版本</p>\n<p><code>String getProtocol()</code></p>\n</li>\n<li><p>获取客户机IP</p>\n<p><code>String getRemoteAddr()</code></p>\n</li>\n</ol>\n</li>\n<li><p>请求头数据</p>\n<ol>\n<li><p><code>String getHeader(String name) </code></p>\n<p>通过头名称获取值</p>\n</li>\n<li><p><code>Enumeration&lt;String&gt; getHeaderNames()</code></p>\n<p>获取所有请求头名称</p>\n</li>\n</ol>\n</li>\n<li><p>请求体数据</p>\n<p>步骤：</p>\n<ol>\n<li><p>获取流对象   <strong>一般读取完毕不关闭流****，由容器控制</strong></p>\n<ul>\n<li>BufferReader getReader() : 获取字符输入流 ，只能操作字符数据</li>\n<li>ServletInputStream getInputStream() : 获取字节数据，可以操作所有类型数据</li>\n</ul>\n</li>\n<li><p>从流对象中读取数据</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>其他</p>\n<p>中文乱码：以HTML编码标识类型进行解码</p>\n<p><code>request.setCharacterEncoding(&quot;utf-8&quot;)</code></p>\n<ol>\n<li><p>获取请求参数通用方式   <strong>同时适用于get和post方式</strong></p>\n<ol>\n<li><p><code>String getParamter(String name)</code></p>\n<p>根据参数名称获取参数值</p>\n</li>\n<li><p><code>String[] getParameterValues(String name)</code></p>\n<p>根据参数名称获取参数值，多用于复选框</p>\n</li>\n<li><p><code>Enumeration&lt;String&gt; getParameterNames()</code></p>\n<p>获取所有请求的参数名称</p>\n</li>\n<li><p><code>Map&lt;String, String[]&gt; getParameterMap()</code></p>\n<p>获取参数map</p>\n</li>\n</ol>\n</li>\n<li><p>请求转发</p>\n<p>Servlet访问其他Servlet</p>\n<p>步骤：</p>\n<ol>\n<li><p>通过request对象获取请求转发器对象</p>\n<p><code>RequestDispatcher getRequestDispatcher(String path)</code></p>\n</li>\n<li><p>使用dispatcher进行转发</p>\n<p><code>void forward(ServletRequest request, ServletResponse response)</code></p>\n</li>\n</ol>\n<p>特点：</p>\n<ol>\n<li>浏览器地址栏路径不发生变化</li>\n<li>浏览器只进行了一次请求</li>\n<li>只能转发到容器内部资源中</li>\n</ol>\n</li>\n<li><p>共享数据</p>\n<ul>\n<li><p><strong>域对象</strong>：一个有作用范围的对象，可以在范围内共享数据</p>\n</li>\n<li><p>requst域：代表一次请求的范围，一般用于请求转发的资源共享处理</p>\n</li>\n<li><p>方法：</p>\n<ol>\n<li><code>void setAttribute(String name, Object obj)</code></li>\n<li><code>void getAttribute(String name)</code></li>\n<li><code>void removeAttribute(String name)</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>获取ServletContext</p>\n<p>request获取servletContext方法</p>\n<p><code>ServletContext getServletcontext()</code></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><ol>\n<li>基于TCP&#x2F;IP协议</li>\n<li>默认端口80</li>\n<li>基于请求&#x2F;相应模型：一次请求对应一次相应</li>\n<li>无状态通信，每次请求间相互独立，不能交互数据</li>\n</ol>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>1.0：每次请求完成后断开连接，下次请求建立新连接</p>\n<p>1.1：复用连接</p>\n<h3 id=\"请求消息数据格式\"><a href=\"#请求消息数据格式\" class=\"headerlink\" title=\"请求消息数据格式\"></a>请求消息数据格式</h3><ol>\n<li><p>请求行</p>\n<blockquote>\n<p>请求方式    请求URL   请求协议&#x2F;版本</p>\n<p>如</p>\n<p>POST &#x2F;login.html HTTP&#x2F;1.1</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"2\">\n<li><p>请求头</p>\n<blockquote>\n<p>请求头名称：请求头值</p>\n</blockquote>\n<p>常见头：</p>\n<ol>\n<li>User-Agent: 标识浏览器信息</li>\n<li>Regerer: 标识跳转来源</li>\n<li>Accept: 可接收内容类型</li>\n<li>Connection: 连接类型</li>\n</ol>\n</li>\n<li><p>请求空行</p>\n<blockquote>\n<p>空行，用于分隔请求头和请求体</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"4\">\n<li><p>请求体</p>\n<p>规定Post类型请求允许请求体，实际可自行操作（部分框架不支持）</p>\n</li>\n</ol>\n<h2 id=\"请求与相应\"><a href=\"#请求与相应\" class=\"headerlink\" title=\"请求与相应\"></a>请求与相应</h2><ol>\n<li>Request和Response对象是由服务器创建的，框架封装后提供给开发人员使用</li>\n<li>request对象获取请求消息，response对象来设置相应消息</li>\n</ol>\n<h3 id=\"请求体Request\"><a href=\"#请求体Request\" class=\"headerlink\" title=\"请求体Request\"></a>请求体Request</h3><ol>\n<li><p>请求体体系：</p>\n<p>ServletRequest    – 接口</p>\n<pre><code> |\n</code></pre>\n<p>HttpServletRequest – 接口</p>\n<pre><code> |\n</code></pre>\n<p>org.apache.catalina.connector.RequestFacede  – 类（tomcat）</p>\n</li>\n<li><p>功能</p>\n<ol>\n<li><p>获取请求数据</p>\n<ol>\n<li><p>请求行数据</p>\n<p>请求行</p>\n<p><code>GET /day14/demo1?name=lisi HTTP/1.1</code></p>\n<ol>\n<li><p>获取请求方式<code>GET</code></p>\n<p><code>String getMethod()</code></p>\n</li>\n<li><p>获取虚拟目录 <code>/day14</code></p>\n<p><code>String getContextPath()</code></p>\n</li>\n<li><p>获取Servlet路径 <code>/demo1</code></p>\n<p><code>String getServletPath()</code></p>\n</li>\n<li><p>获取get方式请求参数 <code>name=lisi</code></p>\n<p><code>String getQueryString()</code></p>\n</li>\n<li><p>获取请求URI</p>\n<ul>\n<li><code>String getRequestURI()</code>  <code>/day14/demo1</code></li>\n<li><code>StringBuffer getRequesURL()</code>  <code>http://locahost/day14/demo1</code></li>\n</ul>\n</li>\n<li><p>获取协议版本</p>\n<p><code>String getProtocol()</code></p>\n</li>\n<li><p>获取客户机IP</p>\n<p><code>String getRemoteAddr()</code></p>\n</li>\n</ol>\n</li>\n<li><p>请求头数据</p>\n<ol>\n<li><p><code>String getHeader(String name) </code></p>\n<p>通过头名称获取值</p>\n</li>\n<li><p><code>Enumeration&lt;String&gt; getHeaderNames()</code></p>\n<p>获取所有请求头名称</p>\n</li>\n</ol>\n</li>\n<li><p>请求体数据</p>\n<p>步骤：</p>\n<ol>\n<li><p>获取流对象   <strong>一般读取完毕不关闭流****，由容器控制</strong></p>\n<ul>\n<li>BufferReader getReader() : 获取字符输入流 ，只能操作字符数据</li>\n<li>ServletInputStream getInputStream() : 获取字节数据，可以操作所有类型数据</li>\n</ul>\n</li>\n<li><p>从流对象中读取数据</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>其他</p>\n<p>中文乱码：以HTML编码标识类型进行解码</p>\n<p><code>request.setCharacterEncoding(&quot;utf-8&quot;)</code></p>\n<ol>\n<li><p>获取请求参数通用方式   <strong>同时适用于get和post方式</strong></p>\n<ol>\n<li><p><code>String getParamter(String name)</code></p>\n<p>根据参数名称获取参数值</p>\n</li>\n<li><p><code>String[] getParameterValues(String name)</code></p>\n<p>根据参数名称获取参数值，多用于复选框</p>\n</li>\n<li><p><code>Enumeration&lt;String&gt; getParameterNames()</code></p>\n<p>获取所有请求的参数名称</p>\n</li>\n<li><p><code>Map&lt;String, String[]&gt; getParameterMap()</code></p>\n<p>获取参数map</p>\n</li>\n</ol>\n</li>\n<li><p>请求转发</p>\n<p>Servlet访问其他Servlet</p>\n<p>步骤：</p>\n<ol>\n<li><p>通过request对象获取请求转发器对象</p>\n<p><code>RequestDispatcher getRequestDispatcher(String path)</code></p>\n</li>\n<li><p>使用dispatcher进行转发</p>\n<p><code>void forward(ServletRequest request, ServletResponse response)</code></p>\n</li>\n</ol>\n<p>特点：</p>\n<ol>\n<li>浏览器地址栏路径不发生变化</li>\n<li>浏览器只进行了一次请求</li>\n<li>只能转发到容器内部资源中</li>\n</ol>\n</li>\n<li><p>共享数据</p>\n<ul>\n<li><p><strong>域对象</strong>：一个有作用范围的对象，可以在范围内共享数据</p>\n</li>\n<li><p>requst域：代表一次请求的范围，一般用于请求转发的资源共享处理</p>\n</li>\n<li><p>方法：</p>\n<ol>\n<li><code>void setAttribute(String name, Object obj)</code></li>\n<li><code>void getAttribute(String name)</code></li>\n<li><code>void removeAttribute(String name)</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>获取ServletContext</p>\n<p>request获取servletContext方法</p>\n<p><code>ServletContext getServletcontext()</code></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"租房注意","date":"2024-07-02T14:12:00.000Z","_content":"1. 周围树多，春夏可能多飞虫\n2. 偏僻地段，暖气是否为土暖\n3. 隔音\n4. 通风管道是否有单向阀门\n5. 热水\n6. 电费计价\n7. 服务费内容，物品损坏怎么算\n8. 暖气费多少，最低温度低于18度投诉、拒缴费用，正常应在20度以上","source":"_posts/沙堆/租房注意.md","raw":"---\ntitle: 租房注意\ndate: 2024-07-02 22:12:00\ncategories:\ntags:\n  - 租房\n---\n1. 周围树多，春夏可能多飞虫\n2. 偏僻地段，暖气是否为土暖\n3. 隔音\n4. 通风管道是否有单向阀门\n5. 热水\n6. 电费计价\n7. 服务费内容，物品损坏怎么算\n8. 暖气费多少，最低温度低于18度投诉、拒缴费用，正常应在20度以上","slug":"沙堆/租房注意","published":1,"updated":"2024-07-02T14:12:27.481Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vl001d0ouy54e83u51","content":"<ol>\n<li>周围树多，春夏可能多飞虫</li>\n<li>偏僻地段，暖气是否为土暖</li>\n<li>隔音</li>\n<li>通风管道是否有单向阀门</li>\n<li>热水</li>\n<li>电费计价</li>\n<li>服务费内容，物品损坏怎么算</li>\n<li>暖气费多少，最低温度低于18度投诉、拒缴费用，正常应在20度以上</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>周围树多，春夏可能多飞虫</li>\n<li>偏僻地段，暖气是否为土暖</li>\n<li>隔音</li>\n<li>通风管道是否有单向阀门</li>\n<li>热水</li>\n<li>电费计价</li>\n<li>服务费内容，物品损坏怎么算</li>\n<li>暖气费多少，最低温度低于18度投诉、拒缴费用，正常应在20度以上</li>\n</ol>\n"},{"title":"Servlet","date":"2024-07-02T15:01:14.000Z","_content":"\n概念：运行在服务器端的的小程序\n\n* Servlet就是一个接口，定义了被web容器识别的规则\n\n\n### 快速入门\n\n### 数据流转过程\n\n1. 服务器接收到客户端请求，解析URL路径，获取访问的Servlet资源路径\n2. 在`web.xml`中的`url-pattern`查找相应路径，并找到相应类\n3. 执行类的响应方法\n\n\n### Servelet声明周期\n\nServlet为单例，定义成员变量可能有线程安全问题\n\n```java\n// 初始化，执行一次  \nvoid init(ServletConfig var1) throws ServletException;\n// 获取配置，可不实现\nServletConfig getServletConfig();\n// 提供服务，多次执行\nvoid service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n// 获取服务信息，可不实现\nString getServletInfo();\n// 销毁方法，容器被正常关闭时执行\nvoid destroy();\n```\n\n\n### Servlet3.0\n\n优势：\n\n* 支持注解配置\n\n\n步骤：\n\n1. 创建javaEE项目，选择`Servlet3.0`以上版本，可以不创建`web.xml`\n2. 实现Servlet接口\n3. 使用`@webServlet`进行配置\n\n    ```java\n    @WebServlet(\"/servlet3demo\")\n    ```\n4. Servlet相关配置\n\n    1. urlPatterns: 可以配置多个\n\n        ```java\n        @WebServlet({\"/servlet3demo\",\"/demo\"})\n        ```\n    2. 路径定义规则\n\n        1. `/xxx`直接路径\n        2. `/xxx/xxx` 多层路径\n        3. `*.xxx` 带.xxx的路径\n\n\n#### Servlet体系结构\n\n`Servlet`-- 接口\n\n|\n\n`GenericServlet`-- 抽象类\n\n|\n\n`HttpServlet`-- 抽象类\n\n1. `GenericServlet`\n\n   将`Servlet`其他方法做了默认实现，`service()`方法抽象，需要实现\n2. `HttpServlet`  对http协议的封装实现，简化了操作\n\n   覆写`doGet()`,`doPost()`等方法执行相应http操作","source":"_posts/java/web服务器/Servlet.md","raw":"---\ntitle: Servlet\ndate: 2024-07-02 23:01:14\ncategories:\n  - java\n  - web服务器\ntags:\n  - java\n  - servlet\n---\n\n概念：运行在服务器端的的小程序\n\n* Servlet就是一个接口，定义了被web容器识别的规则\n\n\n### 快速入门\n\n### 数据流转过程\n\n1. 服务器接收到客户端请求，解析URL路径，获取访问的Servlet资源路径\n2. 在`web.xml`中的`url-pattern`查找相应路径，并找到相应类\n3. 执行类的响应方法\n\n\n### Servelet声明周期\n\nServlet为单例，定义成员变量可能有线程安全问题\n\n```java\n// 初始化，执行一次  \nvoid init(ServletConfig var1) throws ServletException;\n// 获取配置，可不实现\nServletConfig getServletConfig();\n// 提供服务，多次执行\nvoid service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n// 获取服务信息，可不实现\nString getServletInfo();\n// 销毁方法，容器被正常关闭时执行\nvoid destroy();\n```\n\n\n### Servlet3.0\n\n优势：\n\n* 支持注解配置\n\n\n步骤：\n\n1. 创建javaEE项目，选择`Servlet3.0`以上版本，可以不创建`web.xml`\n2. 实现Servlet接口\n3. 使用`@webServlet`进行配置\n\n    ```java\n    @WebServlet(\"/servlet3demo\")\n    ```\n4. Servlet相关配置\n\n    1. urlPatterns: 可以配置多个\n\n        ```java\n        @WebServlet({\"/servlet3demo\",\"/demo\"})\n        ```\n    2. 路径定义规则\n\n        1. `/xxx`直接路径\n        2. `/xxx/xxx` 多层路径\n        3. `*.xxx` 带.xxx的路径\n\n\n#### Servlet体系结构\n\n`Servlet`-- 接口\n\n|\n\n`GenericServlet`-- 抽象类\n\n|\n\n`HttpServlet`-- 抽象类\n\n1. `GenericServlet`\n\n   将`Servlet`其他方法做了默认实现，`service()`方法抽象，需要实现\n2. `HttpServlet`  对http协议的封装实现，简化了操作\n\n   覆写`doGet()`,`doPost()`等方法执行相应http操作","slug":"java/web服务器/Servlet","published":1,"updated":"2024-07-02T15:02:04.539Z","comments":1,"layout":"post","photos":[],"_id":"cly7d19vn001l0ouyf4yzgijm","content":"<p>概念：运行在服务器端的的小程序</p>\n<ul>\n<li>Servlet就是一个接口，定义了被web容器识别的规则</li>\n</ul>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><h3 id=\"数据流转过程\"><a href=\"#数据流转过程\" class=\"headerlink\" title=\"数据流转过程\"></a>数据流转过程</h3><ol>\n<li>服务器接收到客户端请求，解析URL路径，获取访问的Servlet资源路径</li>\n<li>在<code>web.xml</code>中的<code>url-pattern</code>查找相应路径，并找到相应类</li>\n<li>执行类的响应方法</li>\n</ol>\n<h3 id=\"Servelet声明周期\"><a href=\"#Servelet声明周期\" class=\"headerlink\" title=\"Servelet声明周期\"></a>Servelet声明周期</h3><p>Servlet为单例，定义成员变量可能有线程安全问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化，执行一次  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException;</span><br><span class=\"line\"><span class=\"comment\">// 获取配置，可不实现</span></span><br><span class=\"line\">ServletConfig <span class=\"title function_\">getServletConfig</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 提供服务，多次执行</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException;</span><br><span class=\"line\"><span class=\"comment\">// 获取服务信息，可不实现</span></span><br><span class=\"line\">String <span class=\"title function_\">getServletInfo</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 销毁方法，容器被正常关闭时执行</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Servlet3-0\"><a href=\"#Servlet3-0\" class=\"headerlink\" title=\"Servlet3.0\"></a>Servlet3.0</h3><p>优势：</p>\n<ul>\n<li>支持注解配置</li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li><p>创建javaEE项目，选择<code>Servlet3.0</code>以上版本，可以不创建<code>web.xml</code></p>\n</li>\n<li><p>实现Servlet接口</p>\n</li>\n<li><p>使用<code>@webServlet</code>进行配置</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/servlet3demo&quot;)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Servlet相关配置</p>\n<ol>\n<li><p>urlPatterns: 可以配置多个</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&#123;&quot;/servlet3demo&quot;,&quot;/demo&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>路径定义规则</p>\n<ol>\n<li><code>/xxx</code>直接路径</li>\n<li><code>/xxx/xxx</code> 多层路径</li>\n<li><code>*.xxx</code> 带.xxx的路径</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"Servlet体系结构\"><a href=\"#Servlet体系结构\" class=\"headerlink\" title=\"Servlet体系结构\"></a>Servlet体系结构</h4><p><code>Servlet</code>– 接口</p>\n<p>|</p>\n<p><code>GenericServlet</code>– 抽象类</p>\n<p>|</p>\n<p><code>HttpServlet</code>– 抽象类</p>\n<ol>\n<li><p><code>GenericServlet</code></p>\n<p>将<code>Servlet</code>其他方法做了默认实现，<code>service()</code>方法抽象，需要实现</p>\n</li>\n<li><p><code>HttpServlet</code>  对http协议的封装实现，简化了操作</p>\n<p>覆写<code>doGet()</code>,<code>doPost()</code>等方法执行相应http操作</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>概念：运行在服务器端的的小程序</p>\n<ul>\n<li>Servlet就是一个接口，定义了被web容器识别的规则</li>\n</ul>\n<h3 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h3><h3 id=\"数据流转过程\"><a href=\"#数据流转过程\" class=\"headerlink\" title=\"数据流转过程\"></a>数据流转过程</h3><ol>\n<li>服务器接收到客户端请求，解析URL路径，获取访问的Servlet资源路径</li>\n<li>在<code>web.xml</code>中的<code>url-pattern</code>查找相应路径，并找到相应类</li>\n<li>执行类的响应方法</li>\n</ol>\n<h3 id=\"Servelet声明周期\"><a href=\"#Servelet声明周期\" class=\"headerlink\" title=\"Servelet声明周期\"></a>Servelet声明周期</h3><p>Servlet为单例，定义成员变量可能有线程安全问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化，执行一次  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException;</span><br><span class=\"line\"><span class=\"comment\">// 获取配置，可不实现</span></span><br><span class=\"line\">ServletConfig <span class=\"title function_\">getServletConfig</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 提供服务，多次执行</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException;</span><br><span class=\"line\"><span class=\"comment\">// 获取服务信息，可不实现</span></span><br><span class=\"line\">String <span class=\"title function_\">getServletInfo</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 销毁方法，容器被正常关闭时执行</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Servlet3-0\"><a href=\"#Servlet3-0\" class=\"headerlink\" title=\"Servlet3.0\"></a>Servlet3.0</h3><p>优势：</p>\n<ul>\n<li>支持注解配置</li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li><p>创建javaEE项目，选择<code>Servlet3.0</code>以上版本，可以不创建<code>web.xml</code></p>\n</li>\n<li><p>实现Servlet接口</p>\n</li>\n<li><p>使用<code>@webServlet</code>进行配置</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/servlet3demo&quot;)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Servlet相关配置</p>\n<ol>\n<li><p>urlPatterns: 可以配置多个</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&#123;&quot;/servlet3demo&quot;,&quot;/demo&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li>\n<li><p>路径定义规则</p>\n<ol>\n<li><code>/xxx</code>直接路径</li>\n<li><code>/xxx/xxx</code> 多层路径</li>\n<li><code>*.xxx</code> 带.xxx的路径</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"Servlet体系结构\"><a href=\"#Servlet体系结构\" class=\"headerlink\" title=\"Servlet体系结构\"></a>Servlet体系结构</h4><p><code>Servlet</code>– 接口</p>\n<p>|</p>\n<p><code>GenericServlet</code>– 抽象类</p>\n<p>|</p>\n<p><code>HttpServlet</code>– 抽象类</p>\n<ol>\n<li><p><code>GenericServlet</code></p>\n<p>将<code>Servlet</code>其他方法做了默认实现，<code>service()</code>方法抽象，需要实现</p>\n</li>\n<li><p><code>HttpServlet</code>  对http协议的封装实现，简化了操作</p>\n<p>覆写<code>doGet()</code>,<code>doPost()</code>等方法执行相应http操作</p>\n</li>\n</ol>\n"},{"title":"树相关问题","date":"2024-07-04T14:23:48.000Z","_content":"\n[修剪二叉搜索树](../题目/修剪二叉搜索树)[](./题目/修剪二叉搜索树.md)\n\n这个题，还是在强调，问题本身，就是答案的核心，三种遍历都是递归，而递归的本质就是用相同的方式处理子问题，做完#776后，可以再感受一下，做这种二叉树的题目，什么是第一要素。\n\n原本想着，是不是先要用low或者用high做约束，然后二分搜索到某一个特定节点，再嫁接之类的，或者用中序遍历性质，再怎么怎么处理。如果这么想，其实是固定了对BST的处理模式，陷入到这个模式这个题目就不太好做，反而要打开思路，看看root的值和给的low-high范围有啥关系。\n\n打开思路以后，其实就会发现，root可能会在范围内，也有可能不在，讨论一下：\n\n1. 如果在范围内，那么说明root是要保留的，也就是说不用处理root，处理左右子树就可以了。\n2. 如果不再范围内，假如root-val > low，且根据BST性质，就会发现，左子树和root都在区间外，要保留的只可能是处理后的右子树。\n\n所以，做这种题，就是**先考虑**：\n\n1. 是否能用题目的定义\n2. 如果可以用，那么是否可以用题目定义处理子问题（子树）\n3. 如果可以处理子问题，是否可以用子问题结果凑出原定义\n\n多说一句，因为本身题目给的API就是问题的答案，如果可以凑出来，实际上就是求解过程。\n\n```java\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        if (!root) return nullptr;\n\n      //root节点值不再范围内的两种讨论\n        if (root->val < low) return trimBST(root->right, low, high);\n        if (root->val > high) return trimBST(root->left, low, high);\n    //在范围内，那么分别讨论左右子树的修剪\n        root->left = trimBST(root->left, low, high);\n        root->right = trimBST(root->right, low, high);\n//保留root\n        return root;\n\n    }\n};\n```\n","source":"_posts/算法/树相关问题.md","raw":"---\ntitle: 树相关问题\ndate: 2024-07-04 22:23:48\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 树\n---\n\n[修剪二叉搜索树](../题目/修剪二叉搜索树)[](./题目/修剪二叉搜索树.md)\n\n这个题，还是在强调，问题本身，就是答案的核心，三种遍历都是递归，而递归的本质就是用相同的方式处理子问题，做完#776后，可以再感受一下，做这种二叉树的题目，什么是第一要素。\n\n原本想着，是不是先要用low或者用high做约束，然后二分搜索到某一个特定节点，再嫁接之类的，或者用中序遍历性质，再怎么怎么处理。如果这么想，其实是固定了对BST的处理模式，陷入到这个模式这个题目就不太好做，反而要打开思路，看看root的值和给的low-high范围有啥关系。\n\n打开思路以后，其实就会发现，root可能会在范围内，也有可能不在，讨论一下：\n\n1. 如果在范围内，那么说明root是要保留的，也就是说不用处理root，处理左右子树就可以了。\n2. 如果不再范围内，假如root-val > low，且根据BST性质，就会发现，左子树和root都在区间外，要保留的只可能是处理后的右子树。\n\n所以，做这种题，就是**先考虑**：\n\n1. 是否能用题目的定义\n2. 如果可以用，那么是否可以用题目定义处理子问题（子树）\n3. 如果可以处理子问题，是否可以用子问题结果凑出原定义\n\n多说一句，因为本身题目给的API就是问题的答案，如果可以凑出来，实际上就是求解过程。\n\n```java\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        if (!root) return nullptr;\n\n      //root节点值不再范围内的两种讨论\n        if (root->val < low) return trimBST(root->right, low, high);\n        if (root->val > high) return trimBST(root->left, low, high);\n    //在范围内，那么分别讨论左右子树的修剪\n        root->left = trimBST(root->left, low, high);\n        root->right = trimBST(root->right, low, high);\n//保留root\n        return root;\n\n    }\n};\n```\n","slug":"算法/树相关问题","published":1,"updated":"2024-07-04T14:33:01.716Z","_id":"cly7d3xfk0000fsuyc0oi8j6o","comments":1,"layout":"post","photos":[],"content":"<p><a href=\"../%E9%A2%98%E7%9B%AE/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\">修剪二叉搜索树</a><a href=\"./%E9%A2%98%E7%9B%AE/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md\"></a></p>\n<p>这个题，还是在强调，问题本身，就是答案的核心，三种遍历都是递归，而递归的本质就是用相同的方式处理子问题，做完#776后，可以再感受一下，做这种二叉树的题目，什么是第一要素。</p>\n<p>原本想着，是不是先要用low或者用high做约束，然后二分搜索到某一个特定节点，再嫁接之类的，或者用中序遍历性质，再怎么怎么处理。如果这么想，其实是固定了对BST的处理模式，陷入到这个模式这个题目就不太好做，反而要打开思路，看看root的值和给的low-high范围有啥关系。</p>\n<p>打开思路以后，其实就会发现，root可能会在范围内，也有可能不在，讨论一下：</p>\n<ol>\n<li>如果在范围内，那么说明root是要保留的，也就是说不用处理root，处理左右子树就可以了。</li>\n<li>如果不再范围内，假如root-val &gt; low，且根据BST性质，就会发现，左子树和root都在区间外，要保留的只可能是处理后的右子树。</li>\n</ol>\n<p>所以，做这种题，就是<strong>先考虑</strong>：</p>\n<ol>\n<li>是否能用题目的定义</li>\n<li>如果可以用，那么是否可以用题目定义处理子问题（子树）</li>\n<li>如果可以处理子问题，是否可以用子问题结果凑出原定义</li>\n</ol>\n<p>多说一句，因为本身题目给的API就是问题的答案，如果可以凑出来，实际上就是求解过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    TreeNode* trimBST(TreeNode* root, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//root节点值不再范围内的两种讨论</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;val &lt; low) <span class=\"keyword\">return</span> trimBST(root-&gt;right, low, high);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;val &gt; high) <span class=\"keyword\">return</span> trimBST(root-&gt;left, low, high);</span><br><span class=\"line\">    <span class=\"comment\">//在范围内，那么分别讨论左右子树的修剪</span></span><br><span class=\"line\">        root-&gt;left = trimBST(root-&gt;left, low, high);</span><br><span class=\"line\">        root-&gt;right = trimBST(root-&gt;right, low, high);</span><br><span class=\"line\"><span class=\"comment\">//保留root</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"../%E9%A2%98%E7%9B%AE/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\">修剪二叉搜索树</a><a href=\"./%E9%A2%98%E7%9B%AE/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md\"></a></p>\n<p>这个题，还是在强调，问题本身，就是答案的核心，三种遍历都是递归，而递归的本质就是用相同的方式处理子问题，做完#776后，可以再感受一下，做这种二叉树的题目，什么是第一要素。</p>\n<p>原本想着，是不是先要用low或者用high做约束，然后二分搜索到某一个特定节点，再嫁接之类的，或者用中序遍历性质，再怎么怎么处理。如果这么想，其实是固定了对BST的处理模式，陷入到这个模式这个题目就不太好做，反而要打开思路，看看root的值和给的low-high范围有啥关系。</p>\n<p>打开思路以后，其实就会发现，root可能会在范围内，也有可能不在，讨论一下：</p>\n<ol>\n<li>如果在范围内，那么说明root是要保留的，也就是说不用处理root，处理左右子树就可以了。</li>\n<li>如果不再范围内，假如root-val &gt; low，且根据BST性质，就会发现，左子树和root都在区间外，要保留的只可能是处理后的右子树。</li>\n</ol>\n<p>所以，做这种题，就是<strong>先考虑</strong>：</p>\n<ol>\n<li>是否能用题目的定义</li>\n<li>如果可以用，那么是否可以用题目定义处理子问题（子树）</li>\n<li>如果可以处理子问题，是否可以用子问题结果凑出原定义</li>\n</ol>\n<p>多说一句，因为本身题目给的API就是问题的答案，如果可以凑出来，实际上就是求解过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    TreeNode* trimBST(TreeNode* root, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//root节点值不再范围内的两种讨论</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;val &lt; low) <span class=\"keyword\">return</span> trimBST(root-&gt;right, low, high);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;val &gt; high) <span class=\"keyword\">return</span> trimBST(root-&gt;left, low, high);</span><br><span class=\"line\">    <span class=\"comment\">//在范围内，那么分别讨论左右子树的修剪</span></span><br><span class=\"line\">        root-&gt;left = trimBST(root-&gt;left, low, high);</span><br><span class=\"line\">        root-&gt;right = trimBST(root-&gt;right, low, high);</span><br><span class=\"line\"><span class=\"comment\">//保留root</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"修剪二叉搜索树","date":"2024-07-04T13:35:41.000Z","_content":"\n给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。\n\n所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。\n\n\n示例 1：\n\n![image.png](./img/修剪二叉搜索树1.png)\n\n![image.png](./img/修剪二叉搜索树2.png)\n\n输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n输出：[3,2,null,1]\n \n\n> 提示：\n>\n> 树中节点数在范围 [1, 10^4^] 内 0 <= Node.val <= 10^4^ 树中每个节点的值都是 唯一 的> 题目数据保证输入是一棵有效的二叉搜索树 0 <= low <= high <= 10^4^\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/trim-a-binary-search-tree\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n输入：root = [1,0,2], low = 1, high = 2\n输出：[1,null,2]\n示例 2：","source":"_posts/算法/题目/修剪二叉搜索树.md","raw":"---\ntitle: 修剪二叉搜索树\ndate: 2024-07-04 21:35:41\ncategories:\n  - 算法\n  - 题目\ntags:\n  - 二叉树\n---\n\n给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。\n\n所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。\n\n\n示例 1：\n\n![image.png](./img/修剪二叉搜索树1.png)\n\n![image.png](./img/修剪二叉搜索树2.png)\n\n输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n输出：[3,2,null,1]\n \n\n> 提示：\n>\n> 树中节点数在范围 [1, 10^4^] 内 0 <= Node.val <= 10^4^ 树中每个节点的值都是 唯一 的> 题目数据保证输入是一棵有效的二叉搜索树 0 <= low <= high <= 10^4^\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/trim-a-binary-search-tree\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n输入：root = [1,0,2], low = 1, high = 2\n输出：[1,null,2]\n示例 2：","slug":"算法/题目/修剪二叉搜索树","published":1,"updated":"2024-07-04T14:40:37.207Z","_id":"cly7d3xfo0001fsuy0ue41npw","comments":1,"layout":"post","photos":[],"content":"<p>给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。</p>\n<p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p>\n<p>示例 1：</p>\n<p><img src=\"/hexo-blog/./img/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%911.png\" alt=\"image.png\"></p>\n<p><img src=\"/hexo-blog/./img/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912.png\" alt=\"image.png\"></p>\n<p>输入：root &#x3D; [3,0,4,null,2,null,null,1], low &#x3D; 1, high &#x3D; 3<br>输出：[3,2,null,1]\n </p>\n<blockquote>\n<p>提示：</p>\n<p>树中节点数在范围 [1, 10^4^] 内 0 &lt;&#x3D; Node.val &lt;&#x3D; 10^4^ 树中每个节点的值都是 唯一 的&gt; 题目数据保证输入是一棵有效的二叉搜索树 0 &lt;&#x3D; low &lt;&#x3D; high &lt;&#x3D; 10^4^</p>\n</blockquote>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/trim-a-binary-search-tree\">https://leetcode.cn/problems/trim-a-binary-search-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>输入：root &#x3D; [1,0,2], low &#x3D; 1, high &#x3D; 2<br>输出：[1,null,2]<br>示例 2：</p>\n","excerpt":"","more":"<p>给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。</p>\n<p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p>\n<p>示例 1：</p>\n<p><img src=\"/hexo-blog/./img/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%911.png\" alt=\"image.png\"></p>\n<p><img src=\"/hexo-blog/./img/%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912.png\" alt=\"image.png\"></p>\n<p>输入：root &#x3D; [3,0,4,null,2,null,null,1], low &#x3D; 1, high &#x3D; 3<br>输出：[3,2,null,1]\n </p>\n<blockquote>\n<p>提示：</p>\n<p>树中节点数在范围 [1, 10^4^] 内 0 &lt;&#x3D; Node.val &lt;&#x3D; 10^4^ 树中每个节点的值都是 唯一 的&gt; 题目数据保证输入是一棵有效的二叉搜索树 0 &lt;&#x3D; low &lt;&#x3D; high &lt;&#x3D; 10^4^</p>\n</blockquote>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/trim-a-binary-search-tree\">https://leetcode.cn/problems/trim-a-binary-search-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>输入：root &#x3D; [1,0,2], low &#x3D; 1, high &#x3D; 2<br>输出：[1,null,2]<br>示例 2：</p>\n"},{"title":"所思所梦","date":"2024-07-04T14:41:13.000Z","_content":"\n# 做人做事\n不知其然而为之，是为**赤子之心**，知其然而为之，是为**知行合一**。  \n赤子之心激烈如火、光芒四射，但是与多数人差别过大，容易被周围人、事所影响，难以长久（以年计）保持，需要天赋和际遇来保持  \n\n知行合一需要用心探索和很多际遇、经历才能达到。明知前途，依旧如此  \n\n纯解释器架构的大模型很难有思考能力，个人观点认为其涌现能力、生成能力都是基于丰富样本的学习，见多识广，并且模仿能力足够强。可以以此为背景写一篇玄幻\n主题小说，天道或绝世大能设局，引后世天骄入局，以其性命、灵魂等等之类（抽象为样本），铸就**（抽象为人工智能或天道）\n\n迷信是以前的科学，科学不过是现在的迷信\n\n# 练手项目\n## 越辩越明\nThe more you argue, the more you understand.\n\n**描述**\n\n可以在主页添加问题，问题分为【判断问题】和【开放性讨论】。判断问题可以创建问题答案，基于答案【是、否、中庸等】，为下面分支添加问题，答案的票数决定哪条分支生效，单个问题一人一票，可以在任何答案上赞成或反对，不生效的分支将被置灰，不可以在对子级投票，但可以为其本身投票 。开发性讨论可以自由添加回答\n\n**灵感**\n\n1. 问题可以添加父问题，超过问题票数 10% 人同意则成功添加父问题\n2. 问题单个答案投票占比超过90%时，其他答案分支（包括中庸分支）将失效，答案投票比例低于 1% 本答案分支将失效。失效答案本身闪烁效果，可以继续被投票，失效分支子级置灰，被投票、评论时将提示“这没有意义”\n3. 问题下可进行评论，并可以对问题添加答案，【判断问题】答案需要投票高于 1% 才会生效，生效前将为置灰状态\n4. 问题答案将至少有三个，只有两个答案会提示“通常问题不止两面”并自动添加答案【中庸】，【中庸】不可以被当做自定义答案，为【中庸】投票即为多样性投票，相当于增加其他所有分支票数\n5. 子问题（即使失效）可以为【脱离父问题】、【更改至父问题】投票，票数达到 100 且占分支投票人 10% 以上 且大于反对人数时可以脱离父问题成为根问题或迁移至其他问题\n\n","source":"_posts/沙堆/所思所梦.md","raw":"---\ntitle: 所思所梦\ndate: 2024-07-04 22:41:13\ncategories:\ntags:\n  - 文学\n  - 思考\n  - 哲学\n---\n\n# 做人做事\n不知其然而为之，是为**赤子之心**，知其然而为之，是为**知行合一**。  \n赤子之心激烈如火、光芒四射，但是与多数人差别过大，容易被周围人、事所影响，难以长久（以年计）保持，需要天赋和际遇来保持  \n\n知行合一需要用心探索和很多际遇、经历才能达到。明知前途，依旧如此  \n\n纯解释器架构的大模型很难有思考能力，个人观点认为其涌现能力、生成能力都是基于丰富样本的学习，见多识广，并且模仿能力足够强。可以以此为背景写一篇玄幻\n主题小说，天道或绝世大能设局，引后世天骄入局，以其性命、灵魂等等之类（抽象为样本），铸就**（抽象为人工智能或天道）\n\n迷信是以前的科学，科学不过是现在的迷信\n\n# 练手项目\n## 越辩越明\nThe more you argue, the more you understand.\n\n**描述**\n\n可以在主页添加问题，问题分为【判断问题】和【开放性讨论】。判断问题可以创建问题答案，基于答案【是、否、中庸等】，为下面分支添加问题，答案的票数决定哪条分支生效，单个问题一人一票，可以在任何答案上赞成或反对，不生效的分支将被置灰，不可以在对子级投票，但可以为其本身投票 。开发性讨论可以自由添加回答\n\n**灵感**\n\n1. 问题可以添加父问题，超过问题票数 10% 人同意则成功添加父问题\n2. 问题单个答案投票占比超过90%时，其他答案分支（包括中庸分支）将失效，答案投票比例低于 1% 本答案分支将失效。失效答案本身闪烁效果，可以继续被投票，失效分支子级置灰，被投票、评论时将提示“这没有意义”\n3. 问题下可进行评论，并可以对问题添加答案，【判断问题】答案需要投票高于 1% 才会生效，生效前将为置灰状态\n4. 问题答案将至少有三个，只有两个答案会提示“通常问题不止两面”并自动添加答案【中庸】，【中庸】不可以被当做自定义答案，为【中庸】投票即为多样性投票，相当于增加其他所有分支票数\n5. 子问题（即使失效）可以为【脱离父问题】、【更改至父问题】投票，票数达到 100 且占分支投票人 10% 以上 且大于反对人数时可以脱离父问题成为根问题或迁移至其他问题\n\n","slug":"沙堆/所思所梦","published":1,"updated":"2024-12-15T16:04:46.348Z","_id":"cly7e80a00000jwuyfjfg8jut","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"做人做事\"><a href=\"#做人做事\" class=\"headerlink\" title=\"做人做事\"></a>做人做事</h1><p>不知其然而为之，是为<strong>赤子之心</strong>，知其然而为之，是为<strong>知行合一</strong>。<br>赤子之心激烈如火、光芒四射，但是与多数人差别过大，容易被周围人、事所影响，难以长久（以年计）保持，需要天赋和际遇来保持  </p>\n<p>知行合一需要用心探索和很多际遇、经历才能达到。明知前途，依旧如此  </p>\n<p>纯解释器架构的大模型很难有思考能力，个人观点认为其涌现能力、生成能力都是基于丰富样本的学习，见多识广，并且模仿能力足够强。可以以此为背景写一篇玄幻<br>主题小说，天道或绝世大能设局，引后世天骄入局，以其性命、灵魂等等之类（抽象为样本），铸就**（抽象为人工智能或天道）</p>\n<p>迷信是以前的科学，科学不过是现在的迷信</p>\n<h1 id=\"练手项目\"><a href=\"#练手项目\" class=\"headerlink\" title=\"练手项目\"></a>练手项目</h1><h2 id=\"越辩越明\"><a href=\"#越辩越明\" class=\"headerlink\" title=\"越辩越明\"></a>越辩越明</h2><p>The more you argue, the more you understand.</p>\n<p><strong>描述</strong></p>\n<p>可以在主页添加问题，问题分为【判断问题】和【开放性讨论】。判断问题可以创建问题答案，基于答案【是、否、中庸等】，为下面分支添加问题，答案的票数决定哪条分支生效，单个问题一人一票，可以在任何答案上赞成或反对，不生效的分支将被置灰，不可以在对子级投票，但可以为其本身投票 。开发性讨论可以自由添加回答</p>\n<p><strong>灵感</strong></p>\n<ol>\n<li>问题可以添加父问题，超过问题票数 10% 人同意则成功添加父问题</li>\n<li>问题单个答案投票占比超过90%时，其他答案分支（包括中庸分支）将失效，答案投票比例低于 1% 本答案分支将失效。失效答案本身闪烁效果，可以继续被投票，失效分支子级置灰，被投票、评论时将提示“这没有意义”</li>\n<li>问题下可进行评论，并可以对问题添加答案，【判断问题】答案需要投票高于 1% 才会生效，生效前将为置灰状态</li>\n<li>问题答案将至少有三个，只有两个答案会提示“通常问题不止两面”并自动添加答案【中庸】，【中庸】不可以被当做自定义答案，为【中庸】投票即为多样性投票，相当于增加其他所有分支票数</li>\n<li>子问题（即使失效）可以为【脱离父问题】、【更改至父问题】投票，票数达到 100 且占分支投票人 10% 以上 且大于反对人数时可以脱离父问题成为根问题或迁移至其他问题</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"做人做事\"><a href=\"#做人做事\" class=\"headerlink\" title=\"做人做事\"></a>做人做事</h1><p>不知其然而为之，是为<strong>赤子之心</strong>，知其然而为之，是为<strong>知行合一</strong>。<br>赤子之心激烈如火、光芒四射，但是与多数人差别过大，容易被周围人、事所影响，难以长久（以年计）保持，需要天赋和际遇来保持  </p>\n<p>知行合一需要用心探索和很多际遇、经历才能达到。明知前途，依旧如此  </p>\n<p>纯解释器架构的大模型很难有思考能力，个人观点认为其涌现能力、生成能力都是基于丰富样本的学习，见多识广，并且模仿能力足够强。可以以此为背景写一篇玄幻<br>主题小说，天道或绝世大能设局，引后世天骄入局，以其性命、灵魂等等之类（抽象为样本），铸就**（抽象为人工智能或天道）</p>\n<p>迷信是以前的科学，科学不过是现在的迷信</p>\n<h1 id=\"练手项目\"><a href=\"#练手项目\" class=\"headerlink\" title=\"练手项目\"></a>练手项目</h1><h2 id=\"越辩越明\"><a href=\"#越辩越明\" class=\"headerlink\" title=\"越辩越明\"></a>越辩越明</h2><p>The more you argue, the more you understand.</p>\n<p><strong>描述</strong></p>\n<p>可以在主页添加问题，问题分为【判断问题】和【开放性讨论】。判断问题可以创建问题答案，基于答案【是、否、中庸等】，为下面分支添加问题，答案的票数决定哪条分支生效，单个问题一人一票，可以在任何答案上赞成或反对，不生效的分支将被置灰，不可以在对子级投票，但可以为其本身投票 。开发性讨论可以自由添加回答</p>\n<p><strong>灵感</strong></p>\n<ol>\n<li>问题可以添加父问题，超过问题票数 10% 人同意则成功添加父问题</li>\n<li>问题单个答案投票占比超过90%时，其他答案分支（包括中庸分支）将失效，答案投票比例低于 1% 本答案分支将失效。失效答案本身闪烁效果，可以继续被投票，失效分支子级置灰，被投票、评论时将提示“这没有意义”</li>\n<li>问题下可进行评论，并可以对问题添加答案，【判断问题】答案需要投票高于 1% 才会生效，生效前将为置灰状态</li>\n<li>问题答案将至少有三个，只有两个答案会提示“通常问题不止两面”并自动添加答案【中庸】，【中庸】不可以被当做自定义答案，为【中庸】投票即为多样性投票，相当于增加其他所有分支票数</li>\n<li>子问题（即使失效）可以为【脱离父问题】、【更改至父问题】投票，票数达到 100 且占分支投票人 10% 以上 且大于反对人数时可以脱离父问题成为根问题或迁移至其他问题</li>\n</ol>\n"},{"title":"二分法","date":"2024-07-04T14:39:30.000Z","_content":"\n说明：\n\n在有序序列问题中使用，通过两个指针标识搜索范围，判断范围内中位值的情况来调整前指针或后指针\n\n使用场景：\n\n1. 有序序列\n\n   如，在有序序列`[1,3, 4,5, 6, 7]`查找是否包含`5`\n2. 定性序列\n\n   如，在序列`[-1,-5,-8,0,3,1,2]`（0之前为负数，之后为正数）中查找`0`的位置\n\n   ((20220825214901-enh5050 '找到 K 个最接近的元素'))\n\n\n\n> 思路：\n>\n> 在二维数组中，横向有序，纵向有序，可以拓展出**四分法**\n>\n> 同理，三维数组中，可以拓展出八分法","source":"_posts/算法/二分法.md","raw":"---\ntitle: 二分法\ndate: 2024-07-04 22:39:30\ncategories:\n  - 算法\ntags:\n  - 二分法\n---\n\n说明：\n\n在有序序列问题中使用，通过两个指针标识搜索范围，判断范围内中位值的情况来调整前指针或后指针\n\n使用场景：\n\n1. 有序序列\n\n   如，在有序序列`[1,3, 4,5, 6, 7]`查找是否包含`5`\n2. 定性序列\n\n   如，在序列`[-1,-5,-8,0,3,1,2]`（0之前为负数，之后为正数）中查找`0`的位置\n\n   ((20220825214901-enh5050 '找到 K 个最接近的元素'))\n\n\n\n> 思路：\n>\n> 在二维数组中，横向有序，纵向有序，可以拓展出**四分法**\n>\n> 同理，三维数组中，可以拓展出八分法","slug":"算法/二分法","published":1,"updated":"2024-07-04T14:40:37.201Z","comments":1,"layout":"post","photos":[],"_id":"cly7e80ab0001jwuy00kl1nv1","content":"<p>说明：</p>\n<p>在有序序列问题中使用，通过两个指针标识搜索范围，判断范围内中位值的情况来调整前指针或后指针</p>\n<p>使用场景：</p>\n<ol>\n<li><p>有序序列</p>\n<p>如，在有序序列<code>[1,3, 4,5, 6, 7]</code>查找是否包含<code>5</code></p>\n</li>\n<li><p>定性序列</p>\n<p>如，在序列<code>[-1,-5,-8,0,3,1,2]</code>（0之前为负数，之后为正数）中查找<code>0</code>的位置</p>\n<p>((20220825214901-enh5050 ‘找到 K 个最接近的元素’))</p>\n</li>\n</ol>\n<blockquote>\n<p>思路：</p>\n<p>在二维数组中，横向有序，纵向有序，可以拓展出<strong>四分法</strong></p>\n<p>同理，三维数组中，可以拓展出八分法</p>\n</blockquote>\n","excerpt":"","more":"<p>说明：</p>\n<p>在有序序列问题中使用，通过两个指针标识搜索范围，判断范围内中位值的情况来调整前指针或后指针</p>\n<p>使用场景：</p>\n<ol>\n<li><p>有序序列</p>\n<p>如，在有序序列<code>[1,3, 4,5, 6, 7]</code>查找是否包含<code>5</code></p>\n</li>\n<li><p>定性序列</p>\n<p>如，在序列<code>[-1,-5,-8,0,3,1,2]</code>（0之前为负数，之后为正数）中查找<code>0</code>的位置</p>\n<p>((20220825214901-enh5050 ‘找到 K 个最接近的元素’))</p>\n</li>\n</ol>\n<blockquote>\n<p>思路：</p>\n<p>在二维数组中，横向有序，纵向有序，可以拓展出<strong>四分法</strong></p>\n<p>同理，三维数组中，可以拓展出八分法</p>\n</blockquote>\n"},{"title":"好子集的数目","date":"2024-07-04T15:00:22.000Z","_content":"\n相关：((20220211222938-s27tjea \"动态规划\"))，此外还可以使用数学方法进行归纳\n\n\n给你一个整数数组 `nums` 。如果 `nums` 的一个子集中，所有元素的乘积可以表示为一个或多个**互不相同的质数**的乘积，那么我们称它为**好子集** 。\n\n比方说，如果 `nums = [1, 2, 3, 4]` ：\n`[2, 3]` ，`[1, 2, 3]` 和 `[1, 3]` 是 好 子集，乘积分别为 `6 = 2 * 3`  ，`6 = 2 * 3`和 `3 = 3` 。\n`[1, 4]` 和 `[4]` 不是 好 子集，因为乘积分别为 `4 = 2 * 2` 和 `4 = 2 * 2` 。\n请你返回 `nums` 中不同的 好 子集的数目对  $ 10^9 + 7 $ 取余 的结果。\n\n`nums` 中的 子集 是通过删除 `nums` 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的**下标不同**，那么它们被视为**不同的子集**。\n\n\n**示例 1：**\n\n输入：nums = [1,2,3,4]\n输出：6\n解释：好子集为：\n\n* [1,2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n* [1,3]：乘积为 3 ，可以表示为质数 3 的乘积。\n* [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n* [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n\n**示例 2：**\n\n输入：nums = [4,2,3,15]\n输出：5\n解释：好子集为：\n\n* [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。\n* [2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。\n* [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n* [15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。<br />\n\n提示：\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 30\n\n\n*来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/the-number-of-good-subsets\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*\n\n\n# 解答\n\n**数学方法**\n\n根据子集数量公式递推获得，推导和调试均较为耗时，代码注释已经较为全面\n\n大致思路为，统计每个数字出现的次数，根据每个数字不同特性进行分类处理，分为**质数**，**合数**，**合数组合**\n\n*注意： 取模运算并不会影响加法和乘法，可以随时进行*\n\n```java\nclass Solution {\n    public int numberOfGoodSubsets(int[] nums) {\n        int[] except = new int[]{4, 8, 9, 12, 16, 18, 20, 24, 25, 27, 28};\n        int[] nonprimes = new int[]{6, 10, 14, 15, 21, 22, 26, 30};\n        // 分类计算使用\n        int[] primes = new int[]{ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n\n\n        int[] numCount = new int[31];\n        // 统计数目\n        for (int i : nums){\n            numCount[i]++;\n        }\n\n        long mod = (long)1e9 + 7;\n        long result = 0;\n        long temp = 0;\n        // 计算质数组成的序列数目\n        // 假设质数 a有n个， 质数 b有m个，则好子集数目为 n * (m + 1) + m 个，因为相当于每个a都会对应b的每种情况（包含没有b，工m+1种情况），再加上不含a的m种情况，即 (n + 1)*(m + 1) - 1,两种列式对应不同的初始值，前一种初始值为0，后一种为1，且后一种需要在计算完全部乘法后再减一\n        for (int i : primes){\n            // temp *= (numCount[i] + 1);\n            temp = temp * (numCount[i] + 1) + numCount[i];\n            temp %= mod;\n        }\n        result += temp;\n        result %= mod;\n        System.out.println(result);\n\n        // 计算合数\n        // 合数的情况与质数稍有差别，除了不能与其因子组合，好子集中必须存在该合数，因为不存在该合数的情况已在质数中计算\n        // 假设质数共有n中情况，合数有m个，则好子集个数为m * n + m\n        for (int i : nonprimes){\n            if (numCount[i] == 0) continue;\n            temp = 0;\n            for (int j : primes){\n                if (i % j == 0) continue;\n                temp = temp * (numCount[j] + 1) + numCount[j];\n                temp %= mod;\n            //System.out.println(\"temp:\" + temp + \"_\" + j);\n            }\n            result += ((temp + 1) * numCount[i]);\n            result %= mod;\n        }\n        System.out.println(result);\n\n        // 合数组合 公式与合数相同，同样好子集中必须存在组合\n        //没找到简单寻找可以组合的方式，手写了\n        // 10 21, 14 15, 15 22, 15 26, 21 22, 21 26\n        int [][] composeNonprimes = new int[][]{{10, 21}, {14, 15}, {15, 22}, {15, 26}, {21, 22}, {21, 26}};\n\n        for (int[] composeNonprime : composeNonprimes){\n            if (numCount[composeNonprime[0]] == 0 || numCount[composeNonprime[1]] == 0) continue;\n            temp = 0;\n            for (int i : primes){\n                if (composeNonprime[0] % i == 0 || composeNonprime[1] % i == 0) continue;\n                temp = temp * (numCount[i] + 1) + numCount[i];\n                temp %= mod;\n            }\n            result += ((temp + 1) * numCount[composeNonprime[0]] * numCount[composeNonprime[1]]);\n            result %= mod;\n        }\n  \n        for (int i = 0; i < numCount[1]; i++){\n            result = 2 * result % mod;\n        }\n        //result *= (long)Math.pow(2, numCount[1]);\n        return (int)result;\n    }\n}\n```\n\n\n**动态规划解法**\n\n状态压缩动态规划\n\n\n思路与算法\n\n注意到题目规定数组`nums` 中的元素不超过 30，因此我们可以将 [1, 30] 中的整数分成如下三类：\n\n* $1$：对于任意一个好子集而言，我们添加任意数目的 1，得到的新子集仍然是好子集；\n\n* $2,3,5,6,7,10,11,13,14,15,17,19,21,22,23,26,29,30$：这些数均不包含平方因子，因此每个数在好子集中至多出现一次；\n\n* $4,8,9,12,16,18,20,24,25,27,28$：这些数包含平方因子，因此一定不能在好子集中出现。\n\n我们可以通过硬编码的方式把$[1,30]$ 中的整数按照上述分类，也可以先预处理出所有$[1,30]$ 中质数$ 2,3,5,7,11,13,17,19,23,29$，再通过试除的方式动态分类。\n\n分类完成后，我们就可以考虑动态规划了。由于每个质因数只能出现一次，并且 $[1,30] $中一共有 10 个质数，因此我们可以用一个长度为 $10$ 的二进制数`mask` 表示这些质因数的使用情况，其中 `mask`  的第 `i` 位为 `1` 当且仅当第 `i` 个质数已经被使用过。\n\n这样一来，我们定义 $f[i][mask]$ 表示当我们只选择$[2,i]$ 范围内的数，并且选择的数的质因数使用情况为 `mask `时的方案数。如果 `i` 本身包含平方因子，那么我们无法选择 `i`，相当于在 $[2, i-1]$ 范围内选择，状态转移方程为：\n\n$$\nf[i][mask]=f[i−1][mask]\n$$\n\n如果 `i` 本身不包含平方因子，记其包含的质因子的二进制表示为 $subset$（同样可以通过试除的方法得到），那么状态转移方程为：\n\n$$\nf[i][mask]=f[i−1][mask]+f[i−1][mask \\ subset]×freq[i]\n$$\n\n其中：\n\n$freq[i]$ 表示数组 $nums$ 中 $i$ 出现的次数；\n\n$mask\\ subset$ 表示从二进制表示 $mask$ 中去除所有在 $subset$ 中出现的 $1$，可以使用按位异或运算实现。这里需要保证 $subset $是 $mask$ 的子集，可以使用按位与运算来判断。\n\n动态规划的边界条件为：\n\n$$\nf[1][0]=2^{freq[1]}\n$$\n\n即每一个在数组 $nums$ 中出现的 1 都可以选或不选。最终的答案即为所有 $f[30][..]$ 中除了 $f[30][0]$ 以外的项的总和。\n\n**细节**\n\n注意到$f[i][mask]$ 只会从 $f[i-1][..]$ 转移而来，并且 $f[i−1][..]$ 中的下标总是小于 $mask$，因此我们可以使用类似$0−1$ 背包的空间优化方法，在遍历 $mask$ 时从 $2^{10}$ 的一维数组做状态转移了。\n\n\n```java\nclass Solution {\n    static final int[] PRIMES = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    static final int NUM_MAX = 30;\n    static final int MOD = 1000000007;\n\n    public int numberOfGoodSubsets(int[] nums) {\n        int[] freq = new int[NUM_MAX + 1];\n        for (int num : nums) {\n            ++freq[num];\n        }\n\n        int[] f = new int[1 << PRIMES.length];\n        f[0] = 1;\n        for (int i = 0; i < freq[1]; ++i) {\n            f[0] = f[0] * 2 % MOD;\n        }\n  \n        for (int i = 2; i <= NUM_MAX; ++i) {\n            if (freq[i] == 0) {\n                continue;\n            }\n    \n            // 检查 i 的每个质因数是否均不超过 1 个\n            int subset = 0, x = i;\n            boolean check = true;\n            for (int j = 0; j < PRIMES.length; ++j) {\n                int prime = PRIMES[j];\n                if (x % ( * prime) == 0) {\n                    check = false;\n                    break;\n                }\n                if (x % prime == 0) {\n                    subset |= (1 << j);\n                }\n            }\n            if (!check) {\n                continue;\n            }\n\n            // 动态规划\n            for (int mask = (1 << PRIMES.length) - 1; mask > 0; --mask) {\n                if ((mask & subset) == subset) {\n                    f[mask] = (int) ((f[mask] + ((long) f[mask ^ subset]) * freq[i]) % MOD);\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int mask = 1, maskMax = (1 << PRIMES.length); mask < maskMax; ++mask) {\n            ans = (ans + f[mask]) % MOD;\n        }\n  \n        return ans;\n    }\n}\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/the-number-of-good-subsets/solution/hao-zi-ji-de-shu-mu-by-leetcode-solution-ky65/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n```\n","source":"_posts/算法/题目/好子集的数目.md","raw":"---\ntitle: 好子集的数目\ndate: 2024-07-04 23:00:22\ncategories:\n  - 算法\n  - 题目\ntags:\n---\n\n相关：((20220211222938-s27tjea \"动态规划\"))，此外还可以使用数学方法进行归纳\n\n\n给你一个整数数组 `nums` 。如果 `nums` 的一个子集中，所有元素的乘积可以表示为一个或多个**互不相同的质数**的乘积，那么我们称它为**好子集** 。\n\n比方说，如果 `nums = [1, 2, 3, 4]` ：\n`[2, 3]` ，`[1, 2, 3]` 和 `[1, 3]` 是 好 子集，乘积分别为 `6 = 2 * 3`  ，`6 = 2 * 3`和 `3 = 3` 。\n`[1, 4]` 和 `[4]` 不是 好 子集，因为乘积分别为 `4 = 2 * 2` 和 `4 = 2 * 2` 。\n请你返回 `nums` 中不同的 好 子集的数目对  $ 10^9 + 7 $ 取余 的结果。\n\n`nums` 中的 子集 是通过删除 `nums` 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的**下标不同**，那么它们被视为**不同的子集**。\n\n\n**示例 1：**\n\n输入：nums = [1,2,3,4]\n输出：6\n解释：好子集为：\n\n* [1,2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n* [1,3]：乘积为 3 ，可以表示为质数 3 的乘积。\n* [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n* [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n\n**示例 2：**\n\n输入：nums = [4,2,3,15]\n输出：5\n解释：好子集为：\n\n* [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n* [2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。\n* [2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。\n* [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n* [15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。<br />\n\n提示：\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 30\n\n\n*来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/the-number-of-good-subsets\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*\n\n\n# 解答\n\n**数学方法**\n\n根据子集数量公式递推获得，推导和调试均较为耗时，代码注释已经较为全面\n\n大致思路为，统计每个数字出现的次数，根据每个数字不同特性进行分类处理，分为**质数**，**合数**，**合数组合**\n\n*注意： 取模运算并不会影响加法和乘法，可以随时进行*\n\n```java\nclass Solution {\n    public int numberOfGoodSubsets(int[] nums) {\n        int[] except = new int[]{4, 8, 9, 12, 16, 18, 20, 24, 25, 27, 28};\n        int[] nonprimes = new int[]{6, 10, 14, 15, 21, 22, 26, 30};\n        // 分类计算使用\n        int[] primes = new int[]{ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n\n\n        int[] numCount = new int[31];\n        // 统计数目\n        for (int i : nums){\n            numCount[i]++;\n        }\n\n        long mod = (long)1e9 + 7;\n        long result = 0;\n        long temp = 0;\n        // 计算质数组成的序列数目\n        // 假设质数 a有n个， 质数 b有m个，则好子集数目为 n * (m + 1) + m 个，因为相当于每个a都会对应b的每种情况（包含没有b，工m+1种情况），再加上不含a的m种情况，即 (n + 1)*(m + 1) - 1,两种列式对应不同的初始值，前一种初始值为0，后一种为1，且后一种需要在计算完全部乘法后再减一\n        for (int i : primes){\n            // temp *= (numCount[i] + 1);\n            temp = temp * (numCount[i] + 1) + numCount[i];\n            temp %= mod;\n        }\n        result += temp;\n        result %= mod;\n        System.out.println(result);\n\n        // 计算合数\n        // 合数的情况与质数稍有差别，除了不能与其因子组合，好子集中必须存在该合数，因为不存在该合数的情况已在质数中计算\n        // 假设质数共有n中情况，合数有m个，则好子集个数为m * n + m\n        for (int i : nonprimes){\n            if (numCount[i] == 0) continue;\n            temp = 0;\n            for (int j : primes){\n                if (i % j == 0) continue;\n                temp = temp * (numCount[j] + 1) + numCount[j];\n                temp %= mod;\n            //System.out.println(\"temp:\" + temp + \"_\" + j);\n            }\n            result += ((temp + 1) * numCount[i]);\n            result %= mod;\n        }\n        System.out.println(result);\n\n        // 合数组合 公式与合数相同，同样好子集中必须存在组合\n        //没找到简单寻找可以组合的方式，手写了\n        // 10 21, 14 15, 15 22, 15 26, 21 22, 21 26\n        int [][] composeNonprimes = new int[][]{{10, 21}, {14, 15}, {15, 22}, {15, 26}, {21, 22}, {21, 26}};\n\n        for (int[] composeNonprime : composeNonprimes){\n            if (numCount[composeNonprime[0]] == 0 || numCount[composeNonprime[1]] == 0) continue;\n            temp = 0;\n            for (int i : primes){\n                if (composeNonprime[0] % i == 0 || composeNonprime[1] % i == 0) continue;\n                temp = temp * (numCount[i] + 1) + numCount[i];\n                temp %= mod;\n            }\n            result += ((temp + 1) * numCount[composeNonprime[0]] * numCount[composeNonprime[1]]);\n            result %= mod;\n        }\n  \n        for (int i = 0; i < numCount[1]; i++){\n            result = 2 * result % mod;\n        }\n        //result *= (long)Math.pow(2, numCount[1]);\n        return (int)result;\n    }\n}\n```\n\n\n**动态规划解法**\n\n状态压缩动态规划\n\n\n思路与算法\n\n注意到题目规定数组`nums` 中的元素不超过 30，因此我们可以将 [1, 30] 中的整数分成如下三类：\n\n* $1$：对于任意一个好子集而言，我们添加任意数目的 1，得到的新子集仍然是好子集；\n\n* $2,3,5,6,7,10,11,13,14,15,17,19,21,22,23,26,29,30$：这些数均不包含平方因子，因此每个数在好子集中至多出现一次；\n\n* $4,8,9,12,16,18,20,24,25,27,28$：这些数包含平方因子，因此一定不能在好子集中出现。\n\n我们可以通过硬编码的方式把$[1,30]$ 中的整数按照上述分类，也可以先预处理出所有$[1,30]$ 中质数$ 2,3,5,7,11,13,17,19,23,29$，再通过试除的方式动态分类。\n\n分类完成后，我们就可以考虑动态规划了。由于每个质因数只能出现一次，并且 $[1,30] $中一共有 10 个质数，因此我们可以用一个长度为 $10$ 的二进制数`mask` 表示这些质因数的使用情况，其中 `mask`  的第 `i` 位为 `1` 当且仅当第 `i` 个质数已经被使用过。\n\n这样一来，我们定义 $f[i][mask]$ 表示当我们只选择$[2,i]$ 范围内的数，并且选择的数的质因数使用情况为 `mask `时的方案数。如果 `i` 本身包含平方因子，那么我们无法选择 `i`，相当于在 $[2, i-1]$ 范围内选择，状态转移方程为：\n\n$$\nf[i][mask]=f[i−1][mask]\n$$\n\n如果 `i` 本身不包含平方因子，记其包含的质因子的二进制表示为 $subset$（同样可以通过试除的方法得到），那么状态转移方程为：\n\n$$\nf[i][mask]=f[i−1][mask]+f[i−1][mask \\ subset]×freq[i]\n$$\n\n其中：\n\n$freq[i]$ 表示数组 $nums$ 中 $i$ 出现的次数；\n\n$mask\\ subset$ 表示从二进制表示 $mask$ 中去除所有在 $subset$ 中出现的 $1$，可以使用按位异或运算实现。这里需要保证 $subset $是 $mask$ 的子集，可以使用按位与运算来判断。\n\n动态规划的边界条件为：\n\n$$\nf[1][0]=2^{freq[1]}\n$$\n\n即每一个在数组 $nums$ 中出现的 1 都可以选或不选。最终的答案即为所有 $f[30][..]$ 中除了 $f[30][0]$ 以外的项的总和。\n\n**细节**\n\n注意到$f[i][mask]$ 只会从 $f[i-1][..]$ 转移而来，并且 $f[i−1][..]$ 中的下标总是小于 $mask$，因此我们可以使用类似$0−1$ 背包的空间优化方法，在遍历 $mask$ 时从 $2^{10}$ 的一维数组做状态转移了。\n\n\n```java\nclass Solution {\n    static final int[] PRIMES = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    static final int NUM_MAX = 30;\n    static final int MOD = 1000000007;\n\n    public int numberOfGoodSubsets(int[] nums) {\n        int[] freq = new int[NUM_MAX + 1];\n        for (int num : nums) {\n            ++freq[num];\n        }\n\n        int[] f = new int[1 << PRIMES.length];\n        f[0] = 1;\n        for (int i = 0; i < freq[1]; ++i) {\n            f[0] = f[0] * 2 % MOD;\n        }\n  \n        for (int i = 2; i <= NUM_MAX; ++i) {\n            if (freq[i] == 0) {\n                continue;\n            }\n    \n            // 检查 i 的每个质因数是否均不超过 1 个\n            int subset = 0, x = i;\n            boolean check = true;\n            for (int j = 0; j < PRIMES.length; ++j) {\n                int prime = PRIMES[j];\n                if (x % ( * prime) == 0) {\n                    check = false;\n                    break;\n                }\n                if (x % prime == 0) {\n                    subset |= (1 << j);\n                }\n            }\n            if (!check) {\n                continue;\n            }\n\n            // 动态规划\n            for (int mask = (1 << PRIMES.length) - 1; mask > 0; --mask) {\n                if ((mask & subset) == subset) {\n                    f[mask] = (int) ((f[mask] + ((long) f[mask ^ subset]) * freq[i]) % MOD);\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int mask = 1, maskMax = (1 << PRIMES.length); mask < maskMax; ++mask) {\n            ans = (ans + f[mask]) % MOD;\n        }\n  \n        return ans;\n    }\n}\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/the-number-of-good-subsets/solution/hao-zi-ji-de-shu-mu-by-leetcode-solution-ky65/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n```\n","slug":"算法/题目/好子集的数目","published":1,"updated":"2024-07-04T15:00:51.371Z","comments":1,"layout":"post","photos":[],"_id":"cm0xuykfh00011ouy6junf3ya","content":"<p>相关：((20220211222938-s27tjea “动态规划”))，此外还可以使用数学方法进行归纳</p>\n<p>给你一个整数数组 <code>nums</code> 。如果 <code>nums</code> 的一个子集中，所有元素的乘积可以表示为一个或多个<strong>互不相同的质数</strong>的乘积，那么我们称它为<strong>好子集</strong> 。</p>\n<p>比方说，如果 <code>nums = [1, 2, 3, 4]</code> ：<br><code>[2, 3]</code> ，<code>[1, 2, 3]</code> 和 <code>[1, 3]</code> 是 好 子集，乘积分别为 <code>6 = 2 * 3</code>  ，<code>6 = 2 * 3</code>和 <code>3 = 3</code> 。<br><code>[1, 4]</code> 和 <code>[4]</code> 不是 好 子集，因为乘积分别为 <code>4 = 2 * 2</code> 和 <code>4 = 2 * 2</code> 。<br>请你返回 <code>nums</code> 中不同的 好 子集的数目对  $ 10^9 + 7 $ 取余 的结果。</p>\n<p><code>nums</code> 中的 子集 是通过删除 <code>nums</code> 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的<strong>下标不同</strong>，那么它们被视为<strong>不同的子集</strong>。</p>\n<p><strong>示例 1：</strong></p>\n<p>输入：nums &#x3D; [1,2,3,4]<br>输出：6<br>解释：好子集为：</p>\n<ul>\n<li>[1,2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。</li>\n<li>[1,3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n<li>[2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。</li>\n<li>[3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n</ul>\n<p><strong>示例 2：</strong></p>\n<p>输入：nums &#x3D; [4,2,3,15]<br>输出：5<br>解释：好子集为：</p>\n<ul>\n<li>[2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。</li>\n<li>[2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。</li>\n<li>[3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n<li>[15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。<br /></li>\n</ul>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; 30</p>\n<p><em>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/the-number-of-good-subsets\">https://leetcode-cn.com/problems/the-number-of-good-subsets</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</em></p>\n<h1 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h1><p><strong>数学方法</strong></p>\n<p>根据子集数量公式递推获得，推导和调试均较为耗时，代码注释已经较为全面</p>\n<p>大致思路为，统计每个数字出现的次数，根据每个数字不同特性进行分类处理，分为<strong>质数</strong>，<strong>合数</strong>，<strong>合数组合</strong></p>\n<p><em>注意： 取模运算并不会影响加法和乘法，可以随时进行</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numberOfGoodSubsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] except = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nonprimes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 分类计算使用</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>, <span class=\"number\">29</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] numCount = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">31</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 统计数目</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nums)&#123;</span><br><span class=\"line\">            numCount[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>)<span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 计算质数组成的序列数目</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设质数 a有n个， 质数 b有m个，则好子集数目为 n * (m + 1) + m 个，因为相当于每个a都会对应b的每种情况（包含没有b，工m+1种情况），再加上不含a的m种情况，即 (n + 1)*(m + 1) - 1,两种列式对应不同的初始值，前一种初始值为0，后一种为1，且后一种需要在计算完全部乘法后再减一</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : primes)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// temp *= (numCount[i] + 1);</span></span><br><span class=\"line\">            temp = temp * (numCount[i] + <span class=\"number\">1</span>) + numCount[i];</span><br><span class=\"line\">            temp %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result += temp;</span><br><span class=\"line\">        result %= mod;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算合数</span></span><br><span class=\"line\">        <span class=\"comment\">// 合数的情况与质数稍有差别，除了不能与其因子组合，好子集中必须存在该合数，因为不存在该合数的情况已在质数中计算</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设质数共有n中情况，合数有m个，则好子集个数为m * n + m</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nonprimes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numCount[i] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : primes)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                temp = temp * (numCount[j] + <span class=\"number\">1</span>) + numCount[j];</span><br><span class=\"line\">                temp %= mod;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;temp:&quot; + temp + &quot;_&quot; + j);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += ((temp + <span class=\"number\">1</span>) * numCount[i]);</span><br><span class=\"line\">            result %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合数组合 公式与合数相同，同样好子集中必须存在组合</span></span><br><span class=\"line\">        <span class=\"comment\">//没找到简单寻找可以组合的方式，手写了</span></span><br><span class=\"line\">        <span class=\"comment\">// 10 21, 14 15, 15 22, 15 26, 21 22, 21 26</span></span><br><span class=\"line\">        <span class=\"type\">int</span> [][] composeNonprimes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">21</span>&#125;, &#123;<span class=\"number\">14</span>, <span class=\"number\">15</span>&#125;, &#123;<span class=\"number\">15</span>, <span class=\"number\">22</span>&#125;, &#123;<span class=\"number\">15</span>, <span class=\"number\">26</span>&#125;, &#123;<span class=\"number\">21</span>, <span class=\"number\">22</span>&#125;, &#123;<span class=\"number\">21</span>, <span class=\"number\">26</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] composeNonprime : composeNonprimes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numCount[composeNonprime[<span class=\"number\">0</span>]] == <span class=\"number\">0</span> || numCount[composeNonprime[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : primes)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (composeNonprime[<span class=\"number\">0</span>] % i == <span class=\"number\">0</span> || composeNonprime[<span class=\"number\">1</span>] % i == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                temp = temp * (numCount[i] + <span class=\"number\">1</span>) + numCount[i];</span><br><span class=\"line\">                temp %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += ((temp + <span class=\"number\">1</span>) * numCount[composeNonprime[<span class=\"number\">0</span>]] * numCount[composeNonprime[<span class=\"number\">1</span>]]);</span><br><span class=\"line\">            result %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numCount[<span class=\"number\">1</span>]; i++)&#123;</span><br><span class=\"line\">            result = <span class=\"number\">2</span> * result % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//result *= (long)Math.pow(2, numCount[1]);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>动态规划解法</strong></p>\n<p>状态压缩动态规划</p>\n<p>思路与算法</p>\n<p>注意到题目规定数组<code>nums</code> 中的元素不超过 30，因此我们可以将 [1, 30] 中的整数分成如下三类：</p>\n<ul>\n<li><p>$1$：对于任意一个好子集而言，我们添加任意数目的 1，得到的新子集仍然是好子集；</p>\n</li>\n<li><p>$2,3,5,6,7,10,11,13,14,15,17,19,21,22,23,26,29,30$：这些数均不包含平方因子，因此每个数在好子集中至多出现一次；</p>\n</li>\n<li><p>$4,8,9,12,16,18,20,24,25,27,28$：这些数包含平方因子，因此一定不能在好子集中出现。</p>\n</li>\n</ul>\n<p>我们可以通过硬编码的方式把$[1,30]$ 中的整数按照上述分类，也可以先预处理出所有$[1,30]$ 中质数$ 2,3,5,7,11,13,17,19,23,29$，再通过试除的方式动态分类。</p>\n<p>分类完成后，我们就可以考虑动态规划了。由于每个质因数只能出现一次，并且 $[1,30] $中一共有 10 个质数，因此我们可以用一个长度为 $10$ 的二进制数<code>mask</code> 表示这些质因数的使用情况，其中 <code>mask</code>  的第 <code>i</code> 位为 <code>1</code> 当且仅当第 <code>i</code> 个质数已经被使用过。</p>\n<p>这样一来，我们定义 $f[i][mask]$ 表示当我们只选择$[2,i]$ 范围内的数，并且选择的数的质因数使用情况为 <code>mask </code>时的方案数。如果 <code>i</code> 本身包含平方因子，那么我们无法选择 <code>i</code>，相当于在 $[2, i-1]$ 范围内选择，状态转移方程为：</p>\n<p>$$<br>f[i][mask]&#x3D;f[i−1][mask]<br>$$</p>\n<p>如果 <code>i</code> 本身不包含平方因子，记其包含的质因子的二进制表示为 $subset$（同样可以通过试除的方法得到），那么状态转移方程为：</p>\n<p>$$<br>f[i][mask]&#x3D;f[i−1][mask]+f[i−1][mask \\ subset]×freq[i]<br>$$</p>\n<p>其中：</p>\n<p>$freq[i]$ 表示数组 $nums$ 中 $i$ 出现的次数；</p>\n<p>$mask\\ subset$ 表示从二进制表示 $mask$ 中去除所有在 $subset$ 中出现的 $1$，可以使用按位异或运算实现。这里需要保证 $subset $是 $mask$ 的子集，可以使用按位与运算来判断。</p>\n<p>动态规划的边界条件为：</p>\n<p>$$<br>f[1][0]&#x3D;2^{freq[1]}<br>$$</p>\n<p>即每一个在数组 $nums$ 中出现的 1 都可以选或不选。最终的答案即为所有 $f[30][..]$ 中除了 $f[30][0]$ 以外的项的总和。</p>\n<p><strong>细节</strong></p>\n<p>注意到$f[i][mask]$ 只会从 $f[i-1][..]$ 转移而来，并且 $f[i−1][..]$ 中的下标总是小于 $mask$，因此我们可以使用类似$0−1$ 背包的空间优化方法，在遍历 $mask$ 时从 $2^{10}$ 的一维数组做状态转移了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] PRIMES = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>, <span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_MAX</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MOD</span> <span class=\"operator\">=</span> <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numberOfGoodSubsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[NUM_MAX + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            ++freq[num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span> &lt;&lt; PRIMES.length];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; freq[<span class=\"number\">1</span>]; ++i) &#123;</span><br><span class=\"line\">            f[<span class=\"number\">0</span>] = f[<span class=\"number\">0</span>] * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= NUM_MAX; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (freq[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"comment\">// 检查 i 的每个质因数是否均不超过 1 个</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">subset</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, x = i;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">check</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; PRIMES.length; ++j) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">prime</span> <span class=\"operator\">=</span> PRIMES[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x % ( * prime) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    check = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x % prime == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    subset |= (<span class=\"number\">1</span> &lt;&lt; j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!check) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 动态规划</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">mask</span> <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; PRIMES.length) - <span class=\"number\">1</span>; mask &gt; <span class=\"number\">0</span>; --mask) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mask &amp; subset) == subset) &#123;</span><br><span class=\"line\">                    f[mask] = (<span class=\"type\">int</span>) ((f[mask] + ((<span class=\"type\">long</span>) f[mask ^ subset]) * freq[i]) % MOD);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">mask</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, maskMax = (<span class=\"number\">1</span> &lt;&lt; PRIMES.length); mask &lt; maskMax; ++mask) &#123;</span><br><span class=\"line\">            ans = (ans + f[mask]) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：LeetCode-Solution</span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode-cn.com/problems/the-number-of-good-subsets/solution/hao-zi-ji-de-shu-mu-by-leetcode-solution-ky65/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>相关：((20220211222938-s27tjea “动态规划”))，此外还可以使用数学方法进行归纳</p>\n<p>给你一个整数数组 <code>nums</code> 。如果 <code>nums</code> 的一个子集中，所有元素的乘积可以表示为一个或多个<strong>互不相同的质数</strong>的乘积，那么我们称它为<strong>好子集</strong> 。</p>\n<p>比方说，如果 <code>nums = [1, 2, 3, 4]</code> ：<br><code>[2, 3]</code> ，<code>[1, 2, 3]</code> 和 <code>[1, 3]</code> 是 好 子集，乘积分别为 <code>6 = 2 * 3</code>  ，<code>6 = 2 * 3</code>和 <code>3 = 3</code> 。<br><code>[1, 4]</code> 和 <code>[4]</code> 不是 好 子集，因为乘积分别为 <code>4 = 2 * 2</code> 和 <code>4 = 2 * 2</code> 。<br>请你返回 <code>nums</code> 中不同的 好 子集的数目对  $ 10^9 + 7 $ 取余 的结果。</p>\n<p><code>nums</code> 中的 子集 是通过删除 <code>nums</code> 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的<strong>下标不同</strong>，那么它们被视为<strong>不同的子集</strong>。</p>\n<p><strong>示例 1：</strong></p>\n<p>输入：nums &#x3D; [1,2,3,4]<br>输出：6<br>解释：好子集为：</p>\n<ul>\n<li>[1,2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。</li>\n<li>[1,3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n<li>[2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。</li>\n<li>[3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n</ul>\n<p><strong>示例 2：</strong></p>\n<p>输入：nums &#x3D; [4,2,3,15]<br>输出：5<br>解释：好子集为：</p>\n<ul>\n<li>[2]：乘积为 2 ，可以表示为质数 2 的乘积。</li>\n<li>[2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。</li>\n<li>[2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。</li>\n<li>[3]：乘积为 3 ，可以表示为质数 3 的乘积。</li>\n<li>[15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。<br /></li>\n</ul>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; 30</p>\n<p><em>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/the-number-of-good-subsets\">https://leetcode-cn.com/problems/the-number-of-good-subsets</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</em></p>\n<h1 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h1><p><strong>数学方法</strong></p>\n<p>根据子集数量公式递推获得，推导和调试均较为耗时，代码注释已经较为全面</p>\n<p>大致思路为，统计每个数字出现的次数，根据每个数字不同特性进行分类处理，分为<strong>质数</strong>，<strong>合数</strong>，<strong>合数组合</strong></p>\n<p><em>注意： 取模运算并不会影响加法和乘法，可以随时进行</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numberOfGoodSubsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] except = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nonprimes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 分类计算使用</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] primes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>, <span class=\"number\">29</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] numCount = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">31</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 统计数目</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nums)&#123;</span><br><span class=\"line\">            numCount[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>)<span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 计算质数组成的序列数目</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设质数 a有n个， 质数 b有m个，则好子集数目为 n * (m + 1) + m 个，因为相当于每个a都会对应b的每种情况（包含没有b，工m+1种情况），再加上不含a的m种情况，即 (n + 1)*(m + 1) - 1,两种列式对应不同的初始值，前一种初始值为0，后一种为1，且后一种需要在计算完全部乘法后再减一</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : primes)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// temp *= (numCount[i] + 1);</span></span><br><span class=\"line\">            temp = temp * (numCount[i] + <span class=\"number\">1</span>) + numCount[i];</span><br><span class=\"line\">            temp %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result += temp;</span><br><span class=\"line\">        result %= mod;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算合数</span></span><br><span class=\"line\">        <span class=\"comment\">// 合数的情况与质数稍有差别，除了不能与其因子组合，好子集中必须存在该合数，因为不存在该合数的情况已在质数中计算</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设质数共有n中情况，合数有m个，则好子集个数为m * n + m</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nonprimes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numCount[i] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : primes)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                temp = temp * (numCount[j] + <span class=\"number\">1</span>) + numCount[j];</span><br><span class=\"line\">                temp %= mod;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;temp:&quot; + temp + &quot;_&quot; + j);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += ((temp + <span class=\"number\">1</span>) * numCount[i]);</span><br><span class=\"line\">            result %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合数组合 公式与合数相同，同样好子集中必须存在组合</span></span><br><span class=\"line\">        <span class=\"comment\">//没找到简单寻找可以组合的方式，手写了</span></span><br><span class=\"line\">        <span class=\"comment\">// 10 21, 14 15, 15 22, 15 26, 21 22, 21 26</span></span><br><span class=\"line\">        <span class=\"type\">int</span> [][] composeNonprimes = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">21</span>&#125;, &#123;<span class=\"number\">14</span>, <span class=\"number\">15</span>&#125;, &#123;<span class=\"number\">15</span>, <span class=\"number\">22</span>&#125;, &#123;<span class=\"number\">15</span>, <span class=\"number\">26</span>&#125;, &#123;<span class=\"number\">21</span>, <span class=\"number\">22</span>&#125;, &#123;<span class=\"number\">21</span>, <span class=\"number\">26</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] composeNonprime : composeNonprimes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numCount[composeNonprime[<span class=\"number\">0</span>]] == <span class=\"number\">0</span> || numCount[composeNonprime[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : primes)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (composeNonprime[<span class=\"number\">0</span>] % i == <span class=\"number\">0</span> || composeNonprime[<span class=\"number\">1</span>] % i == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                temp = temp * (numCount[i] + <span class=\"number\">1</span>) + numCount[i];</span><br><span class=\"line\">                temp %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result += ((temp + <span class=\"number\">1</span>) * numCount[composeNonprime[<span class=\"number\">0</span>]] * numCount[composeNonprime[<span class=\"number\">1</span>]]);</span><br><span class=\"line\">            result %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numCount[<span class=\"number\">1</span>]; i++)&#123;</span><br><span class=\"line\">            result = <span class=\"number\">2</span> * result % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//result *= (long)Math.pow(2, numCount[1]);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>动态规划解法</strong></p>\n<p>状态压缩动态规划</p>\n<p>思路与算法</p>\n<p>注意到题目规定数组<code>nums</code> 中的元素不超过 30，因此我们可以将 [1, 30] 中的整数分成如下三类：</p>\n<ul>\n<li><p>$1$：对于任意一个好子集而言，我们添加任意数目的 1，得到的新子集仍然是好子集；</p>\n</li>\n<li><p>$2,3,5,6,7,10,11,13,14,15,17,19,21,22,23,26,29,30$：这些数均不包含平方因子，因此每个数在好子集中至多出现一次；</p>\n</li>\n<li><p>$4,8,9,12,16,18,20,24,25,27,28$：这些数包含平方因子，因此一定不能在好子集中出现。</p>\n</li>\n</ul>\n<p>我们可以通过硬编码的方式把$[1,30]$ 中的整数按照上述分类，也可以先预处理出所有$[1,30]$ 中质数$ 2,3,5,7,11,13,17,19,23,29$，再通过试除的方式动态分类。</p>\n<p>分类完成后，我们就可以考虑动态规划了。由于每个质因数只能出现一次，并且 $[1,30] $中一共有 10 个质数，因此我们可以用一个长度为 $10$ 的二进制数<code>mask</code> 表示这些质因数的使用情况，其中 <code>mask</code>  的第 <code>i</code> 位为 <code>1</code> 当且仅当第 <code>i</code> 个质数已经被使用过。</p>\n<p>这样一来，我们定义 $f[i][mask]$ 表示当我们只选择$[2,i]$ 范围内的数，并且选择的数的质因数使用情况为 <code>mask </code>时的方案数。如果 <code>i</code> 本身包含平方因子，那么我们无法选择 <code>i</code>，相当于在 $[2, i-1]$ 范围内选择，状态转移方程为：</p>\n<p>$$<br>f[i][mask]&#x3D;f[i−1][mask]<br>$$</p>\n<p>如果 <code>i</code> 本身不包含平方因子，记其包含的质因子的二进制表示为 $subset$（同样可以通过试除的方法得到），那么状态转移方程为：</p>\n<p>$$<br>f[i][mask]&#x3D;f[i−1][mask]+f[i−1][mask \\ subset]×freq[i]<br>$$</p>\n<p>其中：</p>\n<p>$freq[i]$ 表示数组 $nums$ 中 $i$ 出现的次数；</p>\n<p>$mask\\ subset$ 表示从二进制表示 $mask$ 中去除所有在 $subset$ 中出现的 $1$，可以使用按位异或运算实现。这里需要保证 $subset $是 $mask$ 的子集，可以使用按位与运算来判断。</p>\n<p>动态规划的边界条件为：</p>\n<p>$$<br>f[1][0]&#x3D;2^{freq[1]}<br>$$</p>\n<p>即每一个在数组 $nums$ 中出现的 1 都可以选或不选。最终的答案即为所有 $f[30][..]$ 中除了 $f[30][0]$ 以外的项的总和。</p>\n<p><strong>细节</strong></p>\n<p>注意到$f[i][mask]$ 只会从 $f[i-1][..]$ 转移而来，并且 $f[i−1][..]$ 中的下标总是小于 $mask$，因此我们可以使用类似$0−1$ 背包的空间优化方法，在遍历 $mask$ 时从 $2^{10}$ 的一维数组做状态转移了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] PRIMES = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>, <span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_MAX</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MOD</span> <span class=\"operator\">=</span> <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numberOfGoodSubsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[NUM_MAX + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            ++freq[num];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span> &lt;&lt; PRIMES.length];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; freq[<span class=\"number\">1</span>]; ++i) &#123;</span><br><span class=\"line\">            f[<span class=\"number\">0</span>] = f[<span class=\"number\">0</span>] * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= NUM_MAX; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (freq[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"comment\">// 检查 i 的每个质因数是否均不超过 1 个</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">subset</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, x = i;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">check</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; PRIMES.length; ++j) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">prime</span> <span class=\"operator\">=</span> PRIMES[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x % ( * prime) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    check = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x % prime == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    subset |= (<span class=\"number\">1</span> &lt;&lt; j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!check) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 动态规划</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">mask</span> <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; PRIMES.length) - <span class=\"number\">1</span>; mask &gt; <span class=\"number\">0</span>; --mask) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mask &amp; subset) == subset) &#123;</span><br><span class=\"line\">                    f[mask] = (<span class=\"type\">int</span>) ((f[mask] + ((<span class=\"type\">long</span>) f[mask ^ subset]) * freq[i]) % MOD);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">mask</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, maskMax = (<span class=\"number\">1</span> &lt;&lt; PRIMES.length); mask &lt; maskMax; ++mask) &#123;</span><br><span class=\"line\">            ans = (ans + f[mask]) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：LeetCode-Solution</span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode-cn.com/problems/the-number-of-good-subsets/solution/hao-zi-ji-de-shu-mu-by-leetcode-solution-ky65/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"抓娃娃","date":"2024-07-19T14:10:08.000Z","_content":"主演：沈腾 马丽  \n类型：喜剧  \n\n# 主要内容及主旨：  \n讲述富豪奉行“穷养”理念，为培养孩子将孩子带回老破小，人为造就挫折和困难，历练孩子，并聘请一整个小区的优秀教师侧面影响孩子，以求将孩子培养成才的目的。  \n后期主旨体现为过度管理孩子实非必要，但剧情有些收不住。\n\n# 评价\n尚可，现代好电影，剧情不够紧凑，主要事件有些散，笑点和之前沈腾电影一个风格，休闲可以一看\n\n","source":"_posts/电影/抓娃娃.md","raw":"---\ntitle: 抓娃娃\ndate: 2024-07-19 22:10:08\ncategories:\n  - 电影\ntags:\n  - 电影\n  - 喜剧\n---\n主演：沈腾 马丽  \n类型：喜剧  \n\n# 主要内容及主旨：  \n讲述富豪奉行“穷养”理念，为培养孩子将孩子带回老破小，人为造就挫折和困难，历练孩子，并聘请一整个小区的优秀教师侧面影响孩子，以求将孩子培养成才的目的。  \n后期主旨体现为过度管理孩子实非必要，但剧情有些收不住。\n\n# 评价\n尚可，现代好电影，剧情不够紧凑，主要事件有些散，笑点和之前沈腾电影一个风格，休闲可以一看\n\n","slug":"电影/抓娃娃","published":1,"updated":"2024-07-19T14:20:29.022Z","comments":1,"layout":"post","photos":[],"_id":"cm0xuykfj00021ouy5ofsd0xz","content":"<p>主演：沈腾 马丽<br>类型：喜剧  </p>\n<h1 id=\"主要内容及主旨：\"><a href=\"#主要内容及主旨：\" class=\"headerlink\" title=\"主要内容及主旨：\"></a>主要内容及主旨：</h1><p>讲述富豪奉行“穷养”理念，为培养孩子将孩子带回老破小，人为造就挫折和困难，历练孩子，并聘请一整个小区的优秀教师侧面影响孩子，以求将孩子培养成才的目的。<br>后期主旨体现为过度管理孩子实非必要，但剧情有些收不住。</p>\n<h1 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h1><p>尚可，现代好电影，剧情不够紧凑，主要事件有些散，笑点和之前沈腾电影一个风格，休闲可以一看</p>\n","excerpt":"","more":"<p>主演：沈腾 马丽<br>类型：喜剧  </p>\n<h1 id=\"主要内容及主旨：\"><a href=\"#主要内容及主旨：\" class=\"headerlink\" title=\"主要内容及主旨：\"></a>主要内容及主旨：</h1><p>讲述富豪奉行“穷养”理念，为培养孩子将孩子带回老破小，人为造就挫折和困难，历练孩子，并聘请一整个小区的优秀教师侧面影响孩子，以求将孩子培养成才的目的。<br>后期主旨体现为过度管理孩子实非必要，但剧情有些收不住。</p>\n<h1 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h1><p>尚可，现代好电影，剧情不够紧凑，主要事件有些散，笑点和之前沈腾电影一个风格，休闲可以一看</p>\n"},{"title":"最大子数组和","date":"2024-07-04T14:54:59.000Z","_content":"\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n> 示例 1：\n>\n> 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n> 输出：6\n> 解释：连续子数组[4,-1,2,1] 的和最大，为6 。\n>\n>\n> 示例 2：\n>\n> 输入：nums = [1]\n> 输出：1\n>\n>\n> 示例 3：\n>\n> 输入：nums = [5,4,-1,7,8]\n> 输出：23\n>\n\n**提示：**\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/maximum-subarray\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n## 解法1 分治  线段树\n\n这个分治方法类似于「线段树求解最长公共上升子序列问题」的 pushUp 操作。 也许读者还没有接触过线段树，没有关系，方法二的内容假设你没有任何线段树的基础。当然，如果读者有兴趣的话，推荐阅读线段树区间合并法解决多次询问的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。\n\n我们定义一个操作 get(a, l, r) 表示查询 aa 序列[l,r] 区间内的最大子段和，那么最终我们要求的答案就是 get(nums, 0, nums.size() - 1)。如何分治实现这个操作呢？对于一个区间 [l,r]，我们取 $ m$ = [ (l + r )/ 2]，对区间 [l,m] 和[m+1,r] 分治求解。当递归逐层深入直到区间长度缩小为 1 的时候，递归「开始回升」。这个时候我们考虑如何通过[l,m] 区间的信息和[m+1,r] 区间的信息合并成区间 [l,r] 的信息。最关键的两个问题是：\n\n我们要维护区间的哪些信息呢？\n我们如何合并这些信息呢？\n对于一个区间 $[l,r]$，我们可以维护四个量：\n\n$lSum$ 表示$[l,r] $内以 ll 为左端点的最大子段和\n$Sum $表示 $[l,r] $内以 rr 为右端点的最大子段和\n$mSum $表示$ [l,r] $内的最大子段和\n$iSum $表示 $[l,r]$ 的区间和\n以下简称 $[l,m]$ 为$[l,r]$ 的「左子区间」，$[m+1,r] $为$[l,r]$ 的「右子区间」。我们考虑如何维护这些量呢（如何通过左右子区间的信息合并得到$[l,r] $的信息）？对于长度为 $1$ 的区间$ [i,i]$，四个量的值都和 nums[i] 相等。对于长度大于 1 的区间：\n\n首先最好维护的是$iSum$，区间$ [l,r] $的 $iSum $就等于「左子区间」的 $iSum $加上「右子区间」的 $iSum$。\n对于 $[l,r]$ 的 $lSum$，存在两种可能，它要么等于「左子区间」的 $lSum$，要么等于「左子区间」的 $iSum $加上「右子区间」的 $lSum$，二者取大。\n对于 $[l,r] $的 $rSum$，同理，它要么等于「右子区间」的 $rSum$，要么等于「右子区间」的 $iSum $加上「左子区间」的 $rSum$，二者取大。\n当计算好上面的三个量之后，就很好计算 $[l,r] $的 $mSum $了。我们可以考虑$ [l,r] $的 $mSum $对应的区间是否跨越 $m$——它可能不跨越 $m$，也就是说 $[l,r]$ 的 $mSum $可能是「左子区间」的 $mSum $和 「右子区间」的 $mSum $中的一个；它也可能跨越 $m$，可能是「左子区间」的 $rSum $和 「右子区间」的 $lSum $求和。三者取大。\n这样问题就得到了解决。\n\n\n**题外话**\n「方法二」相较于「方法一」来说，时间复杂度相同，但是因为使用了递归，并且维护了四个信息的结构体，运行的时间略长，空间复杂度也不如方法一优秀，而且难以理解。那么这种方法存在的意义是什么呢？\n\n对于这道题而言，确实是如此的。但是仔细观察「方法二」，它不仅可以解决区间$ [0, n-1$]，还可以用于解决任意的子区间 [l,r][l,r] 的问题。如果我们把$ [0,n−1]$ 分治下去出现的所有子区间的信息都用堆式存储的方式记忆化下来，即建成一颗真正的树之后，我们就可以在 $O(logn)$ 的时间内求到任意区间内的答案，我们甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在 $O(\\log n)$ 的时间内求到任意区间内的答案，对于大规模查询的情况下，这种方法的优势便体现了出来。这棵树就是上文提及的一种神奇的数据结构——**线段树**。\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n```java\nclass Solution {\npublic:\n    struct Status {\n        int lSum, rSum, mSum, iSum;\n    };\n\n    Status pushUp(Status l, Status r) {\n        int iSum = l.iSum + r.iSum;\n        int lSum = max(l.lSum, l.iSum + r.lSum);\n        int rSum = max(r.rSum, r.iSum + l.rSum);\n        int mSum = max(max(l.mSum, r.mSum), l.rSum + r.lSum);\n        return (Status) {lSum, rSum, mSum, iSum};\n    };\n\n    Status get(vector<int> &a, int l, int r) {\n        if (l == r) {\n            return (Status) {a[l], a[l], a[l], a[l]};\n        }\n        int m = (l + r) >> 1;\n        Status lSub = get(a, l, m);\n        Status rSub = get(a, m + 1, r);\n        return pushUp(lSub, rSub);\n    }\n\n    int maxSubArray(vector<int>& nums) {\n        return get(nums, 0, nums.size() - 1).mSum;\n    }\n};\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n\n## 解法2 动态规划\n\n思路和算法\n\n假设 $nums$ 数组的长度是 $n$，下标从 $0$ 到 $n-1$。\n\n我们用 $f(i)$ 代表以第 ii 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：\n\n![image.png](./img/最大子数组和.png)\n\n因此我们只需要求出每个位置的 $f(i)$，然后返回 $f$ 数组中的最大值即可。那么我们如何求 $f(i)$ 呢？我们可以考虑 $nums[i]$ 单独成为一段还是加入 $f(i−1)$ 对应的那一段，这取决于$nums[i]$ 和 $f(i-1) + nums[i]$ 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：  \n\n$$\nf(i)=max{f(i−1)+nums[i],nums[i]}\n$$\n\n\n不难给出一个时间复杂度 $O(n)$、空间复杂度 $O(n)$ 的实现，即用一个 $f$ 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 $f(i)$ 只和 $f(i−1)$ 相关，于是我们可以只用一个变量 $pre$ 来维护对于当前f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。","source":"_posts/算法/题目/最大子数组和.md","raw":"---\ntitle: 最大子数组和\ndate: 2024-07-04 22:54:59\ncategories:\n  - 算法\n  - 题目\ntags:\n---\n\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n> 示例 1：\n>\n> 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n> 输出：6\n> 解释：连续子数组[4,-1,2,1] 的和最大，为6 。\n>\n>\n> 示例 2：\n>\n> 输入：nums = [1]\n> 输出：1\n>\n>\n> 示例 3：\n>\n> 输入：nums = [5,4,-1,7,8]\n> 输出：23\n>\n\n**提示：**\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/maximum-subarray\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n## 解法1 分治  线段树\n\n这个分治方法类似于「线段树求解最长公共上升子序列问题」的 pushUp 操作。 也许读者还没有接触过线段树，没有关系，方法二的内容假设你没有任何线段树的基础。当然，如果读者有兴趣的话，推荐阅读线段树区间合并法解决多次询问的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。\n\n我们定义一个操作 get(a, l, r) 表示查询 aa 序列[l,r] 区间内的最大子段和，那么最终我们要求的答案就是 get(nums, 0, nums.size() - 1)。如何分治实现这个操作呢？对于一个区间 [l,r]，我们取 $ m$ = [ (l + r )/ 2]，对区间 [l,m] 和[m+1,r] 分治求解。当递归逐层深入直到区间长度缩小为 1 的时候，递归「开始回升」。这个时候我们考虑如何通过[l,m] 区间的信息和[m+1,r] 区间的信息合并成区间 [l,r] 的信息。最关键的两个问题是：\n\n我们要维护区间的哪些信息呢？\n我们如何合并这些信息呢？\n对于一个区间 $[l,r]$，我们可以维护四个量：\n\n$lSum$ 表示$[l,r] $内以 ll 为左端点的最大子段和\n$Sum $表示 $[l,r] $内以 rr 为右端点的最大子段和\n$mSum $表示$ [l,r] $内的最大子段和\n$iSum $表示 $[l,r]$ 的区间和\n以下简称 $[l,m]$ 为$[l,r]$ 的「左子区间」，$[m+1,r] $为$[l,r]$ 的「右子区间」。我们考虑如何维护这些量呢（如何通过左右子区间的信息合并得到$[l,r] $的信息）？对于长度为 $1$ 的区间$ [i,i]$，四个量的值都和 nums[i] 相等。对于长度大于 1 的区间：\n\n首先最好维护的是$iSum$，区间$ [l,r] $的 $iSum $就等于「左子区间」的 $iSum $加上「右子区间」的 $iSum$。\n对于 $[l,r]$ 的 $lSum$，存在两种可能，它要么等于「左子区间」的 $lSum$，要么等于「左子区间」的 $iSum $加上「右子区间」的 $lSum$，二者取大。\n对于 $[l,r] $的 $rSum$，同理，它要么等于「右子区间」的 $rSum$，要么等于「右子区间」的 $iSum $加上「左子区间」的 $rSum$，二者取大。\n当计算好上面的三个量之后，就很好计算 $[l,r] $的 $mSum $了。我们可以考虑$ [l,r] $的 $mSum $对应的区间是否跨越 $m$——它可能不跨越 $m$，也就是说 $[l,r]$ 的 $mSum $可能是「左子区间」的 $mSum $和 「右子区间」的 $mSum $中的一个；它也可能跨越 $m$，可能是「左子区间」的 $rSum $和 「右子区间」的 $lSum $求和。三者取大。\n这样问题就得到了解决。\n\n\n**题外话**\n「方法二」相较于「方法一」来说，时间复杂度相同，但是因为使用了递归，并且维护了四个信息的结构体，运行的时间略长，空间复杂度也不如方法一优秀，而且难以理解。那么这种方法存在的意义是什么呢？\n\n对于这道题而言，确实是如此的。但是仔细观察「方法二」，它不仅可以解决区间$ [0, n-1$]，还可以用于解决任意的子区间 [l,r][l,r] 的问题。如果我们把$ [0,n−1]$ 分治下去出现的所有子区间的信息都用堆式存储的方式记忆化下来，即建成一颗真正的树之后，我们就可以在 $O(logn)$ 的时间内求到任意区间内的答案，我们甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在 $O(\\log n)$ 的时间内求到任意区间内的答案，对于大规模查询的情况下，这种方法的优势便体现了出来。这棵树就是上文提及的一种神奇的数据结构——**线段树**。\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n```java\nclass Solution {\npublic:\n    struct Status {\n        int lSum, rSum, mSum, iSum;\n    };\n\n    Status pushUp(Status l, Status r) {\n        int iSum = l.iSum + r.iSum;\n        int lSum = max(l.lSum, l.iSum + r.lSum);\n        int rSum = max(r.rSum, r.iSum + l.rSum);\n        int mSum = max(max(l.mSum, r.mSum), l.rSum + r.lSum);\n        return (Status) {lSum, rSum, mSum, iSum};\n    };\n\n    Status get(vector<int> &a, int l, int r) {\n        if (l == r) {\n            return (Status) {a[l], a[l], a[l], a[l]};\n        }\n        int m = (l + r) >> 1;\n        Status lSub = get(a, l, m);\n        Status rSub = get(a, m + 1, r);\n        return pushUp(lSub, rSub);\n    }\n\n    int maxSubArray(vector<int>& nums) {\n        return get(nums, 0, nums.size() - 1).mSum;\n    }\n};\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n\n## 解法2 动态规划\n\n思路和算法\n\n假设 $nums$ 数组的长度是 $n$，下标从 $0$ 到 $n-1$。\n\n我们用 $f(i)$ 代表以第 ii 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：\n\n![image.png](./img/最大子数组和.png)\n\n因此我们只需要求出每个位置的 $f(i)$，然后返回 $f$ 数组中的最大值即可。那么我们如何求 $f(i)$ 呢？我们可以考虑 $nums[i]$ 单独成为一段还是加入 $f(i−1)$ 对应的那一段，这取决于$nums[i]$ 和 $f(i-1) + nums[i]$ 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：  \n\n$$\nf(i)=max{f(i−1)+nums[i],nums[i]}\n$$\n\n\n不难给出一个时间复杂度 $O(n)$、空间复杂度 $O(n)$ 的实现，即用一个 $f$ 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 $f(i)$ 只和 $f(i−1)$ 相关，于是我们可以只用一个变量 $pre$ 来维护对于当前f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。","slug":"算法/题目/最大子数组和","published":1,"updated":"2024-07-04T14:59:40.824Z","comments":1,"layout":"post","photos":[],"_id":"cm0xuykfk00031ouygeu45o0u","content":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<blockquote>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组[4,-1,2,1] 的和最大，为6 。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>示例 3：</p>\n<p>输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/maximum-subarray\">https://leetcode-cn.com/problems/maximum-subarray</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"解法1-分治-线段树\"><a href=\"#解法1-分治-线段树\" class=\"headerlink\" title=\"解法1 分治  线段树\"></a>解法1 分治  线段树</h2><p>这个分治方法类似于「线段树求解最长公共上升子序列问题」的 pushUp 操作。 也许读者还没有接触过线段树，没有关系，方法二的内容假设你没有任何线段树的基础。当然，如果读者有兴趣的话，推荐阅读线段树区间合并法解决多次询问的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。</p>\n<p>我们定义一个操作 get(a, l, r) 表示查询 aa 序列[l,r] 区间内的最大子段和，那么最终我们要求的答案就是 get(nums, 0, nums.size() - 1)。如何分治实现这个操作呢？对于一个区间 [l,r]，我们取 $ m$ &#x3D; [ (l + r )&#x2F; 2]，对区间 [l,m] 和[m+1,r] 分治求解。当递归逐层深入直到区间长度缩小为 1 的时候，递归「开始回升」。这个时候我们考虑如何通过[l,m] 区间的信息和[m+1,r] 区间的信息合并成区间 [l,r] 的信息。最关键的两个问题是：</p>\n<p>我们要维护区间的哪些信息呢？<br>我们如何合并这些信息呢？<br>对于一个区间 $[l,r]$，我们可以维护四个量：</p>\n<p>$lSum$ 表示$[l,r] $内以 ll 为左端点的最大子段和<br>$Sum $表示 $[l,r] $内以 rr 为右端点的最大子段和<br>$mSum $表示$ [l,r] $内的最大子段和<br>$iSum $表示 $[l,r]$ 的区间和<br>以下简称 $[l,m]$ 为$[l,r]$ 的「左子区间」，$[m+1,r] $为$[l,r]$ 的「右子区间」。我们考虑如何维护这些量呢（如何通过左右子区间的信息合并得到$[l,r] $的信息）？对于长度为 $1$ 的区间$ [i,i]$，四个量的值都和 nums[i] 相等。对于长度大于 1 的区间：</p>\n<p>首先最好维护的是$iSum$，区间$ [l,r] $的 $iSum $就等于「左子区间」的 $iSum $加上「右子区间」的 $iSum$。<br>对于 $[l,r]$ 的 $lSum$，存在两种可能，它要么等于「左子区间」的 $lSum$，要么等于「左子区间」的 $iSum $加上「右子区间」的 $lSum$，二者取大。<br>对于 $[l,r] $的 $rSum$，同理，它要么等于「右子区间」的 $rSum$，要么等于「右子区间」的 $iSum $加上「左子区间」的 $rSum$，二者取大。<br>当计算好上面的三个量之后，就很好计算 $[l,r] $的 $mSum $了。我们可以考虑$ [l,r] $的 $mSum $对应的区间是否跨越 $m$——它可能不跨越 $m$，也就是说 $[l,r]$ 的 $mSum $可能是「左子区间」的 $mSum $和 「右子区间」的 $mSum $中的一个；它也可能跨越 $m$，可能是「左子区间」的 $rSum $和 「右子区间」的 $lSum $求和。三者取大。<br>这样问题就得到了解决。</p>\n<p><strong>题外话</strong><br>「方法二」相较于「方法一」来说，时间复杂度相同，但是因为使用了递归，并且维护了四个信息的结构体，运行的时间略长，空间复杂度也不如方法一优秀，而且难以理解。那么这种方法存在的意义是什么呢？</p>\n<p>对于这道题而言，确实是如此的。但是仔细观察「方法二」，它不仅可以解决区间$ [0, n-1$]，还可以用于解决任意的子区间 [l,r][l,r] 的问题。如果我们把$ [0,n−1]$ 分治下去出现的所有子区间的信息都用堆式存储的方式记忆化下来，即建成一颗真正的树之后，我们就可以在 $O(logn)$ 的时间内求到任意区间内的答案，我们甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在 $O(\\log n)$ 的时间内求到任意区间内的答案，对于大规模查询的情况下，这种方法的优势便体现了出来。这棵树就是上文提及的一种神奇的数据结构——<strong>线段树</strong>。</p>\n<p>作者：LeetCode-Solution<br>链接：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    struct Status &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> lSum, rSum, mSum, iSum;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Status <span class=\"title function_\">pushUp</span><span class=\"params\">(Status l, Status r)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">iSum</span> <span class=\"operator\">=</span> l.iSum + r.iSum;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lSum</span> <span class=\"operator\">=</span> max(l.lSum, l.iSum + r.lSum);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rSum</span> <span class=\"operator\">=</span> max(r.rSum, r.iSum + l.rSum);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mSum</span> <span class=\"operator\">=</span> max(max(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Status) &#123;lSum, rSum, mSum, iSum&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Status <span class=\"title function_\">get</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;a, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Status) &#123;a[l], a[l], a[l], a[l]&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Status</span> <span class=\"variable\">lSub</span> <span class=\"operator\">=</span> get(a, l, m);</span><br><span class=\"line\">        <span class=\"type\">Status</span> <span class=\"variable\">rSub</span> <span class=\"operator\">=</span> get(a, m + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pushUp(lSub, rSub);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(nums, <span class=\"number\">0</span>, nums.size() - <span class=\"number\">1</span>).mSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：LeetCode-Solution</span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"解法2-动态规划\"><a href=\"#解法2-动态规划\" class=\"headerlink\" title=\"解法2 动态规划\"></a>解法2 动态规划</h2><p>思路和算法</p>\n<p>假设 $nums$ 数组的长度是 $n$，下标从 $0$ 到 $n-1$。</p>\n<p>我们用 $f(i)$ 代表以第 ii 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：</p>\n<p><img src=\"/hexo-blog/./img/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C.png\" alt=\"image.png\"></p>\n<p>因此我们只需要求出每个位置的 $f(i)$，然后返回 $f$ 数组中的最大值即可。那么我们如何求 $f(i)$ 呢？我们可以考虑 $nums[i]$ 单独成为一段还是加入 $f(i−1)$ 对应的那一段，这取决于$nums[i]$ 和 $f(i-1) + nums[i]$ 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：  </p>\n<p>$$<br>f(i)&#x3D;max{f(i−1)+nums[i],nums[i]}<br>$$</p>\n<p>不难给出一个时间复杂度 $O(n)$、空间复杂度 $O(n)$ 的实现，即用一个 $f$ 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 $f(i)$ 只和 $f(i−1)$ 相关，于是我们可以只用一个变量 $pre$ 来维护对于当前f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。</p>\n","excerpt":"","more":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<blockquote>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组[4,-1,2,1] 的和最大，为6 。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>示例 3：</p>\n<p>输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/maximum-subarray\">https://leetcode-cn.com/problems/maximum-subarray</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"解法1-分治-线段树\"><a href=\"#解法1-分治-线段树\" class=\"headerlink\" title=\"解法1 分治  线段树\"></a>解法1 分治  线段树</h2><p>这个分治方法类似于「线段树求解最长公共上升子序列问题」的 pushUp 操作。 也许读者还没有接触过线段树，没有关系，方法二的内容假设你没有任何线段树的基础。当然，如果读者有兴趣的话，推荐阅读线段树区间合并法解决多次询问的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。</p>\n<p>我们定义一个操作 get(a, l, r) 表示查询 aa 序列[l,r] 区间内的最大子段和，那么最终我们要求的答案就是 get(nums, 0, nums.size() - 1)。如何分治实现这个操作呢？对于一个区间 [l,r]，我们取 $ m$ &#x3D; [ (l + r )&#x2F; 2]，对区间 [l,m] 和[m+1,r] 分治求解。当递归逐层深入直到区间长度缩小为 1 的时候，递归「开始回升」。这个时候我们考虑如何通过[l,m] 区间的信息和[m+1,r] 区间的信息合并成区间 [l,r] 的信息。最关键的两个问题是：</p>\n<p>我们要维护区间的哪些信息呢？<br>我们如何合并这些信息呢？<br>对于一个区间 $[l,r]$，我们可以维护四个量：</p>\n<p>$lSum$ 表示$[l,r] $内以 ll 为左端点的最大子段和<br>$Sum $表示 $[l,r] $内以 rr 为右端点的最大子段和<br>$mSum $表示$ [l,r] $内的最大子段和<br>$iSum $表示 $[l,r]$ 的区间和<br>以下简称 $[l,m]$ 为$[l,r]$ 的「左子区间」，$[m+1,r] $为$[l,r]$ 的「右子区间」。我们考虑如何维护这些量呢（如何通过左右子区间的信息合并得到$[l,r] $的信息）？对于长度为 $1$ 的区间$ [i,i]$，四个量的值都和 nums[i] 相等。对于长度大于 1 的区间：</p>\n<p>首先最好维护的是$iSum$，区间$ [l,r] $的 $iSum $就等于「左子区间」的 $iSum $加上「右子区间」的 $iSum$。<br>对于 $[l,r]$ 的 $lSum$，存在两种可能，它要么等于「左子区间」的 $lSum$，要么等于「左子区间」的 $iSum $加上「右子区间」的 $lSum$，二者取大。<br>对于 $[l,r] $的 $rSum$，同理，它要么等于「右子区间」的 $rSum$，要么等于「右子区间」的 $iSum $加上「左子区间」的 $rSum$，二者取大。<br>当计算好上面的三个量之后，就很好计算 $[l,r] $的 $mSum $了。我们可以考虑$ [l,r] $的 $mSum $对应的区间是否跨越 $m$——它可能不跨越 $m$，也就是说 $[l,r]$ 的 $mSum $可能是「左子区间」的 $mSum $和 「右子区间」的 $mSum $中的一个；它也可能跨越 $m$，可能是「左子区间」的 $rSum $和 「右子区间」的 $lSum $求和。三者取大。<br>这样问题就得到了解决。</p>\n<p><strong>题外话</strong><br>「方法二」相较于「方法一」来说，时间复杂度相同，但是因为使用了递归，并且维护了四个信息的结构体，运行的时间略长，空间复杂度也不如方法一优秀，而且难以理解。那么这种方法存在的意义是什么呢？</p>\n<p>对于这道题而言，确实是如此的。但是仔细观察「方法二」，它不仅可以解决区间$ [0, n-1$]，还可以用于解决任意的子区间 [l,r][l,r] 的问题。如果我们把$ [0,n−1]$ 分治下去出现的所有子区间的信息都用堆式存储的方式记忆化下来，即建成一颗真正的树之后，我们就可以在 $O(logn)$ 的时间内求到任意区间内的答案，我们甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在 $O(\\log n)$ 的时间内求到任意区间内的答案，对于大规模查询的情况下，这种方法的优势便体现了出来。这棵树就是上文提及的一种神奇的数据结构——<strong>线段树</strong>。</p>\n<p>作者：LeetCode-Solution<br>链接：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    struct Status &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> lSum, rSum, mSum, iSum;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Status <span class=\"title function_\">pushUp</span><span class=\"params\">(Status l, Status r)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">iSum</span> <span class=\"operator\">=</span> l.iSum + r.iSum;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lSum</span> <span class=\"operator\">=</span> max(l.lSum, l.iSum + r.lSum);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rSum</span> <span class=\"operator\">=</span> max(r.rSum, r.iSum + l.rSum);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mSum</span> <span class=\"operator\">=</span> max(max(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Status) &#123;lSum, rSum, mSum, iSum&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Status <span class=\"title function_\">get</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;a, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Status) &#123;a[l], a[l], a[l], a[l]&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Status</span> <span class=\"variable\">lSub</span> <span class=\"operator\">=</span> get(a, l, m);</span><br><span class=\"line\">        <span class=\"type\">Status</span> <span class=\"variable\">rSub</span> <span class=\"operator\">=</span> get(a, m + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pushUp(lSub, rSub);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(nums, <span class=\"number\">0</span>, nums.size() - <span class=\"number\">1</span>).mSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：LeetCode-Solution</span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"解法2-动态规划\"><a href=\"#解法2-动态规划\" class=\"headerlink\" title=\"解法2 动态规划\"></a>解法2 动态规划</h2><p>思路和算法</p>\n<p>假设 $nums$ 数组的长度是 $n$，下标从 $0$ 到 $n-1$。</p>\n<p>我们用 $f(i)$ 代表以第 ii 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：</p>\n<p><img src=\"/hexo-blog/./img/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C.png\" alt=\"image.png\"></p>\n<p>因此我们只需要求出每个位置的 $f(i)$，然后返回 $f$ 数组中的最大值即可。那么我们如何求 $f(i)$ 呢？我们可以考虑 $nums[i]$ 单独成为一段还是加入 $f(i−1)$ 对应的那一段，这取决于$nums[i]$ 和 $f(i-1) + nums[i]$ 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：  </p>\n<p>$$<br>f(i)&#x3D;max{f(i−1)+nums[i],nums[i]}<br>$$</p>\n<p>不难给出一个时间复杂度 $O(n)$、空间复杂度 $O(n)$ 的实现，即用一个 $f$ 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 $f(i)$ 只和 $f(i−1)$ 相关，于是我们可以只用一个变量 $pre$ 来维护对于当前f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。</p>\n"},{"title":"linux开机启动项","date":"2024-10-08T17:59:39.000Z","_content":"在 Debian 系统中，如果你想让某些命令在系统启动时自动运行，你可以通过几种不同的方法来实现这一目标。以下是一些常见的做法：\n\n### 使用 Systemd (推荐)\n\n对于使用 systemd 的 Debian 系统（从 Debian 8 \"Jessie\" 开始默认使用 systemd），你可以创建一个 systemd 服务单元文件来定义需要在启动时执行的任务。这些文件通常保存在 `/etc/systemd/system` 目录下，并以 `.service` 作为扩展名。\n\n例如，如果你想在启动时运行一个脚本 `/usr/local/bin/my-script.sh`，你可以创建一个名为 `my-script.service` 的文件在 `/etc/systemd/system` 目录下：\n\n```shell\n[Unit]\nDescription=My custom script\n\n[Service]\nExecStart=/usr/local/bin/my-script.sh\nUser=myuser\nGroup=mygroup\n\n[Install]\nWantedBy=multi-user.target\n```\n\n创建好后，你需要重新加载 systemd 来应用更改：\n\n```shell\nsudo systemctl daemon-reload\n```\n\n然后可以启用这个服务，这样它就会在每次启动时自动运行了：\n\n```shell\nsudo systemctl enable my-script.service\n```\n\n### 使用 rc.local\n\n虽然使用 systemd 是更现代的方法，但 Debian 仍然支持传统的 `rc.local` 脚本来启动服务。尽管如此，这种方法不被推荐用于新安装或新脚本，因为它可能不会在所有系统中都能正确工作。\n\n你可以将需要执行的命令添加到 `/etc/rc.local` 文件中。确保这个脚本具有可执行权限：\n\n```shell\nsudo chmod +x /etc/rc.local\n```\n\n然后编辑该文件，在其中添加你的命令：\n\n```shell\nsudo nano /etc/rc.local\n```\n\n添加完命令后保存退出即可。\n\n### 注意事项\n\n* 在使用这些方法之前，请确保你了解它们的工作原理以及可能对系统产生的影响。\n* 测试任何新服务或脚本是否按预期工作是很重要的，可以在正式部署前手动执行一次看看效果。\n* 如果你的 Debian 系统不是使用 systemd，而是使用 SysVinit 或者其他初始化系统，那么你可能需要寻找适用于那个初始化系统的相应方法来设置启动任务。","source":"_posts/Linux/linux开机启动项.md","raw":"---\ntitle: linux开机启动项\ndate: 2024-10-09 01:59:39\ncategories:\n  - Linux\ntags:\n  - 启动项\n---\n在 Debian 系统中，如果你想让某些命令在系统启动时自动运行，你可以通过几种不同的方法来实现这一目标。以下是一些常见的做法：\n\n### 使用 Systemd (推荐)\n\n对于使用 systemd 的 Debian 系统（从 Debian 8 \"Jessie\" 开始默认使用 systemd），你可以创建一个 systemd 服务单元文件来定义需要在启动时执行的任务。这些文件通常保存在 `/etc/systemd/system` 目录下，并以 `.service` 作为扩展名。\n\n例如，如果你想在启动时运行一个脚本 `/usr/local/bin/my-script.sh`，你可以创建一个名为 `my-script.service` 的文件在 `/etc/systemd/system` 目录下：\n\n```shell\n[Unit]\nDescription=My custom script\n\n[Service]\nExecStart=/usr/local/bin/my-script.sh\nUser=myuser\nGroup=mygroup\n\n[Install]\nWantedBy=multi-user.target\n```\n\n创建好后，你需要重新加载 systemd 来应用更改：\n\n```shell\nsudo systemctl daemon-reload\n```\n\n然后可以启用这个服务，这样它就会在每次启动时自动运行了：\n\n```shell\nsudo systemctl enable my-script.service\n```\n\n### 使用 rc.local\n\n虽然使用 systemd 是更现代的方法，但 Debian 仍然支持传统的 `rc.local` 脚本来启动服务。尽管如此，这种方法不被推荐用于新安装或新脚本，因为它可能不会在所有系统中都能正确工作。\n\n你可以将需要执行的命令添加到 `/etc/rc.local` 文件中。确保这个脚本具有可执行权限：\n\n```shell\nsudo chmod +x /etc/rc.local\n```\n\n然后编辑该文件，在其中添加你的命令：\n\n```shell\nsudo nano /etc/rc.local\n```\n\n添加完命令后保存退出即可。\n\n### 注意事项\n\n* 在使用这些方法之前，请确保你了解它们的工作原理以及可能对系统产生的影响。\n* 测试任何新服务或脚本是否按预期工作是很重要的，可以在正式部署前手动执行一次看看效果。\n* 如果你的 Debian 系统不是使用 systemd，而是使用 SysVinit 或者其他初始化系统，那么你可能需要寻找适用于那个初始化系统的相应方法来设置启动任务。","slug":"Linux/linux开机启动项","published":1,"updated":"2024-10-08T18:04:41.975Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqd0003o8tzeqmp678v","content":"<p>在 Debian 系统中，如果你想让某些命令在系统启动时自动运行，你可以通过几种不同的方法来实现这一目标。以下是一些常见的做法：</p>\n<h3 id=\"使用-Systemd-推荐\"><a href=\"#使用-Systemd-推荐\" class=\"headerlink\" title=\"使用 Systemd (推荐)\"></a>使用 Systemd (推荐)</h3><p>对于使用 systemd 的 Debian 系统（从 Debian 8 “Jessie” 开始默认使用 systemd），你可以创建一个 systemd 服务单元文件来定义需要在启动时执行的任务。这些文件通常保存在 <code>/etc/systemd/system</code> 目录下，并以 <code>.service</code> 作为扩展名。</p>\n<p>例如，如果你想在启动时运行一个脚本 <code>/usr/local/bin/my-script.sh</code>，你可以创建一个名为 <code>my-script.service</code> 的文件在 <code>/etc/systemd/system</code> 目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My custom script</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/my-script.sh</span><br><span class=\"line\">User=myuser</span><br><span class=\"line\">Group=mygroup</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>创建好后，你需要重新加载 systemd 来应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>然后可以启用这个服务，这样它就会在每次启动时自动运行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable my-script.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-rc-local\"><a href=\"#使用-rc-local\" class=\"headerlink\" title=\"使用 rc.local\"></a>使用 rc.local</h3><p>虽然使用 systemd 是更现代的方法，但 Debian 仍然支持传统的 <code>rc.local</code> 脚本来启动服务。尽管如此，这种方法不被推荐用于新安装或新脚本，因为它可能不会在所有系统中都能正确工作。</p>\n<p>你可以将需要执行的命令添加到 <code>/etc/rc.local</code> 文件中。确保这个脚本具有可执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑该文件，在其中添加你的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>添加完命令后保存退出即可。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在使用这些方法之前，请确保你了解它们的工作原理以及可能对系统产生的影响。</li>\n<li>测试任何新服务或脚本是否按预期工作是很重要的，可以在正式部署前手动执行一次看看效果。</li>\n<li>如果你的 Debian 系统不是使用 systemd，而是使用 SysVinit 或者其他初始化系统，那么你可能需要寻找适用于那个初始化系统的相应方法来设置启动任务。</li>\n</ul>\n","excerpt":"","more":"<p>在 Debian 系统中，如果你想让某些命令在系统启动时自动运行，你可以通过几种不同的方法来实现这一目标。以下是一些常见的做法：</p>\n<h3 id=\"使用-Systemd-推荐\"><a href=\"#使用-Systemd-推荐\" class=\"headerlink\" title=\"使用 Systemd (推荐)\"></a>使用 Systemd (推荐)</h3><p>对于使用 systemd 的 Debian 系统（从 Debian 8 “Jessie” 开始默认使用 systemd），你可以创建一个 systemd 服务单元文件来定义需要在启动时执行的任务。这些文件通常保存在 <code>/etc/systemd/system</code> 目录下，并以 <code>.service</code> 作为扩展名。</p>\n<p>例如，如果你想在启动时运行一个脚本 <code>/usr/local/bin/my-script.sh</code>，你可以创建一个名为 <code>my-script.service</code> 的文件在 <code>/etc/systemd/system</code> 目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My custom script</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/my-script.sh</span><br><span class=\"line\">User=myuser</span><br><span class=\"line\">Group=mygroup</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>创建好后，你需要重新加载 systemd 来应用更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>然后可以启用这个服务，这样它就会在每次启动时自动运行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable my-script.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-rc-local\"><a href=\"#使用-rc-local\" class=\"headerlink\" title=\"使用 rc.local\"></a>使用 rc.local</h3><p>虽然使用 systemd 是更现代的方法，但 Debian 仍然支持传统的 <code>rc.local</code> 脚本来启动服务。尽管如此，这种方法不被推荐用于新安装或新脚本，因为它可能不会在所有系统中都能正确工作。</p>\n<p>你可以将需要执行的命令添加到 <code>/etc/rc.local</code> 文件中。确保这个脚本具有可执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑该文件，在其中添加你的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>添加完命令后保存退出即可。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在使用这些方法之前，请确保你了解它们的工作原理以及可能对系统产生的影响。</li>\n<li>测试任何新服务或脚本是否按预期工作是很重要的，可以在正式部署前手动执行一次看看效果。</li>\n<li>如果你的 Debian 系统不是使用 systemd，而是使用 SysVinit 或者其他初始化系统，那么你可能需要寻找适用于那个初始化系统的相应方法来设置启动任务。</li>\n</ul>\n"},{"title":"iptables 持久化&docker ipv6外网访问","date":"2024-12-04T15:12:22.000Z","_content":"\n[Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1142130)\n\n[docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos/istoreos](https://github.com/istoreos/istoreos/issues/1511)\n\n\n# 允许NAT转发\n\n\n```bash\nip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n\n这两条命令是用于配置Linux系统中的`iptables`防火墙规则的。`iptables`是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：\n\n1. `ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n\n    * 这条命令用于添加一个`nat`表中的`POSTROUTING`链的规则。\n    * `-t nat` 指定了要操作的表是`nat`表，这个表用于网络地址转换（NAT）。\n    * `-A POSTROUTING` 表示将规则添加到`POSTROUTING`链，这个链用于处理即将离开本机的包。\n    * `-o eth0` 指定了输出接口为`eth0`，即所有从`eth0`接口出去的包都会受到这条规则的影响。\n    * `-j MASQUERADE` 表示如果匹配这条规则，那么执行`MASQUERADE`操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。\n2. `ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT`\n\n    * 这条命令用于添加一个`FORWARD`链的规则，这个链用于处理经过本机的包（即转发的包）。\n    * `-A FORWARD` 表示将规则添加到`FORWARD`链。\n    * `-m conntrack` 表示使用`conntrack`模块，这个模块用于跟踪网络连接的状态。\n    * `--ctstate RELATED,ESTABLISHED` 指定了连接状态，`RELATED`表示与已建立的连接相关的包，`ESTABLISHED`表示已建立的连接的包。\n    * `-j ACCEPT` 表示如果匹配这条规则，那么执行`ACCEPT`操作，即接受这些包。\n\n总的来说，第一条命令用于设置源NAT，使得从`eth0`接口出去的包的源地址被替换为`eth0`的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。\n\n# 持久化\n\n\n注意 ipv6 需要使用 `ip6tables-save` `ip6tables-restore`替换\n\n具体执行命令：\n\n```bash\ntouch /etc/network/if-pre-up.d/iptables\n\nchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n然后编辑这个文件：\n\n```bash\nvim /etc/network/if-pre-up.d/iptables\n```\n\n输入以下内容：\n\n```bash\n#!/bin/sh\n\n/sbin/iptables-restore < /etc/iptables.conf\n/sbin/ip6tables-restore < /etc/ip6tables.conf\n```\n\n然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：\n\niptables -t nat -A POSTROUTING -s '10.20.20.20/24' -o vmbr0 -j MASQUERADE\n\niptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 7894 -j DNAT --to 10.20.20.100:3389\n\n配置完毕后，把规则保存到文件：\n\n```bash\niptables-save > /etc/iptables.conf\nip6tables-save > /etc/ip6tables.conf\n```\n\n这样设置，重启系统iptables规则就不会再失效了。\n\n","source":"_posts/Linux/iptables-持久化-docker-ipv6外网访问.md","raw":"---\ntitle: iptables 持久化&docker ipv6外网访问\ndate: 2024-12-04 23:12:22\ncategories:\n  - Linux\ntags:\n  - iptables\n  - ipv6\n  - docker\n---\n\n[Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1142130)\n\n[docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos/istoreos](https://github.com/istoreos/istoreos/issues/1511)\n\n\n# 允许NAT转发\n\n\n```bash\nip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n\n这两条命令是用于配置Linux系统中的`iptables`防火墙规则的。`iptables`是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：\n\n1. `ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n\n    * 这条命令用于添加一个`nat`表中的`POSTROUTING`链的规则。\n    * `-t nat` 指定了要操作的表是`nat`表，这个表用于网络地址转换（NAT）。\n    * `-A POSTROUTING` 表示将规则添加到`POSTROUTING`链，这个链用于处理即将离开本机的包。\n    * `-o eth0` 指定了输出接口为`eth0`，即所有从`eth0`接口出去的包都会受到这条规则的影响。\n    * `-j MASQUERADE` 表示如果匹配这条规则，那么执行`MASQUERADE`操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。\n2. `ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT`\n\n    * 这条命令用于添加一个`FORWARD`链的规则，这个链用于处理经过本机的包（即转发的包）。\n    * `-A FORWARD` 表示将规则添加到`FORWARD`链。\n    * `-m conntrack` 表示使用`conntrack`模块，这个模块用于跟踪网络连接的状态。\n    * `--ctstate RELATED,ESTABLISHED` 指定了连接状态，`RELATED`表示与已建立的连接相关的包，`ESTABLISHED`表示已建立的连接的包。\n    * `-j ACCEPT` 表示如果匹配这条规则，那么执行`ACCEPT`操作，即接受这些包。\n\n总的来说，第一条命令用于设置源NAT，使得从`eth0`接口出去的包的源地址被替换为`eth0`的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。\n\n# 持久化\n\n\n注意 ipv6 需要使用 `ip6tables-save` `ip6tables-restore`替换\n\n具体执行命令：\n\n```bash\ntouch /etc/network/if-pre-up.d/iptables\n\nchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n然后编辑这个文件：\n\n```bash\nvim /etc/network/if-pre-up.d/iptables\n```\n\n输入以下内容：\n\n```bash\n#!/bin/sh\n\n/sbin/iptables-restore < /etc/iptables.conf\n/sbin/ip6tables-restore < /etc/ip6tables.conf\n```\n\n然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：\n\niptables -t nat -A POSTROUTING -s '10.20.20.20/24' -o vmbr0 -j MASQUERADE\n\niptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 7894 -j DNAT --to 10.20.20.100:3389\n\n配置完毕后，把规则保存到文件：\n\n```bash\niptables-save > /etc/iptables.conf\nip6tables-save > /etc/ip6tables.conf\n```\n\n这样设置，重启系统iptables规则就不会再失效了。\n\n","slug":"Linux/iptables-持久化-docker-ipv6外网访问","published":1,"updated":"2024-12-04T15:14:56.075Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqf0005o8tz33ikgr7e","content":"<p><a href=\"https://cloud.tencent.com/developer/article/1142130\">Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云</a></p>\n<p><a href=\"https://github.com/istoreos/istoreos/issues/1511\">docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos&#x2F;istoreos</a></p>\n<h1 id=\"允许NAT转发\"><a href=\"#允许NAT转发\" class=\"headerlink\" title=\"允许NAT转发\"></a>允许NAT转发</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n\n<p>这两条命令是用于配置Linux系统中的<code>iptables</code>防火墙规则的。<code>iptables</code>是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：</p>\n<ol>\n<li><p><code>ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></p>\n<ul>\n<li>这条命令用于添加一个<code>nat</code>表中的<code>POSTROUTING</code>链的规则。</li>\n<li><code>-t nat</code> 指定了要操作的表是<code>nat</code>表，这个表用于网络地址转换（NAT）。</li>\n<li><code>-A POSTROUTING</code> 表示将规则添加到<code>POSTROUTING</code>链，这个链用于处理即将离开本机的包。</li>\n<li><code>-o eth0</code> 指定了输出接口为<code>eth0</code>，即所有从<code>eth0</code>接口出去的包都会受到这条规则的影响。</li>\n<li><code>-j MASQUERADE</code> 表示如果匹配这条规则，那么执行<code>MASQUERADE</code>操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。</li>\n</ul>\n</li>\n<li><p><code>ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code></p>\n<ul>\n<li>这条命令用于添加一个<code>FORWARD</code>链的规则，这个链用于处理经过本机的包（即转发的包）。</li>\n<li><code>-A FORWARD</code> 表示将规则添加到<code>FORWARD</code>链。</li>\n<li><code>-m conntrack</code> 表示使用<code>conntrack</code>模块，这个模块用于跟踪网络连接的状态。</li>\n<li><code>--ctstate RELATED,ESTABLISHED</code> 指定了连接状态，<code>RELATED</code>表示与已建立的连接相关的包，<code>ESTABLISHED</code>表示已建立的连接的包。</li>\n<li><code>-j ACCEPT</code> 表示如果匹配这条规则，那么执行<code>ACCEPT</code>操作，即接受这些包。</li>\n</ul>\n</li>\n</ol>\n<p>总的来说，第一条命令用于设置源NAT，使得从<code>eth0</code>接口出去的包的源地址被替换为<code>eth0</code>的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。</p>\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>注意 ipv6 需要使用 <code>ip6tables-save</code> <code>ip6tables-restore</code>替换</p>\n<p>具体执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">/sbin/iptables-restore &lt; /etc/iptables.conf</span><br><span class=\"line\">/sbin/ip6tables-restore &lt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：</p>\n<p>iptables -t nat -A POSTROUTING -s ‘10.20.20.20&#x2F;24’ -o vmbr0 -j MASQUERADE</p>\n<p>iptables -t nat -A PREROUTING -i vmbr0 -p tcp –dport 7894 -j DNAT –to 10.20.20.100:3389</p>\n<p>配置完毕后，把规则保存到文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.conf</span><br><span class=\"line\">ip6tables-save &gt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样设置，重启系统iptables规则就不会再失效了。</p>\n","excerpt":"","more":"<p><a href=\"https://cloud.tencent.com/developer/article/1142130\">Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云</a></p>\n<p><a href=\"https://github.com/istoreos/istoreos/issues/1511\">docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos&#x2F;istoreos</a></p>\n<h1 id=\"允许NAT转发\"><a href=\"#允许NAT转发\" class=\"headerlink\" title=\"允许NAT转发\"></a>允许NAT转发</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n\n<p>这两条命令是用于配置Linux系统中的<code>iptables</code>防火墙规则的。<code>iptables</code>是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：</p>\n<ol>\n<li><p><code>ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></p>\n<ul>\n<li>这条命令用于添加一个<code>nat</code>表中的<code>POSTROUTING</code>链的规则。</li>\n<li><code>-t nat</code> 指定了要操作的表是<code>nat</code>表，这个表用于网络地址转换（NAT）。</li>\n<li><code>-A POSTROUTING</code> 表示将规则添加到<code>POSTROUTING</code>链，这个链用于处理即将离开本机的包。</li>\n<li><code>-o eth0</code> 指定了输出接口为<code>eth0</code>，即所有从<code>eth0</code>接口出去的包都会受到这条规则的影响。</li>\n<li><code>-j MASQUERADE</code> 表示如果匹配这条规则，那么执行<code>MASQUERADE</code>操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。</li>\n</ul>\n</li>\n<li><p><code>ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code></p>\n<ul>\n<li>这条命令用于添加一个<code>FORWARD</code>链的规则，这个链用于处理经过本机的包（即转发的包）。</li>\n<li><code>-A FORWARD</code> 表示将规则添加到<code>FORWARD</code>链。</li>\n<li><code>-m conntrack</code> 表示使用<code>conntrack</code>模块，这个模块用于跟踪网络连接的状态。</li>\n<li><code>--ctstate RELATED,ESTABLISHED</code> 指定了连接状态，<code>RELATED</code>表示与已建立的连接相关的包，<code>ESTABLISHED</code>表示已建立的连接的包。</li>\n<li><code>-j ACCEPT</code> 表示如果匹配这条规则，那么执行<code>ACCEPT</code>操作，即接受这些包。</li>\n</ul>\n</li>\n</ol>\n<p>总的来说，第一条命令用于设置源NAT，使得从<code>eth0</code>接口出去的包的源地址被替换为<code>eth0</code>的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。</p>\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>注意 ipv6 需要使用 <code>ip6tables-save</code> <code>ip6tables-restore</code>替换</p>\n<p>具体执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">/sbin/iptables-restore &lt; /etc/iptables.conf</span><br><span class=\"line\">/sbin/ip6tables-restore &lt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：</p>\n<p>iptables -t nat -A POSTROUTING -s ‘10.20.20.20&#x2F;24’ -o vmbr0 -j MASQUERADE</p>\n<p>iptables -t nat -A PREROUTING -i vmbr0 -p tcp –dport 7894 -j DNAT –to 10.20.20.100:3389</p>\n<p>配置完毕后，把规则保存到文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.conf</span><br><span class=\"line\">ip6tables-save &gt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样设置，重启系统iptables规则就不会再失效了。</p>\n"},{"title":"iptables","date":"2024-11-21T15:13:27.000Z","_content":"\n[Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1142130)\n\n[docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos/istoreos](https://github.com/istoreos/istoreos/issues/1511)\n\n\n# 持久化\n\n\nDebian系统默认不会保存iptables规则，重启后所有设置过的iptables会失效。解决方法是：设置好iptables规则后，使用`iptables-save`保存规则到文件；然后设置开机时使用`iptables-restore`导入这个文件。\n\n注意 ipv6 需要使用 `ip6tables-save` `ip6tables-restore`替换\n\n具体执行命令：\n\n```bash\ntouch /etc/network/if-pre-up.d/iptables\n\nchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n然后编辑这个文件：\n\n```bash\nvim /etc/network/if-pre-up.d/iptables\n```\n\n输入以下内容：\n\n```bash\n#!/bin/sh\n\n/sbin/iptables-restore < /etc/iptables.conf\n/sbin/ip6tables-restore < /etc/ip6tables.conf\n```\n\n然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：\n\niptables -t nat -A POSTROUTING -s '10.20.20.20/24' -o vmbr0 -j MASQUERADE\n\niptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 7894 -j DNAT --to 10.20.20.100:3389\n\n配置完毕后，把规则保存到文件：\n\n```bash\niptables-save > /etc/iptables.conf\nip6tables-save > /etc/ip6tables.conf\n```\n\n这样设置，重启系统iptables规则就不会再失效了。\n\n\n# 允许NAT转发\n\n\n```bash\nip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n\n这两条命令是用于配置Linux系统中的`iptables`防火墙规则的。`iptables`是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：\n\n1. `ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n\n    * 这条命令用于添加一个`nat`表中的`POSTROUTING`链的规则。\n    * `-t nat` 指定了要操作的表是`nat`表，这个表用于网络地址转换（NAT）。\n    * `-A POSTROUTING` 表示将规则添加到`POSTROUTING`链，这个链用于处理即将离开本机的包。\n    * `-o eth0` 指定了输出接口为`eth0`，即所有从`eth0`接口出去的包都会受到这条规则的影响。\n    * `-j MASQUERADE` 表示如果匹配这条规则，那么执行`MASQUERADE`操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。\n2. `ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT`\n\n    * 这条命令用于添加一个`FORWARD`链的规则，这个链用于处理经过本机的包（即转发的包）。\n    * `-A FORWARD` 表示将规则添加到`FORWARD`链。\n    * `-m conntrack` 表示使用`conntrack`模块，这个模块用于跟踪网络连接的状态。\n    * `--ctstate RELATED,ESTABLISHED` 指定了连接状态，`RELATED`表示与已建立的连接相关的包，`ESTABLISHED`表示已建立的连接的包。\n    * `-j ACCEPT` 表示如果匹配这条规则，那么执行`ACCEPT`操作，即接受这些包。\n\n总的来说，第一条命令用于设置源NAT，使得从`eth0`接口出去的包的源地址被替换为`eth0`的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。","source":"_posts/Linux/iptables.md","raw":"---\ntitle: iptables\ndate: 2024-11-21 23:13:27\ncategories:\n  - Linux\ntags:\n  - Linux\n  - iptables\n  - 网络\n  - NAT\n---\n\n[Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/1142130)\n\n[docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos/istoreos](https://github.com/istoreos/istoreos/issues/1511)\n\n\n# 持久化\n\n\nDebian系统默认不会保存iptables规则，重启后所有设置过的iptables会失效。解决方法是：设置好iptables规则后，使用`iptables-save`保存规则到文件；然后设置开机时使用`iptables-restore`导入这个文件。\n\n注意 ipv6 需要使用 `ip6tables-save` `ip6tables-restore`替换\n\n具体执行命令：\n\n```bash\ntouch /etc/network/if-pre-up.d/iptables\n\nchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n然后编辑这个文件：\n\n```bash\nvim /etc/network/if-pre-up.d/iptables\n```\n\n输入以下内容：\n\n```bash\n#!/bin/sh\n\n/sbin/iptables-restore < /etc/iptables.conf\n/sbin/ip6tables-restore < /etc/ip6tables.conf\n```\n\n然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：\n\niptables -t nat -A POSTROUTING -s '10.20.20.20/24' -o vmbr0 -j MASQUERADE\n\niptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 7894 -j DNAT --to 10.20.20.100:3389\n\n配置完毕后，把规则保存到文件：\n\n```bash\niptables-save > /etc/iptables.conf\nip6tables-save > /etc/ip6tables.conf\n```\n\n这样设置，重启系统iptables规则就不会再失效了。\n\n\n# 允许NAT转发\n\n\n```bash\nip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n\n这两条命令是用于配置Linux系统中的`iptables`防火墙规则的。`iptables`是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：\n\n1. `ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n\n    * 这条命令用于添加一个`nat`表中的`POSTROUTING`链的规则。\n    * `-t nat` 指定了要操作的表是`nat`表，这个表用于网络地址转换（NAT）。\n    * `-A POSTROUTING` 表示将规则添加到`POSTROUTING`链，这个链用于处理即将离开本机的包。\n    * `-o eth0` 指定了输出接口为`eth0`，即所有从`eth0`接口出去的包都会受到这条规则的影响。\n    * `-j MASQUERADE` 表示如果匹配这条规则，那么执行`MASQUERADE`操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。\n2. `ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT`\n\n    * 这条命令用于添加一个`FORWARD`链的规则，这个链用于处理经过本机的包（即转发的包）。\n    * `-A FORWARD` 表示将规则添加到`FORWARD`链。\n    * `-m conntrack` 表示使用`conntrack`模块，这个模块用于跟踪网络连接的状态。\n    * `--ctstate RELATED,ESTABLISHED` 指定了连接状态，`RELATED`表示与已建立的连接相关的包，`ESTABLISHED`表示已建立的连接的包。\n    * `-j ACCEPT` 表示如果匹配这条规则，那么执行`ACCEPT`操作，即接受这些包。\n\n总的来说，第一条命令用于设置源NAT，使得从`eth0`接口出去的包的源地址被替换为`eth0`的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。","slug":"Linux/iptables","published":1,"updated":"2024-11-21T15:23:09.014Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqg0006o8tzhfsj7vso","content":"<p><a href=\"https://cloud.tencent.com/developer/article/1142130\">Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云</a></p>\n<p><a href=\"https://github.com/istoreos/istoreos/issues/1511\">docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos&#x2F;istoreos</a></p>\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>Debian系统默认不会保存iptables规则，重启后所有设置过的iptables会失效。解决方法是：设置好iptables规则后，使用<code>iptables-save</code>保存规则到文件；然后设置开机时使用<code>iptables-restore</code>导入这个文件。</p>\n<p>注意 ipv6 需要使用 <code>ip6tables-save</code> <code>ip6tables-restore</code>替换</p>\n<p>具体执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">/sbin/iptables-restore &lt; /etc/iptables.conf</span><br><span class=\"line\">/sbin/ip6tables-restore &lt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：</p>\n<p>iptables -t nat -A POSTROUTING -s ‘10.20.20.20&#x2F;24’ -o vmbr0 -j MASQUERADE</p>\n<p>iptables -t nat -A PREROUTING -i vmbr0 -p tcp –dport 7894 -j DNAT –to 10.20.20.100:3389</p>\n<p>配置完毕后，把规则保存到文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.conf</span><br><span class=\"line\">ip6tables-save &gt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样设置，重启系统iptables规则就不会再失效了。</p>\n<h1 id=\"允许NAT转发\"><a href=\"#允许NAT转发\" class=\"headerlink\" title=\"允许NAT转发\"></a>允许NAT转发</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n\n<p>这两条命令是用于配置Linux系统中的<code>iptables</code>防火墙规则的。<code>iptables</code>是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：</p>\n<ol>\n<li><p><code>ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></p>\n<ul>\n<li>这条命令用于添加一个<code>nat</code>表中的<code>POSTROUTING</code>链的规则。</li>\n<li><code>-t nat</code> 指定了要操作的表是<code>nat</code>表，这个表用于网络地址转换（NAT）。</li>\n<li><code>-A POSTROUTING</code> 表示将规则添加到<code>POSTROUTING</code>链，这个链用于处理即将离开本机的包。</li>\n<li><code>-o eth0</code> 指定了输出接口为<code>eth0</code>，即所有从<code>eth0</code>接口出去的包都会受到这条规则的影响。</li>\n<li><code>-j MASQUERADE</code> 表示如果匹配这条规则，那么执行<code>MASQUERADE</code>操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。</li>\n</ul>\n</li>\n<li><p><code>ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code></p>\n<ul>\n<li>这条命令用于添加一个<code>FORWARD</code>链的规则，这个链用于处理经过本机的包（即转发的包）。</li>\n<li><code>-A FORWARD</code> 表示将规则添加到<code>FORWARD</code>链。</li>\n<li><code>-m conntrack</code> 表示使用<code>conntrack</code>模块，这个模块用于跟踪网络连接的状态。</li>\n<li><code>--ctstate RELATED,ESTABLISHED</code> 指定了连接状态，<code>RELATED</code>表示与已建立的连接相关的包，<code>ESTABLISHED</code>表示已建立的连接的包。</li>\n<li><code>-j ACCEPT</code> 表示如果匹配这条规则，那么执行<code>ACCEPT</code>操作，即接受这些包。</li>\n</ul>\n</li>\n</ol>\n<p>总的来说，第一条命令用于设置源NAT，使得从<code>eth0</code>接口出去的包的源地址被替换为<code>eth0</code>的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。</p>\n","excerpt":"","more":"<p><a href=\"https://cloud.tencent.com/developer/article/1142130\">Debian下iptables规则重启失效问题的解决方法-腾讯云开发者社区-腾讯云</a></p>\n<p><a href=\"https://github.com/istoreos/istoreos/issues/1511\">docker容器内部无法访问外网IPV6 · Issue #1511 · istoreos&#x2F;istoreos</a></p>\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>Debian系统默认不会保存iptables规则，重启后所有设置过的iptables会失效。解决方法是：设置好iptables规则后，使用<code>iptables-save</code>保存规则到文件；然后设置开机时使用<code>iptables-restore</code>导入这个文件。</p>\n<p>注意 ipv6 需要使用 <code>ip6tables-save</code> <code>ip6tables-restore</code>替换</p>\n<p>具体执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">/sbin/iptables-restore &lt; /etc/iptables.conf</span><br><span class=\"line\">/sbin/ip6tables-restore &lt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后，配置iptables规则。我自己设置的规则是一个端口转发（在单IP独服上开小鸡用）：</p>\n<p>iptables -t nat -A POSTROUTING -s ‘10.20.20.20&#x2F;24’ -o vmbr0 -j MASQUERADE</p>\n<p>iptables -t nat -A PREROUTING -i vmbr0 -p tcp –dport 7894 -j DNAT –to 10.20.20.100:3389</p>\n<p>配置完毕后，把规则保存到文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.conf</span><br><span class=\"line\">ip6tables-save &gt; /etc/ip6tables.conf</span><br></pre></td></tr></table></figure>\n\n<p>这样设置，重启系统iptables规则就不会再失效了。</p>\n<h1 id=\"允许NAT转发\"><a href=\"#允许NAT转发\" class=\"headerlink\" title=\"允许NAT转发\"></a>允许NAT转发</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n\n<p>这两条命令是用于配置Linux系统中的<code>iptables</code>防火墙规则的。<code>iptables</code>是一个用户空间的应用程序，用于配置Linux内核的网络包过滤规则表。下面是这两条命令的具体作用：</p>\n<ol>\n<li><p><code>ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></p>\n<ul>\n<li>这条命令用于添加一个<code>nat</code>表中的<code>POSTROUTING</code>链的规则。</li>\n<li><code>-t nat</code> 指定了要操作的表是<code>nat</code>表，这个表用于网络地址转换（NAT）。</li>\n<li><code>-A POSTROUTING</code> 表示将规则添加到<code>POSTROUTING</code>链，这个链用于处理即将离开本机的包。</li>\n<li><code>-o eth0</code> 指定了输出接口为<code>eth0</code>，即所有从<code>eth0</code>接口出去的包都会受到这条规则的影响。</li>\n<li><code>-j MASQUERADE</code> 表示如果匹配这条规则，那么执行<code>MASQUERADE</code>操作，这是一种NAT操作，用于动态地将出站连接的源地址替换为出口接口的地址。这通常用于当服务器有多个网络接口，并且需要对外隐藏内部网络结构时。</li>\n</ul>\n</li>\n<li><p><code>ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code></p>\n<ul>\n<li>这条命令用于添加一个<code>FORWARD</code>链的规则，这个链用于处理经过本机的包（即转发的包）。</li>\n<li><code>-A FORWARD</code> 表示将规则添加到<code>FORWARD</code>链。</li>\n<li><code>-m conntrack</code> 表示使用<code>conntrack</code>模块，这个模块用于跟踪网络连接的状态。</li>\n<li><code>--ctstate RELATED,ESTABLISHED</code> 指定了连接状态，<code>RELATED</code>表示与已建立的连接相关的包，<code>ESTABLISHED</code>表示已建立的连接的包。</li>\n<li><code>-j ACCEPT</code> 表示如果匹配这条规则，那么执行<code>ACCEPT</code>操作，即接受这些包。</li>\n</ul>\n</li>\n</ol>\n<p>总的来说，第一条命令用于设置源NAT，使得从<code>eth0</code>接口出去的包的源地址被替换为<code>eth0</code>的地址，通常用于动态IP环境。第二条命令用于允许所有与已建立或相关联的连接的转发流量，这是实现网络地址转换和透明代理的一部分。这些规则通常用于路由器或防火墙设备上，以管理进出网络的流量。</p>\n"},{"title":"linux网速测试","date":"2024-10-22T16:35:42.000Z","_content":"\n原文链接：https://blog.csdn.net/m0_37814112/article/details/120066167\n\n一、背景\n需要对服务器的内网上下行带宽进行测试，便于判断当前带宽是否符合业务场景需求，在网上找到了iperf3工具。\n\niperf3是用来测量一个网络最大带宽的工具。\n它支持调节各种参数比如发送持续时间，\n发送/接收缓存，\n通信协议。\n每次测试，它都会报告网络带宽，丢包率和其他参数。\n\n二、工具安装\n使用iperf3工具测试服务器带宽，它分为服务端与客户端，两边都要安装iperf3工具。\n\n说明：linux环境安装\n\n1. 安装\n\n    ```java\n    yum -y install epel-release\n    yum install iperf3\n    ```\n2. windows环境安装\n\n   iperf3 windows版下载\n   https://iperf.fr/download/windows/iperf-3.1.3-win64.zip\n\n\n三、工具测试\n\n\niperf3参数详解\n\n> -s 在服务端模式下运行\n> -D 作为守护程序运行\n> -d 进行双向测试\n> -c 在客户端模式下运行，连接server端地址\n> -p 指定端口（要和服务器端一致）\n> -B 绑定客户端的ip地址\n> -4 指定ipv4\n> -f 格式化带宽数输出\n> -n 指定传输的字节数\n> -b 使用带宽数量\n> -u 指定udp协议\n> -t 以秒为单位指定传输时间，默认10秒\n> --get-server-output 获取来自服务器端的结果\n\n\n测试网络吞吐量\n\n```java\n#server端（192.168.1.212）\niperf3 -p 2228 -s -D\n\n#client端（192.168.1.165）\niperf3 -c 192.168.1.212 -p 2228\n————————————————\n```","source":"_posts/Linux/linux网速测试.md","raw":"---\ntitle: linux网速测试\ndate: 2024-10-23 00:35:42\ncategories:\n  - Linux\ntags:\n  - Linux\n  - 网络\n---\n\n原文链接：https://blog.csdn.net/m0_37814112/article/details/120066167\n\n一、背景\n需要对服务器的内网上下行带宽进行测试，便于判断当前带宽是否符合业务场景需求，在网上找到了iperf3工具。\n\niperf3是用来测量一个网络最大带宽的工具。\n它支持调节各种参数比如发送持续时间，\n发送/接收缓存，\n通信协议。\n每次测试，它都会报告网络带宽，丢包率和其他参数。\n\n二、工具安装\n使用iperf3工具测试服务器带宽，它分为服务端与客户端，两边都要安装iperf3工具。\n\n说明：linux环境安装\n\n1. 安装\n\n    ```java\n    yum -y install epel-release\n    yum install iperf3\n    ```\n2. windows环境安装\n\n   iperf3 windows版下载\n   https://iperf.fr/download/windows/iperf-3.1.3-win64.zip\n\n\n三、工具测试\n\n\niperf3参数详解\n\n> -s 在服务端模式下运行\n> -D 作为守护程序运行\n> -d 进行双向测试\n> -c 在客户端模式下运行，连接server端地址\n> -p 指定端口（要和服务器端一致）\n> -B 绑定客户端的ip地址\n> -4 指定ipv4\n> -f 格式化带宽数输出\n> -n 指定传输的字节数\n> -b 使用带宽数量\n> -u 指定udp协议\n> -t 以秒为单位指定传输时间，默认10秒\n> --get-server-output 获取来自服务器端的结果\n\n\n测试网络吞吐量\n\n```java\n#server端（192.168.1.212）\niperf3 -p 2228 -s -D\n\n#client端（192.168.1.165）\niperf3 -c 192.168.1.212 -p 2228\n————————————————\n```","slug":"Linux/linux网速测试","published":1,"updated":"2024-10-22T16:41:04.052Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqk0009o8tz2ndy30cj","content":"<p>原文链接：<a href=\"https://blog.csdn.net/m0_37814112/article/details/120066167\">https://blog.csdn.net/m0_37814112/article/details/120066167</a></p>\n<p>一、背景<br>需要对服务器的内网上下行带宽进行测试，便于判断当前带宽是否符合业务场景需求，在网上找到了iperf3工具。</p>\n<p>iperf3是用来测量一个网络最大带宽的工具。<br>它支持调节各种参数比如发送持续时间，<br>发送&#x2F;接收缓存，<br>通信协议。<br>每次测试，它都会报告网络带宽，丢包率和其他参数。</p>\n<p>二、工具安装<br>使用iperf3工具测试服务器带宽，它分为服务端与客户端，两边都要安装iperf3工具。</p>\n<p>说明：linux环境安装</p>\n<ol>\n<li><p>安装</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">yum install iperf3</span><br></pre></td></tr></table></figure></li>\n<li><p>windows环境安装</p>\n<p>iperf3 windows版下载<br><a href=\"https://iperf.fr/download/windows/iperf-3.1.3-win64.zip\">https://iperf.fr/download/windows/iperf-3.1.3-win64.zip</a></p>\n</li>\n</ol>\n<p>三、工具测试</p>\n<p>iperf3参数详解</p>\n<blockquote>\n<p>-s 在服务端模式下运行<br>-D 作为守护程序运行<br>-d 进行双向测试<br>-c 在客户端模式下运行，连接server端地址<br>-p 指定端口（要和服务器端一致）<br>-B 绑定客户端的ip地址<br>-4 指定ipv4<br>-f 格式化带宽数输出<br>-n 指定传输的字节数<br>-b 使用带宽数量<br>-u 指定udp协议<br>-t 以秒为单位指定传输时间，默认10秒<br>–get-server-output 获取来自服务器端的结果</p>\n</blockquote>\n<p>测试网络吞吐量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#server端（<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.212</span>）</span><br><span class=\"line\">iperf3 -p <span class=\"number\">2228</span> -s -D</span><br><span class=\"line\"></span><br><span class=\"line\">#client端（<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.165</span>）</span><br><span class=\"line\">iperf3 -c <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.212</span> -p <span class=\"number\">2228</span></span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>原文链接：<a href=\"https://blog.csdn.net/m0_37814112/article/details/120066167\">https://blog.csdn.net/m0_37814112/article/details/120066167</a></p>\n<p>一、背景<br>需要对服务器的内网上下行带宽进行测试，便于判断当前带宽是否符合业务场景需求，在网上找到了iperf3工具。</p>\n<p>iperf3是用来测量一个网络最大带宽的工具。<br>它支持调节各种参数比如发送持续时间，<br>发送&#x2F;接收缓存，<br>通信协议。<br>每次测试，它都会报告网络带宽，丢包率和其他参数。</p>\n<p>二、工具安装<br>使用iperf3工具测试服务器带宽，它分为服务端与客户端，两边都要安装iperf3工具。</p>\n<p>说明：linux环境安装</p>\n<ol>\n<li><p>安装</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">yum install iperf3</span><br></pre></td></tr></table></figure></li>\n<li><p>windows环境安装</p>\n<p>iperf3 windows版下载<br><a href=\"https://iperf.fr/download/windows/iperf-3.1.3-win64.zip\">https://iperf.fr/download/windows/iperf-3.1.3-win64.zip</a></p>\n</li>\n</ol>\n<p>三、工具测试</p>\n<p>iperf3参数详解</p>\n<blockquote>\n<p>-s 在服务端模式下运行<br>-D 作为守护程序运行<br>-d 进行双向测试<br>-c 在客户端模式下运行，连接server端地址<br>-p 指定端口（要和服务器端一致）<br>-B 绑定客户端的ip地址<br>-4 指定ipv4<br>-f 格式化带宽数输出<br>-n 指定传输的字节数<br>-b 使用带宽数量<br>-u 指定udp协议<br>-t 以秒为单位指定传输时间，默认10秒<br>–get-server-output 获取来自服务器端的结果</p>\n</blockquote>\n<p>测试网络吞吐量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#server端（<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.212</span>）</span><br><span class=\"line\">iperf3 -p <span class=\"number\">2228</span> -s -D</span><br><span class=\"line\"></span><br><span class=\"line\">#client端（<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.165</span>）</span><br><span class=\"line\">iperf3 -c <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.212</span> -p <span class=\"number\">2228</span></span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>"},{"title":"温度、风扇控制 fancontrol","date":"2024-09-28T15:24:30.000Z","_content":"\n# fancontrol 官网配置说明  \nhttps://linux.die.net/man/8/fancontrol\n\n> INTERVAL  \n> 此变量定义执行 fancontrol 主循环的间隔（以秒为单位）  \n> FCTEMPS  \n> 将 PWM 输出映射到温度传感器，以便 fancontrol 知道应该使用哪些温度传感器来计算 相应的 PWM 输出。  \n> FCFANS \n> FCFANS 记录 PWM 和风扇之间的关联。然后 fancontrol 可以检查风扇速度，并在风扇意外停止时重新启动它。  \n> MINTEMP  \n> 风扇切换到最低速度的温度低于该温度。  \n> MAXTEMP  \n> 风扇切换到最大速度的温度。  \n> MINSTART \n> 设置风扇开始旋转的最小速度。您应该使用一个 safe 值来确保它工作，即使风扇变旧也是如此。  \n> MINSTOP  \n> 风扇仍旋转的最小速度。这里也使用 safe 值。  \n> MINPWM  \n> 温度低于 MINTEMP 时使用的 PWM 值。通常，如果风扇可以正常停止，则此值为 0，或者与 MINSTOP，如果您不希望风扇停止。如果未定义此值，则默认为 0 （停止的风扇）。  \n> MAXPWM  \n> 温度超过 MAXTEMP 时使用的 PWM 值。如果未定义此值，则默认为 255 （全速）。  \n\ne5 平台配置备份  \n\n```\nDEVPATH=hwmon1=devices/pci0000:00/0000:00:01.0/0000:01:00.0/nvme/nvme0 hwmon2=devices/platform/nct6775.2592\nDEVNAME=hwmon1=nvme hwmon2=nct6779\nFCTEMPS= hwmon3/pwm2=hwmon0/temp1_input\nFCFANS= hwmon3/pwm2=hwmon2/fan2_input\nMINTEMP= hwmon3/pwm2=30\nMAXTEMP= hwmon3/pwm2=70\nMINSTART= hwmon3/pwm2=25\nMINSTOP= hwmon3/pwm2=0\nMAXPWM= hwmon3/pwm2=200\n```\n\n链接： https://www.520cdr.com/?p=1378  \n\n[https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))\n维基百科教程走安装模块\n\n此处 debian 安装命令参考：\n\nhttps://linoxide.com/monitoring-2/install-lm-sensors-linux/\n\nOn Ubuntu and Debian Distros\n\n```\napt install lm-sensors fancontrol\n```\n\nOn Fedora 26 and RPM Linux distros\n\n```\ndnf install lm_sensors\n```\n\nOnce the installation is done, run the following commands to check your current hardware specifications.   \n\n**完成这一步需要重启**\n```\nsudo sensors-detect\n```\n\nIt will ask you few questions. Answer Yes for all of them.\n\n# lm-sensors\n\n设置 lm_sensors，\n\n```\n$ sensors\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:      +29.0°C  (high = +76.0°C, crit = +100.0°C)  \n \n[...]\n \nit8718-isa-0290\nAdapter: ISA adapter\nVcc:         +1.14 V  (min =  +0.00 V, max =  +4.08 V)   \nVTT:         +2.08 V  (min =  +0.00 V, max =  +4.08 V)   \n+3.3V:       +3.33 V  (min =  +0.00 V, max =  +4.08 V)   \nNB Vcore:    +0.03 V  (min =  +0.00 V, max =  +4.08 V)   \nVDRAM:       +2.13 V  (min =  +0.00 V, max =  +4.08 V)   \nfan1:        690 RPM  (min =   10 RPM)\ntemp1:       +37.5°C  (low  = +129.5°C, high = +129.5°C)  sensor = thermistor\ntemp2:       +25.0°C  (low  = +127.0°C, high = +127.0°C)  sensor = thermal diode\n```\n\n\n# 运行 sensors 获得风扇转速接口位置 fan2\n\n```\nroot@host:~# sensors\nnct6106-isa-0a10\nAdapter: ISA adapter\nin0:            +0.96 V  (min =  +0.00 V, max =  +1.74 V)\nin1:            +1.54 V  (min =  +0.00 V, max =  +2.04 V)\nin2:            +3.34 V  (min =  +0.00 V, max =  +4.08 V)\nin3:            +3.20 V  (min =  +0.00 V, max =  +4.08 V)\nin4:            +1.05 V  (min =  +0.00 V, max =  +2.04 V)\nin5:            +1.04 V  (min =  +0.00 V, max =  +2.04 V)\nin6:            +1.66 V  (min =  +0.00 V, max =  +2.04 V)\nin7:            +3.12 V  (min =  +0.00 V, max =  +4.08 V)\nin8:            +2.10 V  (min =  +0.00 V, max =  +4.08 V)\nfan1:             0 RPM  (min =    0 RPM)\nfan2:          1800 RPM  (min =    0 RPM)\nfan3:             0 RPM  (min =    0 RPM)\nSYSTIN:         +46.0°C  (high =  +0.0°C, hyst =  +0.0°C)  ALARM\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode\nCPUTIN:        +127.0°C  (high = +80.0°C, hyst = +75.0°C)  ALARM\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermistor\nAUXTIN:         +24.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode\nPECI Agent 0:   +64.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +75.0°C)\nPECI Agent 1:    +0.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +127.0°C)\nPCH_CHIP_TEMP:   +0.0°C\nPCH_CPU_TEMP:    +0.0°C\nintrusion0:    ALARM\nbeep_enable:   disabled\n \nacpitz-virtual-0\nAdapter: Virtual device\ntemp1:        +27.8°C  (crit = +92.0°C)\ntemp2:        +29.8°C  (crit = +92.0°C)\n \ncoretemp-isa-0000\nAdapter: ISA adapter\nPackage id 0:  +64.0°C  (high = +87.0°C, crit = +91.0°C)\nCore 0:        +64.0°C  (high = +87.0°C, crit = +91.0°C)\nCore 1:        +64.0°C  (high = +87.0°C, crit = +91.0°C)\n```\n\n# 使用 pwnconfig 检测\n\n```\nroot@host:~# pwmconfig\nFile /var/run/fancontrol.pid exists. This typically means that the\nfancontrol deamon is running. You should stop it before running pwmconfig.\nIf you are certain that fancontrol is not running, then you can delete\n/var/run/fancontrol.pid manually.\nroot@host:~# service\nUsage: service < option > | --status-all | [service_name [ command | --full-restart] ]\nroot@host:~# service fancontrol stop\nroot@host:~# pwmconfig\n# pwmconfig revision 6243 (2014-03-20)\nThis program will search your sensors for pulse width modulation (pwm)\ncontrols, and test each one to see if it controls a fan on\nyour motherboard. Note that many motherboards do not have pwm\ncircuitry installed, even if your sensor chip supports pwm.\n \nWe will attempt to briefly stop each fan using the pwm controls.\nThe program will attempt to restore each fan to full speed\nafter testing. However, it is ** very important ** that you\nphysically verify that the fans have been to full speed\nafter the program has completed.\n \nFound the following devices:\n   hwmon0 is acpitz\n   hwmon1 is coretemp\n   hwmon2 is nct6106\n \nFound the following PWM controls:\n   hwmon2/pwm1           current value: 127\n   hwmon2/pwm2           current value: 255\n \nGiving the fans some time to reach full speed...\n \nFound the following fan sensors:\n   hwmon2/fan1_input     current speed: 0 ... skipping!\n   hwmon2/fan2_input     current speed: 2749 RPM\n   hwmon2/fan3_input     current speed: 0 ... skipping!\n \nWarning!!! This program will stop your fans, one at a time,\nfor approximately 5 seconds each!!!\nThis may cause your processor temperature to rise!!!\nIf you do not want to do this hit control-C now!!!\nHit return to continue:\nTesting pwm control hwmon2/pwm1 ...\n  hwmon2/fan2_input ... speed was 2749 now 2772\n    no correlation\n \nNo correlations were detected.\nThere is either no fan connected to the output of hwmon2/pwm1,\nor the connected fan has no rpm-signal connected to one of\nthe tested fan sensors. (Note: not all motherboards have\nthe pwm outputs connected to the fan connectors,\ncheck out the hardware database on http://www.almico.com/forumindex.php)\n \nDid you see/hear a fan stopping during the above test (n)?# 此时应该是测了风扇 1，并没有听见停止，所以选 n\n \nTesting pwm control hwmon2/pwm2 ...\n  hwmon2/fan2_input ... speed was 2749 now 1205\n    It appears that fan hwmon2/fan2_input\n    is controlled by pwm hwmon2/pwm2\nWould you like to generate a detailed correlation (y)?\nNote: If you had gnuplot installed, I could generate a graphical plot.\n    PWM 255 FAN 2743  #风扇转速等级，后面会用到\n    PWM 240 FAN 2721\n    PWM 225 FAN 2657\n    PWM 210 FAN 2571\n    PWM 195 FAN 2495\n    PWM 180 FAN 2385\n    PWM 165 FAN 2268\n    PWM 150 FAN 2142\n    PWM 135 FAN 1982\n    PWM 120 FAN 1809\n    PWM 105 FAN 1601\n    PWM 90 FAN 1383\n    PWM 75 FAN 1259\n    PWM 60 FAN 1201\n    PWM 45 FAN 1201\n    PWM 30 FAN 1201\n    PWM 28 FAN 1198\n    PWM 26 FAN 1193\n    PWM 24 FAN 1195\n    PWM 22 FAN 1201\n    PWM 20 FAN 1200\n    PWM 18 FAN 1208\n    PWM 16 FAN 1208\n    PWM 14 FAN 1206\n    PWM 12 FAN 1197\n    PWM 10 FAN 1203\n    PWM 8 FAN 1207\n    PWM 6 FAN 1215\n    PWM 4 FAN 1204\n    PWM 2 FAN 1203\n    PWM 0 FAN 1194\n \nTesting is complete.\nPlease verify that all fans have returned to their normal speed.\n \nThe fancontrol script can automatically respond to temperature changes\nof your system by changing fanspeeds.\nDo you want to set up its configuration file now (y)? y# 百度英文意思\nWhat should be the path to your fancontrol config file (/etc/fancontrol)?# 风扇控制文件位置\nLoading configuration from /etc/fancontrol ...\n```\n\n# 设置自定义风扇模块参数\n\n```\nSelect fan output to configure, or other action:\n1) hwmon2/pwm2         3) Just quit           5) Show configuration\n2) Change INTERVAL     4) Save and quit\nselect (1-n): 1 #开始自定义\n \nDevices:\nhwmon0 is acpitz\nhwmon1 is coretemp\nhwmon2 is nct6106\n \nCurrent temperature readings are as follows:\nhwmon0/temp1_input      27\nhwmon0/temp2_input      29\nhwmon1/temp1_input      63\nhwmon1/temp2_input      61\nhwmon1/temp3_input      63\nhwmon2/temp1_input      45\nhwmon2/temp2_input      127\nhwmon2/temp3_input      24\nhwmon2/temp7_input      61\nhwmon2/temp8_input      0\nhwmon2/temp9_input      0\n \nSelect a temperature sensor as source for hwmon2/pwm2:\n 1) hwmon0/temp1_input   #选择一个连接的温度，因为我想得到一个较低的转速，所以选择了一个较低的温度\n 2) hwmon0/temp2_input\n 3) hwmon1/temp1_input\n 4) hwmon1/temp2_input\n 5) hwmon1/temp3_input\n 6) hwmon2/temp1_input\n 7) hwmon2/temp2_input\n 8) hwmon2/temp3_input\n 9) hwmon2/temp7_input\n10) hwmon2/temp8_input\n11) hwmon2/temp9_input\n12) None (Do not affect this PWM output)\nselect (1-n): 1  #选择低温的 1）hwmon0/tem1_input\n \nEnter the low temperature (degree C)\nbelow which the fan should spin at minimum speed (20): 25\n#风扇应以最低速度旋转\nEnter the high temperature (degree C)\nover which the fan should spin at maximum speed (60): 90\n#风扇应以最大速度旋转\nEnter the PWM value (0-255) to use when the temperature\nis over the high temperature limit (255): 90\n#输入 PWM 值（0-255），以便在温度超过温度极限时使用. 此处就用到了之前说的风扇等级转速\n#我选择的 90 对应的转速即为：1383  这个应该就是降低转速的重点  \nSelect fan output to configure, or other action:\n1) hwmon2/pwm2         3) Just quit           5) Show configuration\n2) Change INTERVAL     4) Save and quit\nselect (1-n): 4\n#选择 4 保存退出\nSaving configuration to /etc/fancontrol...\nConfiguration saved\nroot@host:~# vim /etc/fancontrol #检查一下文件内容\nroot@host:~# service fancontrol start  #开始运行风扇控制，风扇速度立马降下来了！\n```\n\n\n# 贴一下 fancontrol 配置文件内容：\n\n```\n\nroot@host:~# cat /etc/fancontrol\n\nConfiguration file generated by pwmconfig, changes will be lost\n\nINTERVAL=10\nDEVPATH=hwmon0= hwmon2=devices/platform/nct6775.2576\nDEVNAME=hwmon0=acpitz hwmon2=nct6106\nFCTEMPS= hwmon2/pwm2=hwmon0/temp1_input\nFCFANS= hwmon2/pwm2=hwmon2/fan2_input\nMINTEMP= hwmon2/pwm2=25\nMAXTEMP= hwmon2/pwm2=90\nMINSTART= hwmon2/pwm2=150\nMINSTOP= hwmon2/pwm2=0\nMAXPWM=hwmon2/pwm2=90\n```","source":"_posts/Linux/温度、风扇控制.md","raw":"---\ntitle: 温度、风扇控制 fancontrol\ndate: 2024-09-28 23:24:30\ncategories:\n  - linux\ntags:\n  - 噪音控制\n  - 温度控制\n  - fancontrol\n---\n\n# fancontrol 官网配置说明  \nhttps://linux.die.net/man/8/fancontrol\n\n> INTERVAL  \n> 此变量定义执行 fancontrol 主循环的间隔（以秒为单位）  \n> FCTEMPS  \n> 将 PWM 输出映射到温度传感器，以便 fancontrol 知道应该使用哪些温度传感器来计算 相应的 PWM 输出。  \n> FCFANS \n> FCFANS 记录 PWM 和风扇之间的关联。然后 fancontrol 可以检查风扇速度，并在风扇意外停止时重新启动它。  \n> MINTEMP  \n> 风扇切换到最低速度的温度低于该温度。  \n> MAXTEMP  \n> 风扇切换到最大速度的温度。  \n> MINSTART \n> 设置风扇开始旋转的最小速度。您应该使用一个 safe 值来确保它工作，即使风扇变旧也是如此。  \n> MINSTOP  \n> 风扇仍旋转的最小速度。这里也使用 safe 值。  \n> MINPWM  \n> 温度低于 MINTEMP 时使用的 PWM 值。通常，如果风扇可以正常停止，则此值为 0，或者与 MINSTOP，如果您不希望风扇停止。如果未定义此值，则默认为 0 （停止的风扇）。  \n> MAXPWM  \n> 温度超过 MAXTEMP 时使用的 PWM 值。如果未定义此值，则默认为 255 （全速）。  \n\ne5 平台配置备份  \n\n```\nDEVPATH=hwmon1=devices/pci0000:00/0000:00:01.0/0000:01:00.0/nvme/nvme0 hwmon2=devices/platform/nct6775.2592\nDEVNAME=hwmon1=nvme hwmon2=nct6779\nFCTEMPS= hwmon3/pwm2=hwmon0/temp1_input\nFCFANS= hwmon3/pwm2=hwmon2/fan2_input\nMINTEMP= hwmon3/pwm2=30\nMAXTEMP= hwmon3/pwm2=70\nMINSTART= hwmon3/pwm2=25\nMINSTOP= hwmon3/pwm2=0\nMAXPWM= hwmon3/pwm2=200\n```\n\n链接： https://www.520cdr.com/?p=1378  \n\n[https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))\n维基百科教程走安装模块\n\n此处 debian 安装命令参考：\n\nhttps://linoxide.com/monitoring-2/install-lm-sensors-linux/\n\nOn Ubuntu and Debian Distros\n\n```\napt install lm-sensors fancontrol\n```\n\nOn Fedora 26 and RPM Linux distros\n\n```\ndnf install lm_sensors\n```\n\nOnce the installation is done, run the following commands to check your current hardware specifications.   \n\n**完成这一步需要重启**\n```\nsudo sensors-detect\n```\n\nIt will ask you few questions. Answer Yes for all of them.\n\n# lm-sensors\n\n设置 lm_sensors，\n\n```\n$ sensors\ncoretemp-isa-0000\nAdapter: ISA adapter\nCore 0:      +29.0°C  (high = +76.0°C, crit = +100.0°C)  \n \n[...]\n \nit8718-isa-0290\nAdapter: ISA adapter\nVcc:         +1.14 V  (min =  +0.00 V, max =  +4.08 V)   \nVTT:         +2.08 V  (min =  +0.00 V, max =  +4.08 V)   \n+3.3V:       +3.33 V  (min =  +0.00 V, max =  +4.08 V)   \nNB Vcore:    +0.03 V  (min =  +0.00 V, max =  +4.08 V)   \nVDRAM:       +2.13 V  (min =  +0.00 V, max =  +4.08 V)   \nfan1:        690 RPM  (min =   10 RPM)\ntemp1:       +37.5°C  (low  = +129.5°C, high = +129.5°C)  sensor = thermistor\ntemp2:       +25.0°C  (low  = +127.0°C, high = +127.0°C)  sensor = thermal diode\n```\n\n\n# 运行 sensors 获得风扇转速接口位置 fan2\n\n```\nroot@host:~# sensors\nnct6106-isa-0a10\nAdapter: ISA adapter\nin0:            +0.96 V  (min =  +0.00 V, max =  +1.74 V)\nin1:            +1.54 V  (min =  +0.00 V, max =  +2.04 V)\nin2:            +3.34 V  (min =  +0.00 V, max =  +4.08 V)\nin3:            +3.20 V  (min =  +0.00 V, max =  +4.08 V)\nin4:            +1.05 V  (min =  +0.00 V, max =  +2.04 V)\nin5:            +1.04 V  (min =  +0.00 V, max =  +2.04 V)\nin6:            +1.66 V  (min =  +0.00 V, max =  +2.04 V)\nin7:            +3.12 V  (min =  +0.00 V, max =  +4.08 V)\nin8:            +2.10 V  (min =  +0.00 V, max =  +4.08 V)\nfan1:             0 RPM  (min =    0 RPM)\nfan2:          1800 RPM  (min =    0 RPM)\nfan3:             0 RPM  (min =    0 RPM)\nSYSTIN:         +46.0°C  (high =  +0.0°C, hyst =  +0.0°C)  ALARM\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode\nCPUTIN:        +127.0°C  (high = +80.0°C, hyst = +75.0°C)  ALARM\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermistor\nAUXTIN:         +24.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode\nPECI Agent 0:   +64.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +75.0°C)\nPECI Agent 1:    +0.0°C  (high = +80.0°C, hyst = +75.0°C)\n                         (crit low = +127.0°C, crit = +127.0°C)\nPCH_CHIP_TEMP:   +0.0°C\nPCH_CPU_TEMP:    +0.0°C\nintrusion0:    ALARM\nbeep_enable:   disabled\n \nacpitz-virtual-0\nAdapter: Virtual device\ntemp1:        +27.8°C  (crit = +92.0°C)\ntemp2:        +29.8°C  (crit = +92.0°C)\n \ncoretemp-isa-0000\nAdapter: ISA adapter\nPackage id 0:  +64.0°C  (high = +87.0°C, crit = +91.0°C)\nCore 0:        +64.0°C  (high = +87.0°C, crit = +91.0°C)\nCore 1:        +64.0°C  (high = +87.0°C, crit = +91.0°C)\n```\n\n# 使用 pwnconfig 检测\n\n```\nroot@host:~# pwmconfig\nFile /var/run/fancontrol.pid exists. This typically means that the\nfancontrol deamon is running. You should stop it before running pwmconfig.\nIf you are certain that fancontrol is not running, then you can delete\n/var/run/fancontrol.pid manually.\nroot@host:~# service\nUsage: service < option > | --status-all | [service_name [ command | --full-restart] ]\nroot@host:~# service fancontrol stop\nroot@host:~# pwmconfig\n# pwmconfig revision 6243 (2014-03-20)\nThis program will search your sensors for pulse width modulation (pwm)\ncontrols, and test each one to see if it controls a fan on\nyour motherboard. Note that many motherboards do not have pwm\ncircuitry installed, even if your sensor chip supports pwm.\n \nWe will attempt to briefly stop each fan using the pwm controls.\nThe program will attempt to restore each fan to full speed\nafter testing. However, it is ** very important ** that you\nphysically verify that the fans have been to full speed\nafter the program has completed.\n \nFound the following devices:\n   hwmon0 is acpitz\n   hwmon1 is coretemp\n   hwmon2 is nct6106\n \nFound the following PWM controls:\n   hwmon2/pwm1           current value: 127\n   hwmon2/pwm2           current value: 255\n \nGiving the fans some time to reach full speed...\n \nFound the following fan sensors:\n   hwmon2/fan1_input     current speed: 0 ... skipping!\n   hwmon2/fan2_input     current speed: 2749 RPM\n   hwmon2/fan3_input     current speed: 0 ... skipping!\n \nWarning!!! This program will stop your fans, one at a time,\nfor approximately 5 seconds each!!!\nThis may cause your processor temperature to rise!!!\nIf you do not want to do this hit control-C now!!!\nHit return to continue:\nTesting pwm control hwmon2/pwm1 ...\n  hwmon2/fan2_input ... speed was 2749 now 2772\n    no correlation\n \nNo correlations were detected.\nThere is either no fan connected to the output of hwmon2/pwm1,\nor the connected fan has no rpm-signal connected to one of\nthe tested fan sensors. (Note: not all motherboards have\nthe pwm outputs connected to the fan connectors,\ncheck out the hardware database on http://www.almico.com/forumindex.php)\n \nDid you see/hear a fan stopping during the above test (n)?# 此时应该是测了风扇 1，并没有听见停止，所以选 n\n \nTesting pwm control hwmon2/pwm2 ...\n  hwmon2/fan2_input ... speed was 2749 now 1205\n    It appears that fan hwmon2/fan2_input\n    is controlled by pwm hwmon2/pwm2\nWould you like to generate a detailed correlation (y)?\nNote: If you had gnuplot installed, I could generate a graphical plot.\n    PWM 255 FAN 2743  #风扇转速等级，后面会用到\n    PWM 240 FAN 2721\n    PWM 225 FAN 2657\n    PWM 210 FAN 2571\n    PWM 195 FAN 2495\n    PWM 180 FAN 2385\n    PWM 165 FAN 2268\n    PWM 150 FAN 2142\n    PWM 135 FAN 1982\n    PWM 120 FAN 1809\n    PWM 105 FAN 1601\n    PWM 90 FAN 1383\n    PWM 75 FAN 1259\n    PWM 60 FAN 1201\n    PWM 45 FAN 1201\n    PWM 30 FAN 1201\n    PWM 28 FAN 1198\n    PWM 26 FAN 1193\n    PWM 24 FAN 1195\n    PWM 22 FAN 1201\n    PWM 20 FAN 1200\n    PWM 18 FAN 1208\n    PWM 16 FAN 1208\n    PWM 14 FAN 1206\n    PWM 12 FAN 1197\n    PWM 10 FAN 1203\n    PWM 8 FAN 1207\n    PWM 6 FAN 1215\n    PWM 4 FAN 1204\n    PWM 2 FAN 1203\n    PWM 0 FAN 1194\n \nTesting is complete.\nPlease verify that all fans have returned to their normal speed.\n \nThe fancontrol script can automatically respond to temperature changes\nof your system by changing fanspeeds.\nDo you want to set up its configuration file now (y)? y# 百度英文意思\nWhat should be the path to your fancontrol config file (/etc/fancontrol)?# 风扇控制文件位置\nLoading configuration from /etc/fancontrol ...\n```\n\n# 设置自定义风扇模块参数\n\n```\nSelect fan output to configure, or other action:\n1) hwmon2/pwm2         3) Just quit           5) Show configuration\n2) Change INTERVAL     4) Save and quit\nselect (1-n): 1 #开始自定义\n \nDevices:\nhwmon0 is acpitz\nhwmon1 is coretemp\nhwmon2 is nct6106\n \nCurrent temperature readings are as follows:\nhwmon0/temp1_input      27\nhwmon0/temp2_input      29\nhwmon1/temp1_input      63\nhwmon1/temp2_input      61\nhwmon1/temp3_input      63\nhwmon2/temp1_input      45\nhwmon2/temp2_input      127\nhwmon2/temp3_input      24\nhwmon2/temp7_input      61\nhwmon2/temp8_input      0\nhwmon2/temp9_input      0\n \nSelect a temperature sensor as source for hwmon2/pwm2:\n 1) hwmon0/temp1_input   #选择一个连接的温度，因为我想得到一个较低的转速，所以选择了一个较低的温度\n 2) hwmon0/temp2_input\n 3) hwmon1/temp1_input\n 4) hwmon1/temp2_input\n 5) hwmon1/temp3_input\n 6) hwmon2/temp1_input\n 7) hwmon2/temp2_input\n 8) hwmon2/temp3_input\n 9) hwmon2/temp7_input\n10) hwmon2/temp8_input\n11) hwmon2/temp9_input\n12) None (Do not affect this PWM output)\nselect (1-n): 1  #选择低温的 1）hwmon0/tem1_input\n \nEnter the low temperature (degree C)\nbelow which the fan should spin at minimum speed (20): 25\n#风扇应以最低速度旋转\nEnter the high temperature (degree C)\nover which the fan should spin at maximum speed (60): 90\n#风扇应以最大速度旋转\nEnter the PWM value (0-255) to use when the temperature\nis over the high temperature limit (255): 90\n#输入 PWM 值（0-255），以便在温度超过温度极限时使用. 此处就用到了之前说的风扇等级转速\n#我选择的 90 对应的转速即为：1383  这个应该就是降低转速的重点  \nSelect fan output to configure, or other action:\n1) hwmon2/pwm2         3) Just quit           5) Show configuration\n2) Change INTERVAL     4) Save and quit\nselect (1-n): 4\n#选择 4 保存退出\nSaving configuration to /etc/fancontrol...\nConfiguration saved\nroot@host:~# vim /etc/fancontrol #检查一下文件内容\nroot@host:~# service fancontrol start  #开始运行风扇控制，风扇速度立马降下来了！\n```\n\n\n# 贴一下 fancontrol 配置文件内容：\n\n```\n\nroot@host:~# cat /etc/fancontrol\n\nConfiguration file generated by pwmconfig, changes will be lost\n\nINTERVAL=10\nDEVPATH=hwmon0= hwmon2=devices/platform/nct6775.2576\nDEVNAME=hwmon0=acpitz hwmon2=nct6106\nFCTEMPS= hwmon2/pwm2=hwmon0/temp1_input\nFCFANS= hwmon2/pwm2=hwmon2/fan2_input\nMINTEMP= hwmon2/pwm2=25\nMAXTEMP= hwmon2/pwm2=90\nMINSTART= hwmon2/pwm2=150\nMINSTOP= hwmon2/pwm2=0\nMAXPWM=hwmon2/pwm2=90\n```","slug":"Linux/温度、风扇控制","published":1,"updated":"2024-10-09T19:59:16.910Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgql000bo8tz2bd6fg9t","content":"<h1 id=\"fancontrol-官网配置说明\"><a href=\"#fancontrol-官网配置说明\" class=\"headerlink\" title=\"fancontrol 官网配置说明\"></a>fancontrol 官网配置说明</h1><p><a href=\"https://linux.die.net/man/8/fancontrol\">https://linux.die.net/man/8/fancontrol</a></p>\n<blockquote>\n<p>INTERVAL<br>此变量定义执行 fancontrol 主循环的间隔（以秒为单位）<br>FCTEMPS<br>将 PWM 输出映射到温度传感器，以便 fancontrol 知道应该使用哪些温度传感器来计算 相应的 PWM 输出。<br>FCFANS<br>FCFANS 记录 PWM 和风扇之间的关联。然后 fancontrol 可以检查风扇速度，并在风扇意外停止时重新启动它。<br>MINTEMP<br>风扇切换到最低速度的温度低于该温度。<br>MAXTEMP<br>风扇切换到最大速度的温度。<br>MINSTART<br>设置风扇开始旋转的最小速度。您应该使用一个 safe 值来确保它工作，即使风扇变旧也是如此。<br>MINSTOP<br>风扇仍旋转的最小速度。这里也使用 safe 值。<br>MINPWM<br>温度低于 MINTEMP 时使用的 PWM 值。通常，如果风扇可以正常停止，则此值为 0，或者与 MINSTOP，如果您不希望风扇停止。如果未定义此值，则默认为 0 （停止的风扇）。<br>MAXPWM<br>温度超过 MAXTEMP 时使用的 PWM 值。如果未定义此值，则默认为 255 （全速）。  </p>\n</blockquote>\n<p>e5 平台配置备份  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEVPATH=hwmon1=devices/pci0000:00/0000:00:01.0/0000:01:00.0/nvme/nvme0 hwmon2=devices/platform/nct6775.2592</span><br><span class=\"line\">DEVNAME=hwmon1=nvme hwmon2=nct6779</span><br><span class=\"line\">FCTEMPS= hwmon3/pwm2=hwmon0/temp1_input</span><br><span class=\"line\">FCFANS= hwmon3/pwm2=hwmon2/fan2_input</span><br><span class=\"line\">MINTEMP= hwmon3/pwm2=30</span><br><span class=\"line\">MAXTEMP= hwmon3/pwm2=70</span><br><span class=\"line\">MINSTART= hwmon3/pwm2=25</span><br><span class=\"line\">MINSTOP= hwmon3/pwm2=0</span><br><span class=\"line\">MAXPWM= hwmon3/pwm2=200</span><br></pre></td></tr></table></figure>\n\n<p>链接： <a href=\"https://www.520cdr.com/?p=1378\">https://www.520cdr.com/?p=1378</a>  </p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>维基百科教程走安装模块</p>\n<p>此处 debian 安装命令参考：</p>\n<p><a href=\"https://linoxide.com/monitoring-2/install-lm-sensors-linux/\">https://linoxide.com/monitoring-2/install-lm-sensors-linux/</a></p>\n<p>On Ubuntu and Debian Distros</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install lm-sensors fancontrol</span><br></pre></td></tr></table></figure>\n\n<p>On Fedora 26 and RPM Linux distros</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install lm_sensors</span><br></pre></td></tr></table></figure>\n\n<p>Once the installation is done, run the following commands to check your current hardware specifications.   </p>\n<p><strong>完成这一步需要重启</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sensors-detect</span><br></pre></td></tr></table></figure>\n\n<p>It will ask you few questions. Answer Yes for all of them.</p>\n<h1 id=\"lm-sensors\"><a href=\"#lm-sensors\" class=\"headerlink\" title=\"lm-sensors\"></a>lm-sensors</h1><p>设置 lm_sensors，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sensors</span><br><span class=\"line\">coretemp-isa-0000</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Core 0:      +29.0°C  (high = +76.0°C, crit = +100.0°C)  </span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\">it8718-isa-0290</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Vcc:         +1.14 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">VTT:         +2.08 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">+3.3V:       +3.33 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">NB Vcore:    +0.03 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">VDRAM:       +2.13 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">fan1:        690 RPM  (min =   10 RPM)</span><br><span class=\"line\">temp1:       +37.5°C  (low  = +129.5°C, high = +129.5°C)  sensor = thermistor</span><br><span class=\"line\">temp2:       +25.0°C  (low  = +127.0°C, high = +127.0°C)  sensor = thermal diode</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"运行-sensors-获得风扇转速接口位置-fan2\"><a href=\"#运行-sensors-获得风扇转速接口位置-fan2\" class=\"headerlink\" title=\"运行 sensors 获得风扇转速接口位置 fan2\"></a>运行 sensors 获得风扇转速接口位置 fan2</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@host:~# sensors</span><br><span class=\"line\">nct6106-isa-0a10</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">in0:            +0.96 V  (min =  +0.00 V, max =  +1.74 V)</span><br><span class=\"line\">in1:            +1.54 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in2:            +3.34 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in3:            +3.20 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in4:            +1.05 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in5:            +1.04 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in6:            +1.66 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in7:            +3.12 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in8:            +2.10 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">fan1:             0 RPM  (min =    0 RPM)</span><br><span class=\"line\">fan2:          1800 RPM  (min =    0 RPM)</span><br><span class=\"line\">fan3:             0 RPM  (min =    0 RPM)</span><br><span class=\"line\">SYSTIN:         +46.0°C  (high =  +0.0°C, hyst =  +0.0°C)  ALARM</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode</span><br><span class=\"line\">CPUTIN:        +127.0°C  (high = +80.0°C, hyst = +75.0°C)  ALARM</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermistor</span><br><span class=\"line\">AUXTIN:         +24.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode</span><br><span class=\"line\">PECI Agent 0:   +64.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +75.0°C)</span><br><span class=\"line\">PECI Agent 1:    +0.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)</span><br><span class=\"line\">PCH_CHIP_TEMP:   +0.0°C</span><br><span class=\"line\">PCH_CPU_TEMP:    +0.0°C</span><br><span class=\"line\">intrusion0:    ALARM</span><br><span class=\"line\">beep_enable:   disabled</span><br><span class=\"line\"> </span><br><span class=\"line\">acpitz-virtual-0</span><br><span class=\"line\">Adapter: Virtual device</span><br><span class=\"line\">temp1:        +27.8°C  (crit = +92.0°C)</span><br><span class=\"line\">temp2:        +29.8°C  (crit = +92.0°C)</span><br><span class=\"line\"> </span><br><span class=\"line\">coretemp-isa-0000</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Package id 0:  +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br><span class=\"line\">Core 0:        +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br><span class=\"line\">Core 1:        +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用-pwnconfig-检测\"><a href=\"#使用-pwnconfig-检测\" class=\"headerlink\" title=\"使用 pwnconfig 检测\"></a>使用 pwnconfig 检测</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@host:~# pwmconfig</span><br><span class=\"line\">File /var/run/fancontrol.pid exists. This typically means that the</span><br><span class=\"line\">fancontrol deamon is running. You should stop it before running pwmconfig.</span><br><span class=\"line\">If you are certain that fancontrol is not running, then you can delete</span><br><span class=\"line\">/var/run/fancontrol.pid manually.</span><br><span class=\"line\">root@host:~# service</span><br><span class=\"line\">Usage: service &lt; option &gt; | --status-all | [service_name [ command | --full-restart] ]</span><br><span class=\"line\">root@host:~# service fancontrol stop</span><br><span class=\"line\">root@host:~# pwmconfig</span><br><span class=\"line\"># pwmconfig revision 6243 (2014-03-20)</span><br><span class=\"line\">This program will search your sensors for pulse width modulation (pwm)</span><br><span class=\"line\">controls, and test each one to see if it controls a fan on</span><br><span class=\"line\">your motherboard. Note that many motherboards do not have pwm</span><br><span class=\"line\">circuitry installed, even if your sensor chip supports pwm.</span><br><span class=\"line\"> </span><br><span class=\"line\">We will attempt to briefly stop each fan using the pwm controls.</span><br><span class=\"line\">The program will attempt to restore each fan to full speed</span><br><span class=\"line\">after testing. However, it is ** very important ** that you</span><br><span class=\"line\">physically verify that the fans have been to full speed</span><br><span class=\"line\">after the program has completed.</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following devices:</span><br><span class=\"line\">   hwmon0 is acpitz</span><br><span class=\"line\">   hwmon1 is coretemp</span><br><span class=\"line\">   hwmon2 is nct6106</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following PWM controls:</span><br><span class=\"line\">   hwmon2/pwm1           current value: 127</span><br><span class=\"line\">   hwmon2/pwm2           current value: 255</span><br><span class=\"line\"> </span><br><span class=\"line\">Giving the fans some time to reach full speed...</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following fan sensors:</span><br><span class=\"line\">   hwmon2/fan1_input     current speed: 0 ... skipping!</span><br><span class=\"line\">   hwmon2/fan2_input     current speed: 2749 RPM</span><br><span class=\"line\">   hwmon2/fan3_input     current speed: 0 ... skipping!</span><br><span class=\"line\"> </span><br><span class=\"line\">Warning!!! This program will stop your fans, one at a time,</span><br><span class=\"line\">for approximately 5 seconds each!!!</span><br><span class=\"line\">This may cause your processor temperature to rise!!!</span><br><span class=\"line\">If you do not want to do this hit control-C now!!!</span><br><span class=\"line\">Hit return to continue:</span><br><span class=\"line\">Testing pwm control hwmon2/pwm1 ...</span><br><span class=\"line\">  hwmon2/fan2_input ... speed was 2749 now 2772</span><br><span class=\"line\">    no correlation</span><br><span class=\"line\"> </span><br><span class=\"line\">No correlations were detected.</span><br><span class=\"line\">There is either no fan connected to the output of hwmon2/pwm1,</span><br><span class=\"line\">or the connected fan has no rpm-signal connected to one of</span><br><span class=\"line\">the tested fan sensors. (Note: not all motherboards have</span><br><span class=\"line\">the pwm outputs connected to the fan connectors,</span><br><span class=\"line\">check out the hardware database on http://www.almico.com/forumindex.php)</span><br><span class=\"line\"> </span><br><span class=\"line\">Did you see/hear a fan stopping during the above test (n)?# 此时应该是测了风扇 1，并没有听见停止，所以选 n</span><br><span class=\"line\"> </span><br><span class=\"line\">Testing pwm control hwmon2/pwm2 ...</span><br><span class=\"line\">  hwmon2/fan2_input ... speed was 2749 now 1205</span><br><span class=\"line\">    It appears that fan hwmon2/fan2_input</span><br><span class=\"line\">    is controlled by pwm hwmon2/pwm2</span><br><span class=\"line\">Would you like to generate a detailed correlation (y)?</span><br><span class=\"line\">Note: If you had gnuplot installed, I could generate a graphical plot.</span><br><span class=\"line\">    PWM 255 FAN 2743  #风扇转速等级，后面会用到</span><br><span class=\"line\">    PWM 240 FAN 2721</span><br><span class=\"line\">    PWM 225 FAN 2657</span><br><span class=\"line\">    PWM 210 FAN 2571</span><br><span class=\"line\">    PWM 195 FAN 2495</span><br><span class=\"line\">    PWM 180 FAN 2385</span><br><span class=\"line\">    PWM 165 FAN 2268</span><br><span class=\"line\">    PWM 150 FAN 2142</span><br><span class=\"line\">    PWM 135 FAN 1982</span><br><span class=\"line\">    PWM 120 FAN 1809</span><br><span class=\"line\">    PWM 105 FAN 1601</span><br><span class=\"line\">    PWM 90 FAN 1383</span><br><span class=\"line\">    PWM 75 FAN 1259</span><br><span class=\"line\">    PWM 60 FAN 1201</span><br><span class=\"line\">    PWM 45 FAN 1201</span><br><span class=\"line\">    PWM 30 FAN 1201</span><br><span class=\"line\">    PWM 28 FAN 1198</span><br><span class=\"line\">    PWM 26 FAN 1193</span><br><span class=\"line\">    PWM 24 FAN 1195</span><br><span class=\"line\">    PWM 22 FAN 1201</span><br><span class=\"line\">    PWM 20 FAN 1200</span><br><span class=\"line\">    PWM 18 FAN 1208</span><br><span class=\"line\">    PWM 16 FAN 1208</span><br><span class=\"line\">    PWM 14 FAN 1206</span><br><span class=\"line\">    PWM 12 FAN 1197</span><br><span class=\"line\">    PWM 10 FAN 1203</span><br><span class=\"line\">    PWM 8 FAN 1207</span><br><span class=\"line\">    PWM 6 FAN 1215</span><br><span class=\"line\">    PWM 4 FAN 1204</span><br><span class=\"line\">    PWM 2 FAN 1203</span><br><span class=\"line\">    PWM 0 FAN 1194</span><br><span class=\"line\"> </span><br><span class=\"line\">Testing is complete.</span><br><span class=\"line\">Please verify that all fans have returned to their normal speed.</span><br><span class=\"line\"> </span><br><span class=\"line\">The fancontrol script can automatically respond to temperature changes</span><br><span class=\"line\">of your system by changing fanspeeds.</span><br><span class=\"line\">Do you want to set up its configuration file now (y)? y# 百度英文意思</span><br><span class=\"line\">What should be the path to your fancontrol config file (/etc/fancontrol)?# 风扇控制文件位置</span><br><span class=\"line\">Loading configuration from /etc/fancontrol ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"设置自定义风扇模块参数\"><a href=\"#设置自定义风扇模块参数\" class=\"headerlink\" title=\"设置自定义风扇模块参数\"></a>设置自定义风扇模块参数</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select fan output to configure, or other action:</span><br><span class=\"line\">1) hwmon2/pwm2         3) Just quit           5) Show configuration</span><br><span class=\"line\">2) Change INTERVAL     4) Save and quit</span><br><span class=\"line\">select (1-n): 1 #开始自定义</span><br><span class=\"line\"> </span><br><span class=\"line\">Devices:</span><br><span class=\"line\">hwmon0 is acpitz</span><br><span class=\"line\">hwmon1 is coretemp</span><br><span class=\"line\">hwmon2 is nct6106</span><br><span class=\"line\"> </span><br><span class=\"line\">Current temperature readings are as follows:</span><br><span class=\"line\">hwmon0/temp1_input      27</span><br><span class=\"line\">hwmon0/temp2_input      29</span><br><span class=\"line\">hwmon1/temp1_input      63</span><br><span class=\"line\">hwmon1/temp2_input      61</span><br><span class=\"line\">hwmon1/temp3_input      63</span><br><span class=\"line\">hwmon2/temp1_input      45</span><br><span class=\"line\">hwmon2/temp2_input      127</span><br><span class=\"line\">hwmon2/temp3_input      24</span><br><span class=\"line\">hwmon2/temp7_input      61</span><br><span class=\"line\">hwmon2/temp8_input      0</span><br><span class=\"line\">hwmon2/temp9_input      0</span><br><span class=\"line\"> </span><br><span class=\"line\">Select a temperature sensor as source for hwmon2/pwm2:</span><br><span class=\"line\"> 1) hwmon0/temp1_input   #选择一个连接的温度，因为我想得到一个较低的转速，所以选择了一个较低的温度</span><br><span class=\"line\"> 2) hwmon0/temp2_input</span><br><span class=\"line\"> 3) hwmon1/temp1_input</span><br><span class=\"line\"> 4) hwmon1/temp2_input</span><br><span class=\"line\"> 5) hwmon1/temp3_input</span><br><span class=\"line\"> 6) hwmon2/temp1_input</span><br><span class=\"line\"> 7) hwmon2/temp2_input</span><br><span class=\"line\"> 8) hwmon2/temp3_input</span><br><span class=\"line\"> 9) hwmon2/temp7_input</span><br><span class=\"line\">10) hwmon2/temp8_input</span><br><span class=\"line\">11) hwmon2/temp9_input</span><br><span class=\"line\">12) None (Do not affect this PWM output)</span><br><span class=\"line\">select (1-n): 1  #选择低温的 1）hwmon0/tem1_input</span><br><span class=\"line\"> </span><br><span class=\"line\">Enter the low temperature (degree C)</span><br><span class=\"line\">below which the fan should spin at minimum speed (20): 25</span><br><span class=\"line\">#风扇应以最低速度旋转</span><br><span class=\"line\">Enter the high temperature (degree C)</span><br><span class=\"line\">over which the fan should spin at maximum speed (60): 90</span><br><span class=\"line\">#风扇应以最大速度旋转</span><br><span class=\"line\">Enter the PWM value (0-255) to use when the temperature</span><br><span class=\"line\">is over the high temperature limit (255): 90</span><br><span class=\"line\">#输入 PWM 值（0-255），以便在温度超过温度极限时使用. 此处就用到了之前说的风扇等级转速</span><br><span class=\"line\">#我选择的 90 对应的转速即为：1383  这个应该就是降低转速的重点  </span><br><span class=\"line\">Select fan output to configure, or other action:</span><br><span class=\"line\">1) hwmon2/pwm2         3) Just quit           5) Show configuration</span><br><span class=\"line\">2) Change INTERVAL     4) Save and quit</span><br><span class=\"line\">select (1-n): 4</span><br><span class=\"line\">#选择 4 保存退出</span><br><span class=\"line\">Saving configuration to /etc/fancontrol...</span><br><span class=\"line\">Configuration saved</span><br><span class=\"line\">root@host:~# vim /etc/fancontrol #检查一下文件内容</span><br><span class=\"line\">root@host:~# service fancontrol start  #开始运行风扇控制，风扇速度立马降下来了！</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"贴一下-fancontrol-配置文件内容：\"><a href=\"#贴一下-fancontrol-配置文件内容：\" class=\"headerlink\" title=\"贴一下 fancontrol 配置文件内容：\"></a>贴一下 fancontrol 配置文件内容：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">root@host:~# cat /etc/fancontrol</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration file generated by pwmconfig, changes will be lost</span><br><span class=\"line\"></span><br><span class=\"line\">INTERVAL=10</span><br><span class=\"line\">DEVPATH=hwmon0= hwmon2=devices/platform/nct6775.2576</span><br><span class=\"line\">DEVNAME=hwmon0=acpitz hwmon2=nct6106</span><br><span class=\"line\">FCTEMPS= hwmon2/pwm2=hwmon0/temp1_input</span><br><span class=\"line\">FCFANS= hwmon2/pwm2=hwmon2/fan2_input</span><br><span class=\"line\">MINTEMP= hwmon2/pwm2=25</span><br><span class=\"line\">MAXTEMP= hwmon2/pwm2=90</span><br><span class=\"line\">MINSTART= hwmon2/pwm2=150</span><br><span class=\"line\">MINSTOP= hwmon2/pwm2=0</span><br><span class=\"line\">MAXPWM=hwmon2/pwm2=90</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"fancontrol-官网配置说明\"><a href=\"#fancontrol-官网配置说明\" class=\"headerlink\" title=\"fancontrol 官网配置说明\"></a>fancontrol 官网配置说明</h1><p><a href=\"https://linux.die.net/man/8/fancontrol\">https://linux.die.net/man/8/fancontrol</a></p>\n<blockquote>\n<p>INTERVAL<br>此变量定义执行 fancontrol 主循环的间隔（以秒为单位）<br>FCTEMPS<br>将 PWM 输出映射到温度传感器，以便 fancontrol 知道应该使用哪些温度传感器来计算 相应的 PWM 输出。<br>FCFANS<br>FCFANS 记录 PWM 和风扇之间的关联。然后 fancontrol 可以检查风扇速度，并在风扇意外停止时重新启动它。<br>MINTEMP<br>风扇切换到最低速度的温度低于该温度。<br>MAXTEMP<br>风扇切换到最大速度的温度。<br>MINSTART<br>设置风扇开始旋转的最小速度。您应该使用一个 safe 值来确保它工作，即使风扇变旧也是如此。<br>MINSTOP<br>风扇仍旋转的最小速度。这里也使用 safe 值。<br>MINPWM<br>温度低于 MINTEMP 时使用的 PWM 值。通常，如果风扇可以正常停止，则此值为 0，或者与 MINSTOP，如果您不希望风扇停止。如果未定义此值，则默认为 0 （停止的风扇）。<br>MAXPWM<br>温度超过 MAXTEMP 时使用的 PWM 值。如果未定义此值，则默认为 255 （全速）。  </p>\n</blockquote>\n<p>e5 平台配置备份  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEVPATH=hwmon1=devices/pci0000:00/0000:00:01.0/0000:01:00.0/nvme/nvme0 hwmon2=devices/platform/nct6775.2592</span><br><span class=\"line\">DEVNAME=hwmon1=nvme hwmon2=nct6779</span><br><span class=\"line\">FCTEMPS= hwmon3/pwm2=hwmon0/temp1_input</span><br><span class=\"line\">FCFANS= hwmon3/pwm2=hwmon2/fan2_input</span><br><span class=\"line\">MINTEMP= hwmon3/pwm2=30</span><br><span class=\"line\">MAXTEMP= hwmon3/pwm2=70</span><br><span class=\"line\">MINSTART= hwmon3/pwm2=25</span><br><span class=\"line\">MINSTOP= hwmon3/pwm2=0</span><br><span class=\"line\">MAXPWM= hwmon3/pwm2=200</span><br></pre></td></tr></table></figure>\n\n<p>链接： <a href=\"https://www.520cdr.com/?p=1378\">https://www.520cdr.com/?p=1378</a>  </p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">https://wiki.archlinux.org/index.php/Fan_speed_control_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>维基百科教程走安装模块</p>\n<p>此处 debian 安装命令参考：</p>\n<p><a href=\"https://linoxide.com/monitoring-2/install-lm-sensors-linux/\">https://linoxide.com/monitoring-2/install-lm-sensors-linux/</a></p>\n<p>On Ubuntu and Debian Distros</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install lm-sensors fancontrol</span><br></pre></td></tr></table></figure>\n\n<p>On Fedora 26 and RPM Linux distros</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install lm_sensors</span><br></pre></td></tr></table></figure>\n\n<p>Once the installation is done, run the following commands to check your current hardware specifications.   </p>\n<p><strong>完成这一步需要重启</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sensors-detect</span><br></pre></td></tr></table></figure>\n\n<p>It will ask you few questions. Answer Yes for all of them.</p>\n<h1 id=\"lm-sensors\"><a href=\"#lm-sensors\" class=\"headerlink\" title=\"lm-sensors\"></a>lm-sensors</h1><p>设置 lm_sensors，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sensors</span><br><span class=\"line\">coretemp-isa-0000</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Core 0:      +29.0°C  (high = +76.0°C, crit = +100.0°C)  </span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\">it8718-isa-0290</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Vcc:         +1.14 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">VTT:         +2.08 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">+3.3V:       +3.33 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">NB Vcore:    +0.03 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">VDRAM:       +2.13 V  (min =  +0.00 V, max =  +4.08 V)   </span><br><span class=\"line\">fan1:        690 RPM  (min =   10 RPM)</span><br><span class=\"line\">temp1:       +37.5°C  (low  = +129.5°C, high = +129.5°C)  sensor = thermistor</span><br><span class=\"line\">temp2:       +25.0°C  (low  = +127.0°C, high = +127.0°C)  sensor = thermal diode</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"运行-sensors-获得风扇转速接口位置-fan2\"><a href=\"#运行-sensors-获得风扇转速接口位置-fan2\" class=\"headerlink\" title=\"运行 sensors 获得风扇转速接口位置 fan2\"></a>运行 sensors 获得风扇转速接口位置 fan2</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@host:~# sensors</span><br><span class=\"line\">nct6106-isa-0a10</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">in0:            +0.96 V  (min =  +0.00 V, max =  +1.74 V)</span><br><span class=\"line\">in1:            +1.54 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in2:            +3.34 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in3:            +3.20 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in4:            +1.05 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in5:            +1.04 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in6:            +1.66 V  (min =  +0.00 V, max =  +2.04 V)</span><br><span class=\"line\">in7:            +3.12 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">in8:            +2.10 V  (min =  +0.00 V, max =  +4.08 V)</span><br><span class=\"line\">fan1:             0 RPM  (min =    0 RPM)</span><br><span class=\"line\">fan2:          1800 RPM  (min =    0 RPM)</span><br><span class=\"line\">fan3:             0 RPM  (min =    0 RPM)</span><br><span class=\"line\">SYSTIN:         +46.0°C  (high =  +0.0°C, hyst =  +0.0°C)  ALARM</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode</span><br><span class=\"line\">CPUTIN:        +127.0°C  (high = +80.0°C, hyst = +75.0°C)  ALARM</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermistor</span><br><span class=\"line\">AUXTIN:         +24.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)  sensor = thermal diode</span><br><span class=\"line\">PECI Agent 0:   +64.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +75.0°C)</span><br><span class=\"line\">PECI Agent 1:    +0.0°C  (high = +80.0°C, hyst = +75.0°C)</span><br><span class=\"line\">                         (crit low = +127.0°C, crit = +127.0°C)</span><br><span class=\"line\">PCH_CHIP_TEMP:   +0.0°C</span><br><span class=\"line\">PCH_CPU_TEMP:    +0.0°C</span><br><span class=\"line\">intrusion0:    ALARM</span><br><span class=\"line\">beep_enable:   disabled</span><br><span class=\"line\"> </span><br><span class=\"line\">acpitz-virtual-0</span><br><span class=\"line\">Adapter: Virtual device</span><br><span class=\"line\">temp1:        +27.8°C  (crit = +92.0°C)</span><br><span class=\"line\">temp2:        +29.8°C  (crit = +92.0°C)</span><br><span class=\"line\"> </span><br><span class=\"line\">coretemp-isa-0000</span><br><span class=\"line\">Adapter: ISA adapter</span><br><span class=\"line\">Package id 0:  +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br><span class=\"line\">Core 0:        +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br><span class=\"line\">Core 1:        +64.0°C  (high = +87.0°C, crit = +91.0°C)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用-pwnconfig-检测\"><a href=\"#使用-pwnconfig-检测\" class=\"headerlink\" title=\"使用 pwnconfig 检测\"></a>使用 pwnconfig 检测</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@host:~# pwmconfig</span><br><span class=\"line\">File /var/run/fancontrol.pid exists. This typically means that the</span><br><span class=\"line\">fancontrol deamon is running. You should stop it before running pwmconfig.</span><br><span class=\"line\">If you are certain that fancontrol is not running, then you can delete</span><br><span class=\"line\">/var/run/fancontrol.pid manually.</span><br><span class=\"line\">root@host:~# service</span><br><span class=\"line\">Usage: service &lt; option &gt; | --status-all | [service_name [ command | --full-restart] ]</span><br><span class=\"line\">root@host:~# service fancontrol stop</span><br><span class=\"line\">root@host:~# pwmconfig</span><br><span class=\"line\"># pwmconfig revision 6243 (2014-03-20)</span><br><span class=\"line\">This program will search your sensors for pulse width modulation (pwm)</span><br><span class=\"line\">controls, and test each one to see if it controls a fan on</span><br><span class=\"line\">your motherboard. Note that many motherboards do not have pwm</span><br><span class=\"line\">circuitry installed, even if your sensor chip supports pwm.</span><br><span class=\"line\"> </span><br><span class=\"line\">We will attempt to briefly stop each fan using the pwm controls.</span><br><span class=\"line\">The program will attempt to restore each fan to full speed</span><br><span class=\"line\">after testing. However, it is ** very important ** that you</span><br><span class=\"line\">physically verify that the fans have been to full speed</span><br><span class=\"line\">after the program has completed.</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following devices:</span><br><span class=\"line\">   hwmon0 is acpitz</span><br><span class=\"line\">   hwmon1 is coretemp</span><br><span class=\"line\">   hwmon2 is nct6106</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following PWM controls:</span><br><span class=\"line\">   hwmon2/pwm1           current value: 127</span><br><span class=\"line\">   hwmon2/pwm2           current value: 255</span><br><span class=\"line\"> </span><br><span class=\"line\">Giving the fans some time to reach full speed...</span><br><span class=\"line\"> </span><br><span class=\"line\">Found the following fan sensors:</span><br><span class=\"line\">   hwmon2/fan1_input     current speed: 0 ... skipping!</span><br><span class=\"line\">   hwmon2/fan2_input     current speed: 2749 RPM</span><br><span class=\"line\">   hwmon2/fan3_input     current speed: 0 ... skipping!</span><br><span class=\"line\"> </span><br><span class=\"line\">Warning!!! This program will stop your fans, one at a time,</span><br><span class=\"line\">for approximately 5 seconds each!!!</span><br><span class=\"line\">This may cause your processor temperature to rise!!!</span><br><span class=\"line\">If you do not want to do this hit control-C now!!!</span><br><span class=\"line\">Hit return to continue:</span><br><span class=\"line\">Testing pwm control hwmon2/pwm1 ...</span><br><span class=\"line\">  hwmon2/fan2_input ... speed was 2749 now 2772</span><br><span class=\"line\">    no correlation</span><br><span class=\"line\"> </span><br><span class=\"line\">No correlations were detected.</span><br><span class=\"line\">There is either no fan connected to the output of hwmon2/pwm1,</span><br><span class=\"line\">or the connected fan has no rpm-signal connected to one of</span><br><span class=\"line\">the tested fan sensors. (Note: not all motherboards have</span><br><span class=\"line\">the pwm outputs connected to the fan connectors,</span><br><span class=\"line\">check out the hardware database on http://www.almico.com/forumindex.php)</span><br><span class=\"line\"> </span><br><span class=\"line\">Did you see/hear a fan stopping during the above test (n)?# 此时应该是测了风扇 1，并没有听见停止，所以选 n</span><br><span class=\"line\"> </span><br><span class=\"line\">Testing pwm control hwmon2/pwm2 ...</span><br><span class=\"line\">  hwmon2/fan2_input ... speed was 2749 now 1205</span><br><span class=\"line\">    It appears that fan hwmon2/fan2_input</span><br><span class=\"line\">    is controlled by pwm hwmon2/pwm2</span><br><span class=\"line\">Would you like to generate a detailed correlation (y)?</span><br><span class=\"line\">Note: If you had gnuplot installed, I could generate a graphical plot.</span><br><span class=\"line\">    PWM 255 FAN 2743  #风扇转速等级，后面会用到</span><br><span class=\"line\">    PWM 240 FAN 2721</span><br><span class=\"line\">    PWM 225 FAN 2657</span><br><span class=\"line\">    PWM 210 FAN 2571</span><br><span class=\"line\">    PWM 195 FAN 2495</span><br><span class=\"line\">    PWM 180 FAN 2385</span><br><span class=\"line\">    PWM 165 FAN 2268</span><br><span class=\"line\">    PWM 150 FAN 2142</span><br><span class=\"line\">    PWM 135 FAN 1982</span><br><span class=\"line\">    PWM 120 FAN 1809</span><br><span class=\"line\">    PWM 105 FAN 1601</span><br><span class=\"line\">    PWM 90 FAN 1383</span><br><span class=\"line\">    PWM 75 FAN 1259</span><br><span class=\"line\">    PWM 60 FAN 1201</span><br><span class=\"line\">    PWM 45 FAN 1201</span><br><span class=\"line\">    PWM 30 FAN 1201</span><br><span class=\"line\">    PWM 28 FAN 1198</span><br><span class=\"line\">    PWM 26 FAN 1193</span><br><span class=\"line\">    PWM 24 FAN 1195</span><br><span class=\"line\">    PWM 22 FAN 1201</span><br><span class=\"line\">    PWM 20 FAN 1200</span><br><span class=\"line\">    PWM 18 FAN 1208</span><br><span class=\"line\">    PWM 16 FAN 1208</span><br><span class=\"line\">    PWM 14 FAN 1206</span><br><span class=\"line\">    PWM 12 FAN 1197</span><br><span class=\"line\">    PWM 10 FAN 1203</span><br><span class=\"line\">    PWM 8 FAN 1207</span><br><span class=\"line\">    PWM 6 FAN 1215</span><br><span class=\"line\">    PWM 4 FAN 1204</span><br><span class=\"line\">    PWM 2 FAN 1203</span><br><span class=\"line\">    PWM 0 FAN 1194</span><br><span class=\"line\"> </span><br><span class=\"line\">Testing is complete.</span><br><span class=\"line\">Please verify that all fans have returned to their normal speed.</span><br><span class=\"line\"> </span><br><span class=\"line\">The fancontrol script can automatically respond to temperature changes</span><br><span class=\"line\">of your system by changing fanspeeds.</span><br><span class=\"line\">Do you want to set up its configuration file now (y)? y# 百度英文意思</span><br><span class=\"line\">What should be the path to your fancontrol config file (/etc/fancontrol)?# 风扇控制文件位置</span><br><span class=\"line\">Loading configuration from /etc/fancontrol ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"设置自定义风扇模块参数\"><a href=\"#设置自定义风扇模块参数\" class=\"headerlink\" title=\"设置自定义风扇模块参数\"></a>设置自定义风扇模块参数</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select fan output to configure, or other action:</span><br><span class=\"line\">1) hwmon2/pwm2         3) Just quit           5) Show configuration</span><br><span class=\"line\">2) Change INTERVAL     4) Save and quit</span><br><span class=\"line\">select (1-n): 1 #开始自定义</span><br><span class=\"line\"> </span><br><span class=\"line\">Devices:</span><br><span class=\"line\">hwmon0 is acpitz</span><br><span class=\"line\">hwmon1 is coretemp</span><br><span class=\"line\">hwmon2 is nct6106</span><br><span class=\"line\"> </span><br><span class=\"line\">Current temperature readings are as follows:</span><br><span class=\"line\">hwmon0/temp1_input      27</span><br><span class=\"line\">hwmon0/temp2_input      29</span><br><span class=\"line\">hwmon1/temp1_input      63</span><br><span class=\"line\">hwmon1/temp2_input      61</span><br><span class=\"line\">hwmon1/temp3_input      63</span><br><span class=\"line\">hwmon2/temp1_input      45</span><br><span class=\"line\">hwmon2/temp2_input      127</span><br><span class=\"line\">hwmon2/temp3_input      24</span><br><span class=\"line\">hwmon2/temp7_input      61</span><br><span class=\"line\">hwmon2/temp8_input      0</span><br><span class=\"line\">hwmon2/temp9_input      0</span><br><span class=\"line\"> </span><br><span class=\"line\">Select a temperature sensor as source for hwmon2/pwm2:</span><br><span class=\"line\"> 1) hwmon0/temp1_input   #选择一个连接的温度，因为我想得到一个较低的转速，所以选择了一个较低的温度</span><br><span class=\"line\"> 2) hwmon0/temp2_input</span><br><span class=\"line\"> 3) hwmon1/temp1_input</span><br><span class=\"line\"> 4) hwmon1/temp2_input</span><br><span class=\"line\"> 5) hwmon1/temp3_input</span><br><span class=\"line\"> 6) hwmon2/temp1_input</span><br><span class=\"line\"> 7) hwmon2/temp2_input</span><br><span class=\"line\"> 8) hwmon2/temp3_input</span><br><span class=\"line\"> 9) hwmon2/temp7_input</span><br><span class=\"line\">10) hwmon2/temp8_input</span><br><span class=\"line\">11) hwmon2/temp9_input</span><br><span class=\"line\">12) None (Do not affect this PWM output)</span><br><span class=\"line\">select (1-n): 1  #选择低温的 1）hwmon0/tem1_input</span><br><span class=\"line\"> </span><br><span class=\"line\">Enter the low temperature (degree C)</span><br><span class=\"line\">below which the fan should spin at minimum speed (20): 25</span><br><span class=\"line\">#风扇应以最低速度旋转</span><br><span class=\"line\">Enter the high temperature (degree C)</span><br><span class=\"line\">over which the fan should spin at maximum speed (60): 90</span><br><span class=\"line\">#风扇应以最大速度旋转</span><br><span class=\"line\">Enter the PWM value (0-255) to use when the temperature</span><br><span class=\"line\">is over the high temperature limit (255): 90</span><br><span class=\"line\">#输入 PWM 值（0-255），以便在温度超过温度极限时使用. 此处就用到了之前说的风扇等级转速</span><br><span class=\"line\">#我选择的 90 对应的转速即为：1383  这个应该就是降低转速的重点  </span><br><span class=\"line\">Select fan output to configure, or other action:</span><br><span class=\"line\">1) hwmon2/pwm2         3) Just quit           5) Show configuration</span><br><span class=\"line\">2) Change INTERVAL     4) Save and quit</span><br><span class=\"line\">select (1-n): 4</span><br><span class=\"line\">#选择 4 保存退出</span><br><span class=\"line\">Saving configuration to /etc/fancontrol...</span><br><span class=\"line\">Configuration saved</span><br><span class=\"line\">root@host:~# vim /etc/fancontrol #检查一下文件内容</span><br><span class=\"line\">root@host:~# service fancontrol start  #开始运行风扇控制，风扇速度立马降下来了！</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"贴一下-fancontrol-配置文件内容：\"><a href=\"#贴一下-fancontrol-配置文件内容：\" class=\"headerlink\" title=\"贴一下 fancontrol 配置文件内容：\"></a>贴一下 fancontrol 配置文件内容：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">root@host:~# cat /etc/fancontrol</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration file generated by pwmconfig, changes will be lost</span><br><span class=\"line\"></span><br><span class=\"line\">INTERVAL=10</span><br><span class=\"line\">DEVPATH=hwmon0= hwmon2=devices/platform/nct6775.2576</span><br><span class=\"line\">DEVNAME=hwmon0=acpitz hwmon2=nct6106</span><br><span class=\"line\">FCTEMPS= hwmon2/pwm2=hwmon0/temp1_input</span><br><span class=\"line\">FCFANS= hwmon2/pwm2=hwmon2/fan2_input</span><br><span class=\"line\">MINTEMP= hwmon2/pwm2=25</span><br><span class=\"line\">MAXTEMP= hwmon2/pwm2=90</span><br><span class=\"line\">MINSTART= hwmon2/pwm2=150</span><br><span class=\"line\">MINSTOP= hwmon2/pwm2=0</span><br><span class=\"line\">MAXPWM=hwmon2/pwm2=90</span><br></pre></td></tr></table></figure>"},{"title":"cluster not ready - no quorum? (500)","date":"2024-10-08T18:00:28.000Z","_content":"### 问题解释  \n\n集群节点离线导致投票数目不足，导致无法进行操作\n\n### 解决  \n\n添加自定义服务，执行脚本\n\n服务文件 `/etc/systemd/system/my-script.service`\n\n```conf\n[Unit]\nDescription=My custom script\nWants=corosync.service # 依赖服务\nWants=pve-cluster.service\nWants=pvedaemon.service\nWants=pveproxy.service\nAfter=corosync.service\nAfter=pve-cluster.service\nAfter=pvedaemon.service\nAfter=pveproxy.service\n\n[Service]\nExecStart=/usr/local/bin/my-script.sh\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n脚本文件 ` /usr/local/bin/my-script.sh`\n```shell\n#!/bin/sh\n\npvecm expected 1\n\nexit 0\n\n```\n\n添加执行权限  \n\n```shell\nchmod +x /usr/local/bin/my-script.sh\n```\n\n","source":"_posts/pve/cluster-not-ready-no-quorum-500.md","raw":"---\ntitle: cluster not ready - no quorum? (500)\ndate: 2024-10-09 02:00:28\ncategories:\n  - pve\ntags:\n  - pve\n---\n### 问题解释  \n\n集群节点离线导致投票数目不足，导致无法进行操作\n\n### 解决  \n\n添加自定义服务，执行脚本\n\n服务文件 `/etc/systemd/system/my-script.service`\n\n```conf\n[Unit]\nDescription=My custom script\nWants=corosync.service # 依赖服务\nWants=pve-cluster.service\nWants=pvedaemon.service\nWants=pveproxy.service\nAfter=corosync.service\nAfter=pve-cluster.service\nAfter=pvedaemon.service\nAfter=pveproxy.service\n\n[Service]\nExecStart=/usr/local/bin/my-script.sh\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n脚本文件 ` /usr/local/bin/my-script.sh`\n```shell\n#!/bin/sh\n\npvecm expected 1\n\nexit 0\n\n```\n\n添加执行权限  \n\n```shell\nchmod +x /usr/local/bin/my-script.sh\n```\n\n","slug":"pve/cluster-not-ready-no-quorum-500","published":1,"updated":"2024-10-22T14:19:10.671Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqm000eo8tz6nku0c98","content":"<h3 id=\"问题解释\"><a href=\"#问题解释\" class=\"headerlink\" title=\"问题解释\"></a>问题解释</h3><p>集群节点离线导致投票数目不足，导致无法进行操作</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>添加自定义服务，执行脚本</p>\n<p>服务文件 <code>/etc/systemd/system/my-script.service</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My custom script</span><br><span class=\"line\">Wants=corosync.service # 依赖服务</span><br><span class=\"line\">Wants=pve-cluster.service</span><br><span class=\"line\">Wants=pvedaemon.service</span><br><span class=\"line\">Wants=pveproxy.service</span><br><span class=\"line\">After=corosync.service</span><br><span class=\"line\">After=pve-cluster.service</span><br><span class=\"line\">After=pvedaemon.service</span><br><span class=\"line\">After=pveproxy.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/my-script.sh</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>脚本文件 <code> /usr/local/bin/my-script.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">pvecm expected 1</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>添加执行权限  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/my-script.sh</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h3 id=\"问题解释\"><a href=\"#问题解释\" class=\"headerlink\" title=\"问题解释\"></a>问题解释</h3><p>集群节点离线导致投票数目不足，导致无法进行操作</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>添加自定义服务，执行脚本</p>\n<p>服务文件 <code>/etc/systemd/system/my-script.service</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My custom script</span><br><span class=\"line\">Wants=corosync.service # 依赖服务</span><br><span class=\"line\">Wants=pve-cluster.service</span><br><span class=\"line\">Wants=pvedaemon.service</span><br><span class=\"line\">Wants=pveproxy.service</span><br><span class=\"line\">After=corosync.service</span><br><span class=\"line\">After=pve-cluster.service</span><br><span class=\"line\">After=pvedaemon.service</span><br><span class=\"line\">After=pveproxy.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/local/bin/my-script.sh</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>脚本文件 <code> /usr/local/bin/my-script.sh</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">pvecm expected 1</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>添加执行权限  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/my-script.sh</span><br></pre></td></tr></table></figure>\n\n"},{"title":"网络唤醒","date":"2024-10-25T17:26:47.000Z","_content":"\nhttps://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/  \n# Set up Wake On LAN (WOL) on a Debian Server","source":"_posts/Linux/网络唤醒.md","raw":"---\ntitle: 网络唤醒\ndate: 2024-10-26 01:26:47\ncategories:\n  - Linux\ntags:\n  - 网络唤醒\n  - wol\n  - debian\n---\n\nhttps://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/  \n# Set up Wake On LAN (WOL) on a Debian Server","slug":"Linux/网络唤醒","published":1,"updated":"2024-10-25T17:37:15.109Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqn000io8tz723i199h","content":"<p><a href=\"https://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/\">https://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/</a>  </p>\n<h1 id=\"Set-up-Wake-On-LAN-WOL-on-a-Debian-Server\"><a href=\"#Set-up-Wake-On-LAN-WOL-on-a-Debian-Server\" class=\"headerlink\" title=\"Set up Wake On LAN (WOL) on a Debian Server\"></a>Set up Wake On LAN (WOL) on a Debian Server</h1>","excerpt":"","more":"<p><a href=\"https://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/\">https://www.lisenet.com/2013/set-up-wake-on-lan-wol-on-a-debian-wheezy-server/</a>  </p>\n<h1 id=\"Set-up-Wake-On-LAN-WOL-on-a-Debian-Server\"><a href=\"#Set-up-Wake-On-LAN-WOL-on-a-Debian-Server\" class=\"headerlink\" title=\"Set up Wake On LAN (WOL) on a Debian Server\"></a>Set up Wake On LAN (WOL) on a Debian Server</h1>"},{"title":"istore安装","date":"2024-10-09T17:46:23.000Z","_content":"\n[工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客](https://blog.csdn.net/weixin_38168694/article/details/130544422)\n\n# 问题\n\n1. img文件安装问题\n\n   需要cmd引入磁盘\n\n    ```shell\n    qm importdisk 100<虚拟机号> <磁盘文件路径> local-lvm\n    ```\n\n2. 启动失败\n\n   uefi启动需要删除efi磁盘，因为可能因为固件存在efi分区\n\n\n# network文件\n\n```shell\nconfig interface 'loopback'\n        option device 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdc9:6f90:39f6::/48'\n\nconfig device\n        option name 'br-lan'\n        option type 'bridge'\n        list ports 'eth0'\n\nconfig interface 'lan'\n        option device 'br-lan'\n        option proto 'static'\n        option ipaddr '192.168.100.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option proto 'dhcp'\n        option device 'eth1'\n\nconfig interface 'lan1'\n        option proto 'static'\n        option device 'eth3'\n        option ipaddr '192.168.101.1'\n```\n","source":"_posts/pve/istore安装.md","raw":"---\ntitle: istore安装\ndate: 2024-10-10 01:46:23\ncategories:\n  - pve\ntags:\n  - pve\n  - 软路由\n---\n\n[工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客](https://blog.csdn.net/weixin_38168694/article/details/130544422)\n\n# 问题\n\n1. img文件安装问题\n\n   需要cmd引入磁盘\n\n    ```shell\n    qm importdisk 100<虚拟机号> <磁盘文件路径> local-lvm\n    ```\n\n2. 启动失败\n\n   uefi启动需要删除efi磁盘，因为可能因为固件存在efi分区\n\n\n# network文件\n\n```shell\nconfig interface 'loopback'\n        option device 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdc9:6f90:39f6::/48'\n\nconfig device\n        option name 'br-lan'\n        option type 'bridge'\n        list ports 'eth0'\n\nconfig interface 'lan'\n        option device 'br-lan'\n        option proto 'static'\n        option ipaddr '192.168.100.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option proto 'dhcp'\n        option device 'eth1'\n\nconfig interface 'lan1'\n        option proto 'static'\n        option device 'eth3'\n        option ipaddr '192.168.101.1'\n```\n","slug":"pve/istore安装","published":1,"updated":"2024-10-09T17:47:51.744Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqo000mo8tz76yxay43","content":"<p><a href=\"https://blog.csdn.net/weixin_38168694/article/details/130544422\">工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>img文件安装问题</p>\n<p>需要cmd引入磁盘</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qm importdisk 100&lt;虚拟机号&gt; &lt;磁盘文件路径&gt; local-lvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动失败</p>\n<p>uefi启动需要删除efi磁盘，因为可能因为固件存在efi分区</p>\n</li>\n</ol>\n<h1 id=\"network文件\"><a href=\"#network文件\" class=\"headerlink\" title=\"network文件\"></a>network文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#x27;loopback&#x27;</span><br><span class=\"line\">        option device &#x27;lo&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#x27;globals&#x27;</span><br><span class=\"line\">        option ula_prefix &#x27;fdc9:6f90:39f6::/48&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config device</span><br><span class=\"line\">        option name &#x27;br-lan&#x27;</span><br><span class=\"line\">        option type &#x27;bridge&#x27;</span><br><span class=\"line\">        list ports &#x27;eth0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan&#x27;</span><br><span class=\"line\">        option device &#x27;br-lan&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.100.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class=\"line\">        option ip6assign &#x27;60&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;wan&#x27;</span><br><span class=\"line\">        option proto &#x27;dhcp&#x27;</span><br><span class=\"line\">        option device &#x27;eth1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan1&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option device &#x27;eth3&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.101.1&#x27;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"https://blog.csdn.net/weixin_38168694/article/details/130544422\">工控机AllInOne——篇5，pve安装istoreos_Harold_96_lxw的博客-CSDN博客</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li><p>img文件安装问题</p>\n<p>需要cmd引入磁盘</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qm importdisk 100&lt;虚拟机号&gt; &lt;磁盘文件路径&gt; local-lvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动失败</p>\n<p>uefi启动需要删除efi磁盘，因为可能因为固件存在efi分区</p>\n</li>\n</ol>\n<h1 id=\"network文件\"><a href=\"#network文件\" class=\"headerlink\" title=\"network文件\"></a>network文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#x27;loopback&#x27;</span><br><span class=\"line\">        option device &#x27;lo&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#x27;globals&#x27;</span><br><span class=\"line\">        option ula_prefix &#x27;fdc9:6f90:39f6::/48&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config device</span><br><span class=\"line\">        option name &#x27;br-lan&#x27;</span><br><span class=\"line\">        option type &#x27;bridge&#x27;</span><br><span class=\"line\">        list ports &#x27;eth0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan&#x27;</span><br><span class=\"line\">        option device &#x27;br-lan&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.100.1&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class=\"line\">        option ip6assign &#x27;60&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;wan&#x27;</span><br><span class=\"line\">        option proto &#x27;dhcp&#x27;</span><br><span class=\"line\">        option device &#x27;eth1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#x27;lan1&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option device &#x27;eth3&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.101.1&#x27;</span><br></pre></td></tr></table></figure>\n"},{"title":"pve虚拟机在线检测、重启","date":"2024-12-04T14:56:04.000Z","_content":"\n# pve虚拟机在线检测、重启\n\n来源： https://blog.slogra.com/post-806.html  \n\n```bash\nvim /usr/local/bin/check_servers.sh\n```\n\n```bash\n#!/bin/bash\n\nQMPATH=\"/usr/sbin/qm\"\nMAX_FAILURES=3  # 连续失败的最大次数\nRESET_AFTER_SUCCESS=2  # 连续成功后重置失败计数的阈值\n\nFAILURE_FILE=\"/path/to/failure_file.txt\"  # 存储失败信息的文件路径\n\ndeclare -A failure_count  # 记录每个虚拟机的连续失败次数\n\nfunction load_failure_count() {\n    if [[ -f \"$FAILURE_FILE\" ]]; then\n        source \"$FAILURE_FILE\"\n    fi\n}\n\nfunction save_failure_count() {\n    declare -p failure_count > \"$FAILURE_FILE\"\n}\n\nfunction check_and_restart() {\n    local vm_id=\"$1\"\n    local vm_ip=\"$2\"\n    local now\n\n    ping -c 4 \"$vm_ip\" > /dev/null\n\n    if [[ $? != 0 ]]; then\n        now=$(date +%s)\n        echo \"[$now] [NO] id = $vm_id, ip = $vm_ip\"\n\n        if [[ -z \"${failure_count[\"$vm_id\"]}\" ]]; then\n            failure_count[\"$vm_id\"]=1  # 初始失败次数为1\n        else\n            ((failure_count[\"$vm_id\"]++))\n\n            if ((failure_count[\"$vm_id\"] >= MAX_FAILURES)); then\n                echo \"[$now] [RESTART] Restarting $vm_id after $MAX_FAILURES consecutive failures.\"\n                \"$QMPATH\" stop \"$vm_id\"\n                \"$QMPATH\" start \"$vm_id\"\n                failure_count[\"$vm_id\"]=0  # 重置连续失败次数\n            fi\n        fi\n    else\n        # 如果ping成功，则重置虚拟机的失败计数\n        if [[ -n \"${failure_count[\"$vm_id\"]}\" && ${failure_count[\"$vm_id\"]} -gt 0 ]]; then\n            echo \"[$now] [OK] id = $vm_id, ip = $vm_ip\"\n            failure_count[\"$vm_id\"]=0\n        fi\n    fi\n}\n\nfunction main() {\n    local vm_list=\"$1\"\n    local vm_id\n    local vm_ip\n\n    load_failure_count\n\n    for each in $vm_list; do\n        vm_id=$(echo \"$each\" | awk -F: '{ print $1 }')\n        vm_ip=$(echo \"$each\" | awk -F: '{ print $2 }')\n        check_and_restart \"$vm_id\" \"$vm_ip\"\n    done\n\n    save_failure_count\n}\n\n# 需要检查的虚拟机列表，格式为 vm_id:vm_ip\nvm_list=\"\n1001:192.168.1.254\n1002:192.168.1.250\n\"\n\nmain \"$vm_list\"\n```\n\n\n定时执行\n\n```bash\ncrontab -e\n```\n\n```bash\n*/3 * * * * /bin/bash /root/soft_shell/check_servers.sh\n```","source":"_posts/pve/pve虚拟机在线检测、重启.md","raw":"---\ntitle: pve虚拟机在线检测、重启\ndate: 2024-12-04 22:56:04\ncategories:\n  - pve\ntags:\n  - pve\n---\n\n# pve虚拟机在线检测、重启\n\n来源： https://blog.slogra.com/post-806.html  \n\n```bash\nvim /usr/local/bin/check_servers.sh\n```\n\n```bash\n#!/bin/bash\n\nQMPATH=\"/usr/sbin/qm\"\nMAX_FAILURES=3  # 连续失败的最大次数\nRESET_AFTER_SUCCESS=2  # 连续成功后重置失败计数的阈值\n\nFAILURE_FILE=\"/path/to/failure_file.txt\"  # 存储失败信息的文件路径\n\ndeclare -A failure_count  # 记录每个虚拟机的连续失败次数\n\nfunction load_failure_count() {\n    if [[ -f \"$FAILURE_FILE\" ]]; then\n        source \"$FAILURE_FILE\"\n    fi\n}\n\nfunction save_failure_count() {\n    declare -p failure_count > \"$FAILURE_FILE\"\n}\n\nfunction check_and_restart() {\n    local vm_id=\"$1\"\n    local vm_ip=\"$2\"\n    local now\n\n    ping -c 4 \"$vm_ip\" > /dev/null\n\n    if [[ $? != 0 ]]; then\n        now=$(date +%s)\n        echo \"[$now] [NO] id = $vm_id, ip = $vm_ip\"\n\n        if [[ -z \"${failure_count[\"$vm_id\"]}\" ]]; then\n            failure_count[\"$vm_id\"]=1  # 初始失败次数为1\n        else\n            ((failure_count[\"$vm_id\"]++))\n\n            if ((failure_count[\"$vm_id\"] >= MAX_FAILURES)); then\n                echo \"[$now] [RESTART] Restarting $vm_id after $MAX_FAILURES consecutive failures.\"\n                \"$QMPATH\" stop \"$vm_id\"\n                \"$QMPATH\" start \"$vm_id\"\n                failure_count[\"$vm_id\"]=0  # 重置连续失败次数\n            fi\n        fi\n    else\n        # 如果ping成功，则重置虚拟机的失败计数\n        if [[ -n \"${failure_count[\"$vm_id\"]}\" && ${failure_count[\"$vm_id\"]} -gt 0 ]]; then\n            echo \"[$now] [OK] id = $vm_id, ip = $vm_ip\"\n            failure_count[\"$vm_id\"]=0\n        fi\n    fi\n}\n\nfunction main() {\n    local vm_list=\"$1\"\n    local vm_id\n    local vm_ip\n\n    load_failure_count\n\n    for each in $vm_list; do\n        vm_id=$(echo \"$each\" | awk -F: '{ print $1 }')\n        vm_ip=$(echo \"$each\" | awk -F: '{ print $2 }')\n        check_and_restart \"$vm_id\" \"$vm_ip\"\n    done\n\n    save_failure_count\n}\n\n# 需要检查的虚拟机列表，格式为 vm_id:vm_ip\nvm_list=\"\n1001:192.168.1.254\n1002:192.168.1.250\n\"\n\nmain \"$vm_list\"\n```\n\n\n定时执行\n\n```bash\ncrontab -e\n```\n\n```bash\n*/3 * * * * /bin/bash /root/soft_shell/check_servers.sh\n```","slug":"pve/pve虚拟机在线检测、重启","published":1,"updated":"2025-02-11T14:09:03.543Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqp000po8tzfd1xene0","content":"<h1 id=\"pve虚拟机在线检测、重启\"><a href=\"#pve虚拟机在线检测、重启\" class=\"headerlink\" title=\"pve虚拟机在线检测、重启\"></a>pve虚拟机在线检测、重启</h1><p>来源： <a href=\"https://blog.slogra.com/post-806.html\">https://blog.slogra.com/post-806.html</a>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/bin/check_servers.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">QMPATH=<span class=\"string\">&quot;/usr/sbin/qm&quot;</span></span><br><span class=\"line\">MAX_FAILURES=3  <span class=\"comment\"># 连续失败的最大次数</span></span><br><span class=\"line\">RESET_AFTER_SUCCESS=2  <span class=\"comment\"># 连续成功后重置失败计数的阈值</span></span><br><span class=\"line\"></span><br><span class=\"line\">FAILURE_FILE=<span class=\"string\">&quot;/path/to/failure_file.txt&quot;</span>  <span class=\"comment\"># 存储失败信息的文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A failure_count  <span class=\"comment\"># 记录每个虚拟机的连续失败次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">load_failure_count</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -f <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">source</span> <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">save_failure_count</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">declare</span> -p failure_count &gt; <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check_and_restart</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_id=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_ip=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> now</span><br><span class=\"line\"></span><br><span class=\"line\">    ping -c 4 <span class=\"string\">&quot;<span class=\"variable\">$vm_ip</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $? != 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        now=$(<span class=\"built_in\">date</span> +%s)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [NO] id = <span class=\"variable\">$vm_id</span>, ip = <span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=1  <span class=\"comment\"># 初始失败次数为1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ((failure_count[&quot;<span class=\"variable\">$vm_id</span>&quot;]++))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((failure_count[&quot;<span class=\"variable\">$vm_id</span>&quot;] &gt;= MAX_FAILURES)); <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [RESTART] Restarting <span class=\"variable\">$vm_id</span> after <span class=\"variable\">$MAX_FAILURES</span> consecutive failures.&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;<span class=\"variable\">$QMPATH</span>&quot;</span> stop <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;<span class=\"variable\">$QMPATH</span>&quot;</span> start <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span></span><br><span class=\"line\">                failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=0  <span class=\"comment\"># 重置连续失败次数</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果ping成功，则重置虚拟机的失败计数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [[ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span>&quot;</span> &amp;&amp; <span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span> -gt 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [OK] id = <span class=\"variable\">$vm_id</span>, ip = <span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\">            failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=0</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_list=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_id</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_ip</span><br><span class=\"line\"></span><br><span class=\"line\">    load_failure_count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> <span class=\"variable\">$vm_list</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        vm_id=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$each</span>&quot;</span> | awk -F: <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span>)</span><br><span class=\"line\">        vm_ip=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$each</span>&quot;</span> | awk -F: <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class=\"line\">        check_and_restart <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">    save_failure_count</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要检查的虚拟机列表，格式为 vm_id:vm_ip</span></span><br><span class=\"line\">vm_list=<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">1001:192.168.1.254</span></span><br><span class=\"line\"><span class=\"string\">1002:192.168.1.250</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">main <span class=\"string\">&quot;<span class=\"variable\">$vm_list</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>定时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/3 * * * * /bin/bash /root/soft_shell/check_servers.sh</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"pve虚拟机在线检测、重启\"><a href=\"#pve虚拟机在线检测、重启\" class=\"headerlink\" title=\"pve虚拟机在线检测、重启\"></a>pve虚拟机在线检测、重启</h1><p>来源： <a href=\"https://blog.slogra.com/post-806.html\">https://blog.slogra.com/post-806.html</a>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/bin/check_servers.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">QMPATH=<span class=\"string\">&quot;/usr/sbin/qm&quot;</span></span><br><span class=\"line\">MAX_FAILURES=3  <span class=\"comment\"># 连续失败的最大次数</span></span><br><span class=\"line\">RESET_AFTER_SUCCESS=2  <span class=\"comment\"># 连续成功后重置失败计数的阈值</span></span><br><span class=\"line\"></span><br><span class=\"line\">FAILURE_FILE=<span class=\"string\">&quot;/path/to/failure_file.txt&quot;</span>  <span class=\"comment\"># 存储失败信息的文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A failure_count  <span class=\"comment\"># 记录每个虚拟机的连续失败次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">load_failure_count</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -f <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">source</span> <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">save_failure_count</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">declare</span> -p failure_count &gt; <span class=\"string\">&quot;<span class=\"variable\">$FAILURE_FILE</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check_and_restart</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_id=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_ip=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> now</span><br><span class=\"line\"></span><br><span class=\"line\">    ping -c 4 <span class=\"string\">&quot;<span class=\"variable\">$vm_ip</span>&quot;</span> &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $? != 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        now=$(<span class=\"built_in\">date</span> +%s)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [NO] id = <span class=\"variable\">$vm_id</span>, ip = <span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=1  <span class=\"comment\"># 初始失败次数为1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ((failure_count[&quot;<span class=\"variable\">$vm_id</span>&quot;]++))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((failure_count[&quot;<span class=\"variable\">$vm_id</span>&quot;] &gt;= MAX_FAILURES)); <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [RESTART] Restarting <span class=\"variable\">$vm_id</span> after <span class=\"variable\">$MAX_FAILURES</span> consecutive failures.&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;<span class=\"variable\">$QMPATH</span>&quot;</span> stop <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span></span><br><span class=\"line\">                <span class=\"string\">&quot;<span class=\"variable\">$QMPATH</span>&quot;</span> start <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span></span><br><span class=\"line\">                failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=0  <span class=\"comment\"># 重置连续失败次数</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果ping成功，则重置虚拟机的失败计数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [[ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span>&quot;</span> &amp;&amp; <span class=\"variable\">$&#123;failure_count[&quot;$vm_id&quot;]&#125;</span> -gt 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$now</span>] [OK] id = <span class=\"variable\">$vm_id</span>, ip = <span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\">            failure_count[<span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span>]=0</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_list=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_id</span><br><span class=\"line\">    <span class=\"built_in\">local</span> vm_ip</span><br><span class=\"line\"></span><br><span class=\"line\">    load_failure_count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> <span class=\"variable\">$vm_list</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        vm_id=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$each</span>&quot;</span> | awk -F: <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span>)</span><br><span class=\"line\">        vm_ip=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$each</span>&quot;</span> | awk -F: <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class=\"line\">        check_and_restart <span class=\"string\">&quot;<span class=\"variable\">$vm_id</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$vm_ip</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">    save_failure_count</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要检查的虚拟机列表，格式为 vm_id:vm_ip</span></span><br><span class=\"line\">vm_list=<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">1001:192.168.1.254</span></span><br><span class=\"line\"><span class=\"string\">1002:192.168.1.250</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">main <span class=\"string\">&quot;<span class=\"variable\">$vm_list</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>定时执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/3 * * * * /bin/bash /root/soft_shell/check_servers.sh</span><br></pre></td></tr></table></figure>"},{"title":"lxc容器挂载设备","date":"2024-09-12T14:06:23.000Z","_content":"# lxc容器内使用宿主机usb设备\n\n宿主机上编辑lxc容器的配置文件 /etc/pve/lxc/101.conf，添加以下内容\n\n```bash\nlxc.mount.entry: /dev/video0 dev/video0 none bind,optional,create=file\n```\n\n修改usb设备权限\n\n```bash\nchmod 666 /dev/video0\n```\n\n容器内测试\n```bash\napt install fswebcam\nfswebcam -r 640x480 --jpeg 85 -D 1 snap.jpg\n```\n\n原文链接：https://blog.csdn.net/qf0129/article/details/131398166","source":"_posts/pve/lxc容器挂载设备.md","raw":"---\ntitle: lxc容器挂载设备\ndate: 2024-09-12 22:06:23\ncategories:\n  - pve\ntags:\n  - pve\n  - lxc\n---\n# lxc容器内使用宿主机usb设备\n\n宿主机上编辑lxc容器的配置文件 /etc/pve/lxc/101.conf，添加以下内容\n\n```bash\nlxc.mount.entry: /dev/video0 dev/video0 none bind,optional,create=file\n```\n\n修改usb设备权限\n\n```bash\nchmod 666 /dev/video0\n```\n\n容器内测试\n```bash\napt install fswebcam\nfswebcam -r 640x480 --jpeg 85 -D 1 snap.jpg\n```\n\n原文链接：https://blog.csdn.net/qf0129/article/details/131398166","slug":"pve/lxc容器挂载设备","published":1,"updated":"2024-09-12T14:09:55.330Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqq000to8tz0rav6x39","content":"<h1 id=\"lxc容器内使用宿主机usb设备\"><a href=\"#lxc容器内使用宿主机usb设备\" class=\"headerlink\" title=\"lxc容器内使用宿主机usb设备\"></a>lxc容器内使用宿主机usb设备</h1><p>宿主机上编辑lxc容器的配置文件 &#x2F;etc&#x2F;pve&#x2F;lxc&#x2F;101.conf，添加以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lxc.mount.entry: /dev/video0 dev/video0 none <span class=\"built_in\">bind</span>,optional,create=file</span><br></pre></td></tr></table></figure>\n\n<p>修改usb设备权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 666 /dev/video0</span><br></pre></td></tr></table></figure>\n\n<p>容器内测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install fswebcam</span><br><span class=\"line\">fswebcam -r 640x480 --jpeg 85 -D 1 snap.jpg</span><br></pre></td></tr></table></figure>\n\n<p>原文链接：<a href=\"https://blog.csdn.net/qf0129/article/details/131398166\">https://blog.csdn.net/qf0129/article/details/131398166</a></p>\n","excerpt":"","more":"<h1 id=\"lxc容器内使用宿主机usb设备\"><a href=\"#lxc容器内使用宿主机usb设备\" class=\"headerlink\" title=\"lxc容器内使用宿主机usb设备\"></a>lxc容器内使用宿主机usb设备</h1><p>宿主机上编辑lxc容器的配置文件 &#x2F;etc&#x2F;pve&#x2F;lxc&#x2F;101.conf，添加以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lxc.mount.entry: /dev/video0 dev/video0 none <span class=\"built_in\">bind</span>,optional,create=file</span><br></pre></td></tr></table></figure>\n\n<p>修改usb设备权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 666 /dev/video0</span><br></pre></td></tr></table></figure>\n\n<p>容器内测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install fswebcam</span><br><span class=\"line\">fswebcam -r 640x480 --jpeg 85 -D 1 snap.jpg</span><br></pre></td></tr></table></figure>\n\n<p>原文链接：<a href=\"https://blog.csdn.net/qf0129/article/details/131398166\">https://blog.csdn.net/qf0129/article/details/131398166</a></p>\n"},{"title":"pve安装错误","date":"2024-06-19T17:07:26.000Z","_content":"\n官方手册  \nhttps://pve-doc-cn.readthedocs.io/zh-cn/latest/\n\n# 安装问题\n\n来源：https://mengkai.fun/archives/1717297733491  \n\n报错\n```\nloading drivers:nvidiafb ahci mac_hid\n```\n显卡驱动错误，只能使用命令行安装  \n官方解决方案\n\n> On the Proxmox VE bootloader menu, navigate to Install Proxmox VE (Terminal UI) and press e to edit the entry. Using the arrow keys, navigate to the line starting with linux, move the cursor to the end of that line and add the parameter nomodeset, separated by a space from the pre-existing last parameter.\n\n在Proxmox VE引导程序菜单上，导航到安装_Proxmox VE (Terminal UI)_）， 按e编辑条目。使用箭头键，导航到起始行 在Linux中，将光标移动到该行的末尾，并添加 参数 nomodeset（记得前面留空格），与预先存在的last用空格分隔 参数.\n\n添加后按CTRL+X重新安装","source":"_posts/pve/pve安装错误.md","raw":"---\ntitle: pve安装错误\ndate: 2024-06-20 01:07:26\ncategories:\n  - pve\ntags:\n  - 官方手册\n---\n\n官方手册  \nhttps://pve-doc-cn.readthedocs.io/zh-cn/latest/\n\n# 安装问题\n\n来源：https://mengkai.fun/archives/1717297733491  \n\n报错\n```\nloading drivers:nvidiafb ahci mac_hid\n```\n显卡驱动错误，只能使用命令行安装  \n官方解决方案\n\n> On the Proxmox VE bootloader menu, navigate to Install Proxmox VE (Terminal UI) and press e to edit the entry. Using the arrow keys, navigate to the line starting with linux, move the cursor to the end of that line and add the parameter nomodeset, separated by a space from the pre-existing last parameter.\n\n在Proxmox VE引导程序菜单上，导航到安装_Proxmox VE (Terminal UI)_）， 按e编辑条目。使用箭头键，导航到起始行 在Linux中，将光标移动到该行的末尾，并添加 参数 nomodeset（记得前面留空格），与预先存在的last用空格分隔 参数.\n\n添加后按CTRL+X重新安装","slug":"pve/pve安装错误","published":1,"updated":"2024-10-09T14:45:59.517Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqq000wo8tzfpaoa94g","content":"<p>官方手册<br><a href=\"https://pve-doc-cn.readthedocs.io/zh-cn/latest/\">https://pve-doc-cn.readthedocs.io/zh-cn/latest/</a></p>\n<h1 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h1><p>来源：<a href=\"https://mengkai.fun/archives/1717297733491\">https://mengkai.fun/archives/1717297733491</a>  </p>\n<p>报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading drivers:nvidiafb ahci mac_hid</span><br></pre></td></tr></table></figure>\n<p>显卡驱动错误，只能使用命令行安装<br>官方解决方案</p>\n<blockquote>\n<p>On the Proxmox VE bootloader menu, navigate to Install Proxmox VE (Terminal UI) and press e to edit the entry. Using the arrow keys, navigate to the line starting with linux, move the cursor to the end of that line and add the parameter nomodeset, separated by a space from the pre-existing last parameter.</p>\n</blockquote>\n<p>在Proxmox VE引导程序菜单上，导航到安装_Proxmox VE (Terminal UI)_）， 按e编辑条目。使用箭头键，导航到起始行 在Linux中，将光标移动到该行的末尾，并添加 参数 nomodeset（记得前面留空格），与预先存在的last用空格分隔 参数.</p>\n<p>添加后按CTRL+X重新安装</p>\n","excerpt":"","more":"<p>官方手册<br><a href=\"https://pve-doc-cn.readthedocs.io/zh-cn/latest/\">https://pve-doc-cn.readthedocs.io/zh-cn/latest/</a></p>\n<h1 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h1><p>来源：<a href=\"https://mengkai.fun/archives/1717297733491\">https://mengkai.fun/archives/1717297733491</a>  </p>\n<p>报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading drivers:nvidiafb ahci mac_hid</span><br></pre></td></tr></table></figure>\n<p>显卡驱动错误，只能使用命令行安装<br>官方解决方案</p>\n<blockquote>\n<p>On the Proxmox VE bootloader menu, navigate to Install Proxmox VE (Terminal UI) and press e to edit the entry. Using the arrow keys, navigate to the line starting with linux, move the cursor to the end of that line and add the parameter nomodeset, separated by a space from the pre-existing last parameter.</p>\n</blockquote>\n<p>在Proxmox VE引导程序菜单上，导航到安装_Proxmox VE (Terminal UI)_）， 按e编辑条目。使用箭头键，导航到起始行 在Linux中，将光标移动到该行的末尾，并添加 参数 nomodeset（记得前面留空格），与预先存在的last用空格分隔 参数.</p>\n<p>添加后按CTRL+X重新安装</p>\n"},{"title":"HN8546X6不需超管权限关闭IPV6防火墙","date":"2024-10-27T13:54:29.000Z","_content":"\n大神NB，没想到世界真是个草台班子   \nhttps://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/\n\n\n### 发现问题\n\n经测试 ipv6 出站一切正常 **ipv6 入站不通**\n局域网机器使用 ipv6 访问没问题\n使用联通手机广域网访问局域网 2409 开头的公网 ipv6 地址无法访问\n这就难办了，入站不能用，100m 的上传白瞎了\n群晖怎么玩，pt 怎么玩\n这个不能忍\n\n### 排查\n\n多方查找资料确定是光猫的 ipv6 防火墙问题\n尝试找官方要超管改桥接未果\n此处吐槽上海移动 排查资料中恩山论坛说是之前多拨的太猖狂了所以关闭了超管和桥接申请\n研究曲线救国解决ipv6出站问题\n有拔光纤后使用华为原厂工具破解超管并还原华为官方界面的\n发现同型号的没人搞成功 猜测是新型号 把之前漏洞给补上了\n试试其他方案\n经多方查找资料 方案如下\n\n### 解决方法\n\n光猫标签上的默认user账号登陆后\n\n#### 步骤1，关闭ipv6防火墙\n\n进入 安全 → 防火墙 → IPV6防火墙\n**使能IPv6防火墙控制转发报文** 默认开启且 **勾选按钮无法选中操作**\nF12审查元素 选中勾选按钮 获得勾选代码如下\n\n```\n<input id=\"ipv6firewall\" type=\"checkbox\" realtype=\"CheckBox\" class=\"CheckBox osgidisable\" bindfield=\"x.X_HW_IPv6FWDFireWallEnable\" onclick=\"OnFirewallClick(this);\" disabled>\n```\n\n手动删除掉最后的 disabled\n此时页面可勾选了\n选定取消 即为关闭ipv6防火墙\n\n#### 步骤2，提交保存\n\n点击提交 同样的问题 **提交按钮无法选定**\n继续同样办法 审查该元素\n\n\n```\n<button name=\"btnApply\" id=\"btnApply\" type=\"button\" class=\"ApplyButtoncss buttonwidth_100px osgidisable\" onclick=\"SubmitForm();\" disabled><script>document.write(route_language['bbsp_app']);</script>应用</button>\n```\n\n破解无法提交两种方案\n\n> 方案一\n> 复制 SubmitForm(); 到控制台运行即可\n> 方案二\n> 方案类似上面，也是把disabled去掉,按钮即可手动点击提交保存","source":"_posts/沙堆/HN8546X6不需超管权限关闭IPV6防火墙.md","raw":"---\ntitle: HN8546X6不需超管权限关闭IPV6防火墙\ndate: 2024-10-27 21:54:29\ncategories:\ntags:\n---\n\n大神NB，没想到世界真是个草台班子   \nhttps://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/\n\n\n### 发现问题\n\n经测试 ipv6 出站一切正常 **ipv6 入站不通**\n局域网机器使用 ipv6 访问没问题\n使用联通手机广域网访问局域网 2409 开头的公网 ipv6 地址无法访问\n这就难办了，入站不能用，100m 的上传白瞎了\n群晖怎么玩，pt 怎么玩\n这个不能忍\n\n### 排查\n\n多方查找资料确定是光猫的 ipv6 防火墙问题\n尝试找官方要超管改桥接未果\n此处吐槽上海移动 排查资料中恩山论坛说是之前多拨的太猖狂了所以关闭了超管和桥接申请\n研究曲线救国解决ipv6出站问题\n有拔光纤后使用华为原厂工具破解超管并还原华为官方界面的\n发现同型号的没人搞成功 猜测是新型号 把之前漏洞给补上了\n试试其他方案\n经多方查找资料 方案如下\n\n### 解决方法\n\n光猫标签上的默认user账号登陆后\n\n#### 步骤1，关闭ipv6防火墙\n\n进入 安全 → 防火墙 → IPV6防火墙\n**使能IPv6防火墙控制转发报文** 默认开启且 **勾选按钮无法选中操作**\nF12审查元素 选中勾选按钮 获得勾选代码如下\n\n```\n<input id=\"ipv6firewall\" type=\"checkbox\" realtype=\"CheckBox\" class=\"CheckBox osgidisable\" bindfield=\"x.X_HW_IPv6FWDFireWallEnable\" onclick=\"OnFirewallClick(this);\" disabled>\n```\n\n手动删除掉最后的 disabled\n此时页面可勾选了\n选定取消 即为关闭ipv6防火墙\n\n#### 步骤2，提交保存\n\n点击提交 同样的问题 **提交按钮无法选定**\n继续同样办法 审查该元素\n\n\n```\n<button name=\"btnApply\" id=\"btnApply\" type=\"button\" class=\"ApplyButtoncss buttonwidth_100px osgidisable\" onclick=\"SubmitForm();\" disabled><script>document.write(route_language['bbsp_app']);</script>应用</button>\n```\n\n破解无法提交两种方案\n\n> 方案一\n> 复制 SubmitForm(); 到控制台运行即可\n> 方案二\n> 方案类似上面，也是把disabled去掉,按钮即可手动点击提交保存","slug":"沙堆/HN8546X6不需超管权限关闭IPV6防火墙","published":1,"updated":"2024-11-03T07:46:07.101Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqt0013o8tz9o7g7in2","content":"<p>大神NB，没想到世界真是个草台班子<br><a href=\"https://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/\">https://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/</a></p>\n<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>经测试 ipv6 出站一切正常 <strong>ipv6 入站不通</strong><br>局域网机器使用 ipv6 访问没问题<br>使用联通手机广域网访问局域网 2409 开头的公网 ipv6 地址无法访问<br>这就难办了，入站不能用，100m 的上传白瞎了<br>群晖怎么玩，pt 怎么玩<br>这个不能忍</p>\n<h3 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h3><p>多方查找资料确定是光猫的 ipv6 防火墙问题<br>尝试找官方要超管改桥接未果<br>此处吐槽上海移动 排查资料中恩山论坛说是之前多拨的太猖狂了所以关闭了超管和桥接申请<br>研究曲线救国解决ipv6出站问题<br>有拔光纤后使用华为原厂工具破解超管并还原华为官方界面的<br>发现同型号的没人搞成功 猜测是新型号 把之前漏洞给补上了<br>试试其他方案<br>经多方查找资料 方案如下</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>光猫标签上的默认user账号登陆后</p>\n<h4 id=\"步骤1，关闭ipv6防火墙\"><a href=\"#步骤1，关闭ipv6防火墙\" class=\"headerlink\" title=\"步骤1，关闭ipv6防火墙\"></a>步骤1，关闭ipv6防火墙</h4><p>进入 安全 → 防火墙 → IPV6防火墙<br><strong>使能IPv6防火墙控制转发报文</strong> 默认开启且 <strong>勾选按钮无法选中操作</strong><br>F12审查元素 选中勾选按钮 获得勾选代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;ipv6firewall&quot; type=&quot;checkbox&quot; realtype=&quot;CheckBox&quot; class=&quot;CheckBox osgidisable&quot; bindfield=&quot;x.X_HW_IPv6FWDFireWallEnable&quot; onclick=&quot;OnFirewallClick(this);&quot; disabled&gt;</span><br></pre></td></tr></table></figure>\n\n<p>手动删除掉最后的 disabled<br>此时页面可勾选了<br>选定取消 即为关闭ipv6防火墙</p>\n<h4 id=\"步骤2，提交保存\"><a href=\"#步骤2，提交保存\" class=\"headerlink\" title=\"步骤2，提交保存\"></a>步骤2，提交保存</h4><p>点击提交 同样的问题 <strong>提交按钮无法选定</strong><br>继续同样办法 审查该元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button name=&quot;btnApply&quot; id=&quot;btnApply&quot; type=&quot;button&quot; class=&quot;ApplyButtoncss buttonwidth_100px osgidisable&quot; onclick=&quot;SubmitForm();&quot; disabled&gt;&lt;script&gt;document.write(route_language[&#x27;bbsp_app&#x27;]);&lt;/script&gt;应用&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>破解无法提交两种方案</p>\n<blockquote>\n<p>方案一<br>复制 SubmitForm(); 到控制台运行即可<br>方案二<br>方案类似上面，也是把disabled去掉,按钮即可手动点击提交保存</p>\n</blockquote>\n","excerpt":"","more":"<p>大神NB，没想到世界真是个草台班子<br><a href=\"https://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/\">https://qiuyifei.com/2021/12/06/HN8546X6%E4%B8%8D%E9%9C%80%E8%B6%85%E7%AE%A1%E6%9D%83%E9%99%90%E5%85%B3%E9%97%ADIPV6%E9%98%B2%E7%81%AB%E5%A2%99/</a></p>\n<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>经测试 ipv6 出站一切正常 <strong>ipv6 入站不通</strong><br>局域网机器使用 ipv6 访问没问题<br>使用联通手机广域网访问局域网 2409 开头的公网 ipv6 地址无法访问<br>这就难办了，入站不能用，100m 的上传白瞎了<br>群晖怎么玩，pt 怎么玩<br>这个不能忍</p>\n<h3 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h3><p>多方查找资料确定是光猫的 ipv6 防火墙问题<br>尝试找官方要超管改桥接未果<br>此处吐槽上海移动 排查资料中恩山论坛说是之前多拨的太猖狂了所以关闭了超管和桥接申请<br>研究曲线救国解决ipv6出站问题<br>有拔光纤后使用华为原厂工具破解超管并还原华为官方界面的<br>发现同型号的没人搞成功 猜测是新型号 把之前漏洞给补上了<br>试试其他方案<br>经多方查找资料 方案如下</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>光猫标签上的默认user账号登陆后</p>\n<h4 id=\"步骤1，关闭ipv6防火墙\"><a href=\"#步骤1，关闭ipv6防火墙\" class=\"headerlink\" title=\"步骤1，关闭ipv6防火墙\"></a>步骤1，关闭ipv6防火墙</h4><p>进入 安全 → 防火墙 → IPV6防火墙<br><strong>使能IPv6防火墙控制转发报文</strong> 默认开启且 <strong>勾选按钮无法选中操作</strong><br>F12审查元素 选中勾选按钮 获得勾选代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;ipv6firewall&quot; type=&quot;checkbox&quot; realtype=&quot;CheckBox&quot; class=&quot;CheckBox osgidisable&quot; bindfield=&quot;x.X_HW_IPv6FWDFireWallEnable&quot; onclick=&quot;OnFirewallClick(this);&quot; disabled&gt;</span><br></pre></td></tr></table></figure>\n\n<p>手动删除掉最后的 disabled<br>此时页面可勾选了<br>选定取消 即为关闭ipv6防火墙</p>\n<h4 id=\"步骤2，提交保存\"><a href=\"#步骤2，提交保存\" class=\"headerlink\" title=\"步骤2，提交保存\"></a>步骤2，提交保存</h4><p>点击提交 同样的问题 <strong>提交按钮无法选定</strong><br>继续同样办法 审查该元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button name=&quot;btnApply&quot; id=&quot;btnApply&quot; type=&quot;button&quot; class=&quot;ApplyButtoncss buttonwidth_100px osgidisable&quot; onclick=&quot;SubmitForm();&quot; disabled&gt;&lt;script&gt;document.write(route_language[&#x27;bbsp_app&#x27;]);&lt;/script&gt;应用&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>破解无法提交两种方案</p>\n<blockquote>\n<p>方案一<br>复制 SubmitForm(); 到控制台运行即可<br>方案二<br>方案类似上面，也是把disabled去掉,按钮即可手动点击提交保存</p>\n</blockquote>\n"},{"title":"显示温度脚本","date":"2024-10-07T15:31:57.000Z","_content":"原文链接：[给Proxmox VE（PVE）添加CPU和硬盘相关信息显示的教程 - GXNAS博客](https://wp.gxnas.com/13756.html)\n\n一、实现以下功能\n1、在PVE首页增加cpu相关信息显示，包括：每个核心的频率、每个核心的温度、实时功耗、最大频率、最小频率等；\n2、在PVE首页增加硬盘相关信息显示，包括：硬盘型号、容量、温度、健康指数、通电小时、通电次数、读写量、SMART是否正常；\n3、理论上可以适配PVE任意版本；\n\n二、使用方法\n1、复制下面的安装依赖命令脚本，到PVE的Shell状态下运行，等到最后的一行的显示为 “成功!” 就表示本条命令安装成功。\n\n```\napt update ; apt install linux-cpupower && modprobe msr && echo msr > /etc/modules-load.d/turbostat-msr.conf && chmod +s /usr/sbin/turbostat && echo 成功！\n```\n\n2、如果你的PVE之前使用过同类或者其他类似的修改PVE页面的脚本，先用下面命令恢复到官方默认设置（如果PVE没有做过修改的，本步骤不需要操作）：\n\n```\napt update\napt install pve-manager proxmox-widget-toolkit --reinstall\nrm -f /usr/share/perl5/PVE/API2/Nodes.pm*bak\nrm -f /usr/share/pve-manager/js/pvemanagerlib.js*bak\nrm -f /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js*bak\n```\n\n3、复制下面的一键安装命令脚本，到PVE的Shell状态下运行：\n\n```\n(curl -Lf -o /tmp/temp.sh https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh || curl -Lf -o /tmp/temp.sh https://ghproxy.com/https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh) && chmod +x /tmp/temp.sh && /tmp/temp.sh remod\n```\n\n三、效果展示\n\n[![](https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg)](https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg)\n\n四、脚本作者开源仓库地址：\n\nhttps://github.com/a904055262/PVE-manager-status","source":"_posts/pve/显示温度脚本.md","raw":"---\ntitle: 显示温度脚本\ndate: 2024-10-07 23:31:57\ncategories:\n  - pve\ntags:\n  - pve\n---\n原文链接：[给Proxmox VE（PVE）添加CPU和硬盘相关信息显示的教程 - GXNAS博客](https://wp.gxnas.com/13756.html)\n\n一、实现以下功能\n1、在PVE首页增加cpu相关信息显示，包括：每个核心的频率、每个核心的温度、实时功耗、最大频率、最小频率等；\n2、在PVE首页增加硬盘相关信息显示，包括：硬盘型号、容量、温度、健康指数、通电小时、通电次数、读写量、SMART是否正常；\n3、理论上可以适配PVE任意版本；\n\n二、使用方法\n1、复制下面的安装依赖命令脚本，到PVE的Shell状态下运行，等到最后的一行的显示为 “成功!” 就表示本条命令安装成功。\n\n```\napt update ; apt install linux-cpupower && modprobe msr && echo msr > /etc/modules-load.d/turbostat-msr.conf && chmod +s /usr/sbin/turbostat && echo 成功！\n```\n\n2、如果你的PVE之前使用过同类或者其他类似的修改PVE页面的脚本，先用下面命令恢复到官方默认设置（如果PVE没有做过修改的，本步骤不需要操作）：\n\n```\napt update\napt install pve-manager proxmox-widget-toolkit --reinstall\nrm -f /usr/share/perl5/PVE/API2/Nodes.pm*bak\nrm -f /usr/share/pve-manager/js/pvemanagerlib.js*bak\nrm -f /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js*bak\n```\n\n3、复制下面的一键安装命令脚本，到PVE的Shell状态下运行：\n\n```\n(curl -Lf -o /tmp/temp.sh https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh || curl -Lf -o /tmp/temp.sh https://ghproxy.com/https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh) && chmod +x /tmp/temp.sh && /tmp/temp.sh remod\n```\n\n三、效果展示\n\n[![](https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg)](https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg)\n\n四、脚本作者开源仓库地址：\n\nhttps://github.com/a904055262/PVE-manager-status","slug":"pve/显示温度脚本","published":1,"updated":"2024-10-07T15:32:41.872Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqu0016o8tzh4xebgog","content":"<p>原文链接：<a href=\"https://wp.gxnas.com/13756.html\">给Proxmox VE（PVE）添加CPU和硬盘相关信息显示的教程 - GXNAS博客</a></p>\n<p>一、实现以下功能<br>1、在PVE首页增加cpu相关信息显示，包括：每个核心的频率、每个核心的温度、实时功耗、最大频率、最小频率等；<br>2、在PVE首页增加硬盘相关信息显示，包括：硬盘型号、容量、温度、健康指数、通电小时、通电次数、读写量、SMART是否正常；<br>3、理论上可以适配PVE任意版本；</p>\n<p>二、使用方法<br>1、复制下面的安装依赖命令脚本，到PVE的Shell状态下运行，等到最后的一行的显示为 “成功!” 就表示本条命令安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update ; apt install linux-cpupower &amp;&amp; modprobe msr &amp;&amp; echo msr &gt; /etc/modules-load.d/turbostat-msr.conf &amp;&amp; chmod +s /usr/sbin/turbostat &amp;&amp; echo 成功！</span><br></pre></td></tr></table></figure>\n\n<p>2、如果你的PVE之前使用过同类或者其他类似的修改PVE页面的脚本，先用下面命令恢复到官方默认设置（如果PVE没有做过修改的，本步骤不需要操作）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt install pve-manager proxmox-widget-toolkit --reinstall</span><br><span class=\"line\">rm -f /usr/share/perl5/PVE/API2/Nodes.pm*bak</span><br><span class=\"line\">rm -f /usr/share/pve-manager/js/pvemanagerlib.js*bak</span><br><span class=\"line\">rm -f /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js*bak</span><br></pre></td></tr></table></figure>\n\n<p>3、复制下面的一键安装命令脚本，到PVE的Shell状态下运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(curl -Lf -o /tmp/temp.sh https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh || curl -Lf -o /tmp/temp.sh https://ghproxy.com/https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh) &amp;&amp; chmod +x /tmp/temp.sh &amp;&amp; /tmp/temp.sh remod</span><br></pre></td></tr></table></figure>\n\n<p>三、效果展示</p>\n<p><a href=\"https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg\"><img src=\"https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg\"></a></p>\n<p>四、脚本作者开源仓库地址：</p>\n<p><a href=\"https://github.com/a904055262/PVE-manager-status\">https://github.com/a904055262/PVE-manager-status</a></p>\n","excerpt":"","more":"<p>原文链接：<a href=\"https://wp.gxnas.com/13756.html\">给Proxmox VE（PVE）添加CPU和硬盘相关信息显示的教程 - GXNAS博客</a></p>\n<p>一、实现以下功能<br>1、在PVE首页增加cpu相关信息显示，包括：每个核心的频率、每个核心的温度、实时功耗、最大频率、最小频率等；<br>2、在PVE首页增加硬盘相关信息显示，包括：硬盘型号、容量、温度、健康指数、通电小时、通电次数、读写量、SMART是否正常；<br>3、理论上可以适配PVE任意版本；</p>\n<p>二、使用方法<br>1、复制下面的安装依赖命令脚本，到PVE的Shell状态下运行，等到最后的一行的显示为 “成功!” 就表示本条命令安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update ; apt install linux-cpupower &amp;&amp; modprobe msr &amp;&amp; echo msr &gt; /etc/modules-load.d/turbostat-msr.conf &amp;&amp; chmod +s /usr/sbin/turbostat &amp;&amp; echo 成功！</span><br></pre></td></tr></table></figure>\n\n<p>2、如果你的PVE之前使用过同类或者其他类似的修改PVE页面的脚本，先用下面命令恢复到官方默认设置（如果PVE没有做过修改的，本步骤不需要操作）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt install pve-manager proxmox-widget-toolkit --reinstall</span><br><span class=\"line\">rm -f /usr/share/perl5/PVE/API2/Nodes.pm*bak</span><br><span class=\"line\">rm -f /usr/share/pve-manager/js/pvemanagerlib.js*bak</span><br><span class=\"line\">rm -f /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js*bak</span><br></pre></td></tr></table></figure>\n\n<p>3、复制下面的一键安装命令脚本，到PVE的Shell状态下运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(curl -Lf -o /tmp/temp.sh https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh || curl -Lf -o /tmp/temp.sh https://ghproxy.com/https://raw.githubusercontent.com/a904055262/PVE-manager-status/main/showtempcpufreq.sh) &amp;&amp; chmod +x /tmp/temp.sh &amp;&amp; /tmp/temp.sh remod</span><br></pre></td></tr></table></figure>\n\n<p>三、效果展示</p>\n<p><a href=\"https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg\"><img src=\"https://wp.gxnas.com/wp-content/uploads/2023/09/1695348690-status.jpg\"></a></p>\n<p>四、脚本作者开源仓库地址：</p>\n<p><a href=\"https://github.com/a904055262/PVE-manager-status\">https://github.com/a904055262/PVE-manager-status</a></p>\n"},{"title":"nginx","date":"2024-10-26T15:51:47.000Z","_content":"\n# 启动、停止和重新加载配置\n\n要启动 nginx，请运行可执行文件。 nginx 启动后，可以通过调用可执行文件来控制它 替换为参数。 使用以下语法：`-s`\n\n```\nnginx -s signal\n```\n\n其中 *signal* 可以是以下值之一：\n\n* `stop`— 快速关机\n* `quit`— 优雅关闭\n* `reload`— 重新加载配置文件\n* `reopen`— 重新打开日志文件\n\n\n# nginx 多账户认证\n\n\n在Nginx中设置多个密码，实际上是通过创建一个包含多个用户名和密码对的认证文件来实现的。以下是具体的步骤：\n\n1. **安装htpasswd工具**：这是一个用于创建和更新认证文件的工具。在大多数Linux发行版中，可以通过包管理器安装`httpd-tools`来获取`htpasswd`工具。例如，在基于Debian的系统上，可以使用以下命令安装：\n\n    ```\n    sudo apt-get install apache2-utils\n    ```\n\n   在基于RPM的系统上，如CentOS，可以使用：\n\n    ```\n    sudo yum install -y httpd-tools\n    ```\n2. **创建密码文件**：使用`htpasswd`命令创建一个新的密码文件，并添加用户。例如，创建一个名为`.htpasswd`的文件，并添加一个用户名为`username`的用户：\n\n    ```\n    htpasswd -c /etc/nginx/.htpasswd username\n    ```\n\n   这个命令会提示你输入密码，并将用户名和加密后的密码保存在`/etc/nginx/.htpasswd`文件中。你可以重复这个命令来添加更多的用户，但不要使用`-c`选项，因为`-c`选项会创建新文件，而不是向现有文件添加用户。\n3. **配置Nginx**：编辑Nginx的配置文件（通常是`/etc/nginx/nginx.conf`或者`/etc/nginx/sites-available/default`），并在需要保护的`location`块中添加以下配置：\n\n    ```\n    location / {\n        auth_basic \"Restricted\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n        ...\n    }\n    ```\n\n   这里`auth_basic`指令用于设置一个提示信息，告诉用户这是一个需要认证的区域。`auth_basic_user_file`指令指定了包含用户名和密码的文件路径。\n4. **重启Nginx**：完成配置后，需要重启Nginx以使更改生效：\n\n    ```\n    sudo nginx -s reload\n    ```\n\n   或者在某些系统中可能是：\n\n    ```\n    sudo systemctl reload nginx\n    ```\n\n通过以上步骤，你可以在Nginx中设置多个密码，每个用户都有自己的用户名和密码。当用户尝试访问受保护的资源时，他们将被提示输入用户名和密码。","source":"_posts/沙堆/nginx.md","raw":"---\ntitle: nginx\ndate: 2024-10-26 23:51:47\ncategories:\ntags:\n  - nginx\n---\n\n# 启动、停止和重新加载配置\n\n要启动 nginx，请运行可执行文件。 nginx 启动后，可以通过调用可执行文件来控制它 替换为参数。 使用以下语法：`-s`\n\n```\nnginx -s signal\n```\n\n其中 *signal* 可以是以下值之一：\n\n* `stop`— 快速关机\n* `quit`— 优雅关闭\n* `reload`— 重新加载配置文件\n* `reopen`— 重新打开日志文件\n\n\n# nginx 多账户认证\n\n\n在Nginx中设置多个密码，实际上是通过创建一个包含多个用户名和密码对的认证文件来实现的。以下是具体的步骤：\n\n1. **安装htpasswd工具**：这是一个用于创建和更新认证文件的工具。在大多数Linux发行版中，可以通过包管理器安装`httpd-tools`来获取`htpasswd`工具。例如，在基于Debian的系统上，可以使用以下命令安装：\n\n    ```\n    sudo apt-get install apache2-utils\n    ```\n\n   在基于RPM的系统上，如CentOS，可以使用：\n\n    ```\n    sudo yum install -y httpd-tools\n    ```\n2. **创建密码文件**：使用`htpasswd`命令创建一个新的密码文件，并添加用户。例如，创建一个名为`.htpasswd`的文件，并添加一个用户名为`username`的用户：\n\n    ```\n    htpasswd -c /etc/nginx/.htpasswd username\n    ```\n\n   这个命令会提示你输入密码，并将用户名和加密后的密码保存在`/etc/nginx/.htpasswd`文件中。你可以重复这个命令来添加更多的用户，但不要使用`-c`选项，因为`-c`选项会创建新文件，而不是向现有文件添加用户。\n3. **配置Nginx**：编辑Nginx的配置文件（通常是`/etc/nginx/nginx.conf`或者`/etc/nginx/sites-available/default`），并在需要保护的`location`块中添加以下配置：\n\n    ```\n    location / {\n        auth_basic \"Restricted\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n        ...\n    }\n    ```\n\n   这里`auth_basic`指令用于设置一个提示信息，告诉用户这是一个需要认证的区域。`auth_basic_user_file`指令指定了包含用户名和密码的文件路径。\n4. **重启Nginx**：完成配置后，需要重启Nginx以使更改生效：\n\n    ```\n    sudo nginx -s reload\n    ```\n\n   或者在某些系统中可能是：\n\n    ```\n    sudo systemctl reload nginx\n    ```\n\n通过以上步骤，你可以在Nginx中设置多个密码，每个用户都有自己的用户名和密码。当用户尝试访问受保护的资源时，他们将被提示输入用户名和密码。","slug":"沙堆/nginx","published":1,"updated":"2025-07-26T17:18:29.095Z","_id":"cmbz8wgqv0019o8tz6w54d832","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"启动、停止和重新加载配置\"><a href=\"#启动、停止和重新加载配置\" class=\"headerlink\" title=\"启动、停止和重新加载配置\"></a>启动、停止和重新加载配置</h1><p>要启动 nginx，请运行可执行文件。 nginx 启动后，可以通过调用可执行文件来控制它 替换为参数。 使用以下语法：<code>-s</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n\n<p>其中 <em>signal</em> 可以是以下值之一：</p>\n<ul>\n<li><code>stop</code>— 快速关机</li>\n<li><code>quit</code>— 优雅关闭</li>\n<li><code>reload</code>— 重新加载配置文件</li>\n<li><code>reopen</code>— 重新打开日志文件</li>\n</ul>\n<h1 id=\"nginx-多账户认证\"><a href=\"#nginx-多账户认证\" class=\"headerlink\" title=\"nginx 多账户认证\"></a>nginx 多账户认证</h1><p>在Nginx中设置多个密码，实际上是通过创建一个包含多个用户名和密码对的认证文件来实现的。以下是具体的步骤：</p>\n<ol>\n<li><p><strong>安装htpasswd工具</strong>：这是一个用于创建和更新认证文件的工具。在大多数Linux发行版中，可以通过包管理器安装<code>httpd-tools</code>来获取<code>htpasswd</code>工具。例如，在基于Debian的系统上，可以使用以下命令安装：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2-utils</span><br></pre></td></tr></table></figure>\n\n<p>在基于RPM的系统上，如CentOS，可以使用：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y httpd-tools</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>创建密码文件</strong>：使用<code>htpasswd</code>命令创建一个新的密码文件，并添加用户。例如，创建一个名为<code>.htpasswd</code>的文件，并添加一个用户名为<code>username</code>的用户：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会提示你输入密码，并将用户名和加密后的密码保存在<code>/etc/nginx/.htpasswd</code>文件中。你可以重复这个命令来添加更多的用户，但不要使用<code>-c</code>选项，因为<code>-c</code>选项会创建新文件，而不是向现有文件添加用户。</p>\n</li>\n<li><p><strong>配置Nginx</strong>：编辑Nginx的配置文件（通常是<code>/etc/nginx/nginx.conf</code>或者<code>/etc/nginx/sites-available/default</code>），并在需要保护的<code>location</code>块中添加以下配置：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    auth_basic &quot;Restricted&quot;;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>auth_basic</code>指令用于设置一个提示信息，告诉用户这是一个需要认证的区域。<code>auth_basic_user_file</code>指令指定了包含用户名和密码的文件路径。</p>\n</li>\n<li><p><strong>重启Nginx</strong>：完成配置后，需要重启Nginx以使更改生效：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>或者在某些系统中可能是：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上步骤，你可以在Nginx中设置多个密码，每个用户都有自己的用户名和密码。当用户尝试访问受保护的资源时，他们将被提示输入用户名和密码。</p>\n","excerpt":"","more":"<h1 id=\"启动、停止和重新加载配置\"><a href=\"#启动、停止和重新加载配置\" class=\"headerlink\" title=\"启动、停止和重新加载配置\"></a>启动、停止和重新加载配置</h1><p>要启动 nginx，请运行可执行文件。 nginx 启动后，可以通过调用可执行文件来控制它 替换为参数。 使用以下语法：<code>-s</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n\n<p>其中 <em>signal</em> 可以是以下值之一：</p>\n<ul>\n<li><code>stop</code>— 快速关机</li>\n<li><code>quit</code>— 优雅关闭</li>\n<li><code>reload</code>— 重新加载配置文件</li>\n<li><code>reopen</code>— 重新打开日志文件</li>\n</ul>\n<h1 id=\"nginx-多账户认证\"><a href=\"#nginx-多账户认证\" class=\"headerlink\" title=\"nginx 多账户认证\"></a>nginx 多账户认证</h1><p>在Nginx中设置多个密码，实际上是通过创建一个包含多个用户名和密码对的认证文件来实现的。以下是具体的步骤：</p>\n<ol>\n<li><p><strong>安装htpasswd工具</strong>：这是一个用于创建和更新认证文件的工具。在大多数Linux发行版中，可以通过包管理器安装<code>httpd-tools</code>来获取<code>htpasswd</code>工具。例如，在基于Debian的系统上，可以使用以下命令安装：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2-utils</span><br></pre></td></tr></table></figure>\n\n<p>在基于RPM的系统上，如CentOS，可以使用：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y httpd-tools</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>创建密码文件</strong>：使用<code>htpasswd</code>命令创建一个新的密码文件，并添加用户。例如，创建一个名为<code>.htpasswd</code>的文件，并添加一个用户名为<code>username</code>的用户：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会提示你输入密码，并将用户名和加密后的密码保存在<code>/etc/nginx/.htpasswd</code>文件中。你可以重复这个命令来添加更多的用户，但不要使用<code>-c</code>选项，因为<code>-c</code>选项会创建新文件，而不是向现有文件添加用户。</p>\n</li>\n<li><p><strong>配置Nginx</strong>：编辑Nginx的配置文件（通常是<code>/etc/nginx/nginx.conf</code>或者<code>/etc/nginx/sites-available/default</code>），并在需要保护的<code>location</code>块中添加以下配置：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    auth_basic &quot;Restricted&quot;;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>auth_basic</code>指令用于设置一个提示信息，告诉用户这是一个需要认证的区域。<code>auth_basic_user_file</code>指令指定了包含用户名和密码的文件路径。</p>\n</li>\n<li><p><strong>重启Nginx</strong>：完成配置后，需要重启Nginx以使更改生效：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>或者在某些系统中可能是：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>通过以上步骤，你可以在Nginx中设置多个密码，每个用户都有自己的用户名和密码。当用户尝试访问受保护的资源时，他们将被提示输入用户名和密码。</p>\n"},{"title":"家庭监控","date":"2024-09-12T15:44:38.000Z","_content":"\n对于需要更稳定、更安全、更易于配置的解决方案的情况，可以考虑使用其他的视频监控系统，如：  \n \nBlue Iris（Windows平台）  \nZoneminder（开源，支持Linux、Windows）  \n商业监控解决方案，如Axis、Dahua、Hikvision等提供的管理系统。  \n\n通过 ffmpeg 发布网络摄像头\n```bash\n\nffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -preset ultrafast -f rtsp rtsp://localhost:8554/stream\n\n```","source":"_posts/沙堆/家庭监控.md","raw":"---\ntitle: 家庭监控\ndate: 2024-09-12 23:44:38\ncategories:\n  - 沙堆\ntags:\n  - 监控\n---\n\n对于需要更稳定、更安全、更易于配置的解决方案的情况，可以考虑使用其他的视频监控系统，如：  \n \nBlue Iris（Windows平台）  \nZoneminder（开源，支持Linux、Windows）  \n商业监控解决方案，如Axis、Dahua、Hikvision等提供的管理系统。  \n\n通过 ffmpeg 发布网络摄像头\n```bash\n\nffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -preset ultrafast -f rtsp rtsp://localhost:8554/stream\n\n```","slug":"沙堆/家庭监控","published":1,"updated":"2024-09-12T17:08:18.492Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqv001co8tz4ilhepfx","content":"<p>对于需要更稳定、更安全、更易于配置的解决方案的情况，可以考虑使用其他的视频监控系统，如：  </p>\n<p>Blue Iris（Windows平台）<br>Zoneminder（开源，支持Linux、Windows）<br>商业监控解决方案，如Axis、Dahua、Hikvision等提供的管理系统。  </p>\n<p>通过 ffmpeg 发布网络摄像头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -preset ultrafast -f rtsp rtsp://localhost:8554/stream</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>对于需要更稳定、更安全、更易于配置的解决方案的情况，可以考虑使用其他的视频监控系统，如：  </p>\n<p>Blue Iris（Windows平台）<br>Zoneminder（开源，支持Linux、Windows）<br>商业监控解决方案，如Axis、Dahua、Hikvision等提供的管理系统。  </p>\n<p>通过 ffmpeg 发布网络摄像头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -preset ultrafast -f rtsp rtsp://localhost:8554/stream</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"破解","date":"2024-09-28T09:30:33.000Z","_content":"\nwin11秘钥  \n\n下面是密钥支持的版本：8BV46-NY2H3-X8QK6-XK6DD-49CKM\n\nWindows 11 批量授权专业版 (Volume MAK)\nWindows 11 批量授权企业版 (Volume MAK)\nWindows 11 批量授权教育版 (Volume MAK)\nWindows 10 批量授权专业版 (Volume MAK)\nWindows 10 批量授权企业版 (Volume MAK)\nWindows 10 批量授权教育版 (Volume MAK)","source":"_posts/沙堆/破解.md","raw":"---\ntitle: 破解\ndate: 2024-09-28 17:30:33\ncategories:\ntags:\n---\n\nwin11秘钥  \n\n下面是密钥支持的版本：8BV46-NY2H3-X8QK6-XK6DD-49CKM\n\nWindows 11 批量授权专业版 (Volume MAK)\nWindows 11 批量授权企业版 (Volume MAK)\nWindows 11 批量授权教育版 (Volume MAK)\nWindows 10 批量授权专业版 (Volume MAK)\nWindows 10 批量授权企业版 (Volume MAK)\nWindows 10 批量授权教育版 (Volume MAK)","slug":"沙堆/破解","published":1,"updated":"2024-10-10T15:09:01.295Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqx001io8tzd8hhd18w","content":"<p>win11秘钥  </p>\n<p>下面是密钥支持的版本：8BV46-NY2H3-X8QK6-XK6DD-49CKM</p>\n<p>Windows 11 批量授权专业版 (Volume MAK)<br>Windows 11 批量授权企业版 (Volume MAK)<br>Windows 11 批量授权教育版 (Volume MAK)<br>Windows 10 批量授权专业版 (Volume MAK)<br>Windows 10 批量授权企业版 (Volume MAK)<br>Windows 10 批量授权教育版 (Volume MAK)</p>\n","excerpt":"","more":"<p>win11秘钥  </p>\n<p>下面是密钥支持的版本：8BV46-NY2H3-X8QK6-XK6DD-49CKM</p>\n<p>Windows 11 批量授权专业版 (Volume MAK)<br>Windows 11 批量授权企业版 (Volume MAK)<br>Windows 11 批量授权教育版 (Volume MAK)<br>Windows 10 批量授权专业版 (Volume MAK)<br>Windows 10 批量授权企业版 (Volume MAK)<br>Windows 10 批量授权教育版 (Volume MAK)</p>\n"},{"title":"网络基础","date":"2024-09-27T17:05:43.000Z","_content":"\n在虚拟平台、软路由中默认网络接入通常不是硬件设备，而是虚拟网桥，因为平台和软路由需要将本机网络分享给其复杂上的虚拟机和容器，使用网桥会更灵活  \n\n# ipv6  \n\n简述：  \n目前多数设备均支持ipv6，并且正常情况ipv6响应速度和优先级高于ipv4\n\n设置要点：  \n1. DHCP  \n   ipv6 本地地址`fe::`由主机根据 Mac 自动生成，dhcp 服务器由需要将ip前缀通告给设备，设备使用根据前缀生成响应的公网地址。ipv6 DHCP 服务分为两部分\n   1. RA 通告，通告网关、DNS 服务器、前缀\n   2. DHCP 地址分配，地址分配会给主机相应的标识或地址，主机根据标识和mac地址**自动生成ipv6地址**或使用分配地址\n2. DNS  \n   DNS 服务器不是必须为 ipv6 地址，ipv4 服务器同样可以返回ipv6 地址，但是 window nslookup 有事会仅显示 ipv4 结果\n3. 代理  \n   clash ipv6 代理不太成熟，DNS 服务也偶尔有 bug，window 对 ipv6 代理的适配好像也有局限，一定要使用 ipv6 代理建议使用 pac\n\n**注意事项：**  \n\n1. windows 、 linux 、 Android 平台 ping 、nslookup 存在差异  \n   windows 直接 `ping`，不区分版本， linux 部分区分 `ping`、`ping6`  \n   `nslookup`windows 偶尔只返回 ipv4 结果，需要使用 ipv6 dns 才能得到 ipv6 地址， linux 无论 dns 服务器 ipv 版本会全部返回  ","source":"_posts/沙堆/网络基础.md","raw":"---\ntitle: 网络基础\ndate: 2024-09-28 01:05:43\ncategories:\ntags:\n  - 网络\n  - 网桥\n  - 虚拟平台\n  - 软路由\n---\n\n在虚拟平台、软路由中默认网络接入通常不是硬件设备，而是虚拟网桥，因为平台和软路由需要将本机网络分享给其复杂上的虚拟机和容器，使用网桥会更灵活  \n\n# ipv6  \n\n简述：  \n目前多数设备均支持ipv6，并且正常情况ipv6响应速度和优先级高于ipv4\n\n设置要点：  \n1. DHCP  \n   ipv6 本地地址`fe::`由主机根据 Mac 自动生成，dhcp 服务器由需要将ip前缀通告给设备，设备使用根据前缀生成响应的公网地址。ipv6 DHCP 服务分为两部分\n   1. RA 通告，通告网关、DNS 服务器、前缀\n   2. DHCP 地址分配，地址分配会给主机相应的标识或地址，主机根据标识和mac地址**自动生成ipv6地址**或使用分配地址\n2. DNS  \n   DNS 服务器不是必须为 ipv6 地址，ipv4 服务器同样可以返回ipv6 地址，但是 window nslookup 有事会仅显示 ipv4 结果\n3. 代理  \n   clash ipv6 代理不太成熟，DNS 服务也偶尔有 bug，window 对 ipv6 代理的适配好像也有局限，一定要使用 ipv6 代理建议使用 pac\n\n**注意事项：**  \n\n1. windows 、 linux 、 Android 平台 ping 、nslookup 存在差异  \n   windows 直接 `ping`，不区分版本， linux 部分区分 `ping`、`ping6`  \n   `nslookup`windows 偶尔只返回 ipv4 结果，需要使用 ipv6 dns 才能得到 ipv6 地址， linux 无论 dns 服务器 ipv 版本会全部返回  ","slug":"沙堆/网络基础","published":1,"updated":"2025-06-16T14:08:15.839Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqy001ko8tz3klv6n56","content":"<p>在虚拟平台、软路由中默认网络接入通常不是硬件设备，而是虚拟网桥，因为平台和软路由需要将本机网络分享给其复杂上的虚拟机和容器，使用网桥会更灵活  </p>\n<h1 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h1><p>简述：<br>目前多数设备均支持ipv6，并且正常情况ipv6响应速度和优先级高于ipv4</p>\n<p>设置要点：  </p>\n<ol>\n<li>DHCP<br>ipv6 本地地址<code>fe::</code>由主机根据 Mac 自动生成，dhcp 服务器由需要将ip前缀通告给设备，设备使用根据前缀生成响应的公网地址。ipv6 DHCP 服务分为两部分<ol>\n<li>RA 通告，通告网关、DNS 服务器、前缀</li>\n<li>DHCP 地址分配，地址分配会给主机相应的标识或地址，主机根据标识和mac地址<strong>自动生成ipv6地址</strong>或使用分配地址</li>\n</ol>\n</li>\n<li>DNS<br>DNS 服务器不是必须为 ipv6 地址，ipv4 服务器同样可以返回ipv6 地址，但是 window nslookup 有事会仅显示 ipv4 结果</li>\n<li>代理<br>clash ipv6 代理不太成熟，DNS 服务也偶尔有 bug，window 对 ipv6 代理的适配好像也有局限，一定要使用 ipv6 代理建议使用 pac</li>\n</ol>\n<p><strong>注意事项：</strong>  </p>\n<ol>\n<li>windows 、 linux 、 Android 平台 ping 、nslookup 存在差异<br>windows 直接 <code>ping</code>，不区分版本， linux 部分区分 <code>ping</code>、<code>ping6</code><br><code>nslookup</code>windows 偶尔只返回 ipv4 结果，需要使用 ipv6 dns 才能得到 ipv6 地址， linux 无论 dns 服务器 ipv 版本会全部返回</li>\n</ol>\n","excerpt":"","more":"<p>在虚拟平台、软路由中默认网络接入通常不是硬件设备，而是虚拟网桥，因为平台和软路由需要将本机网络分享给其复杂上的虚拟机和容器，使用网桥会更灵活  </p>\n<h1 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h1><p>简述：<br>目前多数设备均支持ipv6，并且正常情况ipv6响应速度和优先级高于ipv4</p>\n<p>设置要点：  </p>\n<ol>\n<li>DHCP<br>ipv6 本地地址<code>fe::</code>由主机根据 Mac 自动生成，dhcp 服务器由需要将ip前缀通告给设备，设备使用根据前缀生成响应的公网地址。ipv6 DHCP 服务分为两部分<ol>\n<li>RA 通告，通告网关、DNS 服务器、前缀</li>\n<li>DHCP 地址分配，地址分配会给主机相应的标识或地址，主机根据标识和mac地址<strong>自动生成ipv6地址</strong>或使用分配地址</li>\n</ol>\n</li>\n<li>DNS<br>DNS 服务器不是必须为 ipv6 地址，ipv4 服务器同样可以返回ipv6 地址，但是 window nslookup 有事会仅显示 ipv4 结果</li>\n<li>代理<br>clash ipv6 代理不太成熟，DNS 服务也偶尔有 bug，window 对 ipv6 代理的适配好像也有局限，一定要使用 ipv6 代理建议使用 pac</li>\n</ol>\n<p><strong>注意事项：</strong>  </p>\n<ol>\n<li>windows 、 linux 、 Android 平台 ping 、nslookup 存在差异<br>windows 直接 <code>ping</code>，不区分版本， linux 部分区分 <code>ping</code>、<code>ping6</code><br><code>nslookup</code>windows 偶尔只返回 ipv4 结果，需要使用 ipv6 dns 才能得到 ipv6 地址， linux 无论 dns 服务器 ipv 版本会全部返回</li>\n</ol>\n"},{"title":"探索队列","date":"2024-08-03T08:59:28.000Z","_content":"\n# 教程\nhttps://blog.csdn.net/wentyoon/article/details/9765831\nhttps://blog.csdn.net/qf0129/article/details/131398166\nhttps://wiki.wbuntu.com/linux/pve/4-lxc-container/\n\n# 搞机\nhttps://www.runyf.cn/archives/380/\n\n# java\n\n### Quarkus  \n\n基于Java虚拟机（JVM）和原生编译技术的全堆栈Kubernetes原生Java框架，旨在解决容器化Java应用程序在云原生环境中的挑战\n\n### MicroProfile  \n\n如果说 Spring Cloud 是以 SpingBoot 为核心和基础的微服务架构，那么 MicroProfile 则是将传统 JavaEE 轻量化以适应微服务时代的一个体系\n\n### Sonarlint\n\n代码检查插件\n\n### 虚拟化 直通\nSR-IOV 类似直通的硬件直通多虚拟机\nhttps://www.151365.io/post/49\n\n\n### 回程工具\n\n[firefox - LinuxServer.io](https://docs.linuxserver.io/images/docker-firefox/#native-apps)","source":"_posts/沙堆/探索队列.md","raw":"---\ntitle: 探索队列\ndate: 2024-08-03 16:59:28\ncategories:\ntags:\n---\n\n# 教程\nhttps://blog.csdn.net/wentyoon/article/details/9765831\nhttps://blog.csdn.net/qf0129/article/details/131398166\nhttps://wiki.wbuntu.com/linux/pve/4-lxc-container/\n\n# 搞机\nhttps://www.runyf.cn/archives/380/\n\n# java\n\n### Quarkus  \n\n基于Java虚拟机（JVM）和原生编译技术的全堆栈Kubernetes原生Java框架，旨在解决容器化Java应用程序在云原生环境中的挑战\n\n### MicroProfile  \n\n如果说 Spring Cloud 是以 SpingBoot 为核心和基础的微服务架构，那么 MicroProfile 则是将传统 JavaEE 轻量化以适应微服务时代的一个体系\n\n### Sonarlint\n\n代码检查插件\n\n### 虚拟化 直通\nSR-IOV 类似直通的硬件直通多虚拟机\nhttps://www.151365.io/post/49\n\n\n### 回程工具\n\n[firefox - LinuxServer.io](https://docs.linuxserver.io/images/docker-firefox/#native-apps)","slug":"沙堆/探索队列","published":1,"updated":"2024-12-04T15:03:39.122Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgqy001mo8tzaue4bcso","content":"<h1 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h1><p><a href=\"https://blog.csdn.net/wentyoon/article/details/9765831\">https://blog.csdn.net/wentyoon/article/details/9765831</a><br><a href=\"https://blog.csdn.net/qf0129/article/details/131398166\">https://blog.csdn.net/qf0129/article/details/131398166</a><br><a href=\"https://wiki.wbuntu.com/linux/pve/4-lxc-container/\">https://wiki.wbuntu.com/linux/pve/4-lxc-container/</a></p>\n<h1 id=\"搞机\"><a href=\"#搞机\" class=\"headerlink\" title=\"搞机\"></a>搞机</h1><p><a href=\"https://www.runyf.cn/archives/380/\">https://www.runyf.cn/archives/380/</a></p>\n<h1 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h1><h3 id=\"Quarkus\"><a href=\"#Quarkus\" class=\"headerlink\" title=\"Quarkus\"></a>Quarkus</h3><p>基于Java虚拟机（JVM）和原生编译技术的全堆栈Kubernetes原生Java框架，旨在解决容器化Java应用程序在云原生环境中的挑战</p>\n<h3 id=\"MicroProfile\"><a href=\"#MicroProfile\" class=\"headerlink\" title=\"MicroProfile\"></a>MicroProfile</h3><p>如果说 Spring Cloud 是以 SpingBoot 为核心和基础的微服务架构，那么 MicroProfile 则是将传统 JavaEE 轻量化以适应微服务时代的一个体系</p>\n<h3 id=\"Sonarlint\"><a href=\"#Sonarlint\" class=\"headerlink\" title=\"Sonarlint\"></a>Sonarlint</h3><p>代码检查插件</p>\n<h3 id=\"虚拟化-直通\"><a href=\"#虚拟化-直通\" class=\"headerlink\" title=\"虚拟化 直通\"></a>虚拟化 直通</h3><p>SR-IOV 类似直通的硬件直通多虚拟机<br><a href=\"https://www.151365.io/post/49\">https://www.151365.io/post/49</a></p>\n<h3 id=\"回程工具\"><a href=\"#回程工具\" class=\"headerlink\" title=\"回程工具\"></a>回程工具</h3><p><a href=\"https://docs.linuxserver.io/images/docker-firefox/#native-apps\">firefox - LinuxServer.io</a></p>\n","excerpt":"","more":"<h1 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h1><p><a href=\"https://blog.csdn.net/wentyoon/article/details/9765831\">https://blog.csdn.net/wentyoon/article/details/9765831</a><br><a href=\"https://blog.csdn.net/qf0129/article/details/131398166\">https://blog.csdn.net/qf0129/article/details/131398166</a><br><a href=\"https://wiki.wbuntu.com/linux/pve/4-lxc-container/\">https://wiki.wbuntu.com/linux/pve/4-lxc-container/</a></p>\n<h1 id=\"搞机\"><a href=\"#搞机\" class=\"headerlink\" title=\"搞机\"></a>搞机</h1><p><a href=\"https://www.runyf.cn/archives/380/\">https://www.runyf.cn/archives/380/</a></p>\n<h1 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h1><h3 id=\"Quarkus\"><a href=\"#Quarkus\" class=\"headerlink\" title=\"Quarkus\"></a>Quarkus</h3><p>基于Java虚拟机（JVM）和原生编译技术的全堆栈Kubernetes原生Java框架，旨在解决容器化Java应用程序在云原生环境中的挑战</p>\n<h3 id=\"MicroProfile\"><a href=\"#MicroProfile\" class=\"headerlink\" title=\"MicroProfile\"></a>MicroProfile</h3><p>如果说 Spring Cloud 是以 SpingBoot 为核心和基础的微服务架构，那么 MicroProfile 则是将传统 JavaEE 轻量化以适应微服务时代的一个体系</p>\n<h3 id=\"Sonarlint\"><a href=\"#Sonarlint\" class=\"headerlink\" title=\"Sonarlint\"></a>Sonarlint</h3><p>代码检查插件</p>\n<h3 id=\"虚拟化-直通\"><a href=\"#虚拟化-直通\" class=\"headerlink\" title=\"虚拟化 直通\"></a>虚拟化 直通</h3><p>SR-IOV 类似直通的硬件直通多虚拟机<br><a href=\"https://www.151365.io/post/49\">https://www.151365.io/post/49</a></p>\n<h3 id=\"回程工具\"><a href=\"#回程工具\" class=\"headerlink\" title=\"回程工具\"></a>回程工具</h3><p><a href=\"https://docs.linuxserver.io/images/docker-firefox/#native-apps\">firefox - LinuxServer.io</a></p>\n"},{"title":"自动代理","date":"2024-10-10T18:29:30.000Z","_content":"\n# PAC\n\n代理自动配置（Proxy Auto-Config，简称 PAC）是一种用于自动选择网络请求的最佳代理服务器设置的方法。PAC 文件通常是一个 JavaScript 文件，其中包含一系列规则，用来决定对于特定的 URL 请求应该使用哪个代理服务器，或者是直接连接而不通过任何代理。\n\nPAC 文件由浏览器或其他网络客户端进行解析，并根据当前请求的 URL 和其他条件（如网络状况等）来决定是否使用代理以及使用哪个代理服务器。这使得管理员能够灵活地管理大型网络环境中的代理设置，特别是那些具有复杂网络结构的企业或机构。\n\n### PAC 文件的基本结构\n\n一个典型的 PAC 文件会包含一些 JavaScript 函数，最常见的是 `FindProxyForURL(url, host)` 函数。这个函数接收两个参数：`url` 是请求的完整 URL，而 `host` 是请求的目标主机名。该函数返回一个字符串，指示浏览器如何处理这个请求。\n\n例如：\n```javascript\nfunction FindProxyForURL(url, host) {\n    if (isPlainHostName(host) || isLocalHost(host) || dnsDomainIs(host, \"example.com\")) {\n        return \"DIRECT\";\n    }\n    if (dnsDomainIs(host, \"google.com\")) {\n        return \"PROXY 192.0.2.1:8080\";\n    }\n    return \"PROXY auto.example.com:8888\";\n}\n```\n\n在这个例子中：\n- 如果目标主机名是本地主机、没有域名部分（如 IP 地址），或者属于 `example.com` 域，则直接连接（`DIRECT`）。\n- 如果目标主机名属于 `google.com` 域，则通过指定的代理服务器 `192.0.2.1:8080` 连接。\n- 对于其他所有情况，使用 `auto.example.com:8888` 作为代理服务器。\n\n### PAC 文件的应用场景\n\n- 在企业网络环境中，可以通过 PAC 文件来管理内部资源和外部互联网的不同代理设置。\n- 在大型组织中，可以根据地理位置、IP 地址等因素动态选择最优的代理服务器，以提高访问速度和安全性。\n- 在某些情况下，可以用来绕过不必要的代理检查，提高网络性能。\n\n总的来说，PAC 文件提供了一种灵活且强大的机制来管理和优化网络流量的路由。\n\n\n# WPAD\n\nWPAD（Web Proxy Auto-Discovery Protocol，网页代理自动发现协议）是一种允许网络浏览器和其他用户代理自动发现并使用适当的代理服务器设置的技术。WPAD 主要是为了简化企业网络中代理服务器的配置和管理。\n\n### WPAD 工作原理\n\n1. **自动发现**：当用户尝试访问某个网站时，如果用户的计算机配置了 WPAD 支持，浏览器或其他网络客户端会首先查找一个名为 `.wpad` 的文件。这个文件通常是一个 PAC 文件，包含了关于如何选择代理服务器的规则。\n\n2. **DNS 查询**：客户端会尝试通过 DNS 查询来找到 WPAD 文件的位置。它会查询以下几个域名：\n    - `wpad.mydomain.com`\n    - `wpad-domain.mydomain.com`\n    - `wpad.mylocaldomain`\n    - `wpad-domain.mylocaldomain`\n\n   其中 `mydomain.com` 和 `mylocaldomain` 分别是用户的 DNS 后缀和 DHCP 分配的本地域（如果有的话）。\n\n3. **DHCP 或 HTTP 发现**：如果没有通过 DNS 查找成功找到 WPAD 文件，客户端可能会尝试从 DHCP 服务器获取 WPAD 文件的位置，或者直接从默认的 HTTP 地址 `http://wpad/wpad.dat` 下载。\n\n4. **下载并解析 PAC 文件**：一旦找到 `.wpad` 文件的位置，客户端会下载该文件并解析其中的 JavaScript 规则，以确定对于特定的 URL 应该使用哪个代理服务器。\n\n### 配置 WPAD\n\n为了使 WPAD 正常工作，需要在网络中正确配置以下组件：\n\n- **DHCP 服务器**：如果使用 DHCP 方式分发 WPAD 文件位置，则需要在 DHCP 服务器上配置 `Wpad-Url` 选项。\n- **DNS 服务器**：确保 DNS 服务器正确配置了上述提到的查询记录。\n- **PAC 文件服务器**：托管 `.wpad` 文件的 Web 服务器必须可用，并且能够响应来自客户端的请求。\n- **客户端配置**：确保客户端计算机已经正确配置，以便支持 WPAD 功能。\n\n### 使用场景\n\n- **企业网络**：在大型企业网络中，WPAD 可以简化代理服务器的管理和配置，特别是在有多台代理服务器或复杂的网络拓扑的情况下。\n- **家庭网络**：虽然主要应用于企业环境，但在某些家庭网络中也可以使用 WPAD 来简化代理设置。\n\n通过 WPAD，网络管理员可以集中管理代理设置，并根据网络状况的变化快速调整代理规则，而无需手动配置每台客户端机器。","source":"_posts/沙堆/自动代理.md","raw":"---\ntitle: 自动代理\ndate: 2024-10-11 02:29:30\ncategories:\ntags:\n  - 代理\n  - WPAD\n  - PAC\n---\n\n# PAC\n\n代理自动配置（Proxy Auto-Config，简称 PAC）是一种用于自动选择网络请求的最佳代理服务器设置的方法。PAC 文件通常是一个 JavaScript 文件，其中包含一系列规则，用来决定对于特定的 URL 请求应该使用哪个代理服务器，或者是直接连接而不通过任何代理。\n\nPAC 文件由浏览器或其他网络客户端进行解析，并根据当前请求的 URL 和其他条件（如网络状况等）来决定是否使用代理以及使用哪个代理服务器。这使得管理员能够灵活地管理大型网络环境中的代理设置，特别是那些具有复杂网络结构的企业或机构。\n\n### PAC 文件的基本结构\n\n一个典型的 PAC 文件会包含一些 JavaScript 函数，最常见的是 `FindProxyForURL(url, host)` 函数。这个函数接收两个参数：`url` 是请求的完整 URL，而 `host` 是请求的目标主机名。该函数返回一个字符串，指示浏览器如何处理这个请求。\n\n例如：\n```javascript\nfunction FindProxyForURL(url, host) {\n    if (isPlainHostName(host) || isLocalHost(host) || dnsDomainIs(host, \"example.com\")) {\n        return \"DIRECT\";\n    }\n    if (dnsDomainIs(host, \"google.com\")) {\n        return \"PROXY 192.0.2.1:8080\";\n    }\n    return \"PROXY auto.example.com:8888\";\n}\n```\n\n在这个例子中：\n- 如果目标主机名是本地主机、没有域名部分（如 IP 地址），或者属于 `example.com` 域，则直接连接（`DIRECT`）。\n- 如果目标主机名属于 `google.com` 域，则通过指定的代理服务器 `192.0.2.1:8080` 连接。\n- 对于其他所有情况，使用 `auto.example.com:8888` 作为代理服务器。\n\n### PAC 文件的应用场景\n\n- 在企业网络环境中，可以通过 PAC 文件来管理内部资源和外部互联网的不同代理设置。\n- 在大型组织中，可以根据地理位置、IP 地址等因素动态选择最优的代理服务器，以提高访问速度和安全性。\n- 在某些情况下，可以用来绕过不必要的代理检查，提高网络性能。\n\n总的来说，PAC 文件提供了一种灵活且强大的机制来管理和优化网络流量的路由。\n\n\n# WPAD\n\nWPAD（Web Proxy Auto-Discovery Protocol，网页代理自动发现协议）是一种允许网络浏览器和其他用户代理自动发现并使用适当的代理服务器设置的技术。WPAD 主要是为了简化企业网络中代理服务器的配置和管理。\n\n### WPAD 工作原理\n\n1. **自动发现**：当用户尝试访问某个网站时，如果用户的计算机配置了 WPAD 支持，浏览器或其他网络客户端会首先查找一个名为 `.wpad` 的文件。这个文件通常是一个 PAC 文件，包含了关于如何选择代理服务器的规则。\n\n2. **DNS 查询**：客户端会尝试通过 DNS 查询来找到 WPAD 文件的位置。它会查询以下几个域名：\n    - `wpad.mydomain.com`\n    - `wpad-domain.mydomain.com`\n    - `wpad.mylocaldomain`\n    - `wpad-domain.mylocaldomain`\n\n   其中 `mydomain.com` 和 `mylocaldomain` 分别是用户的 DNS 后缀和 DHCP 分配的本地域（如果有的话）。\n\n3. **DHCP 或 HTTP 发现**：如果没有通过 DNS 查找成功找到 WPAD 文件，客户端可能会尝试从 DHCP 服务器获取 WPAD 文件的位置，或者直接从默认的 HTTP 地址 `http://wpad/wpad.dat` 下载。\n\n4. **下载并解析 PAC 文件**：一旦找到 `.wpad` 文件的位置，客户端会下载该文件并解析其中的 JavaScript 规则，以确定对于特定的 URL 应该使用哪个代理服务器。\n\n### 配置 WPAD\n\n为了使 WPAD 正常工作，需要在网络中正确配置以下组件：\n\n- **DHCP 服务器**：如果使用 DHCP 方式分发 WPAD 文件位置，则需要在 DHCP 服务器上配置 `Wpad-Url` 选项。\n- **DNS 服务器**：确保 DNS 服务器正确配置了上述提到的查询记录。\n- **PAC 文件服务器**：托管 `.wpad` 文件的 Web 服务器必须可用，并且能够响应来自客户端的请求。\n- **客户端配置**：确保客户端计算机已经正确配置，以便支持 WPAD 功能。\n\n### 使用场景\n\n- **企业网络**：在大型企业网络中，WPAD 可以简化代理服务器的管理和配置，特别是在有多台代理服务器或复杂的网络拓扑的情况下。\n- **家庭网络**：虽然主要应用于企业环境，但在某些家庭网络中也可以使用 WPAD 来简化代理设置。\n\n通过 WPAD，网络管理员可以集中管理代理设置，并根据网络状况的变化快速调整代理规则，而无需手动配置每台客户端机器。","slug":"沙堆/自动代理","published":1,"updated":"2024-10-10T18:35:03.519Z","comments":1,"layout":"post","photos":[],"_id":"cmbz8wgr5002ho8tzasjtfoh8","content":"<h1 id=\"PAC\"><a href=\"#PAC\" class=\"headerlink\" title=\"PAC\"></a>PAC</h1><p>代理自动配置（Proxy Auto-Config，简称 PAC）是一种用于自动选择网络请求的最佳代理服务器设置的方法。PAC 文件通常是一个 JavaScript 文件，其中包含一系列规则，用来决定对于特定的 URL 请求应该使用哪个代理服务器，或者是直接连接而不通过任何代理。</p>\n<p>PAC 文件由浏览器或其他网络客户端进行解析，并根据当前请求的 URL 和其他条件（如网络状况等）来决定是否使用代理以及使用哪个代理服务器。这使得管理员能够灵活地管理大型网络环境中的代理设置，特别是那些具有复杂网络结构的企业或机构。</p>\n<h3 id=\"PAC-文件的基本结构\"><a href=\"#PAC-文件的基本结构\" class=\"headerlink\" title=\"PAC 文件的基本结构\"></a>PAC 文件的基本结构</h3><p>一个典型的 PAC 文件会包含一些 JavaScript 函数，最常见的是 <code>FindProxyForURL(url, host)</code> 函数。这个函数接收两个参数：<code>url</code> 是请求的完整 URL，而 <code>host</code> 是请求的目标主机名。该函数返回一个字符串，指示浏览器如何处理这个请求。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FindProxyForURL</span>(<span class=\"params\">url, host</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainHostName</span>(host) || <span class=\"title function_\">isLocalHost</span>(host) || <span class=\"title function_\">dnsDomainIs</span>(host, <span class=\"string\">&quot;example.com&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;DIRECT&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">dnsDomainIs</span>(host, <span class=\"string\">&quot;google.com&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;PROXY 192.0.2.1:8080&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;PROXY auto.example.com:8888&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li>如果目标主机名是本地主机、没有域名部分（如 IP 地址），或者属于 <code>example.com</code> 域，则直接连接（<code>DIRECT</code>）。</li>\n<li>如果目标主机名属于 <code>google.com</code> 域，则通过指定的代理服务器 <code>192.0.2.1:8080</code> 连接。</li>\n<li>对于其他所有情况，使用 <code>auto.example.com:8888</code> 作为代理服务器。</li>\n</ul>\n<h3 id=\"PAC-文件的应用场景\"><a href=\"#PAC-文件的应用场景\" class=\"headerlink\" title=\"PAC 文件的应用场景\"></a>PAC 文件的应用场景</h3><ul>\n<li>在企业网络环境中，可以通过 PAC 文件来管理内部资源和外部互联网的不同代理设置。</li>\n<li>在大型组织中，可以根据地理位置、IP 地址等因素动态选择最优的代理服务器，以提高访问速度和安全性。</li>\n<li>在某些情况下，可以用来绕过不必要的代理检查，提高网络性能。</li>\n</ul>\n<p>总的来说，PAC 文件提供了一种灵活且强大的机制来管理和优化网络流量的路由。</p>\n<h1 id=\"WPAD\"><a href=\"#WPAD\" class=\"headerlink\" title=\"WPAD\"></a>WPAD</h1><p>WPAD（Web Proxy Auto-Discovery Protocol，网页代理自动发现协议）是一种允许网络浏览器和其他用户代理自动发现并使用适当的代理服务器设置的技术。WPAD 主要是为了简化企业网络中代理服务器的配置和管理。</p>\n<h3 id=\"WPAD-工作原理\"><a href=\"#WPAD-工作原理\" class=\"headerlink\" title=\"WPAD 工作原理\"></a>WPAD 工作原理</h3><ol>\n<li><p><strong>自动发现</strong>：当用户尝试访问某个网站时，如果用户的计算机配置了 WPAD 支持，浏览器或其他网络客户端会首先查找一个名为 <code>.wpad</code> 的文件。这个文件通常是一个 PAC 文件，包含了关于如何选择代理服务器的规则。</p>\n</li>\n<li><p><strong>DNS 查询</strong>：客户端会尝试通过 DNS 查询来找到 WPAD 文件的位置。它会查询以下几个域名：</p>\n<ul>\n<li><code>wpad.mydomain.com</code></li>\n<li><code>wpad-domain.mydomain.com</code></li>\n<li><code>wpad.mylocaldomain</code></li>\n<li><code>wpad-domain.mylocaldomain</code></li>\n</ul>\n<p>其中 <code>mydomain.com</code> 和 <code>mylocaldomain</code> 分别是用户的 DNS 后缀和 DHCP 分配的本地域（如果有的话）。</p>\n</li>\n<li><p><strong>DHCP 或 HTTP 发现</strong>：如果没有通过 DNS 查找成功找到 WPAD 文件，客户端可能会尝试从 DHCP 服务器获取 WPAD 文件的位置，或者直接从默认的 HTTP 地址 <code>http://wpad/wpad.dat</code> 下载。</p>\n</li>\n<li><p><strong>下载并解析 PAC 文件</strong>：一旦找到 <code>.wpad</code> 文件的位置，客户端会下载该文件并解析其中的 JavaScript 规则，以确定对于特定的 URL 应该使用哪个代理服务器。</p>\n</li>\n</ol>\n<h3 id=\"配置-WPAD\"><a href=\"#配置-WPAD\" class=\"headerlink\" title=\"配置 WPAD\"></a>配置 WPAD</h3><p>为了使 WPAD 正常工作，需要在网络中正确配置以下组件：</p>\n<ul>\n<li><strong>DHCP 服务器</strong>：如果使用 DHCP 方式分发 WPAD 文件位置，则需要在 DHCP 服务器上配置 <code>Wpad-Url</code> 选项。</li>\n<li><strong>DNS 服务器</strong>：确保 DNS 服务器正确配置了上述提到的查询记录。</li>\n<li><strong>PAC 文件服务器</strong>：托管 <code>.wpad</code> 文件的 Web 服务器必须可用，并且能够响应来自客户端的请求。</li>\n<li><strong>客户端配置</strong>：确保客户端计算机已经正确配置，以便支持 WPAD 功能。</li>\n</ul>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li><strong>企业网络</strong>：在大型企业网络中，WPAD 可以简化代理服务器的管理和配置，特别是在有多台代理服务器或复杂的网络拓扑的情况下。</li>\n<li><strong>家庭网络</strong>：虽然主要应用于企业环境，但在某些家庭网络中也可以使用 WPAD 来简化代理设置。</li>\n</ul>\n<p>通过 WPAD，网络管理员可以集中管理代理设置，并根据网络状况的变化快速调整代理规则，而无需手动配置每台客户端机器。</p>\n","excerpt":"","more":"<h1 id=\"PAC\"><a href=\"#PAC\" class=\"headerlink\" title=\"PAC\"></a>PAC</h1><p>代理自动配置（Proxy Auto-Config，简称 PAC）是一种用于自动选择网络请求的最佳代理服务器设置的方法。PAC 文件通常是一个 JavaScript 文件，其中包含一系列规则，用来决定对于特定的 URL 请求应该使用哪个代理服务器，或者是直接连接而不通过任何代理。</p>\n<p>PAC 文件由浏览器或其他网络客户端进行解析，并根据当前请求的 URL 和其他条件（如网络状况等）来决定是否使用代理以及使用哪个代理服务器。这使得管理员能够灵活地管理大型网络环境中的代理设置，特别是那些具有复杂网络结构的企业或机构。</p>\n<h3 id=\"PAC-文件的基本结构\"><a href=\"#PAC-文件的基本结构\" class=\"headerlink\" title=\"PAC 文件的基本结构\"></a>PAC 文件的基本结构</h3><p>一个典型的 PAC 文件会包含一些 JavaScript 函数，最常见的是 <code>FindProxyForURL(url, host)</code> 函数。这个函数接收两个参数：<code>url</code> 是请求的完整 URL，而 <code>host</code> 是请求的目标主机名。该函数返回一个字符串，指示浏览器如何处理这个请求。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FindProxyForURL</span>(<span class=\"params\">url, host</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainHostName</span>(host) || <span class=\"title function_\">isLocalHost</span>(host) || <span class=\"title function_\">dnsDomainIs</span>(host, <span class=\"string\">&quot;example.com&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;DIRECT&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">dnsDomainIs</span>(host, <span class=\"string\">&quot;google.com&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;PROXY 192.0.2.1:8080&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;PROXY auto.example.com:8888&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li>如果目标主机名是本地主机、没有域名部分（如 IP 地址），或者属于 <code>example.com</code> 域，则直接连接（<code>DIRECT</code>）。</li>\n<li>如果目标主机名属于 <code>google.com</code> 域，则通过指定的代理服务器 <code>192.0.2.1:8080</code> 连接。</li>\n<li>对于其他所有情况，使用 <code>auto.example.com:8888</code> 作为代理服务器。</li>\n</ul>\n<h3 id=\"PAC-文件的应用场景\"><a href=\"#PAC-文件的应用场景\" class=\"headerlink\" title=\"PAC 文件的应用场景\"></a>PAC 文件的应用场景</h3><ul>\n<li>在企业网络环境中，可以通过 PAC 文件来管理内部资源和外部互联网的不同代理设置。</li>\n<li>在大型组织中，可以根据地理位置、IP 地址等因素动态选择最优的代理服务器，以提高访问速度和安全性。</li>\n<li>在某些情况下，可以用来绕过不必要的代理检查，提高网络性能。</li>\n</ul>\n<p>总的来说，PAC 文件提供了一种灵活且强大的机制来管理和优化网络流量的路由。</p>\n<h1 id=\"WPAD\"><a href=\"#WPAD\" class=\"headerlink\" title=\"WPAD\"></a>WPAD</h1><p>WPAD（Web Proxy Auto-Discovery Protocol，网页代理自动发现协议）是一种允许网络浏览器和其他用户代理自动发现并使用适当的代理服务器设置的技术。WPAD 主要是为了简化企业网络中代理服务器的配置和管理。</p>\n<h3 id=\"WPAD-工作原理\"><a href=\"#WPAD-工作原理\" class=\"headerlink\" title=\"WPAD 工作原理\"></a>WPAD 工作原理</h3><ol>\n<li><p><strong>自动发现</strong>：当用户尝试访问某个网站时，如果用户的计算机配置了 WPAD 支持，浏览器或其他网络客户端会首先查找一个名为 <code>.wpad</code> 的文件。这个文件通常是一个 PAC 文件，包含了关于如何选择代理服务器的规则。</p>\n</li>\n<li><p><strong>DNS 查询</strong>：客户端会尝试通过 DNS 查询来找到 WPAD 文件的位置。它会查询以下几个域名：</p>\n<ul>\n<li><code>wpad.mydomain.com</code></li>\n<li><code>wpad-domain.mydomain.com</code></li>\n<li><code>wpad.mylocaldomain</code></li>\n<li><code>wpad-domain.mylocaldomain</code></li>\n</ul>\n<p>其中 <code>mydomain.com</code> 和 <code>mylocaldomain</code> 分别是用户的 DNS 后缀和 DHCP 分配的本地域（如果有的话）。</p>\n</li>\n<li><p><strong>DHCP 或 HTTP 发现</strong>：如果没有通过 DNS 查找成功找到 WPAD 文件，客户端可能会尝试从 DHCP 服务器获取 WPAD 文件的位置，或者直接从默认的 HTTP 地址 <code>http://wpad/wpad.dat</code> 下载。</p>\n</li>\n<li><p><strong>下载并解析 PAC 文件</strong>：一旦找到 <code>.wpad</code> 文件的位置，客户端会下载该文件并解析其中的 JavaScript 规则，以确定对于特定的 URL 应该使用哪个代理服务器。</p>\n</li>\n</ol>\n<h3 id=\"配置-WPAD\"><a href=\"#配置-WPAD\" class=\"headerlink\" title=\"配置 WPAD\"></a>配置 WPAD</h3><p>为了使 WPAD 正常工作，需要在网络中正确配置以下组件：</p>\n<ul>\n<li><strong>DHCP 服务器</strong>：如果使用 DHCP 方式分发 WPAD 文件位置，则需要在 DHCP 服务器上配置 <code>Wpad-Url</code> 选项。</li>\n<li><strong>DNS 服务器</strong>：确保 DNS 服务器正确配置了上述提到的查询记录。</li>\n<li><strong>PAC 文件服务器</strong>：托管 <code>.wpad</code> 文件的 Web 服务器必须可用，并且能够响应来自客户端的请求。</li>\n<li><strong>客户端配置</strong>：确保客户端计算机已经正确配置，以便支持 WPAD 功能。</li>\n</ul>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li><strong>企业网络</strong>：在大型企业网络中，WPAD 可以简化代理服务器的管理和配置，特别是在有多台代理服务器或复杂的网络拓扑的情况下。</li>\n<li><strong>家庭网络</strong>：虽然主要应用于企业环境，但在某些家庭网络中也可以使用 WPAD 来简化代理设置。</li>\n</ul>\n<p>通过 WPAD，网络管理员可以集中管理代理设置，并根据网络状况的变化快速调整代理规则，而无需手动配置每台客户端机器。</p>\n"},{"title":"权限管理","date":"2025-07-26T16:19:45.000Z","_content":"原文链接： https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg  \n\n\n![后台权限系统的设计以及主流的五种权限模型详解](./img/权限管理-后台权限系统的设计以及主流的五种权限模型详解.png)\n\n今天来聊聊权限系统的设计以及主流的五种权限模型。\n\n权限管控可以通俗地理解为权力限制，即不同的人由于拥有不同权力，他所看到的、能使用的可能不一样。对应到一个应用系统，其实就是一个用户可能拥有不同的数据权限（看到的）和操作权限（使用的）。\n\n主流的权限模型主要分为以下五种：\n\n* **ACL 模型**：访问控制列表\n* **DAC 模型**：自主访问控制\n* **MAC 模型**：强制访问控制\n* **ABAC 模型**：基于属性的访问控制\n* **RBAC 模型**：基于角色的权限访问控制\n\n# ACL 模型：访问控制列表\n\n**Access Control List**，ACL 是最早的、最基本的一种访问控制机制，是基于客体进行控制的模型，在其他模型中也有 ACL 的身影。为了解决相同权限的用户挨个配置的问题，后来也采用了用户组的方式。\n\n**原理**：每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为，非常简单。\n\n**例如**：当用户 A 要对一篇文章进行编辑时，ACL 会先检查一下文章编辑功能的控制列表中有没有用户 A，有就可以编辑，无则不能编辑。再例如：不同等级的会员在产品中可使用的功能范围不同。\n\n**缺点**：当主体的数量较多时，配置和维护工作就会成本大、易出错。\n\n# DAC 模型：自主访问控制\n\nDiscretionary Access Control，DAC 是 ACL 的一种拓展。\n\n**原理**：在 ACL 模型的基础上，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递。\n\n**例如**：常见于文件系统，LINUX，UNIX、WindowsNT 版本的操作系统都提供 DAC 的支持。\n\n**缺点**：对权限控制比较分散，例如无法简单地将一组文件设置统一的权限开放给指定的一群用户。主体的权限太大，无意间就可能泄露信息。\n\n# MAC 模型：强制访问控制\n\n**Mandatory Access Control**，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。\n\n**原理**：主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系。\n\n**例如**：将军分为上将\\>中将\\>少将，军事文件保密等级分为绝密\\>机密\\>秘密，规定不同军衔仅能访问不同保密等级的文件，如少将只能访问秘密文件；当某一账号访问某一文件时，系统会验证账号的军衔，也验证文件的保密等级，当军衔和保密等级相对应时才可以访问。\n\n**缺点**：控制太严格，实现工作量大，缺乏灵活性。\n\n# ABAC 模型：基于属性的访问控制\n\n**Attribute-Based Access Control**，能很好地解决 RBAC 的缺点，在新增资源时容易维护。\n\n**原理**：通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制。\n\n属性通常有四类：\n\n1. 主体属性，如用户年龄、性别等；\n2. 客体属性，如一篇文章等；\n3. 环境属性，即空间限制、时间限制、频度限制；\n4. 操作属性，即行为类型，如读写、只读等。\n\n**例如**：早上 9:00，11:00 期间 A、B 两个部门一起以考生的身份考试，下午 14:00，17:00 期间 A、B 两个部门相互阅卷。\n\n**缺点**：规则复杂，不易看出主体与客体之间的关系，实现非常难，现在应用得很少。\n\n# RBAC，基于角色的权限访问控制\n\n**Role-Based Access Control**，核心在于用户只和角色关联，而角色代表对了权限，是一系列权限的集合。\n\nRBAC 三要素：\n\n1. **用户**：系统中所有的账户\n2. **角色**：一系列权限的集合（如：管理员，开发者，审计管理员等）\n3. **权限**：菜单，按钮，数据的增删改查等详细权限。\n\n在 **RBAC** 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。\n\n角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。\n\n角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系同样也存在继承关系防止越权。\n\n**优点**：便于角色划分，更灵活的授权管理；最小颗粒度授权；\n\n![](./img/权限管理-RBAC.png)\n\n# RBAC 的深度拓展\n\nRBAC 模型可以分为：**RBAC0**、**RBAC1**、**RBAC2**、**RBAC3** 四个阶段，一般公司使用 **RBAC0** 的模型就可以。另外，**RBAC0** 相当于底层逻辑，后三者都是在 **RBAC0** 模型上的拔高。\n\n我先简单介绍下这四个 RBAC 模型：\n\n# 1. RBAC0 模型\n\n用户和角色、角色和权限多对多关系。\n\n简单来说就是一个用户拥有多个角色，一个角色可以被多个用户拥有，这是用户和角色的多对多关系；同样的，角色和权限也是如此。\n\n**RBAC0** 模型如下图：没有画太多线，但是已经能够看出多对多关系。\n\n![](./img/权限管理-RBAC-0.png)\n\n# 2. RBAC1 模型\n\n相对于 **RBAC0** 模型，增加了**角色分级**的逻辑，类似于树形结构，下一节点继承上一节点的所有权限，如 **role1** 根节点下有 **role1.1** 和 **role1.2** 两个子节点\n\n![](./img/权限管理-RBAC-1.png)\n\n角色分级的逻辑可以有效的规范角色创建（主要得益于权限继承逻辑），我之前做过 BD 工具（类 CRM），BD 之间就有分级（经理、主管、专员），如果采用 RBAC0 模型做权限系统，我可能需要为经理、主管、专员分别创建一个角色（角色之间权限无继承性），极有可能出现一个问题，由于权限配置错误，主管拥有经理都没有权限。\n\n而 RBAC1 模型就很好解决了这个问题，创建完经理角色并配置好权限后，主管角色的权限继承经理角色的权限，并且支持针对性删减主管权限。\n\n# 3. RBAC2 模型\n\n基于 **RBAC0** 模型，对角色增加了更多约束条件。\n\n![](./img/权限管理-RBAC-2.png)\n\n如**角色互斥**，比较经典的案例是财务系统中出纳不得兼管稽核，那么在赋予财务系统操作人员角色时，同一个操作员不能同时拥有出纳和稽核两个角色。\n\n如**角色数量限制**，例如：一个角色专门为公司 CEO 创建的，最后发现公司有 10 个人拥有 CEO 角色，一个公司有 10 个 CEO？这就是对角色数量的限制，它指的是有多少用户能拥有这个角色。\n\n**RBAC2** 模型主要是为了增加角色赋予的限制条件，这也符合权限系统的目标：权责明确，系统使用安全、保密。\n\n# 4. RBAC3 模型\n\n同样是基于 **RBAC0** 模型，但是综合了 **RBAC1** 和 **RBAC2** 的所有特点\n\n这里就不在多描述，读者返回去看 **RBAC1** 和 **RBAC2** 模型的描述即可。\n\n# RBAC 权限管理的在实际系统中的应用\n\nRBAC 权限模型由三大部分构成，即**用户管理**、**角色管理**、**权限管理**。\n\n用户管理按照企业架构或业务线架构来划分，这些结构本身比较清晰，扩展性和可读性都非常好。\n\n角色管理一定要在深入理解业务逻辑后再来设计，一般使用各部门真实的角色作为基础，再根据业务逻辑进行扩展。\n\n权限管理是前两种管理的再加固，做太细容易太碎片，做太粗又不够安全，这里我们需要根据经验和实际情况来设计。\n\n# 1.用户管理\n\n用户管理中的用户，是企业里每一位员工，他们本身就有自己的组织架构，我们可以直接使用企业部门架构或者业务线架构来作为线索，构建用户管理系统。\n\n![](./img/权限管理-用户管理.png)\n\n**需要特殊注意**：实际业务中的组织架构可能与企业部门架构、业务线架构不同，需要考虑数据共享机制，一般的做法为授权某个人、某个角色组共享某个组织层级的某个对象组数据。\n\n# 2.角色管理\n\n在设计系统角色时，我们应该深入理解公司架构、业务架构后，再根据需求设计角色及角色内的等级。\n\n一般角色相对于用户来说是固定不变的，每个角色都有自己明确的权限和限制，这些权限在系统设计之处就确定了，之后也轻易不会再变动。\n\n# 1. 自动获得基础角色\n\n当员工入职到某部门时，该名员工的账号应该自动被加入该部门对应的基础角色中，并拥有对应的基础权限。这种操作是为了保证系统安全的前提下，减少了管理员大量手动操作。使新入职员工能快速使用系统，提高工作效率。\n\n# 2. 临时角色与失效时间\n\n公司业务有时需要外援来支持，他们并不属于公司员工，也只是在某个时段在公司做支持。此时我们需要设置临时角色，来应对这种可能跨多部门协作的临时员工。\n\n如果公司安全级别较高，此类账号默认有固定失效时间，到达失效时间需再次审核才能重新开启。避免临时账号因为流程不完善，遗忘在系统中，引起安全隐患。\n\n# 3. 虚拟角色\n\n部门角色中的等级，可以授权同等级的员工拥有相同的权限，但某些员工因工作原因，需要调用角色等级之外的权限，相同等级不同员工需要使用的权限还不相同。\n\n这种超出角色等级又合理的权限授予，我们可以设置虚拟角色。这一虚拟角色可集成这一工作所需的所有权限，然后将它赋予具体的员工即可。这样即不用调整组织架构和对应的角色，也可以满足工作中特殊情况的权限需求。\n\n# 4. 黑白名单\n\n**白名单**：某些用户自身不拥有某部门的顶级角色，但处于业务需求，需要给他角色外的高级权限，那么我们可以设计限制范围的白名单，将需要的用户添加进去即可。\n\n在安全流程中，我们仅需要对白名单设计安全流程，即可审核在白名单中的特殊用户，做到监控拥有特殊权限的用户，减少安全隐患。\n\n**黑名单**：比较常见的黑名单场景是某些犯了错误的员工，虽然在职，但已经不能给他们任何公司权限了。这种既不能取消角色关联，也不能完全停用账号的情况，可以设置黑名单，让此类用户可以登录账号，查看基本信息，但大多数关键权限已经被黑名单限制。\n\n# 3. 权限管理\n\n权限管理一般从三个方面来做限制。**页面/菜单权限**，**操作权限**，**数据权限**。\n\n![](./img/权限管理-权限管理.png)\n\n# 1. 页面/菜单权限\n\n对于没有权限操作的用户，直接隐藏对应的页面入口或菜单选项。这种方法简单快捷直接，对于一些安全不太敏感的权限，使用这种方式非常高效。\n\n# 2. 操作权限\n\n操作权限通常是指对同一组数据，不同的用户是否可以增删改查。对某些用户来说是只读浏览数据，对某些用户来说是可编辑的数据。\n\n# 3. 数据权限\n\n对于安全需求高的权限管理，仅从前端限制隐藏菜单，隐藏编辑按钮是不够的，还需要在数接口上做限制。如果用户试图通过非法手段编辑不属于自己权限下的数据，服务器端会识别、记录并限制访问。\n\n# 4. 数据权限如何管控\n\n数据权限可以分为行权限和列权限。行权限控制：看多少条数据。列权限控制：看一条数据的多少个字段\n\n简单系统中可以通过组织架构来管控行权限，按照角色来配置列权限，但是遇到复杂情况，组织架构是承载不了复杂行权限管控，角色也更不能承载列的特殊化展示。\n\n目前行业的做法是提供行列级数据权规则配置，把规则当成类似权限点配置赋予某个角色或者某个用户。\n\n\n# 用户管理系统权限设计中的更多实践细节\n\n# 1.超级管理员\n\n超级管理员是用来启动系统，配置系统的账号。这个账号应该在配置好系统，创建管理员之后被隐藏起来。超级管理员账号拥有系统中全部权限，可穿梭查看各部门数据，如果使用不恰当，是系统管理的安全隐患。\n\n# 2.互斥角色如何处理\n\n当用户已经有用的角色和即将添加的角色互相互斥时，应该在添加新角色时，提示管理员因角色互斥的原因，无法进行新角色添加。如需添加，要先撤销掉前一个角色，再添加新角色。\n\n# 3.用户管理权限系统设计一定要简单清晰\n\n在设计权限系统之处，一定要理清思路，一切从简，能不增加的多余角色和权限逻辑，就一定不要增加。因为随着公司业务的扩大，权限和角色也会随之增多，如果初期设计思路不严谨，那么权限系统会随着业务的扩大而无限混乱下去，此时再来整理权限，已经太晚了。所以初期设计就一定要条理清晰，简单明了，能避免后续非常多不必要的麻烦。\n\n# 4.无权提示页\n\n有时员工 A 会直接给员工 B 分享他当下正在操作的页面，但有可能员工 B 无权查看。此时我们应该在这里考虑添加「无权提示页」，避免粗暴的 404 页面让员工 B 以为是系统出错了。\n\n> 原文链接：https://mp.weixin.qq.com/s/FnBgM4m593e8M\\_UkJ\\_RWSg","source":"_posts/沙堆/权限管理.md","raw":"---\ntitle: 权限管理\ndate: 2025-07-27 00:19:45\ncategories:\ntags:\n  - 权限管理\n---\n原文链接： https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg  \n\n\n![后台权限系统的设计以及主流的五种权限模型详解](./img/权限管理-后台权限系统的设计以及主流的五种权限模型详解.png)\n\n今天来聊聊权限系统的设计以及主流的五种权限模型。\n\n权限管控可以通俗地理解为权力限制，即不同的人由于拥有不同权力，他所看到的、能使用的可能不一样。对应到一个应用系统，其实就是一个用户可能拥有不同的数据权限（看到的）和操作权限（使用的）。\n\n主流的权限模型主要分为以下五种：\n\n* **ACL 模型**：访问控制列表\n* **DAC 模型**：自主访问控制\n* **MAC 模型**：强制访问控制\n* **ABAC 模型**：基于属性的访问控制\n* **RBAC 模型**：基于角色的权限访问控制\n\n# ACL 模型：访问控制列表\n\n**Access Control List**，ACL 是最早的、最基本的一种访问控制机制，是基于客体进行控制的模型，在其他模型中也有 ACL 的身影。为了解决相同权限的用户挨个配置的问题，后来也采用了用户组的方式。\n\n**原理**：每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为，非常简单。\n\n**例如**：当用户 A 要对一篇文章进行编辑时，ACL 会先检查一下文章编辑功能的控制列表中有没有用户 A，有就可以编辑，无则不能编辑。再例如：不同等级的会员在产品中可使用的功能范围不同。\n\n**缺点**：当主体的数量较多时，配置和维护工作就会成本大、易出错。\n\n# DAC 模型：自主访问控制\n\nDiscretionary Access Control，DAC 是 ACL 的一种拓展。\n\n**原理**：在 ACL 模型的基础上，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递。\n\n**例如**：常见于文件系统，LINUX，UNIX、WindowsNT 版本的操作系统都提供 DAC 的支持。\n\n**缺点**：对权限控制比较分散，例如无法简单地将一组文件设置统一的权限开放给指定的一群用户。主体的权限太大，无意间就可能泄露信息。\n\n# MAC 模型：强制访问控制\n\n**Mandatory Access Control**，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。\n\n**原理**：主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系。\n\n**例如**：将军分为上将\\>中将\\>少将，军事文件保密等级分为绝密\\>机密\\>秘密，规定不同军衔仅能访问不同保密等级的文件，如少将只能访问秘密文件；当某一账号访问某一文件时，系统会验证账号的军衔，也验证文件的保密等级，当军衔和保密等级相对应时才可以访问。\n\n**缺点**：控制太严格，实现工作量大，缺乏灵活性。\n\n# ABAC 模型：基于属性的访问控制\n\n**Attribute-Based Access Control**，能很好地解决 RBAC 的缺点，在新增资源时容易维护。\n\n**原理**：通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制。\n\n属性通常有四类：\n\n1. 主体属性，如用户年龄、性别等；\n2. 客体属性，如一篇文章等；\n3. 环境属性，即空间限制、时间限制、频度限制；\n4. 操作属性，即行为类型，如读写、只读等。\n\n**例如**：早上 9:00，11:00 期间 A、B 两个部门一起以考生的身份考试，下午 14:00，17:00 期间 A、B 两个部门相互阅卷。\n\n**缺点**：规则复杂，不易看出主体与客体之间的关系，实现非常难，现在应用得很少。\n\n# RBAC，基于角色的权限访问控制\n\n**Role-Based Access Control**，核心在于用户只和角色关联，而角色代表对了权限，是一系列权限的集合。\n\nRBAC 三要素：\n\n1. **用户**：系统中所有的账户\n2. **角色**：一系列权限的集合（如：管理员，开发者，审计管理员等）\n3. **权限**：菜单，按钮，数据的增删改查等详细权限。\n\n在 **RBAC** 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。\n\n角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。\n\n角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系同样也存在继承关系防止越权。\n\n**优点**：便于角色划分，更灵活的授权管理；最小颗粒度授权；\n\n![](./img/权限管理-RBAC.png)\n\n# RBAC 的深度拓展\n\nRBAC 模型可以分为：**RBAC0**、**RBAC1**、**RBAC2**、**RBAC3** 四个阶段，一般公司使用 **RBAC0** 的模型就可以。另外，**RBAC0** 相当于底层逻辑，后三者都是在 **RBAC0** 模型上的拔高。\n\n我先简单介绍下这四个 RBAC 模型：\n\n# 1. RBAC0 模型\n\n用户和角色、角色和权限多对多关系。\n\n简单来说就是一个用户拥有多个角色，一个角色可以被多个用户拥有，这是用户和角色的多对多关系；同样的，角色和权限也是如此。\n\n**RBAC0** 模型如下图：没有画太多线，但是已经能够看出多对多关系。\n\n![](./img/权限管理-RBAC-0.png)\n\n# 2. RBAC1 模型\n\n相对于 **RBAC0** 模型，增加了**角色分级**的逻辑，类似于树形结构，下一节点继承上一节点的所有权限，如 **role1** 根节点下有 **role1.1** 和 **role1.2** 两个子节点\n\n![](./img/权限管理-RBAC-1.png)\n\n角色分级的逻辑可以有效的规范角色创建（主要得益于权限继承逻辑），我之前做过 BD 工具（类 CRM），BD 之间就有分级（经理、主管、专员），如果采用 RBAC0 模型做权限系统，我可能需要为经理、主管、专员分别创建一个角色（角色之间权限无继承性），极有可能出现一个问题，由于权限配置错误，主管拥有经理都没有权限。\n\n而 RBAC1 模型就很好解决了这个问题，创建完经理角色并配置好权限后，主管角色的权限继承经理角色的权限，并且支持针对性删减主管权限。\n\n# 3. RBAC2 模型\n\n基于 **RBAC0** 模型，对角色增加了更多约束条件。\n\n![](./img/权限管理-RBAC-2.png)\n\n如**角色互斥**，比较经典的案例是财务系统中出纳不得兼管稽核，那么在赋予财务系统操作人员角色时，同一个操作员不能同时拥有出纳和稽核两个角色。\n\n如**角色数量限制**，例如：一个角色专门为公司 CEO 创建的，最后发现公司有 10 个人拥有 CEO 角色，一个公司有 10 个 CEO？这就是对角色数量的限制，它指的是有多少用户能拥有这个角色。\n\n**RBAC2** 模型主要是为了增加角色赋予的限制条件，这也符合权限系统的目标：权责明确，系统使用安全、保密。\n\n# 4. RBAC3 模型\n\n同样是基于 **RBAC0** 模型，但是综合了 **RBAC1** 和 **RBAC2** 的所有特点\n\n这里就不在多描述，读者返回去看 **RBAC1** 和 **RBAC2** 模型的描述即可。\n\n# RBAC 权限管理的在实际系统中的应用\n\nRBAC 权限模型由三大部分构成，即**用户管理**、**角色管理**、**权限管理**。\n\n用户管理按照企业架构或业务线架构来划分，这些结构本身比较清晰，扩展性和可读性都非常好。\n\n角色管理一定要在深入理解业务逻辑后再来设计，一般使用各部门真实的角色作为基础，再根据业务逻辑进行扩展。\n\n权限管理是前两种管理的再加固，做太细容易太碎片，做太粗又不够安全，这里我们需要根据经验和实际情况来设计。\n\n# 1.用户管理\n\n用户管理中的用户，是企业里每一位员工，他们本身就有自己的组织架构，我们可以直接使用企业部门架构或者业务线架构来作为线索，构建用户管理系统。\n\n![](./img/权限管理-用户管理.png)\n\n**需要特殊注意**：实际业务中的组织架构可能与企业部门架构、业务线架构不同，需要考虑数据共享机制，一般的做法为授权某个人、某个角色组共享某个组织层级的某个对象组数据。\n\n# 2.角色管理\n\n在设计系统角色时，我们应该深入理解公司架构、业务架构后，再根据需求设计角色及角色内的等级。\n\n一般角色相对于用户来说是固定不变的，每个角色都有自己明确的权限和限制，这些权限在系统设计之处就确定了，之后也轻易不会再变动。\n\n# 1. 自动获得基础角色\n\n当员工入职到某部门时，该名员工的账号应该自动被加入该部门对应的基础角色中，并拥有对应的基础权限。这种操作是为了保证系统安全的前提下，减少了管理员大量手动操作。使新入职员工能快速使用系统，提高工作效率。\n\n# 2. 临时角色与失效时间\n\n公司业务有时需要外援来支持，他们并不属于公司员工，也只是在某个时段在公司做支持。此时我们需要设置临时角色，来应对这种可能跨多部门协作的临时员工。\n\n如果公司安全级别较高，此类账号默认有固定失效时间，到达失效时间需再次审核才能重新开启。避免临时账号因为流程不完善，遗忘在系统中，引起安全隐患。\n\n# 3. 虚拟角色\n\n部门角色中的等级，可以授权同等级的员工拥有相同的权限，但某些员工因工作原因，需要调用角色等级之外的权限，相同等级不同员工需要使用的权限还不相同。\n\n这种超出角色等级又合理的权限授予，我们可以设置虚拟角色。这一虚拟角色可集成这一工作所需的所有权限，然后将它赋予具体的员工即可。这样即不用调整组织架构和对应的角色，也可以满足工作中特殊情况的权限需求。\n\n# 4. 黑白名单\n\n**白名单**：某些用户自身不拥有某部门的顶级角色，但处于业务需求，需要给他角色外的高级权限，那么我们可以设计限制范围的白名单，将需要的用户添加进去即可。\n\n在安全流程中，我们仅需要对白名单设计安全流程，即可审核在白名单中的特殊用户，做到监控拥有特殊权限的用户，减少安全隐患。\n\n**黑名单**：比较常见的黑名单场景是某些犯了错误的员工，虽然在职，但已经不能给他们任何公司权限了。这种既不能取消角色关联，也不能完全停用账号的情况，可以设置黑名单，让此类用户可以登录账号，查看基本信息，但大多数关键权限已经被黑名单限制。\n\n# 3. 权限管理\n\n权限管理一般从三个方面来做限制。**页面/菜单权限**，**操作权限**，**数据权限**。\n\n![](./img/权限管理-权限管理.png)\n\n# 1. 页面/菜单权限\n\n对于没有权限操作的用户，直接隐藏对应的页面入口或菜单选项。这种方法简单快捷直接，对于一些安全不太敏感的权限，使用这种方式非常高效。\n\n# 2. 操作权限\n\n操作权限通常是指对同一组数据，不同的用户是否可以增删改查。对某些用户来说是只读浏览数据，对某些用户来说是可编辑的数据。\n\n# 3. 数据权限\n\n对于安全需求高的权限管理，仅从前端限制隐藏菜单，隐藏编辑按钮是不够的，还需要在数接口上做限制。如果用户试图通过非法手段编辑不属于自己权限下的数据，服务器端会识别、记录并限制访问。\n\n# 4. 数据权限如何管控\n\n数据权限可以分为行权限和列权限。行权限控制：看多少条数据。列权限控制：看一条数据的多少个字段\n\n简单系统中可以通过组织架构来管控行权限，按照角色来配置列权限，但是遇到复杂情况，组织架构是承载不了复杂行权限管控，角色也更不能承载列的特殊化展示。\n\n目前行业的做法是提供行列级数据权规则配置，把规则当成类似权限点配置赋予某个角色或者某个用户。\n\n\n# 用户管理系统权限设计中的更多实践细节\n\n# 1.超级管理员\n\n超级管理员是用来启动系统，配置系统的账号。这个账号应该在配置好系统，创建管理员之后被隐藏起来。超级管理员账号拥有系统中全部权限，可穿梭查看各部门数据，如果使用不恰当，是系统管理的安全隐患。\n\n# 2.互斥角色如何处理\n\n当用户已经有用的角色和即将添加的角色互相互斥时，应该在添加新角色时，提示管理员因角色互斥的原因，无法进行新角色添加。如需添加，要先撤销掉前一个角色，再添加新角色。\n\n# 3.用户管理权限系统设计一定要简单清晰\n\n在设计权限系统之处，一定要理清思路，一切从简，能不增加的多余角色和权限逻辑，就一定不要增加。因为随着公司业务的扩大，权限和角色也会随之增多，如果初期设计思路不严谨，那么权限系统会随着业务的扩大而无限混乱下去，此时再来整理权限，已经太晚了。所以初期设计就一定要条理清晰，简单明了，能避免后续非常多不必要的麻烦。\n\n# 4.无权提示页\n\n有时员工 A 会直接给员工 B 分享他当下正在操作的页面，但有可能员工 B 无权查看。此时我们应该在这里考虑添加「无权提示页」，避免粗暴的 404 页面让员工 B 以为是系统出错了。\n\n> 原文链接：https://mp.weixin.qq.com/s/FnBgM4m593e8M\\_UkJ\\_RWSg","slug":"沙堆/权限管理","published":1,"updated":"2025-07-26T17:14:39.450Z","_id":"cmdkij0el00007ctz9abm713u","comments":1,"layout":"post","photos":[],"content":"<p>原文链接： <a href=\"https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg\">https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg</a>  </p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E5%90%8E%E5%8F%B0%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E4%B8%BB%E6%B5%81%E7%9A%84%E4%BA%94%E7%A7%8D%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.png\" alt=\"后台权限系统的设计以及主流的五种权限模型详解\"></p>\n<p>今天来聊聊权限系统的设计以及主流的五种权限模型。</p>\n<p>权限管控可以通俗地理解为权力限制，即不同的人由于拥有不同权力，他所看到的、能使用的可能不一样。对应到一个应用系统，其实就是一个用户可能拥有不同的数据权限（看到的）和操作权限（使用的）。</p>\n<p>主流的权限模型主要分为以下五种：</p>\n<ul>\n<li><strong>ACL 模型</strong>：访问控制列表</li>\n<li><strong>DAC 模型</strong>：自主访问控制</li>\n<li><strong>MAC 模型</strong>：强制访问控制</li>\n<li><strong>ABAC 模型</strong>：基于属性的访问控制</li>\n<li><strong>RBAC 模型</strong>：基于角色的权限访问控制</li>\n</ul>\n<h1 id=\"ACL-模型：访问控制列表\"><a href=\"#ACL-模型：访问控制列表\" class=\"headerlink\" title=\"ACL 模型：访问控制列表\"></a>ACL 模型：访问控制列表</h1><p><strong>Access Control List</strong>，ACL 是最早的、最基本的一种访问控制机制，是基于客体进行控制的模型，在其他模型中也有 ACL 的身影。为了解决相同权限的用户挨个配置的问题，后来也采用了用户组的方式。</p>\n<p><strong>原理</strong>：每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为，非常简单。</p>\n<p><strong>例如</strong>：当用户 A 要对一篇文章进行编辑时，ACL 会先检查一下文章编辑功能的控制列表中有没有用户 A，有就可以编辑，无则不能编辑。再例如：不同等级的会员在产品中可使用的功能范围不同。</p>\n<p><strong>缺点</strong>：当主体的数量较多时，配置和维护工作就会成本大、易出错。</p>\n<h1 id=\"DAC-模型：自主访问控制\"><a href=\"#DAC-模型：自主访问控制\" class=\"headerlink\" title=\"DAC 模型：自主访问控制\"></a>DAC 模型：自主访问控制</h1><p>Discretionary Access Control，DAC 是 ACL 的一种拓展。</p>\n<p><strong>原理</strong>：在 ACL 模型的基础上，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递。</p>\n<p><strong>例如</strong>：常见于文件系统，LINUX，UNIX、WindowsNT 版本的操作系统都提供 DAC 的支持。</p>\n<p><strong>缺点</strong>：对权限控制比较分散，例如无法简单地将一组文件设置统一的权限开放给指定的一群用户。主体的权限太大，无意间就可能泄露信息。</p>\n<h1 id=\"MAC-模型：强制访问控制\"><a href=\"#MAC-模型：强制访问控制\" class=\"headerlink\" title=\"MAC 模型：强制访问控制\"></a>MAC 模型：强制访问控制</h1><p><strong>Mandatory Access Control</strong>，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。</p>\n<p><strong>原理</strong>：主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系。</p>\n<p><strong>例如</strong>：将军分为上将&gt;中将&gt;少将，军事文件保密等级分为绝密&gt;机密&gt;秘密，规定不同军衔仅能访问不同保密等级的文件，如少将只能访问秘密文件；当某一账号访问某一文件时，系统会验证账号的军衔，也验证文件的保密等级，当军衔和保密等级相对应时才可以访问。</p>\n<p><strong>缺点</strong>：控制太严格，实现工作量大，缺乏灵活性。</p>\n<h1 id=\"ABAC-模型：基于属性的访问控制\"><a href=\"#ABAC-模型：基于属性的访问控制\" class=\"headerlink\" title=\"ABAC 模型：基于属性的访问控制\"></a>ABAC 模型：基于属性的访问控制</h1><p><strong>Attribute-Based Access Control</strong>，能很好地解决 RBAC 的缺点，在新增资源时容易维护。</p>\n<p><strong>原理</strong>：通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制。</p>\n<p>属性通常有四类：</p>\n<ol>\n<li>主体属性，如用户年龄、性别等；</li>\n<li>客体属性，如一篇文章等；</li>\n<li>环境属性，即空间限制、时间限制、频度限制；</li>\n<li>操作属性，即行为类型，如读写、只读等。</li>\n</ol>\n<p><strong>例如</strong>：早上 9:00，11:00 期间 A、B 两个部门一起以考生的身份考试，下午 14:00，17:00 期间 A、B 两个部门相互阅卷。</p>\n<p><strong>缺点</strong>：规则复杂，不易看出主体与客体之间的关系，实现非常难，现在应用得很少。</p>\n<h1 id=\"RBAC，基于角色的权限访问控制\"><a href=\"#RBAC，基于角色的权限访问控制\" class=\"headerlink\" title=\"RBAC，基于角色的权限访问控制\"></a>RBAC，基于角色的权限访问控制</h1><p><strong>Role-Based Access Control</strong>，核心在于用户只和角色关联，而角色代表对了权限，是一系列权限的集合。</p>\n<p>RBAC 三要素：</p>\n<ol>\n<li><strong>用户</strong>：系统中所有的账户</li>\n<li><strong>角色</strong>：一系列权限的集合（如：管理员，开发者，审计管理员等）</li>\n<li><strong>权限</strong>：菜单，按钮，数据的增删改查等详细权限。</li>\n</ol>\n<p>在 <strong>RBAC</strong> 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。</p>\n<p>角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。</p>\n<p>角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系同样也存在继承关系防止越权。</p>\n<p><strong>优点</strong>：便于角色划分，更灵活的授权管理；最小颗粒度授权；</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC.png\"></p>\n<h1 id=\"RBAC-的深度拓展\"><a href=\"#RBAC-的深度拓展\" class=\"headerlink\" title=\"RBAC 的深度拓展\"></a>RBAC 的深度拓展</h1><p>RBAC 模型可以分为：<strong>RBAC0</strong>、<strong>RBAC1</strong>、<strong>RBAC2</strong>、<strong>RBAC3</strong> 四个阶段，一般公司使用 <strong>RBAC0</strong> 的模型就可以。另外，<strong>RBAC0</strong> 相当于底层逻辑，后三者都是在 <strong>RBAC0</strong> 模型上的拔高。</p>\n<p>我先简单介绍下这四个 RBAC 模型：</p>\n<h1 id=\"1-RBAC0-模型\"><a href=\"#1-RBAC0-模型\" class=\"headerlink\" title=\"1. RBAC0 模型\"></a>1. RBAC0 模型</h1><p>用户和角色、角色和权限多对多关系。</p>\n<p>简单来说就是一个用户拥有多个角色，一个角色可以被多个用户拥有，这是用户和角色的多对多关系；同样的，角色和权限也是如此。</p>\n<p><strong>RBAC0</strong> 模型如下图：没有画太多线，但是已经能够看出多对多关系。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-0.png\"></p>\n<h1 id=\"2-RBAC1-模型\"><a href=\"#2-RBAC1-模型\" class=\"headerlink\" title=\"2. RBAC1 模型\"></a>2. RBAC1 模型</h1><p>相对于 <strong>RBAC0</strong> 模型，增加了<strong>角色分级</strong>的逻辑，类似于树形结构，下一节点继承上一节点的所有权限，如 <strong>role1</strong> 根节点下有 <strong>role1.1</strong> 和 <strong>role1.2</strong> 两个子节点</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-1.png\"></p>\n<p>角色分级的逻辑可以有效的规范角色创建（主要得益于权限继承逻辑），我之前做过 BD 工具（类 CRM），BD 之间就有分级（经理、主管、专员），如果采用 RBAC0 模型做权限系统，我可能需要为经理、主管、专员分别创建一个角色（角色之间权限无继承性），极有可能出现一个问题，由于权限配置错误，主管拥有经理都没有权限。</p>\n<p>而 RBAC1 模型就很好解决了这个问题，创建完经理角色并配置好权限后，主管角色的权限继承经理角色的权限，并且支持针对性删减主管权限。</p>\n<h1 id=\"3-RBAC2-模型\"><a href=\"#3-RBAC2-模型\" class=\"headerlink\" title=\"3. RBAC2 模型\"></a>3. RBAC2 模型</h1><p>基于 <strong>RBAC0</strong> 模型，对角色增加了更多约束条件。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-2.png\"></p>\n<p>如<strong>角色互斥</strong>，比较经典的案例是财务系统中出纳不得兼管稽核，那么在赋予财务系统操作人员角色时，同一个操作员不能同时拥有出纳和稽核两个角色。</p>\n<p>如<strong>角色数量限制</strong>，例如：一个角色专门为公司 CEO 创建的，最后发现公司有 10 个人拥有 CEO 角色，一个公司有 10 个 CEO？这就是对角色数量的限制，它指的是有多少用户能拥有这个角色。</p>\n<p><strong>RBAC2</strong> 模型主要是为了增加角色赋予的限制条件，这也符合权限系统的目标：权责明确，系统使用安全、保密。</p>\n<h1 id=\"4-RBAC3-模型\"><a href=\"#4-RBAC3-模型\" class=\"headerlink\" title=\"4. RBAC3 模型\"></a>4. RBAC3 模型</h1><p>同样是基于 <strong>RBAC0</strong> 模型，但是综合了 <strong>RBAC1</strong> 和 <strong>RBAC2</strong> 的所有特点</p>\n<p>这里就不在多描述，读者返回去看 <strong>RBAC1</strong> 和 <strong>RBAC2</strong> 模型的描述即可。</p>\n<h1 id=\"RBAC-权限管理的在实际系统中的应用\"><a href=\"#RBAC-权限管理的在实际系统中的应用\" class=\"headerlink\" title=\"RBAC 权限管理的在实际系统中的应用\"></a>RBAC 权限管理的在实际系统中的应用</h1><p>RBAC 权限模型由三大部分构成，即<strong>用户管理</strong>、<strong>角色管理</strong>、<strong>权限管理</strong>。</p>\n<p>用户管理按照企业架构或业务线架构来划分，这些结构本身比较清晰，扩展性和可读性都非常好。</p>\n<p>角色管理一定要在深入理解业务逻辑后再来设计，一般使用各部门真实的角色作为基础，再根据业务逻辑进行扩展。</p>\n<p>权限管理是前两种管理的再加固，做太细容易太碎片，做太粗又不够安全，这里我们需要根据经验和实际情况来设计。</p>\n<h1 id=\"1-用户管理\"><a href=\"#1-用户管理\" class=\"headerlink\" title=\"1.用户管理\"></a>1.用户管理</h1><p>用户管理中的用户，是企业里每一位员工，他们本身就有自己的组织架构，我们可以直接使用企业部门架构或者业务线架构来作为线索，构建用户管理系统。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png\"></p>\n<p><strong>需要特殊注意</strong>：实际业务中的组织架构可能与企业部门架构、业务线架构不同，需要考虑数据共享机制，一般的做法为授权某个人、某个角色组共享某个组织层级的某个对象组数据。</p>\n<h1 id=\"2-角色管理\"><a href=\"#2-角色管理\" class=\"headerlink\" title=\"2.角色管理\"></a>2.角色管理</h1><p>在设计系统角色时，我们应该深入理解公司架构、业务架构后，再根据需求设计角色及角色内的等级。</p>\n<p>一般角色相对于用户来说是固定不变的，每个角色都有自己明确的权限和限制，这些权限在系统设计之处就确定了，之后也轻易不会再变动。</p>\n<h1 id=\"1-自动获得基础角色\"><a href=\"#1-自动获得基础角色\" class=\"headerlink\" title=\"1. 自动获得基础角色\"></a>1. 自动获得基础角色</h1><p>当员工入职到某部门时，该名员工的账号应该自动被加入该部门对应的基础角色中，并拥有对应的基础权限。这种操作是为了保证系统安全的前提下，减少了管理员大量手动操作。使新入职员工能快速使用系统，提高工作效率。</p>\n<h1 id=\"2-临时角色与失效时间\"><a href=\"#2-临时角色与失效时间\" class=\"headerlink\" title=\"2. 临时角色与失效时间\"></a>2. 临时角色与失效时间</h1><p>公司业务有时需要外援来支持，他们并不属于公司员工，也只是在某个时段在公司做支持。此时我们需要设置临时角色，来应对这种可能跨多部门协作的临时员工。</p>\n<p>如果公司安全级别较高，此类账号默认有固定失效时间，到达失效时间需再次审核才能重新开启。避免临时账号因为流程不完善，遗忘在系统中，引起安全隐患。</p>\n<h1 id=\"3-虚拟角色\"><a href=\"#3-虚拟角色\" class=\"headerlink\" title=\"3. 虚拟角色\"></a>3. 虚拟角色</h1><p>部门角色中的等级，可以授权同等级的员工拥有相同的权限，但某些员工因工作原因，需要调用角色等级之外的权限，相同等级不同员工需要使用的权限还不相同。</p>\n<p>这种超出角色等级又合理的权限授予，我们可以设置虚拟角色。这一虚拟角色可集成这一工作所需的所有权限，然后将它赋予具体的员工即可。这样即不用调整组织架构和对应的角色，也可以满足工作中特殊情况的权限需求。</p>\n<h1 id=\"4-黑白名单\"><a href=\"#4-黑白名单\" class=\"headerlink\" title=\"4. 黑白名单\"></a>4. 黑白名单</h1><p><strong>白名单</strong>：某些用户自身不拥有某部门的顶级角色，但处于业务需求，需要给他角色外的高级权限，那么我们可以设计限制范围的白名单，将需要的用户添加进去即可。</p>\n<p>在安全流程中，我们仅需要对白名单设计安全流程，即可审核在白名单中的特殊用户，做到监控拥有特殊权限的用户，减少安全隐患。</p>\n<p><strong>黑名单</strong>：比较常见的黑名单场景是某些犯了错误的员工，虽然在职，但已经不能给他们任何公司权限了。这种既不能取消角色关联，也不能完全停用账号的情况，可以设置黑名单，让此类用户可以登录账号，查看基本信息，但大多数关键权限已经被黑名单限制。</p>\n<h1 id=\"3-权限管理\"><a href=\"#3-权限管理\" class=\"headerlink\" title=\"3. 权限管理\"></a>3. 权限管理</h1><p>权限管理一般从三个方面来做限制。<strong>页面&#x2F;菜单权限</strong>，<strong>操作权限</strong>，<strong>数据权限</strong>。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.png\"></p>\n<h1 id=\"1-页面-菜单权限\"><a href=\"#1-页面-菜单权限\" class=\"headerlink\" title=\"1. 页面&#x2F;菜单权限\"></a>1. 页面&#x2F;菜单权限</h1><p>对于没有权限操作的用户，直接隐藏对应的页面入口或菜单选项。这种方法简单快捷直接，对于一些安全不太敏感的权限，使用这种方式非常高效。</p>\n<h1 id=\"2-操作权限\"><a href=\"#2-操作权限\" class=\"headerlink\" title=\"2. 操作权限\"></a>2. 操作权限</h1><p>操作权限通常是指对同一组数据，不同的用户是否可以增删改查。对某些用户来说是只读浏览数据，对某些用户来说是可编辑的数据。</p>\n<h1 id=\"3-数据权限\"><a href=\"#3-数据权限\" class=\"headerlink\" title=\"3. 数据权限\"></a>3. 数据权限</h1><p>对于安全需求高的权限管理，仅从前端限制隐藏菜单，隐藏编辑按钮是不够的，还需要在数接口上做限制。如果用户试图通过非法手段编辑不属于自己权限下的数据，服务器端会识别、记录并限制访问。</p>\n<h1 id=\"4-数据权限如何管控\"><a href=\"#4-数据权限如何管控\" class=\"headerlink\" title=\"4. 数据权限如何管控\"></a>4. 数据权限如何管控</h1><p>数据权限可以分为行权限和列权限。行权限控制：看多少条数据。列权限控制：看一条数据的多少个字段</p>\n<p>简单系统中可以通过组织架构来管控行权限，按照角色来配置列权限，但是遇到复杂情况，组织架构是承载不了复杂行权限管控，角色也更不能承载列的特殊化展示。</p>\n<p>目前行业的做法是提供行列级数据权规则配置，把规则当成类似权限点配置赋予某个角色或者某个用户。</p>\n<h1 id=\"用户管理系统权限设计中的更多实践细节\"><a href=\"#用户管理系统权限设计中的更多实践细节\" class=\"headerlink\" title=\"用户管理系统权限设计中的更多实践细节\"></a>用户管理系统权限设计中的更多实践细节</h1><h1 id=\"1-超级管理员\"><a href=\"#1-超级管理员\" class=\"headerlink\" title=\"1.超级管理员\"></a>1.超级管理员</h1><p>超级管理员是用来启动系统，配置系统的账号。这个账号应该在配置好系统，创建管理员之后被隐藏起来。超级管理员账号拥有系统中全部权限，可穿梭查看各部门数据，如果使用不恰当，是系统管理的安全隐患。</p>\n<h1 id=\"2-互斥角色如何处理\"><a href=\"#2-互斥角色如何处理\" class=\"headerlink\" title=\"2.互斥角色如何处理\"></a>2.互斥角色如何处理</h1><p>当用户已经有用的角色和即将添加的角色互相互斥时，应该在添加新角色时，提示管理员因角色互斥的原因，无法进行新角色添加。如需添加，要先撤销掉前一个角色，再添加新角色。</p>\n<h1 id=\"3-用户管理权限系统设计一定要简单清晰\"><a href=\"#3-用户管理权限系统设计一定要简单清晰\" class=\"headerlink\" title=\"3.用户管理权限系统设计一定要简单清晰\"></a>3.用户管理权限系统设计一定要简单清晰</h1><p>在设计权限系统之处，一定要理清思路，一切从简，能不增加的多余角色和权限逻辑，就一定不要增加。因为随着公司业务的扩大，权限和角色也会随之增多，如果初期设计思路不严谨，那么权限系统会随着业务的扩大而无限混乱下去，此时再来整理权限，已经太晚了。所以初期设计就一定要条理清晰，简单明了，能避免后续非常多不必要的麻烦。</p>\n<h1 id=\"4-无权提示页\"><a href=\"#4-无权提示页\" class=\"headerlink\" title=\"4.无权提示页\"></a>4.无权提示页</h1><p>有时员工 A 会直接给员工 B 分享他当下正在操作的页面，但有可能员工 B 无权查看。此时我们应该在这里考虑添加「无权提示页」，避免粗暴的 404 页面让员工 B 以为是系统出错了。</p>\n<blockquote>\n<p>原文链接：<a href=\"https://mp.weixin.qq.com/s/FnBgM4m593e8M/_UkJ/_RWSg\">https://mp.weixin.qq.com/s/FnBgM4m593e8M\\_UkJ\\_RWSg</a></p>\n</blockquote>\n","excerpt":"","more":"<p>原文链接： <a href=\"https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg\">https://mp.weixin.qq.com/s/FnBgM4m593e8M_UkJ_RWSg</a>  </p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E5%90%8E%E5%8F%B0%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E4%B8%BB%E6%B5%81%E7%9A%84%E4%BA%94%E7%A7%8D%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.png\" alt=\"后台权限系统的设计以及主流的五种权限模型详解\"></p>\n<p>今天来聊聊权限系统的设计以及主流的五种权限模型。</p>\n<p>权限管控可以通俗地理解为权力限制，即不同的人由于拥有不同权力，他所看到的、能使用的可能不一样。对应到一个应用系统，其实就是一个用户可能拥有不同的数据权限（看到的）和操作权限（使用的）。</p>\n<p>主流的权限模型主要分为以下五种：</p>\n<ul>\n<li><strong>ACL 模型</strong>：访问控制列表</li>\n<li><strong>DAC 模型</strong>：自主访问控制</li>\n<li><strong>MAC 模型</strong>：强制访问控制</li>\n<li><strong>ABAC 模型</strong>：基于属性的访问控制</li>\n<li><strong>RBAC 模型</strong>：基于角色的权限访问控制</li>\n</ul>\n<h1 id=\"ACL-模型：访问控制列表\"><a href=\"#ACL-模型：访问控制列表\" class=\"headerlink\" title=\"ACL 模型：访问控制列表\"></a>ACL 模型：访问控制列表</h1><p><strong>Access Control List</strong>，ACL 是最早的、最基本的一种访问控制机制，是基于客体进行控制的模型，在其他模型中也有 ACL 的身影。为了解决相同权限的用户挨个配置的问题，后来也采用了用户组的方式。</p>\n<p><strong>原理</strong>：每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为，非常简单。</p>\n<p><strong>例如</strong>：当用户 A 要对一篇文章进行编辑时，ACL 会先检查一下文章编辑功能的控制列表中有没有用户 A，有就可以编辑，无则不能编辑。再例如：不同等级的会员在产品中可使用的功能范围不同。</p>\n<p><strong>缺点</strong>：当主体的数量较多时，配置和维护工作就会成本大、易出错。</p>\n<h1 id=\"DAC-模型：自主访问控制\"><a href=\"#DAC-模型：自主访问控制\" class=\"headerlink\" title=\"DAC 模型：自主访问控制\"></a>DAC 模型：自主访问控制</h1><p>Discretionary Access Control，DAC 是 ACL 的一种拓展。</p>\n<p><strong>原理</strong>：在 ACL 模型的基础上，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递。</p>\n<p><strong>例如</strong>：常见于文件系统，LINUX，UNIX、WindowsNT 版本的操作系统都提供 DAC 的支持。</p>\n<p><strong>缺点</strong>：对权限控制比较分散，例如无法简单地将一组文件设置统一的权限开放给指定的一群用户。主体的权限太大，无意间就可能泄露信息。</p>\n<h1 id=\"MAC-模型：强制访问控制\"><a href=\"#MAC-模型：强制访问控制\" class=\"headerlink\" title=\"MAC 模型：强制访问控制\"></a>MAC 模型：强制访问控制</h1><p><strong>Mandatory Access Control</strong>，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。</p>\n<p><strong>原理</strong>：主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系。</p>\n<p><strong>例如</strong>：将军分为上将&gt;中将&gt;少将，军事文件保密等级分为绝密&gt;机密&gt;秘密，规定不同军衔仅能访问不同保密等级的文件，如少将只能访问秘密文件；当某一账号访问某一文件时，系统会验证账号的军衔，也验证文件的保密等级，当军衔和保密等级相对应时才可以访问。</p>\n<p><strong>缺点</strong>：控制太严格，实现工作量大，缺乏灵活性。</p>\n<h1 id=\"ABAC-模型：基于属性的访问控制\"><a href=\"#ABAC-模型：基于属性的访问控制\" class=\"headerlink\" title=\"ABAC 模型：基于属性的访问控制\"></a>ABAC 模型：基于属性的访问控制</h1><p><strong>Attribute-Based Access Control</strong>，能很好地解决 RBAC 的缺点，在新增资源时容易维护。</p>\n<p><strong>原理</strong>：通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制。</p>\n<p>属性通常有四类：</p>\n<ol>\n<li>主体属性，如用户年龄、性别等；</li>\n<li>客体属性，如一篇文章等；</li>\n<li>环境属性，即空间限制、时间限制、频度限制；</li>\n<li>操作属性，即行为类型，如读写、只读等。</li>\n</ol>\n<p><strong>例如</strong>：早上 9:00，11:00 期间 A、B 两个部门一起以考生的身份考试，下午 14:00，17:00 期间 A、B 两个部门相互阅卷。</p>\n<p><strong>缺点</strong>：规则复杂，不易看出主体与客体之间的关系，实现非常难，现在应用得很少。</p>\n<h1 id=\"RBAC，基于角色的权限访问控制\"><a href=\"#RBAC，基于角色的权限访问控制\" class=\"headerlink\" title=\"RBAC，基于角色的权限访问控制\"></a>RBAC，基于角色的权限访问控制</h1><p><strong>Role-Based Access Control</strong>，核心在于用户只和角色关联，而角色代表对了权限，是一系列权限的集合。</p>\n<p>RBAC 三要素：</p>\n<ol>\n<li><strong>用户</strong>：系统中所有的账户</li>\n<li><strong>角色</strong>：一系列权限的集合（如：管理员，开发者，审计管理员等）</li>\n<li><strong>权限</strong>：菜单，按钮，数据的增删改查等详细权限。</li>\n</ol>\n<p>在 <strong>RBAC</strong> 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。</p>\n<p>角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。</p>\n<p>角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系同样也存在继承关系防止越权。</p>\n<p><strong>优点</strong>：便于角色划分，更灵活的授权管理；最小颗粒度授权；</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC.png\"></p>\n<h1 id=\"RBAC-的深度拓展\"><a href=\"#RBAC-的深度拓展\" class=\"headerlink\" title=\"RBAC 的深度拓展\"></a>RBAC 的深度拓展</h1><p>RBAC 模型可以分为：<strong>RBAC0</strong>、<strong>RBAC1</strong>、<strong>RBAC2</strong>、<strong>RBAC3</strong> 四个阶段，一般公司使用 <strong>RBAC0</strong> 的模型就可以。另外，<strong>RBAC0</strong> 相当于底层逻辑，后三者都是在 <strong>RBAC0</strong> 模型上的拔高。</p>\n<p>我先简单介绍下这四个 RBAC 模型：</p>\n<h1 id=\"1-RBAC0-模型\"><a href=\"#1-RBAC0-模型\" class=\"headerlink\" title=\"1. RBAC0 模型\"></a>1. RBAC0 模型</h1><p>用户和角色、角色和权限多对多关系。</p>\n<p>简单来说就是一个用户拥有多个角色，一个角色可以被多个用户拥有，这是用户和角色的多对多关系；同样的，角色和权限也是如此。</p>\n<p><strong>RBAC0</strong> 模型如下图：没有画太多线，但是已经能够看出多对多关系。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-0.png\"></p>\n<h1 id=\"2-RBAC1-模型\"><a href=\"#2-RBAC1-模型\" class=\"headerlink\" title=\"2. RBAC1 模型\"></a>2. RBAC1 模型</h1><p>相对于 <strong>RBAC0</strong> 模型，增加了<strong>角色分级</strong>的逻辑，类似于树形结构，下一节点继承上一节点的所有权限，如 <strong>role1</strong> 根节点下有 <strong>role1.1</strong> 和 <strong>role1.2</strong> 两个子节点</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-1.png\"></p>\n<p>角色分级的逻辑可以有效的规范角色创建（主要得益于权限继承逻辑），我之前做过 BD 工具（类 CRM），BD 之间就有分级（经理、主管、专员），如果采用 RBAC0 模型做权限系统，我可能需要为经理、主管、专员分别创建一个角色（角色之间权限无继承性），极有可能出现一个问题，由于权限配置错误，主管拥有经理都没有权限。</p>\n<p>而 RBAC1 模型就很好解决了这个问题，创建完经理角色并配置好权限后，主管角色的权限继承经理角色的权限，并且支持针对性删减主管权限。</p>\n<h1 id=\"3-RBAC2-模型\"><a href=\"#3-RBAC2-模型\" class=\"headerlink\" title=\"3. RBAC2 模型\"></a>3. RBAC2 模型</h1><p>基于 <strong>RBAC0</strong> 模型，对角色增加了更多约束条件。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-RBAC-2.png\"></p>\n<p>如<strong>角色互斥</strong>，比较经典的案例是财务系统中出纳不得兼管稽核，那么在赋予财务系统操作人员角色时，同一个操作员不能同时拥有出纳和稽核两个角色。</p>\n<p>如<strong>角色数量限制</strong>，例如：一个角色专门为公司 CEO 创建的，最后发现公司有 10 个人拥有 CEO 角色，一个公司有 10 个 CEO？这就是对角色数量的限制，它指的是有多少用户能拥有这个角色。</p>\n<p><strong>RBAC2</strong> 模型主要是为了增加角色赋予的限制条件，这也符合权限系统的目标：权责明确，系统使用安全、保密。</p>\n<h1 id=\"4-RBAC3-模型\"><a href=\"#4-RBAC3-模型\" class=\"headerlink\" title=\"4. RBAC3 模型\"></a>4. RBAC3 模型</h1><p>同样是基于 <strong>RBAC0</strong> 模型，但是综合了 <strong>RBAC1</strong> 和 <strong>RBAC2</strong> 的所有特点</p>\n<p>这里就不在多描述，读者返回去看 <strong>RBAC1</strong> 和 <strong>RBAC2</strong> 模型的描述即可。</p>\n<h1 id=\"RBAC-权限管理的在实际系统中的应用\"><a href=\"#RBAC-权限管理的在实际系统中的应用\" class=\"headerlink\" title=\"RBAC 权限管理的在实际系统中的应用\"></a>RBAC 权限管理的在实际系统中的应用</h1><p>RBAC 权限模型由三大部分构成，即<strong>用户管理</strong>、<strong>角色管理</strong>、<strong>权限管理</strong>。</p>\n<p>用户管理按照企业架构或业务线架构来划分，这些结构本身比较清晰，扩展性和可读性都非常好。</p>\n<p>角色管理一定要在深入理解业务逻辑后再来设计，一般使用各部门真实的角色作为基础，再根据业务逻辑进行扩展。</p>\n<p>权限管理是前两种管理的再加固，做太细容易太碎片，做太粗又不够安全，这里我们需要根据经验和实际情况来设计。</p>\n<h1 id=\"1-用户管理\"><a href=\"#1-用户管理\" class=\"headerlink\" title=\"1.用户管理\"></a>1.用户管理</h1><p>用户管理中的用户，是企业里每一位员工，他们本身就有自己的组织架构，我们可以直接使用企业部门架构或者业务线架构来作为线索，构建用户管理系统。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png\"></p>\n<p><strong>需要特殊注意</strong>：实际业务中的组织架构可能与企业部门架构、业务线架构不同，需要考虑数据共享机制，一般的做法为授权某个人、某个角色组共享某个组织层级的某个对象组数据。</p>\n<h1 id=\"2-角色管理\"><a href=\"#2-角色管理\" class=\"headerlink\" title=\"2.角色管理\"></a>2.角色管理</h1><p>在设计系统角色时，我们应该深入理解公司架构、业务架构后，再根据需求设计角色及角色内的等级。</p>\n<p>一般角色相对于用户来说是固定不变的，每个角色都有自己明确的权限和限制，这些权限在系统设计之处就确定了，之后也轻易不会再变动。</p>\n<h1 id=\"1-自动获得基础角色\"><a href=\"#1-自动获得基础角色\" class=\"headerlink\" title=\"1. 自动获得基础角色\"></a>1. 自动获得基础角色</h1><p>当员工入职到某部门时，该名员工的账号应该自动被加入该部门对应的基础角色中，并拥有对应的基础权限。这种操作是为了保证系统安全的前提下，减少了管理员大量手动操作。使新入职员工能快速使用系统，提高工作效率。</p>\n<h1 id=\"2-临时角色与失效时间\"><a href=\"#2-临时角色与失效时间\" class=\"headerlink\" title=\"2. 临时角色与失效时间\"></a>2. 临时角色与失效时间</h1><p>公司业务有时需要外援来支持，他们并不属于公司员工，也只是在某个时段在公司做支持。此时我们需要设置临时角色，来应对这种可能跨多部门协作的临时员工。</p>\n<p>如果公司安全级别较高，此类账号默认有固定失效时间，到达失效时间需再次审核才能重新开启。避免临时账号因为流程不完善，遗忘在系统中，引起安全隐患。</p>\n<h1 id=\"3-虚拟角色\"><a href=\"#3-虚拟角色\" class=\"headerlink\" title=\"3. 虚拟角色\"></a>3. 虚拟角色</h1><p>部门角色中的等级，可以授权同等级的员工拥有相同的权限，但某些员工因工作原因，需要调用角色等级之外的权限，相同等级不同员工需要使用的权限还不相同。</p>\n<p>这种超出角色等级又合理的权限授予，我们可以设置虚拟角色。这一虚拟角色可集成这一工作所需的所有权限，然后将它赋予具体的员工即可。这样即不用调整组织架构和对应的角色，也可以满足工作中特殊情况的权限需求。</p>\n<h1 id=\"4-黑白名单\"><a href=\"#4-黑白名单\" class=\"headerlink\" title=\"4. 黑白名单\"></a>4. 黑白名单</h1><p><strong>白名单</strong>：某些用户自身不拥有某部门的顶级角色，但处于业务需求，需要给他角色外的高级权限，那么我们可以设计限制范围的白名单，将需要的用户添加进去即可。</p>\n<p>在安全流程中，我们仅需要对白名单设计安全流程，即可审核在白名单中的特殊用户，做到监控拥有特殊权限的用户，减少安全隐患。</p>\n<p><strong>黑名单</strong>：比较常见的黑名单场景是某些犯了错误的员工，虽然在职，但已经不能给他们任何公司权限了。这种既不能取消角色关联，也不能完全停用账号的情况，可以设置黑名单，让此类用户可以登录账号，查看基本信息，但大多数关键权限已经被黑名单限制。</p>\n<h1 id=\"3-权限管理\"><a href=\"#3-权限管理\" class=\"headerlink\" title=\"3. 权限管理\"></a>3. 权限管理</h1><p>权限管理一般从三个方面来做限制。<strong>页面&#x2F;菜单权限</strong>，<strong>操作权限</strong>，<strong>数据权限</strong>。</p>\n<p><img src=\"/./img/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.png\"></p>\n<h1 id=\"1-页面-菜单权限\"><a href=\"#1-页面-菜单权限\" class=\"headerlink\" title=\"1. 页面&#x2F;菜单权限\"></a>1. 页面&#x2F;菜单权限</h1><p>对于没有权限操作的用户，直接隐藏对应的页面入口或菜单选项。这种方法简单快捷直接，对于一些安全不太敏感的权限，使用这种方式非常高效。</p>\n<h1 id=\"2-操作权限\"><a href=\"#2-操作权限\" class=\"headerlink\" title=\"2. 操作权限\"></a>2. 操作权限</h1><p>操作权限通常是指对同一组数据，不同的用户是否可以增删改查。对某些用户来说是只读浏览数据，对某些用户来说是可编辑的数据。</p>\n<h1 id=\"3-数据权限\"><a href=\"#3-数据权限\" class=\"headerlink\" title=\"3. 数据权限\"></a>3. 数据权限</h1><p>对于安全需求高的权限管理，仅从前端限制隐藏菜单，隐藏编辑按钮是不够的，还需要在数接口上做限制。如果用户试图通过非法手段编辑不属于自己权限下的数据，服务器端会识别、记录并限制访问。</p>\n<h1 id=\"4-数据权限如何管控\"><a href=\"#4-数据权限如何管控\" class=\"headerlink\" title=\"4. 数据权限如何管控\"></a>4. 数据权限如何管控</h1><p>数据权限可以分为行权限和列权限。行权限控制：看多少条数据。列权限控制：看一条数据的多少个字段</p>\n<p>简单系统中可以通过组织架构来管控行权限，按照角色来配置列权限，但是遇到复杂情况，组织架构是承载不了复杂行权限管控，角色也更不能承载列的特殊化展示。</p>\n<p>目前行业的做法是提供行列级数据权规则配置，把规则当成类似权限点配置赋予某个角色或者某个用户。</p>\n<h1 id=\"用户管理系统权限设计中的更多实践细节\"><a href=\"#用户管理系统权限设计中的更多实践细节\" class=\"headerlink\" title=\"用户管理系统权限设计中的更多实践细节\"></a>用户管理系统权限设计中的更多实践细节</h1><h1 id=\"1-超级管理员\"><a href=\"#1-超级管理员\" class=\"headerlink\" title=\"1.超级管理员\"></a>1.超级管理员</h1><p>超级管理员是用来启动系统，配置系统的账号。这个账号应该在配置好系统，创建管理员之后被隐藏起来。超级管理员账号拥有系统中全部权限，可穿梭查看各部门数据，如果使用不恰当，是系统管理的安全隐患。</p>\n<h1 id=\"2-互斥角色如何处理\"><a href=\"#2-互斥角色如何处理\" class=\"headerlink\" title=\"2.互斥角色如何处理\"></a>2.互斥角色如何处理</h1><p>当用户已经有用的角色和即将添加的角色互相互斥时，应该在添加新角色时，提示管理员因角色互斥的原因，无法进行新角色添加。如需添加，要先撤销掉前一个角色，再添加新角色。</p>\n<h1 id=\"3-用户管理权限系统设计一定要简单清晰\"><a href=\"#3-用户管理权限系统设计一定要简单清晰\" class=\"headerlink\" title=\"3.用户管理权限系统设计一定要简单清晰\"></a>3.用户管理权限系统设计一定要简单清晰</h1><p>在设计权限系统之处，一定要理清思路，一切从简，能不增加的多余角色和权限逻辑，就一定不要增加。因为随着公司业务的扩大，权限和角色也会随之增多，如果初期设计思路不严谨，那么权限系统会随着业务的扩大而无限混乱下去，此时再来整理权限，已经太晚了。所以初期设计就一定要条理清晰，简单明了，能避免后续非常多不必要的麻烦。</p>\n<h1 id=\"4-无权提示页\"><a href=\"#4-无权提示页\" class=\"headerlink\" title=\"4.无权提示页\"></a>4.无权提示页</h1><p>有时员工 A 会直接给员工 B 分享他当下正在操作的页面，但有可能员工 B 无权查看。此时我们应该在这里考虑添加「无权提示页」，避免粗暴的 404 页面让员工 B 以为是系统出错了。</p>\n<blockquote>\n<p>原文链接：<a href=\"https://mp.weixin.qq.com/s/FnBgM4m593e8M/_UkJ/_RWSg\">https://mp.weixin.qq.com/s/FnBgM4m593e8M\\_UkJ\\_RWSg</a></p>\n</blockquote>\n"},{"title":"PVE版Homeassistant的ip和网关设置","date":"2024-12-04T15:06:52.000Z","_content":"\n\n# PVE版Homeassistant的ip和网关设置\n\n[PVE版Homeassistant的ip和网关设置 - 天涯笔记](https://www.ymyc.site/archives/439/)\n\n\n```bash\nlogin  #命令行输入login\nnmcli dev status   #查看当前网络\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/145159119.png)[https://www.ymyc.site/usr/uploads/2024/06/145159119.png](https://www.ymyc.site/usr/uploads/2024/06/145159119.png)\n\n```bash\nnmcli con edit \"Supervisor enp6s18\"   #改为自己的网口名字\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/1073460911.png)[https://www.ymyc.site/usr/uploads/2024/06/1073460911.png](https://www.ymyc.site/usr/uploads/2024/06/1073460911.png)\n\n```bash\nprint ipv4  #查看网络配置\nset ipv4.addresses 192.168.31.205/24 # 设置ip\nset ipv4.dns 192.168.31.10  # 设置DNS\nset ipv4.gateway 192.168.31.10  # 设置网关\nprint ipv4 #查看修改后的网络配置\nsave #保存配置\nquit #退出配置\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/3762396971.png)[https://www.ymyc.site/usr/uploads/2024/06/3762396971.png](https://www.ymyc.site/usr/uploads/2024/06/3762396971.png)\n\n```bash\nnmcli con reload  #启用新的网络配置\n```","source":"_posts/沙堆/PVE版Homeassistant的ip和网关设置.md","raw":"---\ntitle: PVE版Homeassistant的ip和网关设置\ndate: 2024-12-04 23:06:52\ncategories:\n  - home assistant\ntags:\n  - home assistant\n---\n\n\n# PVE版Homeassistant的ip和网关设置\n\n[PVE版Homeassistant的ip和网关设置 - 天涯笔记](https://www.ymyc.site/archives/439/)\n\n\n```bash\nlogin  #命令行输入login\nnmcli dev status   #查看当前网络\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/145159119.png)[https://www.ymyc.site/usr/uploads/2024/06/145159119.png](https://www.ymyc.site/usr/uploads/2024/06/145159119.png)\n\n```bash\nnmcli con edit \"Supervisor enp6s18\"   #改为自己的网口名字\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/1073460911.png)[https://www.ymyc.site/usr/uploads/2024/06/1073460911.png](https://www.ymyc.site/usr/uploads/2024/06/1073460911.png)\n\n```bash\nprint ipv4  #查看网络配置\nset ipv4.addresses 192.168.31.205/24 # 设置ip\nset ipv4.dns 192.168.31.10  # 设置DNS\nset ipv4.gateway 192.168.31.10  # 设置网关\nprint ipv4 #查看修改后的网络配置\nsave #保存配置\nquit #退出配置\n```\n\n![](https://www.ymyc.site/usr/uploads/2024/06/3762396971.png)[https://www.ymyc.site/usr/uploads/2024/06/3762396971.png](https://www.ymyc.site/usr/uploads/2024/06/3762396971.png)\n\n```bash\nnmcli con reload  #启用新的网络配置\n```","slug":"沙堆/PVE版Homeassistant的ip和网关设置","published":1,"updated":"2024-12-04T15:08:24.407Z","_id":"cmdkilrbz00027ctzcaqx7yri","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"PVE版Homeassistant的ip和网关设置\"><a href=\"#PVE版Homeassistant的ip和网关设置\" class=\"headerlink\" title=\"PVE版Homeassistant的ip和网关设置\"></a>PVE版Homeassistant的ip和网关设置</h1><p><a href=\"https://www.ymyc.site/archives/439/\">PVE版Homeassistant的ip和网关设置 - 天涯笔记</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login  <span class=\"comment\">#命令行输入login</span></span><br><span class=\"line\">nmcli dev status   <span class=\"comment\">#查看当前网络</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/145159119.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/145159119.png\">https://www.ymyc.site/usr/uploads/2024/06/145159119.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli con edit <span class=\"string\">&quot;Supervisor enp6s18&quot;</span>   <span class=\"comment\">#改为自己的网口名字</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/1073460911.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/1073460911.png\">https://www.ymyc.site/usr/uploads/2024/06/1073460911.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ipv4  <span class=\"comment\">#查看网络配置</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.addresses 192.168.31.205/24 <span class=\"comment\"># 设置ip</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.dns 192.168.31.10  <span class=\"comment\"># 设置DNS</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.gateway 192.168.31.10  <span class=\"comment\"># 设置网关</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ipv4 <span class=\"comment\">#查看修改后的网络配置</span></span><br><span class=\"line\">save <span class=\"comment\">#保存配置</span></span><br><span class=\"line\">quit <span class=\"comment\">#退出配置</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/3762396971.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/3762396971.png\">https://www.ymyc.site/usr/uploads/2024/06/3762396971.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli con reload  <span class=\"comment\">#启用新的网络配置</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"PVE版Homeassistant的ip和网关设置\"><a href=\"#PVE版Homeassistant的ip和网关设置\" class=\"headerlink\" title=\"PVE版Homeassistant的ip和网关设置\"></a>PVE版Homeassistant的ip和网关设置</h1><p><a href=\"https://www.ymyc.site/archives/439/\">PVE版Homeassistant的ip和网关设置 - 天涯笔记</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login  <span class=\"comment\">#命令行输入login</span></span><br><span class=\"line\">nmcli dev status   <span class=\"comment\">#查看当前网络</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/145159119.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/145159119.png\">https://www.ymyc.site/usr/uploads/2024/06/145159119.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli con edit <span class=\"string\">&quot;Supervisor enp6s18&quot;</span>   <span class=\"comment\">#改为自己的网口名字</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/1073460911.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/1073460911.png\">https://www.ymyc.site/usr/uploads/2024/06/1073460911.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> ipv4  <span class=\"comment\">#查看网络配置</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.addresses 192.168.31.205/24 <span class=\"comment\"># 设置ip</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.dns 192.168.31.10  <span class=\"comment\"># 设置DNS</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ipv4.gateway 192.168.31.10  <span class=\"comment\"># 设置网关</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> ipv4 <span class=\"comment\">#查看修改后的网络配置</span></span><br><span class=\"line\">save <span class=\"comment\">#保存配置</span></span><br><span class=\"line\">quit <span class=\"comment\">#退出配置</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.ymyc.site/usr/uploads/2024/06/3762396971.png\"><a href=\"https://www.ymyc.site/usr/uploads/2024/06/3762396971.png\">https://www.ymyc.site/usr/uploads/2024/06/3762396971.png</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli con reload  <span class=\"comment\">#启用新的网络配置</span></span><br></pre></td></tr></table></figure>"},{"title":"【投票】项目开发日记","date":"2025-07-26T17:19:51.000Z","_content":"\n# 【投票】项目开发日记\n\n### 简述\n\n起先是闲扯群里人越来越多，偶尔有些稍有猎奇的玩笑话，后来给某些经常有猎奇发言的人进行了【变态等级】定级，也恰好是有时间，便用 python 简单写了 300+ 行代码，放在公司服务器供大家投票、记录变态等级。\n后来有些人在榜单中添加了美食、纪念堂等等一些榜单，这些暗合我之前设想的【辨明】项目的一部分，也恰逢公司网络管控，一些同学无法访问内网站点，于是公网项目被提上日程\n\n### 需求记录\n\n1. 项目首页为投票榜单，展示所有榜单，提供榜单导航\n2. 登录用户可以添加榜单，创建者为榜单管理员，拥有榜单的一定编辑权限\n3. 榜单管理员不应该有用榜单的全部编辑权限，以防止管理员修改涉及自身的项目，如管理员的【变态等级】榜单昵称，这种榜单编辑应该触发编辑事件，编辑事件是否成功油榜单成员决定\n4. 榜单有【通告】功能，以实现某些投票功能\n5. 可以发起临时投票，以解决变更通告投票问题\n4. 身份标识候选： 邮箱、电话、微信、QQ、匿名、ipv6地址\n\n\n1. 榜单、投票项、临时投票、榜单通告\n\n#### 表结构\n\n用户：  \nid，账号， 密码哈希，name，邮箱，电话，微信，QQ，头像，创建时间，最后修改时间，删除时间，是否删除\n\n榜单： rank_list    \nid，榜单名，榜单描述，头像，赞同名称，反对名称, 创建者id，  创建时间，最后修改时间，删除时间，是否删除\n\n投票项：\nid，榜单id，名称，描述，头像，票数，  创建时间，最后修改时间，删除时间，是否删除\n\n榜单通告：rank_list_announcement  \nid, 榜单id， 名称，描述，内容，过期时间，创建时间，最后修改时间，删除时间，是否删除\n\n修改申请表：\nid， 修改项目（榜单/投票项），目标id，目标操作，目标值，过期时间，创建时间，最后修改时间，删除时间，是否删除\n\n\n\n#### 25年7月26日\n\n思路有些混乱，定实体关系时发现权限管控有些复杂，事实上对行级数据权限进行管理的案例还是比较少，今天了解了 ABAC 权限控制，有了些许眉目，明天需要在了解下用户登录方面的权限控制，\n另外需要将表结构设计一下\n\n#### 25年7月29日\n\n进度有点慢，今天刚刚建完表，修改操作太复杂了，需要思考的细节太多，还是先上线基础功能吧\n\n#### 25年7月31日\n\nCRUD已基本打通，梳理下接下来的主要工作  \n1. 用户登录、权限管理，session管理\n2. nginx单端口代理前后端\n\n#### 25年8月6日\n\n后端 jwt 认证已基本完成 oauth2 github 授权登录仍需要设计一下  \n问题与待办：  \n1. lombok 不可使用问题 （编译无问题，运行报错，找不到方法）\n2. github 认证流程实现\n3. 前端编码","source":"_posts/【投票】项目开发日记.md","raw":"---\ntitle: 【投票】项目开发日记\ndate: 2025-07-27 01:19:51\ncategories:\ntags:\n---\n\n# 【投票】项目开发日记\n\n### 简述\n\n起先是闲扯群里人越来越多，偶尔有些稍有猎奇的玩笑话，后来给某些经常有猎奇发言的人进行了【变态等级】定级，也恰好是有时间，便用 python 简单写了 300+ 行代码，放在公司服务器供大家投票、记录变态等级。\n后来有些人在榜单中添加了美食、纪念堂等等一些榜单，这些暗合我之前设想的【辨明】项目的一部分，也恰逢公司网络管控，一些同学无法访问内网站点，于是公网项目被提上日程\n\n### 需求记录\n\n1. 项目首页为投票榜单，展示所有榜单，提供榜单导航\n2. 登录用户可以添加榜单，创建者为榜单管理员，拥有榜单的一定编辑权限\n3. 榜单管理员不应该有用榜单的全部编辑权限，以防止管理员修改涉及自身的项目，如管理员的【变态等级】榜单昵称，这种榜单编辑应该触发编辑事件，编辑事件是否成功油榜单成员决定\n4. 榜单有【通告】功能，以实现某些投票功能\n5. 可以发起临时投票，以解决变更通告投票问题\n4. 身份标识候选： 邮箱、电话、微信、QQ、匿名、ipv6地址\n\n\n1. 榜单、投票项、临时投票、榜单通告\n\n#### 表结构\n\n用户：  \nid，账号， 密码哈希，name，邮箱，电话，微信，QQ，头像，创建时间，最后修改时间，删除时间，是否删除\n\n榜单： rank_list    \nid，榜单名，榜单描述，头像，赞同名称，反对名称, 创建者id，  创建时间，最后修改时间，删除时间，是否删除\n\n投票项：\nid，榜单id，名称，描述，头像，票数，  创建时间，最后修改时间，删除时间，是否删除\n\n榜单通告：rank_list_announcement  \nid, 榜单id， 名称，描述，内容，过期时间，创建时间，最后修改时间，删除时间，是否删除\n\n修改申请表：\nid， 修改项目（榜单/投票项），目标id，目标操作，目标值，过期时间，创建时间，最后修改时间，删除时间，是否删除\n\n\n\n#### 25年7月26日\n\n思路有些混乱，定实体关系时发现权限管控有些复杂，事实上对行级数据权限进行管理的案例还是比较少，今天了解了 ABAC 权限控制，有了些许眉目，明天需要在了解下用户登录方面的权限控制，\n另外需要将表结构设计一下\n\n#### 25年7月29日\n\n进度有点慢，今天刚刚建完表，修改操作太复杂了，需要思考的细节太多，还是先上线基础功能吧\n\n#### 25年7月31日\n\nCRUD已基本打通，梳理下接下来的主要工作  \n1. 用户登录、权限管理，session管理\n2. nginx单端口代理前后端\n\n#### 25年8月6日\n\n后端 jwt 认证已基本完成 oauth2 github 授权登录仍需要设计一下  \n问题与待办：  \n1. lombok 不可使用问题 （编译无问题，运行报错，找不到方法）\n2. github 认证流程实现\n3. 前端编码","slug":"【投票】项目开发日记","published":1,"updated":"2025-08-05T19:16:47.951Z","_id":"cmdkkfbpp00001stzfe7wgg2u","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"【投票】项目开发日记\"><a href=\"#【投票】项目开发日记\" class=\"headerlink\" title=\"【投票】项目开发日记\"></a>【投票】项目开发日记</h1><h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>起先是闲扯群里人越来越多，偶尔有些稍有猎奇的玩笑话，后来给某些经常有猎奇发言的人进行了【变态等级】定级，也恰好是有时间，便用 python 简单写了 300+ 行代码，放在公司服务器供大家投票、记录变态等级。<br>后来有些人在榜单中添加了美食、纪念堂等等一些榜单，这些暗合我之前设想的【辨明】项目的一部分，也恰逢公司网络管控，一些同学无法访问内网站点，于是公网项目被提上日程</p>\n<h3 id=\"需求记录\"><a href=\"#需求记录\" class=\"headerlink\" title=\"需求记录\"></a>需求记录</h3><ol>\n<li><p>项目首页为投票榜单，展示所有榜单，提供榜单导航</p>\n</li>\n<li><p>登录用户可以添加榜单，创建者为榜单管理员，拥有榜单的一定编辑权限</p>\n</li>\n<li><p>榜单管理员不应该有用榜单的全部编辑权限，以防止管理员修改涉及自身的项目，如管理员的【变态等级】榜单昵称，这种榜单编辑应该触发编辑事件，编辑事件是否成功油榜单成员决定</p>\n</li>\n<li><p>榜单有【通告】功能，以实现某些投票功能</p>\n</li>\n<li><p>可以发起临时投票，以解决变更通告投票问题</p>\n</li>\n<li><p>身份标识候选： 邮箱、电话、微信、QQ、匿名、ipv6地址</p>\n</li>\n<li><p>榜单、投票项、临时投票、榜单通告</p>\n</li>\n</ol>\n<h4 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h4><p>用户：<br>id，账号， 密码哈希，name，邮箱，电话，微信，QQ，头像，创建时间，最后修改时间，删除时间，是否删除</p>\n<p>榜单： rank_list<br>id，榜单名，榜单描述，头像，赞同名称，反对名称, 创建者id，  创建时间，最后修改时间，删除时间，是否删除</p>\n<p>投票项：<br>id，榜单id，名称，描述，头像，票数，  创建时间，最后修改时间，删除时间，是否删除</p>\n<p>榜单通告：rank_list_announcement<br>id, 榜单id， 名称，描述，内容，过期时间，创建时间，最后修改时间，删除时间，是否删除</p>\n<p>修改申请表：<br>id， 修改项目（榜单&#x2F;投票项），目标id，目标操作，目标值，过期时间，创建时间，最后修改时间，删除时间，是否删除</p>\n<h4 id=\"25年7月26日\"><a href=\"#25年7月26日\" class=\"headerlink\" title=\"25年7月26日\"></a>25年7月26日</h4><p>思路有些混乱，定实体关系时发现权限管控有些复杂，事实上对行级数据权限进行管理的案例还是比较少，今天了解了 ABAC 权限控制，有了些许眉目，明天需要在了解下用户登录方面的权限控制，<br>另外需要将表结构设计一下</p>\n<h4 id=\"25年7月29日\"><a href=\"#25年7月29日\" class=\"headerlink\" title=\"25年7月29日\"></a>25年7月29日</h4><p>进度有点慢，今天刚刚建完表，修改操作太复杂了，需要思考的细节太多，还是先上线基础功能吧</p>\n<h4 id=\"25年7月31日\"><a href=\"#25年7月31日\" class=\"headerlink\" title=\"25年7月31日\"></a>25年7月31日</h4><p>CRUD已基本打通，梳理下接下来的主要工作  </p>\n<ol>\n<li>用户登录、权限管理，session管理</li>\n<li>nginx单端口代理前后端</li>\n</ol>\n<h4 id=\"25年8月6日\"><a href=\"#25年8月6日\" class=\"headerlink\" title=\"25年8月6日\"></a>25年8月6日</h4><p>后端 jwt 认证已基本完成 oauth2 github 授权登录仍需要设计一下<br>问题与待办：  </p>\n<ol>\n<li>lombok 不可使用问题 （编译无问题，运行报错，找不到方法）</li>\n<li>github 认证流程实现</li>\n<li>前端编码</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"【投票】项目开发日记\"><a href=\"#【投票】项目开发日记\" class=\"headerlink\" title=\"【投票】项目开发日记\"></a>【投票】项目开发日记</h1><h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>起先是闲扯群里人越来越多，偶尔有些稍有猎奇的玩笑话，后来给某些经常有猎奇发言的人进行了【变态等级】定级，也恰好是有时间，便用 python 简单写了 300+ 行代码，放在公司服务器供大家投票、记录变态等级。<br>后来有些人在榜单中添加了美食、纪念堂等等一些榜单，这些暗合我之前设想的【辨明】项目的一部分，也恰逢公司网络管控，一些同学无法访问内网站点，于是公网项目被提上日程</p>\n<h3 id=\"需求记录\"><a href=\"#需求记录\" class=\"headerlink\" title=\"需求记录\"></a>需求记录</h3><ol>\n<li><p>项目首页为投票榜单，展示所有榜单，提供榜单导航</p>\n</li>\n<li><p>登录用户可以添加榜单，创建者为榜单管理员，拥有榜单的一定编辑权限</p>\n</li>\n<li><p>榜单管理员不应该有用榜单的全部编辑权限，以防止管理员修改涉及自身的项目，如管理员的【变态等级】榜单昵称，这种榜单编辑应该触发编辑事件，编辑事件是否成功油榜单成员决定</p>\n</li>\n<li><p>榜单有【通告】功能，以实现某些投票功能</p>\n</li>\n<li><p>可以发起临时投票，以解决变更通告投票问题</p>\n</li>\n<li><p>身份标识候选： 邮箱、电话、微信、QQ、匿名、ipv6地址</p>\n</li>\n<li><p>榜单、投票项、临时投票、榜单通告</p>\n</li>\n</ol>\n<h4 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h4><p>用户：<br>id，账号， 密码哈希，name，邮箱，电话，微信，QQ，头像，创建时间，最后修改时间，删除时间，是否删除</p>\n<p>榜单： rank_list<br>id，榜单名，榜单描述，头像，赞同名称，反对名称, 创建者id，  创建时间，最后修改时间，删除时间，是否删除</p>\n<p>投票项：<br>id，榜单id，名称，描述，头像，票数，  创建时间，最后修改时间，删除时间，是否删除</p>\n<p>榜单通告：rank_list_announcement<br>id, 榜单id， 名称，描述，内容，过期时间，创建时间，最后修改时间，删除时间，是否删除</p>\n<p>修改申请表：<br>id， 修改项目（榜单&#x2F;投票项），目标id，目标操作，目标值，过期时间，创建时间，最后修改时间，删除时间，是否删除</p>\n<h4 id=\"25年7月26日\"><a href=\"#25年7月26日\" class=\"headerlink\" title=\"25年7月26日\"></a>25年7月26日</h4><p>思路有些混乱，定实体关系时发现权限管控有些复杂，事实上对行级数据权限进行管理的案例还是比较少，今天了解了 ABAC 权限控制，有了些许眉目，明天需要在了解下用户登录方面的权限控制，<br>另外需要将表结构设计一下</p>\n<h4 id=\"25年7月29日\"><a href=\"#25年7月29日\" class=\"headerlink\" title=\"25年7月29日\"></a>25年7月29日</h4><p>进度有点慢，今天刚刚建完表，修改操作太复杂了，需要思考的细节太多，还是先上线基础功能吧</p>\n<h4 id=\"25年7月31日\"><a href=\"#25年7月31日\" class=\"headerlink\" title=\"25年7月31日\"></a>25年7月31日</h4><p>CRUD已基本打通，梳理下接下来的主要工作  </p>\n<ol>\n<li>用户登录、权限管理，session管理</li>\n<li>nginx单端口代理前后端</li>\n</ol>\n<h4 id=\"25年8月6日\"><a href=\"#25年8月6日\" class=\"headerlink\" title=\"25年8月6日\"></a>25年8月6日</h4><p>后端 jwt 认证已基本完成 oauth2 github 授权登录仍需要设计一下<br>问题与待办：  </p>\n<ol>\n<li>lombok 不可使用问题 （编译无问题，运行报错，找不到方法）</li>\n<li>github 认证流程实现</li>\n<li>前端编码</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clxj6uzty0001vwuy7bfw5eob","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj6uzu70004vwuyh4rq1she"},{"post_id":"clxj6uztj0000vwuy6qf5hvux","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj6wx640006vwuybw58f2ja"},{"post_id":"clxj7to36000abkuyetca7tbq","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj7to36000dbkuyhg1e18oc"},{"post_id":"clxj7to37000ebkuy4uaqdv37","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj7to37000hbkuy1m2zhzp9"},{"post_id":"clxj8ca34000tbkuy2lkmasvi","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj8ca34000wbkuyaf1ucvy0"},{"post_id":"clxj8ca35000xbkuy8fsabsoh","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj8ca350010bkuy994lhzjy"},{"post_id":"clxj8i7i9001abkuy6t2a3kz4","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"clxj8i7i9001dbkuyduaw0dux"},{"post_id":"clxm2j6i10004g4uycoilh9sx","category_id":"clxm2j6i8000ag4uydluo5dcw","_id":"clxm2j6id000ng4uy8nx6buj3"},{"post_id":"clxm2j6ic000kg4uygujt9esz","category_id":"clxm2j6ib000ig4uyev4gdov2","_id":"clxm2j6id000qg4uy04xcaocq"},{"post_id":"clxm2j6i70009g4uyavx44rxy","category_id":"clxm2j6ib000ig4uyev4gdov2","_id":"clxm2j6ie000tg4uy39te5k4w"},{"post_id":"clxm2j6i9000dg4uy6l9wh2tw","category_id":"clxm2j6ib000ig4uyev4gdov2","_id":"clxm2j6ie000vg4uyh5zy3e8d"},{"post_id":"clxm2j6ic000mg4uyfy06epeo","category_id":"clxm2j6ie000rg4uye6ewa7l5","_id":"clxm2j6if000yg4uy63xcd517"},{"post_id":"clxm2j6in001bg4uyesnh1x8r","category_id":"clxm2j6ie000rg4uye6ewa7l5","_id":"clxm2j6iv001dg4uy31pf8emz"},{"post_id":"clxm54wns00067guy5rpq73we","category_id":"clxm54wnn00037guyf5th28ay","_id":"clxm54wnw000d7guyheo18yjj"},{"post_id":"clxm54wnl00017guy0fg09mgm","category_id":"clxm54wnn00037guyf5th28ay","_id":"clxm54wnx000g7guybdabhbqt"},{"post_id":"clxm54wnw000f7guycootd1dn","category_id":"clxm54wnw000e7guy699h3qdm","_id":"clxm54wo2000n7guy28uygorr"},{"post_id":"clxm54wns00077guy5f6n0gie","category_id":"clxm54wnw000e7guy699h3qdm","_id":"clxm54wo2000q7guy3wrpetut"},{"post_id":"clxm54wnx000i7guy3wtaa1bj","category_id":"clxm54wnw000e7guy699h3qdm","_id":"clxm54wo3000s7guyfbbmc5i8"},{"post_id":"clxm54wnv000b7guy66rv65m1","category_id":"clxm54wnw000e7guy699h3qdm","_id":"clxm54wo4000v7guy06s6e5a0"},{"post_id":"clxm54wo2000p7guy1xzx5d24","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo4000x7guyf89ocmsx"},{"post_id":"clxm54wnv000c7guybqqm866c","category_id":"clxm54wnw000e7guy699h3qdm","_id":"clxm54wo500117guy60g90nc8"},{"post_id":"clxm54wo3000r7guy433n2nzh","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo500147guyfvuj79zc"},{"post_id":"clxm54wo3000u7guyfq6pg13k","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo600167guydyol1amv"},{"post_id":"clxm54wo4000w7guybc6fcyvs","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo600197guy52hi7biy"},{"post_id":"clxm54wo4000z7guyfvjmd2lu","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo6001b7guyh8xh7uze"},{"post_id":"clxm54wo500137guyax67awe4","category_id":"clxm2j6hz0002g4uyd6ph51x6","_id":"clxm54wo7001d7guyb4g2do9r"},{"post_id":"clxm59gjq000064uy3t9m8i5f","category_id":"clxm59gjv000164uygl0c7ily","_id":"clxm59gk0000264uy54idbp00"},{"post_id":"clxm59gk9000364uy3y6n8hq9","category_id":"clxm59gjv000164uygl0c7ily","_id":"clxm59gka000464uya07z87gf"},{"post_id":"cly7d19v400050ouy0g1mbcq8","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19va000d0ouyasucgm1s"},{"post_id":"cly7d19ur00000ouy96sg2819","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vc000i0ouy4ubja2f7"},{"post_id":"cly7d19v500060ouy6uip39kr","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vd000l0ouy4ujbb339"},{"post_id":"cly7d19v8000a0ouybcgqfrtc","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19ve000p0ouycrvh5kit"},{"post_id":"cly7d19uu00010ouy8p362l2q","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vf000s0ouyc09a7xgg"},{"post_id":"cly7d19va000c0ouy20saf8vb","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vg000x0ouyhr8x75px"},{"post_id":"cly7d19vb000h0ouyd0pgh4k2","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vh00100ouy5cr0bj9j"},{"post_id":"cly7d19v300040ouy21kjd0lb","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vi00150ouybcgdaedj"},{"post_id":"cly7d19vc000k0ouyeij8fgdj","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vj00170ouydhhk3iny"},{"post_id":"cly7d19vh000z0ouyc8gnexve","category_id":"cly7d19vg000u0ouy30grgosk","_id":"cly7d19vk001b0ouyaezabzfy"},{"post_id":"cly7d19ve000o0ouydqow1yah","category_id":"cly7d19vg000u0ouy30grgosk","_id":"cly7d19vm001e0ouy5mkug73f"},{"post_id":"cly7d19vi00130ouycwdkbzd5","category_id":"cly7d19vg000u0ouy30grgosk","_id":"cly7d19vn001j0ouyerpjb9iu"},{"post_id":"cly7d19vf000r0ouyd2yw1qed","category_id":"cly7d19vg000u0ouy30grgosk","_id":"cly7d19vo001m0ouy2zvw3z11"},{"post_id":"cly7d19vg000w0ouy4lms3cog","category_id":"cly7d19vg000u0ouy30grgosk","_id":"cly7d19vo001p0ouy6zz6bs1b"},{"post_id":"cly7d19vn001l0ouyf4yzgijm","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vp001s0ouyfdnmf957"},{"post_id":"cly7d19vn001l0ouyf4yzgijm","category_id":"cly7d19vn001i0ouyfu141uc6","_id":"cly7d19vq001u0ouy5vd5hiw9"},{"post_id":"cly7d19vi00160ouyhdn1fwrn","category_id":"cly7d19uw00020ouy9q0j84sc","_id":"cly7d19vq001v0ouy9si3h8e6"},{"post_id":"cly7d19vi00160ouyhdn1fwrn","category_id":"cly7d19vn001i0ouyfu141uc6","_id":"cly7d19vq001y0ouy0imwbtwe"},{"post_id":"cly7d3xfk0000fsuyc0oi8j6o","category_id":"cly7d19vo001q0ouy47dn6czf","_id":"cly7d3xfr0004fsuyc15k1n2r"},{"post_id":"cly7d3xfo0001fsuy0ue41npw","category_id":"cly7d19vo001q0ouy47dn6czf","_id":"cly7d3xfs0006fsuy5lpb4w4q"},{"post_id":"cly7e80ab0001jwuy00kl1nv1","category_id":"cly7d19vo001q0ouy47dn6czf","_id":"cly7e80as0005jwuy837q167b"},{"post_id":"cly7d3xfo0001fsuy0ue41npw","category_id":"cly7e80ar0004jwuy94d496ag","_id":"cly7e80b0000djwuy9k5gg7h8"},{"post_id":"cm0xuykfh00011ouy6junf3ya","category_id":"cly7d19vo001q0ouy47dn6czf","_id":"cm0xuykfu00051ouyfzl513gx"},{"post_id":"cm0xuykfh00011ouy6junf3ya","category_id":"cly7e80ar0004jwuy94d496ag","_id":"cm0xuykfu00061ouy96l4g112"},{"post_id":"cm0xuykfj00021ouy5ofsd0xz","category_id":"clxm2j6ib000ig4uyev4gdov2","_id":"cm0xuykfv00081ouycumg4hqr"},{"post_id":"cm0xuykfk00031ouygeu45o0u","category_id":"cly7d19vo001q0ouy47dn6czf","_id":"cm0xuykfv00091ouy18mi8k06"},{"post_id":"cm0xuykfk00031ouygeu45o0u","category_id":"cly7e80ar0004jwuy94d496ag","_id":"cm0xuykfv000a1ouy5lfvgm2k"},{"post_id":"cmbz8wgqd0003o8tzeqmp678v","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"cmbz8wgql000ao8tz1sk4g0m6"},{"post_id":"cmbz8wgqf0005o8tz33ikgr7e","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"cmbz8wgqm000co8tzbpk2eudb"},{"post_id":"cmbz8wgqg0006o8tzhfsj7vso","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"cmbz8wgqn000fo8tz57l20lpg"},{"post_id":"cmbz8wgqk0009o8tz2ndy30cj","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"cmbz8wgqo000no8tzbhpnex2t"},{"post_id":"cmbz8wgqm000eo8tz6nku0c98","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqp000qo8tzeddf1kdw"},{"post_id":"cmbz8wgqn000io8tz723i199h","category_id":"clxj6qtqz00010guy16ow3ztn","_id":"cmbz8wgqq000uo8tzfw5fgfak"},{"post_id":"cmbz8wgqo000mo8tz76yxay43","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqr000xo8tzdbx261rh"},{"post_id":"cmbz8wgql000bo8tz2bd6fg9t","category_id":"cmbz8wgqn000ho8tz8xss9ph2","_id":"cmbz8wgqs000zo8tz6shfh554"},{"post_id":"cmbz8wgqp000po8tzfd1xene0","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqs0012o8tz01wxad1w"},{"post_id":"cmbz8wgqq000to8tz0rav6x39","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqt0014o8tzggnjh6qv"},{"post_id":"cmbz8wgqq000wo8tzfpaoa94g","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqu0017o8tze2yh09tl"},{"post_id":"cmbz8wgqu0016o8tzh4xebgog","category_id":"clxm54wnn00037guyf5th28ay","_id":"cmbz8wgqw001eo8tz4eusamxy"},{"post_id":"cmbz8wgqv001co8tz4ilhepfx","category_id":"cmbz8wgqx001ho8tz8qsc57jy","_id":"cmbz8wgqz001qo8tzhb9lf7vy"},{"post_id":"cmdkilrbz00027ctzcaqx7yri","category_id":"cmbz8wgqf0004o8tz9bl898ps","_id":"cmdkilrc100047ctz79nu2c6b"}],"PostTag":[{"post_id":"clxj6uzty0001vwuy7bfw5eob","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj6uzu60002vwuya5s541es"},{"post_id":"clxj6uzty0001vwuy7bfw5eob","tag_id":"clxj6qtr100030guyceu403j5","_id":"clxj6uzu70003vwuycaiq75i9"},{"post_id":"clxj6uztj0000vwuy6qf5hvux","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj6wx650007vwuy4k5998ep"},{"post_id":"clxj6uztj0000vwuy6qf5hvux","tag_id":"clxj6qtr100030guyceu403j5","_id":"clxj6wx650008vwuy51oqa97m"},{"post_id":"clxj6uztj0000vwuy6qf5hvux","tag_id":"clxj6wx640005vwuyc896dsfn","_id":"clxj6wx650009vwuyaf7xfn03"},{"post_id":"clxj7to36000abkuyetca7tbq","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj7to36000bbkuy8xeh04tv"},{"post_id":"clxj7to36000abkuyetca7tbq","tag_id":"clxj7ryad0006bkuy55dm2meu","_id":"clxj7to36000cbkuy1f9dbofl"},{"post_id":"clxj7to37000ebkuy4uaqdv37","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj7to37000fbkuy810h0tcp"},{"post_id":"clxj7to37000ebkuy4uaqdv37","tag_id":"clxj7l0ov0001bkuydjioe7bo","_id":"clxj7to37000gbkuy7a0ugtix"},{"post_id":"clxj8ca34000tbkuy2lkmasvi","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj8ca34000ubkuy03hrfkll"},{"post_id":"clxj8ca34000tbkuy2lkmasvi","tag_id":"clxj849ie000jbkuy1vxi970v","_id":"clxj8ca34000vbkuyhslb233l"},{"post_id":"clxj8ca35000xbkuy8fsabsoh","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj8ca35000ybkuyeaiu73f7"},{"post_id":"clxj8ca35000xbkuy8fsabsoh","tag_id":"clxj866h1000pbkuy96800fc1","_id":"clxj8ca35000zbkuyclb83grb"},{"post_id":"clxj8i7i9001abkuy6t2a3kz4","tag_id":"clxj6qtr000020guy4rs42y75","_id":"clxj8i7i9001bbkuy63wi8gx6"},{"post_id":"clxj8i7i9001abkuy6t2a3kz4","tag_id":"clxj8e62s0012bkuy8t4dc0ru","_id":"clxj8i7i9001cbkuy13sla8kw"},{"post_id":"clxj8i7i9001abkuy6t2a3kz4","tag_id":"clxj8e62s0014bkuy7q1pdxn1","_id":"clxj8i7i9001ebkuyaevqfbfa"},{"post_id":"clxj8i7i9001abkuy6t2a3kz4","tag_id":"clxj8e62t0015bkuycd5l43qd","_id":"clxj8i7i9001fbkuy5et94gnc"},{"post_id":"clxm2j6i10004g4uycoilh9sx","tag_id":"clxm2j6ib000jg4uydvr8ea3n","_id":"clxm2j6ie000ug4uy5rg058ag"},{"post_id":"clxm2j6i10004g4uycoilh9sx","tag_id":"clxm2j6id000pg4uygos85t1x","_id":"clxm2j6ie000wg4uy5upv9jty"},{"post_id":"clxm2j6i30005g4uy6lied6nw","tag_id":"clxm2j6ie000sg4uyhwvz3979","_id":"clxm2j6if0010g4uy7gxx88fw"},{"post_id":"clxm2j6i30005g4uy6lied6nw","tag_id":"clxm2j6ie000xg4uydp7z1451","_id":"clxm2j6if0011g4uy0plj092w"},{"post_id":"clxm2j6i60008g4uycsi2hgg7","tag_id":"clxm2j6if000zg4uycp7w38k4","_id":"clxm2j6if0013g4uy2p0i6mad"},{"post_id":"clxm2j6i70009g4uyavx44rxy","tag_id":"clxm2j6if0012g4uyf8k46oky","_id":"clxm2j6ig0015g4uybz7u857y"},{"post_id":"clxm2j6ia000fg4uy0vqe2kfm","tag_id":"clxm2j6if0014g4uy88nygs7n","_id":"clxm2j6ig0017g4uy2herhmm8"},{"post_id":"clxm2j6ic000mg4uyfy06epeo","tag_id":"clxm2j6ig0016g4uyhp3oazs6","_id":"clxm2j6ig0019g4uydd0e4j0e"},{"post_id":"clxm2j6ic000mg4uyfy06epeo","tag_id":"clxm2j6ig0018g4uy6g8mb1v3","_id":"clxm2j6ig001ag4uy43ja1zmi"},{"post_id":"clxm2j6in001bg4uyesnh1x8r","tag_id":"clxm2j6ig0016g4uyhp3oazs6","_id":"clxm2j6iv001eg4uyf4op9c9f"},{"post_id":"clxm2j6in001bg4uyesnh1x8r","tag_id":"clxm2j6iu001cg4uybecq5fqr","_id":"clxm2j6iw001fg4uyev9hells"},{"post_id":"clxm54wnl00017guy0fg09mgm","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"clxm54wnv000a7guyf43h27km"},{"post_id":"clxm54wo3000u7guyfq6pg13k","tag_id":"clxm2j6i10003g4uyadftcyoz","_id":"clxm54wo4000y7guyb0p384dm"},{"post_id":"clxm54wo3000u7guyfq6pg13k","tag_id":"clxm2j6i40007g4uyciy10y08","_id":"clxm54wo500127guy9it02zdy"},{"post_id":"clxm54wo4000w7guybc6fcyvs","tag_id":"clxm2j6i10003g4uyadftcyoz","_id":"clxm54wo600157guygcp10tza"},{"post_id":"clxm54wo2000p7guy1xzx5d24","tag_id":"clxm54wo3000t7guy33ahdus7","_id":"clxm54wo600187guyhw2a2frk"},{"post_id":"clxm54wo3000r7guy433n2nzh","tag_id":"clxm54wo500107guy6kqs68yi","_id":"clxm54wo6001a7guy2gd1gu6i"},{"post_id":"clxm54wo4000z7guyfvjmd2lu","tag_id":"clxm54wo600177guy4jnz0fu9","_id":"clxm54wo7001e7guyd2861128"},{"post_id":"clxm54wo500137guyax67awe4","tag_id":"clxm54wo6001c7guy5296c3l0","_id":"clxm54wo7001f7guybqi4gbjp"},{"post_id":"cly7d19v400050ouy0g1mbcq8","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19v800090ouyedyh25wc"},{"post_id":"cly7d19ur00000ouy96sg2819","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19v9000b0ouyf0zmdz1d"},{"post_id":"cly7d19v500060ouy6uip39kr","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vb000g0ouyc3gagipv"},{"post_id":"cly7d19v8000a0ouybcgqfrtc","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vc000j0ouygl2b5fyi"},{"post_id":"cly7d19va000c0ouy20saf8vb","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19ve000n0ouygij89vlu"},{"post_id":"cly7d19uu00010ouy8p362l2q","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19ve000q0ouy9fzvg3wi"},{"post_id":"cly7d19uu00010ouy8p362l2q","tag_id":"cly7d19va000f0ouycyd73to4","_id":"cly7d19vg000v0ouy45ybe6fl"},{"post_id":"cly7d19vc000k0ouyeij8fgdj","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vh000y0ouyau02g5oy"},{"post_id":"cly7d19v300040ouy21kjd0lb","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vh00120ouye30kgnat"},{"post_id":"cly7d19vb000h0ouyd0pgh4k2","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vl001c0ouy4jpw26nu"},{"post_id":"cly7d19vb000h0ouyd0pgh4k2","tag_id":"cly7d19vf000t0ouybnhm49y4","_id":"cly7d19vm001f0ouy09lp9f1h"},{"post_id":"cly7d19vb000h0ouyd0pgh4k2","tag_id":"cly7d19vh00110ouy8tx6b303","_id":"cly7d19vn001k0ouy5rttenov"},{"post_id":"cly7d19ve000o0ouydqow1yah","tag_id":"cly7d19vf000t0ouybnhm49y4","_id":"cly7d19vo001n0ouy61boah1r"},{"post_id":"cly7d19vf000r0ouyd2yw1qed","tag_id":"cly7d19vf000t0ouybnhm49y4","_id":"cly7d19vq001x0ouycllbf649"},{"post_id":"cly7d19vf000r0ouyd2yw1qed","tag_id":"cly7d19vo001o0ouy313jcmjf","_id":"cly7d19vq001z0ouy8649gk7e"},{"post_id":"cly7d19vf000r0ouyd2yw1qed","tag_id":"cly7d19vp001r0ouy2pxk0nmi","_id":"cly7d19vr00220ouy7yvn8hkl"},{"post_id":"cly7d19vg000w0ouy4lms3cog","tag_id":"cly7d19vq001w0ouy86ajaxb6","_id":"cly7d19vr00240ouy2mvihkz6"},{"post_id":"cly7d19vh000z0ouyc8gnexve","tag_id":"cly7d19vq00210ouyarji9ztb","_id":"cly7d19vr00260ouy8l4d5qzf"},{"post_id":"cly7d19vi00130ouycwdkbzd5","tag_id":"cly7d19vr00250ouy5gil4s1m","_id":"cly7d19vs00280ouyh0xdffxf"},{"post_id":"cly7d19vi00160ouyhdn1fwrn","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vs002a0ouygjoea0qn"},{"post_id":"cly7d19vi00160ouyhdn1fwrn","tag_id":"cly7d19vr00270ouyanaz46a1","_id":"cly7d19vs002b0ouy36xzbt3s"},{"post_id":"cly7d19vl001d0ouy54e83u51","tag_id":"cly7d19vs002c0ouybzhl74lp","_id":"cly7d19vt002f0ouy50c0euz0"},{"post_id":"cly7d19vn001l0ouyf4yzgijm","tag_id":"cly7d19v200030ouyds94esx0","_id":"cly7d19vu002k0ouydhn039vo"},{"post_id":"cly7d19vn001l0ouyf4yzgijm","tag_id":"cly7d19vu002h0ouy8gqpdahi","_id":"cly7d19vu002l0ouy0zwef89q"},{"post_id":"cly7d3xfk0000fsuyc0oi8j6o","tag_id":"cly7d19vt002e0ouyfjws7st8","_id":"cly7d3xfq0002fsuyf65w5opp"},{"post_id":"cly7d3xfk0000fsuyc0oi8j6o","tag_id":"cly7d19vt002g0ouyashi74jg","_id":"cly7d3xfr0003fsuy0tt964d6"},{"post_id":"cly7d3xfo0001fsuy0ue41npw","tag_id":"cly7d19vs00290ouy5gox1qxc","_id":"cly7d3xfr0005fsuy6fsyd39d"},{"post_id":"cly7e80a00000jwuyfjfg8jut","tag_id":"cly7e80ae0002jwuy7d62ck7v","_id":"cly7e80b0000cjwuyd4ug3tug"},{"post_id":"cly7e80a00000jwuyfjfg8jut","tag_id":"cly7e80as0006jwuy3g9e6299","_id":"cly7e80b0000ejwuy56mh4c3x"},{"post_id":"cly7e80a00000jwuyfjfg8jut","tag_id":"cly7e80aw0008jwuya82fe769","_id":"cly7e80b0000fjwuydxhs7era"},{"post_id":"cly7e80ab0001jwuy00kl1nv1","tag_id":"cly7e80az000ajwuy4v7j5v4z","_id":"cly7e80b0000gjwuyggry7jiu"},{"post_id":"cm0xuykfj00021ouy5ofsd0xz","tag_id":"cm0xuykfl00041ouybgh61ia7","_id":"cm0xuykfv000b1ouyf3qubwji"},{"post_id":"cm0xuykfj00021ouy5ofsd0xz","tag_id":"cm0xuykfv00071ouy0dvdb6r7","_id":"cm0xuykfv000c1ouy4y306ks1"},{"post_id":"cmbz8wgqm000eo8tz6nku0c98","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"cmbz8wgqo000lo8tz0ddq07vh"},{"post_id":"cmbz8wgqd0003o8tzeqmp678v","tag_id":"cmbz8wgqm000do8tz0sscdtpi","_id":"cmbz8wgqp000oo8tz44264x5p"},{"post_id":"cmbz8wgqo000mo8tz76yxay43","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"cmbz8wgqp000ro8tz9kaa4fv1"},{"post_id":"cmbz8wgqo000mo8tz76yxay43","tag_id":"clxm2j6i10003g4uyadftcyoz","_id":"cmbz8wgqq000vo8tz659vfchw"},{"post_id":"cmbz8wgqp000po8tzfd1xene0","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"cmbz8wgqr000yo8tz9fcngxpg"},{"post_id":"cmbz8wgqq000wo8tzfpaoa94g","tag_id":"clxm54wnt00097guyg1bzhoh9","_id":"cmbz8wgqs0011o8tz38lugdl9"},{"post_id":"cmbz8wgqf0005o8tz33ikgr7e","tag_id":"cmbz8wgqo000ko8tzd37x9q9v","_id":"cmbz8wgqu0018o8tzejd4ficq"},{"post_id":"cmbz8wgqf0005o8tz33ikgr7e","tag_id":"cmbz8wgqp000so8tz3lg0e150","_id":"cmbz8wgqv001ao8tz50rk3vrl"},{"post_id":"cmbz8wgqf0005o8tz33ikgr7e","tag_id":"cmbz8wgqs0010o8tzhqif7ym4","_id":"cmbz8wgqw001do8tzenom4jd5"},{"post_id":"cmbz8wgqu0016o8tzh4xebgog","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"cmbz8wgqw001fo8tz8uqnfzer"},{"post_id":"cmbz8wgqv0019o8tz6w54d832","tag_id":"cmbz8wgq50002o8tz6453gvhj","_id":"cmbz8wgqx001jo8tzazujgyy5"},{"post_id":"cmbz8wgqg0006o8tzhfsj7vso","tag_id":"clxj6qtr000020guy4rs42y75","_id":"cmbz8wgqz001no8tzeecc8ld0"},{"post_id":"cmbz8wgqg0006o8tzhfsj7vso","tag_id":"cmbz8wgqo000ko8tzd37x9q9v","_id":"cmbz8wgqz001oo8tzhnlrhv56"},{"post_id":"cmbz8wgqg0006o8tzhfsj7vso","tag_id":"cmbz8wgqv001bo8tz3vjt5tyv","_id":"cmbz8wgr0001ro8tzg123dc4c"},{"post_id":"cmbz8wgqg0006o8tzhfsj7vso","tag_id":"cmbz8wgqx001go8tzhdczc32v","_id":"cmbz8wgr0001so8tzcvm45mbs"},{"post_id":"cmbz8wgqk0009o8tz2ndy30cj","tag_id":"clxj6qtr000020guy4rs42y75","_id":"cmbz8wgr0001uo8tz16owduxi"},{"post_id":"cmbz8wgqk0009o8tz2ndy30cj","tag_id":"cmbz8wgqv001bo8tz3vjt5tyv","_id":"cmbz8wgr0001vo8tz26djb3il"},{"post_id":"cmbz8wgql000bo8tz2bd6fg9t","tag_id":"cmbz8wgqz001po8tz7vpob7jz","_id":"cmbz8wgr1001yo8tzdpisa0so"},{"post_id":"cmbz8wgql000bo8tz2bd6fg9t","tag_id":"cmbz8wgr0001to8tz5dkc7va7","_id":"cmbz8wgr1001zo8tz8sv10rh2"},{"post_id":"cmbz8wgql000bo8tz2bd6fg9t","tag_id":"cmbz8wgr0001wo8tzfkj11dvo","_id":"cmbz8wgr10021o8tz8yt2atmn"},{"post_id":"cmbz8wgqn000io8tz723i199h","tag_id":"cmbz8wgr1001xo8tzfwweb34j","_id":"cmbz8wgr20024o8tzalic716k"},{"post_id":"cmbz8wgqn000io8tz723i199h","tag_id":"cmbz8wgr10020o8tz4s5q4027","_id":"cmbz8wgr20025o8tz4eykc1gx"},{"post_id":"cmbz8wgqn000io8tz723i199h","tag_id":"cmbz8wgr10022o8tz1pqoatkr","_id":"cmbz8wgr20027o8tzhit6fcfh"},{"post_id":"cmbz8wgqq000to8tz0rav6x39","tag_id":"clxm54wnq00047guy8zw3gq8o","_id":"cmbz8wgr20028o8tz0gamcquy"},{"post_id":"cmbz8wgqq000to8tz0rav6x39","tag_id":"cmbz8wgr20023o8tz3nh6bjbb","_id":"cmbz8wgr3002ao8tzb2to7l09"},{"post_id":"cmbz8wgqv001co8tz4ilhepfx","tag_id":"cmbz8wgr20026o8tz3skg9vt9","_id":"cmbz8wgr3002bo8tze2g9cynu"},{"post_id":"cmbz8wgqy001ko8tz3klv6n56","tag_id":"cmbz8wgqv001bo8tz3vjt5tyv","_id":"cmbz8wgr3002do8tzhqwq3jjb"},{"post_id":"cmbz8wgqy001ko8tz3klv6n56","tag_id":"cmbz8wgr20029o8tzft77glok","_id":"cmbz8wgr3002eo8tz0mvy0bsu"},{"post_id":"cmbz8wgqy001ko8tz3klv6n56","tag_id":"cmbz8wgr3002co8tz1zy63unf","_id":"cmbz8wgr3002fo8tz7yskctwh"},{"post_id":"cmbz8wgqy001ko8tz3klv6n56","tag_id":"clxm2j6i10003g4uyadftcyoz","_id":"cmbz8wgr3002go8tz31abfkex"},{"post_id":"cmbz8wgr5002ho8tzasjtfoh8","tag_id":"cmbz8wgr5002io8tza3xg0wj7","_id":"cmbz8wgr6002lo8tzhind3nkd"},{"post_id":"cmbz8wgr5002ho8tzasjtfoh8","tag_id":"cmbz8wgr6002jo8tz5axh8u71","_id":"cmbz8wgr6002mo8tzh9zr2y2f"},{"post_id":"cmbz8wgr5002ho8tzasjtfoh8","tag_id":"cmbz8wgr6002ko8tz8o06dpfs","_id":"cmbz8wgr6002no8tz9pg2fy49"},{"post_id":"cmdkij0el00007ctz9abm713u","tag_id":"cmdki5k520001vctz2om69bur","_id":"cmdkij0en00017ctz0um6fmqm"},{"post_id":"cmdkilrbz00027ctzcaqx7yri","tag_id":"cmbz8wgqk0007o8tz9a3c38cm","_id":"cmdkilrc100037ctz292zbci1"}],"Tag":[{"name":"Linux","_id":"clxj6qtr000020guy4rs42y75"},{"name":"命令","_id":"clxj6qtr100030guyceu403j5"},{"name":"vim","_id":"clxj6wx640005vwuyc896dsfn"},{"name":"sudo","_id":"clxj7l0ov0001bkuydjioe7bo"},{"name":"ssh","_id":"clxj7ryad0006bkuy55dm2meu"},{"name":"镜像源","_id":"clxj849ie000jbkuy1vxi970v"},{"name":"vnc","_id":"clxj866h1000pbkuy96800fc1"},{"name":"apt","_id":"clxj8e62s0012bkuy8t4dc0ru"},{"name":"yum","_id":"clxj8e62s0014bkuy7q1pdxn1"},{"name":"rpm","_id":"clxj8e62t0015bkuycd5l43qd"},{"name":"软路由","_id":"clxm2j6i10003g4uyadftcyoz"},{"name":"家庭影院","_id":"clxm2j6i40007g4uyciy10y08"},{"name":"python","_id":"clxm2j6ib000jg4uydvr8ea3n"},{"name":"进度条","_id":"clxm2j6id000pg4uygos85t1x"},{"name":"frp","_id":"clxm2j6ie000sg4uyhwvz3979"},{"name":"内网穿透","_id":"clxm2j6ie000xg4uydp7z1451"},{"name":"梯子","_id":"clxm2j6if000zg4uycp7w38k4"},{"name":"动漫","_id":"clxm2j6if0012g4uyf8k46oky"},{"name":"装机","_id":"clxm2j6if0014g4uy88nygs7n"},{"name":"游玩","_id":"clxm2j6ig0016g4uyhp3oazs6"},{"name":"景点","_id":"clxm2j6ig0018g4uy6g8mb1v3"},{"name":"美食","_id":"clxm2j6iu001cg4uybecq5fqr"},{"name":"pve","_id":"clxm54wnq00047guy8zw3gq8o"},{"name":"官方手册","_id":"clxm54wnt00097guyg1bzhoh9"},{"name":"istore","_id":"clxm54wo3000t7guy33ahdus7"},{"name":"NAS","_id":"clxm54wo500107guy6kqs68yi"},{"name":"clash","_id":"clxm54wo600177guy4jnz0fu9"},{"name":"破解","_id":"clxm54wo6001c7guy5296c3l0"},{"name":"java","_id":"cly7d19v200030ouyds94esx0"},{"name":"序列化","_id":"cly7d19va000f0ouycyd73to4"},{"name":"数据库","_id":"cly7d19vf000t0ouybnhm49y4"},{"name":"连接池","_id":"cly7d19vh00110ouy8tx6b303"},{"name":"范式","_id":"cly7d19vo001o0ouy313jcmjf"},{"name":"设计模式","_id":"cly7d19vp001r0ouy2pxk0nmi"},{"name":"SQL","_id":"cly7d19vq001w0ouy86ajaxb6"},{"name":"MySQL","_id":"cly7d19vq00210ouyarji9ztb"},{"name":"数据库客户端","_id":"cly7d19vr00250ouy5gil4s1m"},{"name":"http","_id":"cly7d19vr00270ouyanaz46a1"},{"name":"二叉树","_id":"cly7d19vs00290ouy5gox1qxc"},{"name":"租房","_id":"cly7d19vs002c0ouybzhl74lp"},{"name":"算法","_id":"cly7d19vt002e0ouyfjws7st8"},{"name":"树","_id":"cly7d19vt002g0ouyashi74jg"},{"name":"servlet","_id":"cly7d19vu002h0ouy8gqpdahi"},{"name":"文学","_id":"cly7e80ae0002jwuy7d62ck7v"},{"name":"思考","_id":"cly7e80as0006jwuy3g9e6299"},{"name":"哲学","_id":"cly7e80aw0008jwuya82fe769"},{"name":"二分法","_id":"cly7e80az000ajwuy4v7j5v4z"},{"name":"电影","_id":"cm0xuykfl00041ouybgh61ia7"},{"name":"喜剧","_id":"cm0xuykfv00071ouy0dvdb6r7"},{"name":"nginx","_id":"cmbz8wgq50002o8tz6453gvhj"},{"name":"home assistant","_id":"cmbz8wgqk0007o8tz9a3c38cm"},{"name":"启动项","_id":"cmbz8wgqm000do8tz0sscdtpi"},{"name":"iptables","_id":"cmbz8wgqo000ko8tzd37x9q9v"},{"name":"ipv6","_id":"cmbz8wgqp000so8tz3lg0e150"},{"name":"docker","_id":"cmbz8wgqs0010o8tzhqif7ym4"},{"name":"网络","_id":"cmbz8wgqv001bo8tz3vjt5tyv"},{"name":"NAT","_id":"cmbz8wgqx001go8tzhdczc32v"},{"name":"噪音控制","_id":"cmbz8wgqz001po8tz7vpob7jz"},{"name":"温度控制","_id":"cmbz8wgr0001to8tz5dkc7va7"},{"name":"fancontrol","_id":"cmbz8wgr0001wo8tzfkj11dvo"},{"name":"网络唤醒","_id":"cmbz8wgr1001xo8tzfwweb34j"},{"name":"wol","_id":"cmbz8wgr10020o8tz4s5q4027"},{"name":"debian","_id":"cmbz8wgr10022o8tz1pqoatkr"},{"name":"lxc","_id":"cmbz8wgr20023o8tz3nh6bjbb"},{"name":"监控","_id":"cmbz8wgr20026o8tz3skg9vt9"},{"name":"网桥","_id":"cmbz8wgr20029o8tzft77glok"},{"name":"虚拟平台","_id":"cmbz8wgr3002co8tz1zy63unf"},{"name":"代理","_id":"cmbz8wgr5002io8tza3xg0wj7"},{"name":"WPAD","_id":"cmbz8wgr6002jo8tz5axh8u71"},{"name":"PAC","_id":"cmbz8wgr6002ko8tz8o06dpfs"},{"name":"权限管理","_id":"cmdki5k520001vctz2om69bur"}]}}